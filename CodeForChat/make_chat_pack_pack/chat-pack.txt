# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: tools/make_chat_pack.py, .github/workflows/prepare-chat-pack.yml
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <tools/make_chat_pack.py>
```text
L1 #!/usr/bin/env python3
L2 # -*- coding: utf-8 -*-
L3 """
L4 make_chat_pack.py
L5 - FILES_GROUPS（2パック）を読み込み
L6 - 各ファイルに L1.. の行番号を付与し連結
L7 - CodeForChat/<pack>/chat-pack.txt と chunks/ を生成
L8 - CodeForChat/INDEX.txt（全パック目次）も出力
L9 """
L10
L11 import os, sys, textwrap, hashlib
L12
L13 OWNER  = "dakara32"
L14 REPO   = "GPT_Code"
L15 BRANCH = "main"
L16
L17 CHUNK_SIZE = 12000  # iPhoneコピペ配慮で ~9k–14k の範囲で可
L18
L19 FILES_GROUPS = {
L20     "factor_pack": [
L21         "config.py",
L22         "factor.py",
L23         "scorer.py",
L24         ".github/workflows/weekly-report.yml",
L25         "documents/README.md",
L26         "documents/factor_design.md",
L27     ],
L28     "drift_pack": [
L29         "config.py",
L30         "drift.py",
L31         ".github/workflows/daily-report.yml",
L32         "documents/README.md",
L33         "documents/drift_design.md",
L34     ],
L35     "yf-health-probe_pack": [
L36         "tools/yf_health_probe.py",
L37         ".github/workflows/yf-health-probe.yml",
L38     ],  
L39     "make_chat_pack_pack": [
L40         "tools/make_chat_pack.py",
L41         ".github/workflows/prepare-chat-pack.yml",
L42     ],      
L43 }
L44
L45 def add_line_numbers(body: str) -> str:
L46     out = []
L47     for i, line in enumerate(body.splitlines(), start=1):
L48         out.append(f"L{i}{'' if line=='' else ' '}{line}")
L49     return "\n".join(out) if out else "L1"
L50
L51 def read_file(path: str) -> str:
L52     with open(path, "r", encoding="utf-8", errors="replace") as f:
L53         return f.read()
L54
L55 def header_block(file_list) -> str:
L56     return textwrap.dedent(f"""\
L57     # === Chat Paste Pack ===
L58     # Repo: {OWNER}/{REPO} @ {BRANCH}
L59     # Files: {', '.join(file_list)}
L60     # 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
L61     # 注記: 各ファイルは個別に L1.. で行番号付与。
L62     ---
L63     """)
L64
L65 def make_bundle(file_list) -> str:
L66     parts = [header_block(file_list)]
L67     for fp in file_list:
L68         if not os.path.exists(fp):
L69             parts.append(f"## <{fp}> (NOT FOUND)\n```text\nL1\n```\n")
L70             continue
L71         body = read_file(fp)
L72         parts.append(f"## <{fp}>\n```text\n{add_line_numbers(body)}\n```\n")
L73     return "\n".join(parts)
L74
L75 def chunkify(s: str, n: int):
L76     return [s[i:i+n] for i in range(0, len(s), n)]
L77
L78 def main():
L79     root_out = "CodeForChat"
L80     os.makedirs(root_out, exist_ok=True)
L81
L82     global_index = ["# Chat Paste Pack Index", ""]
L83
L84     for pack_name, file_list in FILES_GROUPS.items():
L85         bundle = make_bundle(file_list)
L86         sha = hashlib.sha1(bundle.encode("utf-8")).hexdigest()[:12]
L87
L88         pack_dir  = os.path.join(root_out, pack_name)
L89         chunk_dir = os.path.join(pack_dir, "chunks")
L90         os.makedirs(chunk_dir, exist_ok=True)
L91
L92         # full
L93         with open(os.path.join(pack_dir, "chat-pack.txt"), "w", encoding="utf-8") as w:
L94             w.write(bundle)
L95
L96         # chunks
L97         chunks = chunkify(bundle, CHUNK_SIZE)
L98         local_index = [f"# {pack_name} (SHA:{sha}) / {len(chunks)} chunks", ""]
L99         for idx, raw in enumerate(chunks, start=1):
L100             with open(os.path.join(chunk_dir, f"chunk-{idx:02d}.txt"), "w", encoding="utf-8") as w:
L101                 w.write(f"```text\n{raw}\n```")
L102             local_index.append(f"- chunks/chunk-{idx:02d}.txt")
L103
L104         with open(os.path.join(pack_dir, "INDEX.txt"), "w", encoding="utf-8") as w:
L105             w.write("\n".join(local_index))
L106
L107         global_index += [f"## {pack_name}",
L108                          f"- {pack_name}/chat-pack.txt",
L109                          f"- {pack_name}/INDEX.txt", ""]
L110
L111     with open(os.path.join(root_out, "INDEX.txt"), "w", encoding="utf-8") as w:
L112         w.write("\n".join(global_index))
L113
L114 if __name__ == "__main__":
L115     sys.exit(main())
```

## <.github/workflows/prepare-chat-pack.yml>
```text
L1 name: Prepare Chat Paste Pack
L2 on:
L3   push:
L4     branches: [ main ]
L5     paths-ignore:
L6       - 'CodeForChat/**'
L7   workflow_dispatch:
L8
L9 permissions:
L10   contents: write
L11   actions: read
L12
L13 jobs:
L14   build:
L15     runs-on: ubuntu-latest
L16     steps:
L17       - uses: actions/checkout@v4
L18         with:
L19           fetch-depth: 0
L20
L21       - uses: actions/setup-python@v5
L22         with:
L23           python-version: "3.11"
L24
L25       # Chat Pack を生成（CodeForChat/ 以下）
L26       - name: Build chat packs (CodeForChat/)
L27         run: |
L28           python -m pip install --upgrade pip
L29           python tools/make_chat_pack.py
L30
L31       - name: Show generated files
L32         run: |
L33           echo "=== CodeForChat tree ==="
L34           find CodeForChat -maxdepth 2 -type f | sort || true
L35           echo "=== git status ==="
L36           git status --porcelain
L37
L38       # 生成物を main にコミット（既存フロー）
L39       - name: Commit generated packs to main
L40         run: |
L41           set -eux
L42           git config --global --add safe.directory "$GITHUB_WORKSPACE"
L43           git config user.name  "chat-pack-bot"
L44           git config user.email "bot@users.noreply.github.com"
L45
L46           test -f CodeForChat/factor_pack/chat-pack.txt
L47           test -f CodeForChat/drift_pack/chat-pack.txt
L48
L49           git add -A CodeForChat/ || true
L50           git add -f CodeForChat/ || true
L51
L52           if ! git diff --cached --quiet; then
L53             git commit -m "chore(chat): update CodeForChat packs [skip ci]"
L54             git pull --rebase origin main || true
L55             git push origin HEAD:main
L56           else
L57             echo "No changes to commit."
L58           fi
L59
L60       - name: Prepare dist (only chat-pack files, unique names)
L61         run: |
L62           set -eux
L63           mkdir -p dist
L64           # *_pack/chat-pack.txt を <pack>-chat-pack.txt に複製
L65           for d in CodeForChat/*_pack ; do
L66             [ -d "$d" ] || continue
L67             pack="$(basename "$d")"                 # 例: factor_pack
L68             cp "$d/chat-pack.txt" "dist/${pack}-chat-pack.txt"
L69           done
L70           echo "== dist =="
L71           ls -l dist
L72
L73       - name: Publish/Update Release "chat-pack-latest"
L74         uses: softprops/action-gh-release@v2
L75         with:
L76           tag_name: chat-pack-latest
L77           name: Chat Pack (latest)
L78           make_latest: true
L79           draft: false
L80           prerelease: false
L81           files: |
L82             dist/*-chat-pack.txt
L83           overwrite_files: true
```
