# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: config.py, drift.py, .github/workflows/daily-report.yml, documents/README.md, documents/drift_design.md
# 作成日時: 2025-09-26 18:03:28 (JST)
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <config.py>
```text
L1 # 共通設定（factor / drift から参照）
L2 TOTAL_TARGETS = 20
L3
L4 # 基準のバケット数（NORMAL）
L5 COUNTS_BASE = {"G": 12, "D": 8}
L6
L7 # モード別の推奨バケット数
L8 COUNTS_BY_MODE = {
L9     "NORMAL": {"G": 12, "D": 8},
L10     "CAUTION": {"G": 10, "D": 8},
L11     "EMERG": {"G": 8,  "D": 8},
L12 }
L13
L14 # モード別のドリフト閾値（%）
L15 DRIFT_THRESHOLD_BY_MODE = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L16
L17 # モード別のTS（基本幅, 小数=割合）
L18 TS_BASE_BY_MODE = {"NORMAL": 0.15, "CAUTION": 0.13, "EMERG": 0.10}
L19 # 利益到達(+30/+60/+100%)時の段階タイト化（ポイント差）
L20 TS_STEP_DELTAS_PT = (3, 6, 8)
L21
L22 # Breadthの校正は N_G に連動（緊急解除=ceil(1.5*N_G), 通常復帰=3*N_G）
L23 N_G = COUNTS_BASE["G"]
L24 N_D = COUNTS_BASE["D"]
L25
```

## <drift.py>
```text
L1 import pandas as pd, yfinance as yf
L2 import numpy as np
L3 import requests
L4 import os
L5 import csv
L6 import json
L7 import time
L8 from pathlib import Path
L9 import config
L10
L11 MODE_LABELS_JA = {"NORMAL": "通常", "CAUTION": "警戒", "EMERG": "緊急"}
L12 MODE_EMOJIS = {"NORMAL": "🟢", "CAUTION": "⚠️", "EMERG": "🚨"}
L13 MODE_RANK = {"NORMAL": 0, "CAUTION": 1, "EMERG": 2}
L14
L15 # --- breadth utilities (factor parity) ---
L16 BENCH = "^GSPC"
L17 CAND_PRICE_MAX = 450.0
L18 RESULTS_DIR = "results"
L19 os.makedirs(RESULTS_DIR, exist_ok=True)
L20
L21 AUDIT_PATH = Path(RESULTS_DIR) / "ts_eod_audit.csv"
L22
L23
L24 def _state_file():
L25     return str(Path(RESULTS_DIR) / "breadth_state.json")
L26
L27
L28 def load_mode(default="NORMAL"):
L29     try:
L30         m = json.loads(open(_state_file()).read()).get("mode", default)
L31         return m if m in ("EMERG","CAUTION","NORMAL") else default
L32     except Exception:
L33         return default
L34
L35
L36 def save_mode(mode: str):
L37     try:
L38         open(_state_file(),"w").write(json.dumps({"mode": mode}))
L39     except Exception:
L40         pass
L41
L42
L43 def _read_csv_list(fname):
L44     p = Path(__file__).with_name(fname)
L45     if not p.exists(): return []
L46     return pd.read_csv(p, header=None).iloc[:,0].astype(str).str.upper().tolist()
L47
L48
L49 def _load_universe():
L50     # exist + candidate を使用。candidate は価格上限で事前フィルタ
L51     exist = _read_csv_list("current_tickers.csv")
L52     cand  = _read_csv_list("candidate_tickers.csv")
L53     cand_info = yf.Tickers(" ".join(cand)) if cand else None
L54     cand_keep = []
L55     for t in cand:
L56         try:
L57             px = cand_info.tickers[t].fast_info.get("lastPrice", float("inf"))
L58         except Exception:
L59             px = float("inf")
L60         if pd.notna(px) and float(px) <= CAND_PRICE_MAX:
L61             cand_keep.append(t)
L62     tickers = sorted(set(exist + cand_keep))
L63     return exist, cand_keep, tickers
L64
L65
L66 def _fetch_prices_600d(tickers):
L67     data = yf.download(
L68         tickers + [BENCH],
L69         period="600d",
L70         auto_adjust=True,
L71         progress=False,
L72         threads=False,
L73     )
L74     close = data["Close"]
L75     px = close.dropna(how="all", axis=1).ffill(limit=2)
L76     spx = close[BENCH].reindex(px.index).ffill()
L77     return px, spx
L78
L79
L80 def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L81     # scorer.py の実装をそのまま移植（ベクトル化版）
L82     import numpy as np, pandas as pd
L83     if px is None or px.empty:
L84         return pd.Series(dtype=int)
L85     px = px.dropna(how="all", axis=1)
L86     if win_days and win_days > 0:
L87         px = px.tail(win_days)
L88     if px.empty:
L89         return pd.Series(dtype=int)
L90     # 欠損吸収
L91     px = px.ffill(limit=2)
L92     spx = spx.reindex(px.index).ffill()
L93
L94     ma50  = px.rolling(50,  min_periods=50).mean()
L95     ma150 = px.rolling(150, min_periods=150).mean()
L96     ma200 = px.rolling(200, min_periods=200).mean()
L97
L98     tt = (px > ma150)
L99     tt &= (px > ma200)
L100     tt &= (ma150 > ma200)
L101     tt &= (ma200 - ma200.shift(21) > 0)
L102     tt &= (ma50  > ma150)
L103     tt &= (ma50  > ma200)
L104     tt &= (px    > ma50)
L105
L106     lo252 = px.rolling(252, min_periods=252).min()
L107     hi252 = px.rolling(252, min_periods=252).max()
L108     tt &= (px.divide(lo252).sub(1.0) >= 0.30)
L109     tt &= (px >= (0.75 * hi252))
L110
L111     r12  = px.divide(px.shift(252)).sub(1.0)
L112     br12 = spx.divide(spx.shift(252)).sub(1.0)
L113     r1   = px.divide(px.shift(22)).sub(1.0)
L114     br1  = spx.divide(spx.shift(22)).sub(1.0)
L115     rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L116     tt &= (rs >= 0.10)
L117
L118     return tt.fillna(False).sum(axis=1).astype(int)
L119
L120
L121 def build_breadth_header():
L122     # factor._build_breadth_lead_lines と同一挙動
L123     exist, cand, tickers = _load_universe()
L124     if not tickers:
L125         return "", "NORMAL", 0
L126     px, spx = _fetch_prices_600d(tickers)
L127     win = int(os.getenv("BREADTH_CALIB_WIN_DAYS", "600"))
L128     C_ts = trend_template_breadth_series(px, spx, win_days=win)
L129     if C_ts.empty:
L130         return "", "NORMAL", 0
L131     warmup = int(os.getenv("BREADTH_WARMUP_DAYS","252"))
L132     base = C_ts.iloc[warmup:] if len(C_ts)>warmup else C_ts
L133     C_full = int(C_ts.iloc[-1])
L134
L135     q05 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_IN",  "0.05"))), nan=0.0))
L136     q20 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_OUT", "0.20"))), nan=0.0))
L137     q60 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_WARN_OUT",  "0.60"))), nan=0.0))
L138
L139     # G枠サイズ（Breadth基準）
L140     N_G = config.N_G
L141     th_in_rec   = max(N_G, q05)
L142     th_out_rec  = max(int(np.ceil(1.5*N_G)), q20)
L143     th_norm_rec = max(3*N_G, q60)
L144
L145     use_calib = os.getenv("BREADTH_USE_CALIB", "true").strip().lower() == "true"
L146     if use_calib:
L147         th_in, th_out, th_norm, th_src = th_in_rec, th_out_rec, th_norm_rec, "自動"
L148     else:
L149         th_in   = int(os.getenv("GTT_EMERG_IN", str(N_G)))
L150         th_out  = int(os.getenv("GTT_EMERG_OUT", str(int(1.5*N_G))))
L151         th_norm = int(os.getenv("GTT_CAUTION_OUT", str(3*N_G)))
L152         th_src = "手動"
L153
L154     prev = load_mode("NORMAL")
L155     if   prev == "EMERG":
L156         mode = "EMERG"   if (C_full < th_out)  else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L157     elif prev == "CAUTION":
L158         mode = "CAUTION" if (C_full < th_norm) else "NORMAL"
L159     else:
L160         mode = "EMERG"   if (C_full < th_in)   else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L161     save_mode(mode)
L162
L163     mode_ja, emoji = MODE_LABELS_JA.get(mode, mode), MODE_EMOJIS.get(mode, "ℹ️")
L164     eff_days = len(base)
L165
L166     lead_lines = [
L167         f"{emoji} *現在モード: {mode_ja}*",
L168         f"テンプレ合格本数: *{C_full}本*",
L169         "しきい値（{0}）".format(th_src),
L170         f"  ・緊急入り: <{th_in}本",
L171         f"  ・緊急解除: ≥{th_out}本",
L172         f"  ・通常復帰: ≥{th_norm}本",
L173         f"参考指標（過去~{win}営業日, 有効={eff_days}日）",
L174         f"  ・下位5%: {q05}本",
L175         f"  ・下位20%: {q20}本",
L176         f"  ・60%分位: {q60}本",
L177     ]
L178     return "```" + "\n".join(lead_lines) + "```", mode, C_full
L179
L180
L181 def _ensure_audit_header():
L182     AUDIT_PATH.parent.mkdir(parents=True, exist_ok=True)
L183     if not AUDIT_PATH.exists():
L184         with open(AUDIT_PATH, "w", newline="") as f:
L185             f.write("date,symbol,high60,low_today,baseTS,threshold,breach\n")
L186
L187
L188 def _load_growth_symbols(portfolio: list[dict]) -> list[str]:
L189     growth = []
L190     for row in portfolio:
L191         bucket = str(row.get("bucket", "")).strip().upper()
L192         if bucket == "G":
L193             sym = str(row.get("symbol", "")).strip().upper()
L194             if sym:
L195                 growth.append(sym)
L196     return sorted(set(growth))
L197
L198
L199 def _combine_modes(mode_a: str, mode_b: str) -> str:
L200     a = MODE_RANK.get((mode_a or "NORMAL").upper(), 0)
L201     b = MODE_RANK.get((mode_b or "NORMAL").upper(), 0)
L202     for mode, rank in MODE_RANK.items():
L203         if rank == max(a, b):
L204             return mode
L205     return "NORMAL"
L206
L207
L208 def _format_mode(mode: str) -> str:
L209     upper = (mode or "NORMAL").upper()
L210     return f"{MODE_EMOJIS.get(upper, 'ℹ️')} {MODE_LABELS_JA.get(upper, upper)}"
L211
L212
L213 def _ts_mode_growth_5d(g_syms: list[str], ref_mode: str) -> tuple[str, int, set[str]]:
L214     """直近5営業日を株価直接方式で一括判定（Low vs 60D High）。"""
L215
L216     if not g_syms:
L217         return "NORMAL", 0, set()
L218
L219     try:
L220         df = yf.download(
L221             g_syms,
L222             period="100d",
L223             interval="1d",
L224             auto_adjust=False,
L225             progress=False,
L226         )
L227     except Exception:
L228         df = None
L229
L230     if not isinstance(df, pd.DataFrame) or df.empty:
L231         return "NORMAL", 0, set()
L232
L233     try:
L234         hi_all = df["High"] if "High" in df.columns else None
L235         lo_all = df["Low"] if "Low" in df.columns else None
L236     except Exception:
L237         hi_all = lo_all = None
L238
L239     if hi_all is None or lo_all is None:
L240         return "NORMAL", 0, set()
L241
L242     if isinstance(hi_all, pd.Series):
L243         hi_all = hi_all.to_frame(name=g_syms[0])
L244     if isinstance(lo_all, pd.Series):
L245         lo_all = lo_all.to_frame(name=g_syms[0])
L246
L247     if hi_all.empty or lo_all.empty:
L248         return "NORMAL", 0, set()
L249
L250     roll_hi = hi_all.rolling(60, min_periods=20).max()
L251     last5_hi = roll_hi.tail(5)
L252     last5_lo = lo_all.tail(5).reindex(last5_hi.index)
L253
L254     if last5_hi.empty or last5_lo.empty:
L255         return "NORMAL", 0, set()
L256
L257     base = float(config.TS_BASE_BY_MODE.get((ref_mode or "NORMAL").upper(), 0.15))
L258     uniq_hits: set[str] = set()
L259     today_hits: set[str] = set()
L260     _ensure_audit_header()
L261
L262     def _fmt(val: float) -> str:
L263         if pd.isna(val):
L264             return ""
L265         return f"{float(val):.6g}"
L266
L267     rows = []
L268     for dt in last5_hi.index:
L269         hi_row = last5_hi.loc[dt]
L270         lo_row = last5_lo.loc[dt]
L271         for sym in g_syms:
L272             rh = float(hi_row.get(sym, float("nan"))) if hasattr(hi_row, "get") else float("nan")
L273             lt = float(lo_row.get(sym, float("nan"))) if hasattr(lo_row, "get") else float("nan")
L274             threshold = float("nan")
L275             breach = 0
L276             if pd.notna(rh) and rh > 0 and pd.notna(lt) and lt > 0:
L277                 threshold = rh * (1.0 - base)
L278                 breach = int(lt <= threshold)
L279                 if breach:
L280                     uniq_hits.add(sym)
L281                     if dt == last5_hi.index[-1]:
L282                         today_hits.add(sym)
L283             rows.append(
L284                 {
L285                     "date": dt.date().isoformat() if hasattr(dt, "date") else str(dt),
L286                     "symbol": sym,
L287                     "high60": _fmt(rh),
L288                     "low_today": _fmt(lt),
L289                     "baseTS": f"{base:.3f}",
L290                     "threshold": _fmt(threshold),
L291                     "breach": str(breach),
L292                 }
L293             )
L294
L295     if rows:
L296         with open(AUDIT_PATH, "a", newline="") as f:
L297             writer = csv.DictWriter(
L298                 f,
L299                 fieldnames=["date", "symbol", "high60", "low_today", "baseTS", "threshold", "breach"],
L300             )
L301             writer.writerows(rows)
L302
L303     k5 = len(uniq_hits)
L304     mode1 = "EMERG" if k5 >= 8 else "CAUTION" if k5 >= 6 else "NORMAL"
L305     return mode1, k5, today_hits
L306 # Debug flag
L307 debug_mode = False  # set to True for detailed output
L308
L309 # --- Finnhub settings & helper ---
L310 FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
L311 if not FINNHUB_API_KEY:
L312     raise ValueError("FINNHUB_API_KEY not set (環境変数が未設定です)")
L313
L314 RATE_LIMIT = 55  # requests per minute (free tier is 60)
L315 call_times = []
L316
L317
L318 def finnhub_get(endpoint, params):
L319     """Call Finnhub API with basic rate limiting."""
L320     now = time.time()
L321     cutoff = now - 60
L322     while call_times and call_times[0] < cutoff:
L323         call_times.pop(0)
L324     if len(call_times) >= RATE_LIMIT:
L325         sleep_time = 60 - (now - call_times[0])
L326         time.sleep(sleep_time)
L327     params = {**params, "token": FINNHUB_API_KEY}
L328     try:
L329         resp = requests.get(f"https://finnhub.io/api/v1/{endpoint}", params=params)
L330         resp.raise_for_status()
L331         data = resp.json()
L332     except requests.exceptions.JSONDecodeError as e:
L333         print(f"⚠️ Finnhub API JSON decode error: {e}")
L334         return {}
L335     except Exception as e:
L336         print(f"⚠️ Finnhub API error: {e}")
L337         return {}
L338     call_times.append(time.time())
L339     return data
L340
L341
L342 def fetch_price(symbol):
L343     try:
L344         data = finnhub_get("quote", {"symbol": symbol})
L345         price = data.get("c")
L346         return float(price) if price not in (None, 0) else float("nan")
L347     except Exception:
L348         return float("nan")
L349
L350
L351 def fetch_vix_ma5():
L352     """Retrieve VIX 5-day moving average via yfinance."""
L353     try:
L354         vix = (
L355             yf.download("^VIX", period="7d", interval="1d", progress=False, auto_adjust=False)["Close"]
L356             .dropna()
L357             .tail(5)
L358         )
L359         if len(vix) < 5:
L360             return float("nan")
L361         return vix.mean().item()
L362     except Exception:
L363         return float("nan")
L364
L365
L366
L367 # === Minervini-like sell signals ===
L368 def _yf_df(sym, period="6mo"):
L369     """日足/MA/出来高平均を取得。欠損時は None。"""
L370     try:
L371         df = yf.download(sym, period=period, interval="1d", auto_adjust=False, progress=False)
L372         if df is None or df.empty:
L373             return None
L374         return df.dropna().assign(
L375             ma20=lambda d: d["Close"].rolling(20).mean(),
L376             ma50=lambda d: d["Close"].rolling(50).mean(),
L377             vol50=lambda d: d["Volume"].rolling(50).mean(),
L378         )
L379     except Exception:
L380         return None
L381
L382
L383 def _scalar(row, col):
L384     """Series/npスカラ→Pythonスカラ化（NaNはNaNのまま）"""
L385     try:
L386         v = row[col]
L387         if hasattr(v, "item"):
L388             try:
L389                 v = v.item()
L390             except Exception:
L391                 pass
L392         return v
L393     except Exception:
L394         return float("nan")
L395
L396
L397 def _is_strict_down(seq):
L398     """数列が厳密に連続で切り下がっているか（len>=4を想定）。NaN含みはFalse。"""
L399     try:
L400         xs = [float(x) for x in seq]
L401         if any(pd.isna(x) for x in xs) or len(xs) < 4:
L402             return False
L403         return all(b < a for a, b in zip(xs[:-1], xs[1:]))
L404     except Exception:
L405         return False
L406
L407
L408 def _signals_for_day(df, idx):
L409     """df.loc[idx] 1日分に対しシグナル配列を返す（値動き/出来高ベースのみ）。"""
L410     try:
L411         sig = []
L412         d = df.loc[idx]
L413         close = _scalar(d, "Close")
L414         ma20 = _scalar(d, "ma20")
L415         ma50 = _scalar(d, "ma50")
L416         vol = _scalar(d, "Volume")
L417         vol50 = _scalar(d, "vol50")
L418
L419         if pd.notna(close) and pd.notna(ma20) and close < ma20:
L420             sig.append("20DMA↓")
L421
L422         if all(pd.notna(x) for x in (close, ma50, vol, vol50)) and close < ma50 and vol > 1.5 * vol50:
L423             sig.append("50DMA↓(大商い)")
L424
L425         last4 = df.loc[:idx].tail(4)
L426         last10 = df.loc[:idx].tail(10)
L427
L428         lows_desc = _is_strict_down(last4["Low"].tolist()) if last4["Low"].notna().all() else False
L429         reds = int((last10["Close"] < last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L430         if lows_desc or reds > 5:
L431             sig.append("連続安値/陰線優勢")
L432
L433         ups = int((last10["Close"] > last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L434         if ups >= 7:
L435             sig.append("上げ偏重(>70%)")
L436
L437         last15 = df.loc[:idx].tail(15)
L438         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L439         if pd.notna(base0) and pd.notna(close) and base0 != 0 and (close / base0 - 1) >= 0.25:
L440             sig.append("+25%/15日内")
L441
L442         if len(df.loc[:idx]) >= 2:
L443             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L444             t1_high = _scalar(t1, "High")
L445             t0_open = _scalar(t0, "Open")
L446             t0_close = _scalar(t0, "Close")
L447             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L448                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L449                     sig.append("GU→陰線")
L450         return sig
L451     except Exception:
L452         return []
L453
L454
L455 def scan_sell_signals(symbols, lookback_days=5):
L456     """
L457     直近 lookback_days 日のうち一度でもシグナルが出たら {sym: [(date,[signals]),...]} を返す。
L458     日付は YYYY-MM-DD。Slackで列挙する。
L459     """
L460     out = {}
L461     for s in symbols:
L462         df = _yf_df(s)
L463         if df is None or len(df) < 60:
L464             continue
L465         alerts = []
L466         for idx in df.tail(lookback_days).index:
L467             tags = _signals_for_day(df, idx)
L468             if tags:
L469                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L470         if alerts:
L471             out[s] = alerts
L472     return out
L473
L474
L475 def load_portfolio():
L476     tickers_path = Path(__file__).with_name("current_tickers.csv")
L477     with tickers_path.open() as f:
L478         rows = [row for row in csv.reader(f) if row and row[0].strip()]
L479     n = len(rows)
L480     portfolio = []
L481     for row in rows:
L482         sym = row[0].strip().upper()
L483         qty = int(row[1]) if len(row) > 1 and row[1].strip() else 0
L484         bucket = row[2].strip().upper() if len(row) > 2 else ""
L485         entry = {
L486             "symbol": sym,
L487             "shares": qty,
L488             "target_ratio": 1 / n if n else 0.0,
L489             "bucket": bucket,
L490         }
L491         portfolio.append(entry)
L492     return portfolio
L493
L494
L495 def compute_threshold():
L496     vix_ma5 = fetch_vix_ma5()
L497     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L498     return vix_ma5, drift_threshold
L499
L500
L501 def compute_threshold_by_mode(mode: str):
L502     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L503     m = (mode or "NORMAL").upper()
L504     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L505     drift_map = config.DRIFT_THRESHOLD_BY_MODE
L506     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L507
L508
L509 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L510     """
L511     モード別の推奨保有数 (G_count, D_count, cash_slots) を返す。
L512     cash_slotsは「外すG枠の数」（各枠=5%）。
L513     NORMAL: G12/D8/現金化0, CAUTION: G10/D8/現金化2, EMERG: G8/D8/現金化4
L514     """
L515     m = (mode or "NORMAL").upper()
L516     base = config.COUNTS_BY_MODE.get("NORMAL", config.COUNTS_BASE)
L517     now  = config.COUNTS_BY_MODE.get(m, base)
L518     cash_slots = max(0, base["G"] - now["G"])
L519     return now["G"], now["D"], cash_slots
L520
L521
L522 def build_dataframe(portfolio):
L523     for stock in portfolio:
L524         price = fetch_price(stock["symbol"])
L525         stock["price"] = price
L526         stock["value"] = price * stock["shares"]
L527
L528     df = pd.DataFrame(portfolio)
L529     total_value = df["value"].sum()
L530     df["current_ratio"] = df["value"] / total_value
L531     df["drift"] = df["current_ratio"] - df["target_ratio"]
L532     df["drift_abs"] = df["drift"].abs()
L533     total_drift_abs = df["drift_abs"].sum()
L534     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L535     df["adjustable"] = (
L536         (df["adjusted_ratio"] * total_value) >= df["price"]
L537     ) & df["price"].notna() & df["price"].gt(0)
L538     return df, total_value, total_drift_abs
L539
L540
L541 def simulate(df, total_value, total_drift_abs, drift_threshold):
L542     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L543     if alert:
L544         df["trade_shares"] = df.apply(
L545             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L546             if r["adjustable"] and r["price"] > 0 else 0,
L547             axis=1,
L548         )
L549         df["new_shares"] = df["shares"] + df["trade_shares"]
L550         df["new_value"] = df["new_shares"] * df["price"]
L551         new_total_value = df["new_value"].sum()
L552         df["simulated_ratio"] = df["new_value"] / new_total_value
L553         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L554         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L555     else:
L556         df["trade_shares"] = np.nan
L557         df["new_shares"] = np.nan
L558         df["new_value"] = np.nan
L559         new_total_value = np.nan
L560         df["simulated_ratio"] = np.nan
L561         df["simulated_drift_abs"] = np.nan
L562         simulated_total_drift_abs = np.nan
L563     return df, alert, new_total_value, simulated_total_drift_abs
L564
L565
L566 def prepare_summary(df, total_drift_abs, alert):
L567     summary = {
L568         "symbol": "合計",
L569         "shares": df["shares"].sum(),
L570         "value": df["value"].sum(),
L571         "current_ratio": np.nan,
L572         "drift_abs": total_drift_abs,
L573     }
L574     if alert:
L575         summary["trade_shares"] = np.nan
L576     # Sort details by evaluation value descending before appending summary
L577     df = df.sort_values(by="value", ascending=False)
L578     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L579     if alert:
L580         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L581         df_small = df[cols].copy()
L582         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L583     else:
L584         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L585         df_small = df[cols].copy()
L586         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L587     return df_small
L588
L589
L590 def currency(x):
L591     return f"${x:,.0f}" if pd.notnull(x) else ""
L592
L593
L594 def formatters_for(alert):
L595     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L596     if alert:
L597         formatters["Δqty"] = "{:.0f}".format
L598     return formatters
L599
L600
L601 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L602     header = (
L603         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L604         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L605         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L606     )
L607     if alert:
L608         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L609         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L610     else:
L611         header += "✅ アラートなし\n"
L612     # ★ 追記: TSルール（G/D共通）と推奨保有数
L613     # TS(基本)をモードで動的表示。段階TSは「基本から -3/-6/-8 pt」固定。
L614     base_ts = config.TS_BASE_BY_MODE.get(mode.upper(), config.TS_BASE_BY_MODE["NORMAL"])
L615     d1, d2, d3 = config.TS_STEP_DELTAS_PT
L616     ts_line = f"*🛡 TS:* 基本 -{base_ts*100:.0f}% / +30%→-{max(base_ts*100 - d1, 0):.0f}% / +60%→-{max(base_ts*100 - d2, 0):.0f}% / +100%→-{max(base_ts*100 - d3, 0):.0f}%\n"
L617     header += ts_line
L618     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L619     cash_pct = cash_slots * (100 / (config.TOTAL_TARGETS))  # 1枠=総数分割の%（20銘柄なら5%）
L620     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct:.0f}%）\n"
L621     return header
L622
L623
L624 def send_slack(text):
L625     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L626     if not SLACK_WEBHOOK_URL:
L627         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L628     payload = {"text": text}
L629     try:
L630         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L631         resp.raise_for_status()
L632         print("✅ Slack（Webhook）へ送信しました")
L633     except Exception as e:
L634         print(f"⚠️ Slack通知エラー: {e}")
L635
L636
L637 def send_debug(debug_text):
L638     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L639     if not SLACK_WEBHOOK_URL:
L640         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L641     debug_payload = {"text": "```" + debug_text + "```"}
L642     try:
L643         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L644         resp.raise_for_status()
L645         print("✅ Debug情報をSlackに送信しました")
L646     except Exception as e:
L647         print(f"⚠️ Slack通知エラー: {e}")
L648
L649
L650 def main():
L651     portfolio = load_portfolio()
L652     symbols = [r["symbol"] for r in portfolio]
L653     g_syms = _load_growth_symbols(portfolio)
L654     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L655
L656     breadth_block, breadth_mode, breadth_score = build_breadth_header()
L657     ts_mode, k5, today_hits = _ts_mode_growth_5d(g_syms, breadth_mode)
L658     combo_mode = _combine_modes(ts_mode, breadth_mode)
L659
L660     cash_ratio, drift_threshold = compute_threshold_by_mode(breadth_mode)
L661
L662     df, total_value, total_drift_abs = build_dataframe(portfolio)
L663     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L664         df, total_value, total_drift_abs, drift_threshold
L665     )
L666     df_small = prepare_summary(df, total_drift_abs, alert)
L667     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L668         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L669         if col_sym:
L670             alert_keys = {str(k) for k in sell_alerts.keys()}
L671             df_small[col_sym] = df_small[col_sym].astype(str)
L672             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L673             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L674             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L675     formatters = formatters_for(alert)
L676     header_core = build_header(
L677         breadth_mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L678     )
L679
L680     g_count = len(g_syms)
L681     hits_line = "なし" if not today_hits else ", ".join(sorted(today_hits))
L682     summary_lines = [
L683         f"① Growth TS: {_format_mode(ts_mode)} （5Dユニーク: {k5} / G={g_count}）",
L684         f"・当日ヒット: {hits_line}",
L685         f"② Breadth: {_format_mode(breadth_mode)} （テンプレ合格本数: {breadth_score}）",
L686         f"総合（OR悪化/AND回復）: {_format_mode(combo_mode)}",
L687     ]
L688     prepend_block = "\n".join(summary_lines)
L689
L690     if breadth_block:
L691         if breadth_block.startswith("```"):
L692             inner = breadth_block[len("```") :]
L693             if inner.startswith("\n"):
L694                 inner = inner[1:]
L695             if inner.endswith("```"):
L696                 inner = inner[: -len("```")]
L697             inner = inner.strip("\n")
L698             inner_lines = [line for line in inner.splitlines() if "現在モード" not in line]
L699             cleaned_inner = "\n".join(inner_lines)
L700             if cleaned_inner:
L701                 new_inner = prepend_block + "\n" + cleaned_inner
L702             else:
L703                 new_inner = prepend_block
L704             breadth_block = "```\n" + new_inner + "\n```"
L705         else:
L706             lines = [line for line in breadth_block.splitlines() if "現在モード" not in line]
L707             cleaned_block = "\n".join(lines)
L708             breadth_block = prepend_block + ("\n" + cleaned_block if cleaned_block else "")
L709         header = breadth_block + "\n" + header_core
L710     else:
L711         header = prepend_block + "\n" + header_core
L712     if sell_alerts:
L713         def fmt_pair(date_tags):
L714             date, tags = date_tags
L715             return f"{date}:" + "・".join(tags)
L716         listed = []
L717         for t, arr in sell_alerts.items():
L718             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L719         hits = ", ".join(listed)
L720         if "✅ アラートなし" in header:
L721             header = header.replace(
L722                 "✅ アラートなし",
L723                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L724             )
L725         else:
L726             header += f"\n🟥 {hits}"
L727     table_text = df_small.to_string(formatters=formatters, index=False)
L728     send_slack(header + "\n```" + table_text + "```")
L729
L730     if debug_mode:
L731         debug_cols = [
L732             "symbol",
L733             "shares",
L734             "price",
L735             "value",
L736             "current_ratio",
L737             "drift",
L738             "drift_abs",
L739             "adjusted_ratio",
L740             "adjustable",
L741             "trade_shares",
L742             "new_shares",
L743             "new_value",
L744             "simulated_ratio",
L745             "simulated_drift_abs",
L746         ]
L747         debug_text = (
L748             "=== DEBUG: full dataframe ===\n"
L749             + df[debug_cols].to_string()
L750             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L751             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L752         )
L753         print("\n" + debug_text)
L754         send_debug(debug_text)
L755
L756
L757 if __name__ == "__main__":
L758     main()
L759
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（コンボ：先導株TS × ブレッドス）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）*
L20
L21 ### ① 先導株TSシグナル（Growthのみ）
L22 - 対象（Growthの定義）：当日保有銘柄のうち **β ≥ -0.6** を Growth とみなす（Defenseは無視）
L23 - 判定：直近60日高値からモード別基本TS幅（NORMAL:-15% / CAUTION:-13% / EMERG:-10%）以上の下落を「TS抵触」とみなす
L24 - 集計：直近5営業日のユニーク抵触銘柄数
L25   - 8銘柄以上 → ①=EMERG
L26   - 6銘柄以上 → ①=CAUTION
L27   - それ未満 → ①=NORMAL
L28 - 補足：同一日に複数回実行した場合は、**同日上書き**で管理
L29
L30 ### ② ブレッドス（trend_template 合格本数）
L31 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L32 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L33   - 緊急入り: max(q05, 12本)
L34   - 緊急解除: max(q20, 18本)
L35   - 通常復帰: max(q60, 36本)
L36 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L37
L38 ### コンボルール
L39 - **悪化（ダウングレード）**：
L40   final_mode = max(mode①, mode②)
L41   - 例：①=CAUTION, ②=NORMAL → final=CAUTION
L42   - 例：①=EMERG, ②=CAUTION → final=EMERG
L43
L44 - **回復（アップグレード）**：
L45   final_mode を1段階下げるには、mode① と mode② がともに下位モードに揃った場合のみ
L46   - 例：EMERG→CAUTION は ①=CAUTION **かつ** ②=CAUTION
L47   - 例：CAUTION→NORMAL は ①=NORMAL **かつ** ②=NORMAL
L48
L49 > 直感フレーズ：**「悪化はどちらか赤で赤、回復は両方青で青」**
L50
L51 ---
L52
L53 ## モード別設定（現金・ドリフト・保有数）
L54
L55 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L56 |--------------|----------|-------------------|----------|------------|-------------|------|
L57 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L58 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% |
L59 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% |
L60
L61 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L62 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L63 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L64
L65 ---
L66
L67 ## 新規買付
L68 - **新規INは等分比率（=5%）の半分まで**を上限。  
L69 - 追加補充や半戻し買付も同じ上限に従う。
L70
L71 ---
L72
L73 ## 半戻し（リバランス）
L74 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L75 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L76 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L77
L78 ---
L79
L80 ## モード移行の実務手順
L81 - モードが変わったら、**MMF≒現金**として扱い、Growth枠数だけ調整：  
L82   1. **Gを削る**（CAUTION/EMERG）：⭐️低スコアのGから順に外し、`current_tickers.csv` から行削除（=現金化）。  
L83   2. **現金として保持**。  
L84   3. **NORMAL復帰時の補充**：`current_tickers.csv` に銘柄を追加（スコア上位から）。以降は日次ドリフト/TSルールに従う。  
L85 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて均等比率を再計算。
L86
L87 ---
L88
L89 ## 入替銘柄選定
L90 - **ファクター分散最適化手法を用いて日次でスコア集計**し、**スコア上位からIN/OUT**を決定。  
L91 - 参考：Oxfordキャピタル、Alpha Investor、Motley Fool、moomooスクリーニング等。  
L92 - 年間NISA枠はGrowth群から低ボラ銘柄を選定し利用（長期保持に固執しない）。
L93
L94 ---
L95
L96 ## 実行タイミング
L97 - 判定：米国市場終値直後  
L98 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 20銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから価格を取得（レジームは trend_template 本数に基づく（基準 N_G=12））。
L6   - 緊急入り: `max(q05, 12本)`
L7   - 緊急解除: `max(q20, 18本)` （ceil(1.5*12)）
L8   - 通常復帰: `max(q60, 36本)` （3*12）
L9
L10 ## 定数・設定
L11 - `FINNHUB_API_KEY` / `SLACK_WEBHOOK_URL` を環境変数から取得。
L12 - 無料枠を考慮したAPIレート制限: `RATE_LIMIT = 55`。
L13 - デバッグ出力用フラグ `debug_mode`。
L14
L15 ## 主な関数
L16 ### finnhub_get
L17 - 基本的なレート制限付きでFinnhub APIを呼び出し、JSONレスポンスを辞書で返す。
L18
L19 ### fetch_price
L20 - `quote` エンドポイントで株価を取得し、失敗時は `NaN` を返す。
L21
L22 ### fetch_vix_ma5
L23 - yfinanceでVIX終値を取得する関数。将来再利用のため残置。
L24
L25 ### load_portfolio
L26 - `current_tickers.csv` から銘柄と保有株数を読み込み、目標比率4%を付与したリストを生成。
L27
L28 ### compute_threshold_by_mode
L29 - モード(NORMAL/CAUTION/EMERG) に応じて **12% / 14% / 停止(∞)** を返す（`config.py` を参照）。
L30
L31 ### build_dataframe
L32 - 各銘柄の評価額や現在比率、ドリフト、半戻し後比率(`adjusted_ratio`)を計算しDataFrame化。
L33
L34 ### simulate
L35 - ドリフト合計が閾値を超えた場合、半戻し後の売買株数と新比率を試算し、シミュレート後ドリフトを返す。
L36
L37 ### prepare_summary
L38 - 評価額順に並べ替えた後、合計行を付与してSlack表示用テーブルを作成。
L39
L40 ### formatters_for / currency
L41 - 通貨・比率・株数の表示フォーマットを定義。
L42
L43 ### build_header
L44 - 現金保有率・閾値・ドリフト値およびアラート有無をSlackメッセージ用ヘッダに整形。TS(基本)はモード別に `config.py` から動的表示し、段階TSは base から -3/-6/-8 pt。
L45
L46 ### send_slack / send_debug
L47 - 通常通知およびデバッグ詳細をSlack Webhookへ送信。
L48
L49 ### main
L50 - 上記関数を順に呼び出し、日次ドリフトチェックの一連処理を実行。
L51
L52 ## 実行フロー
L53 1. `load_portfolio` で現ポートフォリオを読み込む。
L54 2. `build_breadth_header` でモードを取得し、`compute_threshold_by_mode` で現金保有率とドリフト閾値を決定。
L55 3. `build_dataframe` で現在比率とドリフトを計算。
L56 4. `simulate` で閾値超過時の半戻し案を試算。
L57 5. `prepare_summary` と `build_header` で通知本文とテーブルを構築。
L58 6. `send_slack` で結果を送信。`debug_mode` がTrueなら `send_debug` も併用。
```
