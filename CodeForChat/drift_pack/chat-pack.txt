# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: config.py, drift.py, .github/workflows/daily-report.yml, documents/README.md, documents/drift_design.md
# 作成日時: 2025-09-27 16:29:02 (JST)
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <config.py>
```text
L1 # 共通設定（factor / drift から参照）
L2 TOTAL_TARGETS = 20
L3
L4 # 基準のバケット数（NORMAL）
L5 COUNTS_BASE = {"G": 12, "D": 8}
L6
L7 # モード別の推奨バケット数
L8 COUNTS_BY_MODE = {
L9     "NORMAL": {"G": 12, "D": 8},
L10     "CAUTION": {"G": 10, "D": 8},
L11     "EMERG": {"G": 8,  "D": 8},
L12 }
L13
L14 # モード別のドリフト閾値（%）
L15 DRIFT_THRESHOLD_BY_MODE = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L16
L17 # モード別の推奨現金比率
L18 CASH_RATIO_BY_MODE = {
L19     "NORMAL": 0.10,  # 10%
L20     "CAUTION": 0.20,  # 20%
L21     "EMERG": 0.30,  # 30%
L22 }
L23
L24 # モード別のTS（基本幅, 小数=割合）
L25 TS_BASE_BY_MODE = {"NORMAL": 0.15, "CAUTION": 0.13, "EMERG": 0.10}
L26 # 利益到達(+30/+60/+100%)時の段階タイト化（ポイント差）
L27 TS_STEP_DELTAS_PT = (3, 6, 8)
L28
L29 # Breadthの校正は N_G に連動（緊急解除=ceil(1.5*N_G), 通常復帰=3*N_G）
L30 N_G = COUNTS_BASE["G"]
L31 N_D = COUNTS_BASE["D"]
L32
```

## <drift.py>
```text
L1 import pandas as pd, yfinance as yf
L2 import numpy as np
L3 import requests
L4 import os
L5 import json
L6 import time
L7 from pathlib import Path
L8 import csv
L9 import config
L10
L11 # --- GコンポジットDDのしきい値（Growthの平均DD基準）---
L12 CD_CAUTION = 0.10   # -10% で警戒
L13 CD_EMERG = 0.15   # -15% で緊急
L14
L15 MODE_LABELS_JA = {"NORMAL": "通常", "CAUTION": "警戒", "EMERG": "緊急"}
L16 # Slack通知用のモードアイコン
L17 MODE_EMOJIS = {"NORMAL": "🟢", "CAUTION": "⚠️", "EMERG": "🔴"}
L18 MODE_RANK = {"NORMAL": 0, "CAUTION": 1, "EMERG": 2}
L19
L20 # --- breadth utilities (factor parity) ---
L21 BENCH = "^GSPC"
L22 CAND_PRICE_MAX = 450.0
L23 RESULTS_DIR = "results"
L24 os.makedirs(RESULTS_DIR, exist_ok=True)
L25
L26
L27 def _state_file():
L28     """Return path to JSON storing the latest breadth/final mode state."""
L29
L30     return str(Path(RESULTS_DIR) / "current_mode.json")
L31
L32
L33 def _load_state_dict() -> dict:
L34     p = Path(_state_file())
L35     if not p.exists():
L36         return {}
L37     try:
L38         data = json.loads(p.read_text(encoding="utf-8") or "{}")
L39         return data if isinstance(data, dict) else {}
L40     except Exception:
L41         return {}
L42
L43
L44 def _save_state_dict(state: dict):
L45     # 常に {"mode": "<...>"} の1キーに圧縮して保存
L46     m = (state.get("mode") or state.get("final_mode") or state.get("breadth_mode") or "NORMAL")
L47     m = str(m).upper().strip()
L48     Path(_state_file()).write_text(
L49         json.dumps({"mode": m}, ensure_ascii=False, indent=2),
L50         encoding="utf-8",
L51     )
L52
L53
L54 def load_breadth_mode(default: str = "NORMAL") -> str:
L55     state = _load_state_dict()
L56     mode = state.get("breadth_mode", state.get("mode", default))
L57     return mode if mode in MODE_RANK else default
L58
L59
L60 def save_breadth_mode(mode: str):
L61     return  # 参考値のため保存しない（no-op）
L62
L63
L64 def load_final_mode(default: str = "NORMAL") -> str:
L65     state = _load_state_dict()
L66     mode = state.get("final_mode", state.get("mode", default))
L67     return mode if mode in MODE_RANK else default
L68
L69
L70 def save_final_mode(mode: str):
L71     """状態ファイルは mode のみを保存（G-CDで決定）"""
L72     m = (mode or "NORMAL").upper().strip()
L73     Path(_state_file()).write_text(
L74         json.dumps({"mode": m}, ensure_ascii=False, indent=2),
L75         encoding="utf-8",
L76     )
L77
L78
L79 def _read_csv_list(fname):
L80     p = Path(__file__).with_name(fname)
L81     if not p.exists(): return []
L82     return pd.read_csv(p, header=None).iloc[:,0].astype(str).str.upper().tolist()
L83
L84
L85 # leaders.csv 読み込み（results/leaders.csv, 1列想定）
L86 def _read_leaders_symbols() -> list[str]:
L87     p = Path(__file__).with_name("results").joinpath("leaders.csv")
L88     df = pd.read_csv(p, header=None)
L89     return sorted(set(df.iloc[:,0].astype(str).str.strip().str.upper().tolist()))
L90
L91 def _load_universe():
L92     # exist + candidate を使用。candidate は価格上限で事前フィルタ
L93     exist = _read_csv_list("current_tickers.csv")
L94     cand  = _read_csv_list("candidate_tickers.csv")
L95     cand_info = yf.Tickers(" ".join(cand)) if cand else None
L96     cand_keep = []
L97     for t in cand:
L98         try:
L99             px = cand_info.tickers[t].fast_info.get("lastPrice", float("inf"))
L100         except Exception:
L101             px = float("inf")
L102         if pd.notna(px) and float(px) <= CAND_PRICE_MAX:
L103             cand_keep.append(t)
L104     tickers = sorted(set(exist + cand_keep))
L105     return exist, cand_keep, tickers
L106
L107
L108 def _fetch_prices_600d(tickers):
L109     data = yf.download(
L110         tickers + [BENCH],
L111         period="600d",
L112         auto_adjust=True,
L113         progress=False,
L114         threads=False,
L115     )
L116     close = data["Close"]
L117     px = close.dropna(how="all", axis=1).ffill(limit=2)
L118     spx = close[BENCH].reindex(px.index).ffill()
L119     return px, spx
L120
L121
L122 def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L123     # scorer.py の実装をそのまま移植（ベクトル化版）
L124     import numpy as np, pandas as pd
L125     if px is None or px.empty:
L126         return pd.Series(dtype=int)
L127     px = px.dropna(how="all", axis=1)
L128     if win_days and win_days > 0:
L129         px = px.tail(win_days)
L130     if px.empty:
L131         return pd.Series(dtype=int)
L132     # 欠損吸収
L133     px = px.ffill(limit=2)
L134     spx = spx.reindex(px.index).ffill()
L135
L136     ma50  = px.rolling(50,  min_periods=50).mean()
L137     ma150 = px.rolling(150, min_periods=150).mean()
L138     ma200 = px.rolling(200, min_periods=200).mean()
L139
L140     tt = (px > ma150)
L141     tt &= (px > ma200)
L142     tt &= (ma150 > ma200)
L143     tt &= (ma200 - ma200.shift(21) > 0)
L144     tt &= (ma50  > ma150)
L145     tt &= (ma50  > ma200)
L146     tt &= (px    > ma50)
L147
L148     lo252 = px.rolling(252, min_periods=252).min()
L149     hi252 = px.rolling(252, min_periods=252).max()
L150     tt &= (px.divide(lo252).sub(1.0) >= 0.30)
L151     tt &= (px >= (0.75 * hi252))
L152
L153     r12  = px.divide(px.shift(252)).sub(1.0)
L154     br12 = spx.divide(spx.shift(252)).sub(1.0)
L155     r1   = px.divide(px.shift(22)).sub(1.0)
L156     br1  = spx.divide(spx.shift(22)).sub(1.0)
L157     rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L158     tt &= (rs >= 0.10)
L159
L160     return tt.fillna(False).sum(axis=1).astype(int)
L161
L162
L163 def build_breadth_header():
L164     # factor._build_breadth_lead_lines と同一挙動
L165     exist, cand, tickers = _load_universe()
L166     if not tickers:
L167         return "", "NORMAL", 0
L168     px, spx = _fetch_prices_600d(tickers)
L169     win = int(os.getenv("BREADTH_CALIB_WIN_DAYS", "600"))
L170     C_ts = trend_template_breadth_series(px, spx, win_days=win)
L171     if C_ts.empty:
L172         return "", "NORMAL", 0
L173     warmup = int(os.getenv("BREADTH_WARMUP_DAYS","252"))
L174     base = C_ts.iloc[warmup:] if len(C_ts)>warmup else C_ts
L175     C_full = int(C_ts.iloc[-1])
L176
L177     q05 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_IN",  "0.05"))), nan=0.0))
L178     q20 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_OUT", "0.20"))), nan=0.0))
L179     q60 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_WARN_OUT",  "0.60"))), nan=0.0))
L180
L181     # G枠サイズ（Breadth基準）
L182     N_G = config.N_G
L183     th_in_rec   = max(N_G, q05)
L184     th_out_rec  = max(int(np.ceil(1.5*N_G)), q20)
L185     th_norm_rec = max(3*N_G, q60)
L186
L187     use_calib = os.getenv("BREADTH_USE_CALIB", "true").strip().lower() == "true"
L188     if use_calib:
L189         th_in, th_out, th_norm, th_src = th_in_rec, th_out_rec, th_norm_rec, "自動"
L190     else:
L191         th_in   = int(os.getenv("GTT_EMERG_IN", str(N_G)))
L192         th_out  = int(os.getenv("GTT_EMERG_OUT", str(int(1.5*N_G))))
L193         th_norm = int(os.getenv("GTT_CAUTION_OUT", str(3*N_G)))
L194         th_src = "手動"
L195
L196     prev = load_breadth_mode("NORMAL")
L197     if   prev == "EMERG":
L198         mode = "EMERG"   if (C_full < th_out)  else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L199     elif prev == "CAUTION":
L200         mode = "CAUTION" if (C_full < th_norm) else "NORMAL"
L201     else:
L202         mode = "EMERG"   if (C_full < th_in)   else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L203     save_breadth_mode(mode)
L204
L205     mode_ja, emoji = MODE_LABELS_JA.get(mode, mode), MODE_EMOJIS.get(mode, "ℹ️")
L206     eff_days = len(base)
L207
L208     lead_lines = [
L209         f"{emoji} *現在モード: {mode_ja}*",
L210         f"テンプレ合格本数: *{C_full}本*",
L211         "しきい値（{0}）".format(th_src),
L212         f"  ・緊急入り: <{th_in}本",
L213         f"  ・緊急解除: ≥{th_out}本",
L214         f"  ・通常復帰: ≥{th_norm}本",
L215         f"参考指標（過去~{win}営業日, 有効={eff_days}日）",
L216         f"  ・下位5%: {q05}本",
L217         f"  ・下位20%: {q20}本",
L218         f"  ・60%分位: {q60}本",
L219     ]
L220     return "```" + "\n".join(lead_lines) + "```", mode, C_full
L221
L222
L223 def _format_mode(mode: str) -> str:
L224     upper = (mode or "NORMAL").upper()
L225     return f"{MODE_EMOJIS.get(upper, 'ℹ️')} {MODE_LABELS_JA.get(upper, upper)}"
L226
L227
L228 def _gcd_mode_today(g_syms: list[str]) -> tuple[str, float]:
L229     """
L230     現在のGrowth群について、Low_today / Peak60(High) の等加重平均から G-CD(%) を算出し、モードを返す。
L231     戻り値: (gcd_mode, gcd_pct)  ※gcd_pctは正の%（例 11.3 は -11.3%の下落）
L232     """
L233
L234     if not g_syms:
L235         print("📝 audit[G-CD details]: G銘柄が空のため算出対象がありません")
L236         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L237         return "NORMAL", 0.0
L238
L239     try:
L240         df = yf.download(
L241             g_syms,
L242             period="100d",
L243             interval="1d",
L244             auto_adjust=False,
L245             progress=False,
L246         )
L247     except Exception as e:
L248         print(f"⚠️ audit[G-CD details]: 株価データ取得に失敗しました ({e})")
L249         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L250         return "NORMAL", 0.0
L251
L252     if not isinstance(df, pd.DataFrame) or df.empty:
L253         print("⚠️ audit[G-CD details]: 株価データが空のため算出できません")
L254         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L255         return "NORMAL", 0.0
L256
L257     hi_all = df.get("High") if isinstance(df, pd.DataFrame) else None
L258     lo_all = df.get("Low") if isinstance(df, pd.DataFrame) else None
L259     if hi_all is None or lo_all is None:
L260         print("⚠️ audit[G-CD details]: High/Low データが欠落しています")
L261         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L262         return "NORMAL", 0.0
L263
L264     if isinstance(hi_all, pd.Series):
L265         hi_all = hi_all.to_frame(name=g_syms[0])
L266     if isinstance(lo_all, pd.Series):
L267         lo_all = lo_all.to_frame(name=g_syms[0])
L268
L269     if hi_all.empty or lo_all.empty:
L270         print("⚠️ audit[G-CD details]: High/Low データが空のため算出できません")
L271         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L272         return "NORMAL", 0.0
L273
L274     peak60 = hi_all.rolling(60, min_periods=20).max().tail(1).iloc[0]
L275     low_today = lo_all.tail(1).iloc[0]
L276
L277     details: list[tuple[str, float, float, float, float]] = []
L278     for sym in g_syms:
L279         p = float(peak60.get(sym, float("nan"))) if hasattr(peak60, "get") else float("nan")
L280         lt = float(low_today.get(sym, float("nan"))) if hasattr(low_today, "get") else float("nan")
L281         if pd.notna(p) and p > 0 and pd.notna(lt) and lt > 0:
L282             ratio = lt / p
L283             ddpct = (1.0 - ratio) * 100.0
L284             details.append((sym, p, lt, ratio, ddpct))
L285
L286     if not details:
L287         print("⚠️ audit[G-CD details]: 有効な銘柄データがありません")
L288         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L289         return "NORMAL", 0.0
L290
L291     details.sort(key=lambda x: x[4], reverse=True)
L292     today = pd.Timestamp.today(tz="America/New_York").date().isoformat()
L293     print(f"📝 audit[G-CD details] {today}  G={len(g_syms)}")
L294     print("  SYMBOL        Peak60(H)     Low(T)     ratio    DD%")
L295     for sym, peak, low, ratio, ddpct in details:
L296         print(f"  {sym:<8}  {peak:>12.6g}  {low:>10.6g}   {ratio:>6.3f}  {ddpct:>6.2f}")
L297
L298     avg_ratio = float(np.mean([r for _, _, _, r, _ in details]))
L299     gcd_pct = max(0.0, (1.0 - avg_ratio) * 100.0)
L300     mode = "EMERG" if gcd_pct >= CD_EMERG * 100 else "CAUTION" if gcd_pct >= CD_CAUTION * 100 else "NORMAL"
L301     print(
L302         f"📝 audit[G-CD summary]: avg_low/peak60={avg_ratio:.4f}  drawdown={gcd_pct:.2f}%  => {mode}"
L303     )
L304     return mode, gcd_pct
L305 # Debug flag
L306 debug_mode = False  # set to True for detailed output
L307
L308 # --- Finnhub settings & helper ---
L309 FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
L310 if not FINNHUB_API_KEY:
L311     raise ValueError("FINNHUB_API_KEY not set (環境変数が未設定です)")
L312
L313 RATE_LIMIT = 55  # requests per minute (free tier is 60)
L314 call_times = []
L315
L316
L317 def finnhub_get(endpoint, params):
L318     """Call Finnhub API with basic rate limiting."""
L319     now = time.time()
L320     cutoff = now - 60
L321     while call_times and call_times[0] < cutoff:
L322         call_times.pop(0)
L323     if len(call_times) >= RATE_LIMIT:
L324         sleep_time = 60 - (now - call_times[0])
L325         time.sleep(sleep_time)
L326     params = {**params, "token": FINNHUB_API_KEY}
L327     try:
L328         resp = requests.get(f"https://finnhub.io/api/v1/{endpoint}", params=params)
L329         resp.raise_for_status()
L330         data = resp.json()
L331     except requests.exceptions.JSONDecodeError as e:
L332         print(f"⚠️ Finnhub API JSON decode error: {e}")
L333         return {}
L334     except Exception as e:
L335         print(f"⚠️ Finnhub API error: {e}")
L336         return {}
L337     call_times.append(time.time())
L338     return data
L339
L340
L341 def fetch_price(symbol):
L342     try:
L343         data = finnhub_get("quote", {"symbol": symbol})
L344         price = data.get("c")
L345         return float(price) if price not in (None, 0) else float("nan")
L346     except Exception:
L347         return float("nan")
L348
L349
L350 def fetch_vix_ma5():
L351     """Retrieve VIX 5-day moving average via yfinance."""
L352     try:
L353         vix = (
L354             yf.download("^VIX", period="7d", interval="1d", progress=False, auto_adjust=False)["Close"]
L355             .dropna()
L356             .tail(5)
L357         )
L358         if len(vix) < 5:
L359             return float("nan")
L360         return vix.mean().item()
L361     except Exception:
L362         return float("nan")
L363
L364
L365
L366 # === Minervini-like sell signals ===
L367 def _yf_df(sym, period="6mo"):
L368     """日足/MA/出来高平均を取得。欠損時は None。"""
L369     try:
L370         df = yf.download(sym, period=period, interval="1d", auto_adjust=False, progress=False)
L371         if df is None or df.empty:
L372             return None
L373         return df.dropna().assign(
L374             ma20=lambda d: d["Close"].rolling(20).mean(),
L375             ma50=lambda d: d["Close"].rolling(50).mean(),
L376             vol50=lambda d: d["Volume"].rolling(50).mean(),
L377         )
L378     except Exception:
L379         return None
L380
L381
L382 def _scalar(row, col):
L383     """Series/npスカラ→Pythonスカラ化（NaNはNaNのまま）"""
L384     try:
L385         v = row[col]
L386         if hasattr(v, "item"):
L387             try:
L388                 v = v.item()
L389             except Exception:
L390                 pass
L391         return v
L392     except Exception:
L393         return float("nan")
L394
L395
L396 def _is_strict_down(seq):
L397     """数列が厳密に連続で切り下がっているか（len>=4を想定）。NaN含みはFalse。"""
L398     try:
L399         xs = [float(x) for x in seq]
L400         if any(pd.isna(x) for x in xs) or len(xs) < 4:
L401             return False
L402         return all(b < a for a, b in zip(xs[:-1], xs[1:]))
L403     except Exception:
L404         return False
L405
L406
L407 def _signals_for_day(df, idx):
L408     """df.loc[idx] 1日分に対しシグナル配列を返す（値動き/出来高ベースのみ）。"""
L409     try:
L410         sig = []
L411         d = df.loc[idx]
L412         close = _scalar(d, "Close")
L413         ma20 = _scalar(d, "ma20")
L414         ma50 = _scalar(d, "ma50")
L415         vol = _scalar(d, "Volume")
L416         vol50 = _scalar(d, "vol50")
L417
L418         if pd.notna(close) and pd.notna(ma20) and close < ma20:
L419             sig.append("20DMA↓")
L420
L421         if all(pd.notna(x) for x in (close, ma50, vol, vol50)) and close < ma50 and vol > 1.5 * vol50:
L422             sig.append("50DMA↓(大商い)")
L423
L424         last4 = df.loc[:idx].tail(4)
L425         last10 = df.loc[:idx].tail(10)
L426
L427         lows_desc = _is_strict_down(last4["Low"].tolist()) if last4["Low"].notna().all() else False
L428         reds = int((last10["Close"] < last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L429         if lows_desc or reds > 5:
L430             sig.append("連続安値/陰線優勢")
L431
L432         ups = int((last10["Close"] > last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L433         if ups >= 7:
L434             sig.append("上げ偏重(>70%)")
L435
L436         last15 = df.loc[:idx].tail(15)
L437         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L438         if pd.notna(base0) and pd.notna(close) and base0 != 0 and (close / base0 - 1) >= 0.25:
L439             sig.append("+25%/15日内")
L440
L441         if len(df.loc[:idx]) >= 2:
L442             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L443             t1_high = _scalar(t1, "High")
L444             t0_open = _scalar(t0, "Open")
L445             t0_close = _scalar(t0, "Close")
L446             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L447                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L448                     sig.append("GU→陰線")
L449         return sig
L450     except Exception:
L451         return []
L452
L453
L454 def scan_sell_signals(symbols, lookback_days=5):
L455     """
L456     直近 lookback_days 日のうち一度でもシグナルが出たら {sym: [(date,[signals]),...]} を返す。
L457     日付は YYYY-MM-DD。Slackで列挙する。
L458     """
L459     out = {}
L460     for s in symbols:
L461         df = _yf_df(s)
L462         if df is None or len(df) < 60:
L463             continue
L464         alerts = []
L465         for idx in df.tail(lookback_days).index:
L466             tags = _signals_for_day(df, idx)
L467             if tags:
L468                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L469         if alerts:
L470             out[s] = alerts
L471     return out
L472
L473
L474 def load_portfolio():
L475     tickers_path = Path(__file__).with_name("current_tickers.csv")
L476     with tickers_path.open() as f:
L477         rows = [row for row in csv.reader(f) if row and row[0].strip()]
L478     n = len(rows)
L479     portfolio = []
L480     for row in rows:
L481         sym = row[0].strip().upper()
L482         qty = int(row[1]) if len(row) > 1 and row[1].strip() else 0
L483         bucket = row[2].strip().upper() if len(row) > 2 else ""
L484         entry = {
L485             "symbol": sym,
L486             "shares": qty,
L487             "target_ratio": 1 / n if n else 0.0,
L488             "bucket": bucket,
L489         }
L490         portfolio.append(entry)
L491     return portfolio
L492
L493
L494 def compute_threshold():
L495     vix_ma5 = fetch_vix_ma5()
L496     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L497     return vix_ma5, drift_threshold
L498
L499
L500 def compute_threshold_by_mode(mode: str):
L501     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L502     m = (mode or "NORMAL").upper()
L503     cash_ratio = config.CASH_RATIO_BY_MODE.get(
L504         m, config.CASH_RATIO_BY_MODE.get("NORMAL", 0.10)
L505     )
L506     drift_threshold = config.DRIFT_THRESHOLD_BY_MODE.get(
L507         m, config.DRIFT_THRESHOLD_BY_MODE.get("NORMAL", 12)
L508     )
L509     return cash_ratio, drift_threshold
L510
L511
L512 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L513     """
L514     モード別の推奨保有数 (G_count, D_count, cash_slots) を返す。
L515     cash_slotsは「外すG枠の数」（各枠=5%）。
L516     NORMAL: G12/D8/現金化0, CAUTION: G10/D8/現金化2, EMERG: G8/D8/現金化4
L517     """
L518     m = (mode or "NORMAL").upper()
L519     base = config.COUNTS_BY_MODE.get("NORMAL", config.COUNTS_BASE)
L520     now  = config.COUNTS_BY_MODE.get(m, base)
L521     cash_slots = max(0, base["G"] - now["G"])
L522     return now["G"], now["D"], cash_slots
L523
L524
L525 def _mode_tail_line(final_mode: str) -> str:
L526     """①ブロック内の“このモードの設定”を改行＋アイコンで整形（📊は表示しない）"""
L527     fm = (final_mode or "NORMAL").upper()
L528     base_ts = config.TS_BASE_BY_MODE.get(fm, config.TS_BASE_BY_MODE.get("NORMAL", 0.15))
L529     ts_base_pct = int(round(base_ts * 100))
L530     d1, d2, d3 = config.TS_STEP_DELTAS_PT
L531     step30 = max(ts_base_pct - d1, 0)
L532     step60 = max(ts_base_pct - d2, 0)
L533     step100 = max(ts_base_pct - d3, 0)
L534     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(fm)
L535     cash_pct = config.CASH_RATIO_BY_MODE.get(fm, config.CASH_RATIO_BY_MODE.get("NORMAL", 0.10)) * 100
L536     return "\n".join([
L537         "〔このモードの設定〕",
L538         f"🎯 TS基本: -{ts_base_pct}％（+30%→-{step30}％／+60%→-{step60}％／+100%→-{step100}％）",
L539         f"🧩 推奨保有: G{g_cnt}・D{d_cnt}（現金化枠 {cash_slots}）",
L540         f"💼 推奨現金比率: {cash_pct:.0f}％",
L541     ])
L542
L543
L544 def build_dataframe(portfolio):
L545     for stock in portfolio:
L546         price = fetch_price(stock["symbol"])
L547         stock["price"] = price
L548         stock["value"] = price * stock["shares"]
L549
L550     df = pd.DataFrame(portfolio)
L551     total_value = df["value"].sum()
L552     df["current_ratio"] = df["value"] / total_value
L553     df["drift"] = df["current_ratio"] - df["target_ratio"]
L554     df["drift_abs"] = df["drift"].abs()
L555     total_drift_abs = df["drift_abs"].sum()
L556     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L557     df["adjustable"] = (
L558         (df["adjusted_ratio"] * total_value) >= df["price"]
L559     ) & df["price"].notna() & df["price"].gt(0)
L560     return df, total_value, total_drift_abs
L561
L562
L563 def simulate(df, total_value, total_drift_abs, drift_threshold):
L564     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L565     if alert:
L566         df["trade_shares"] = df.apply(
L567             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L568             if r["adjustable"] and r["price"] > 0 else 0,
L569             axis=1,
L570         )
L571         df["new_shares"] = df["shares"] + df["trade_shares"]
L572         df["new_value"] = df["new_shares"] * df["price"]
L573         new_total_value = df["new_value"].sum()
L574         df["simulated_ratio"] = df["new_value"] / new_total_value
L575         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L576         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L577     else:
L578         df["trade_shares"] = np.nan
L579         df["new_shares"] = np.nan
L580         df["new_value"] = np.nan
L581         new_total_value = np.nan
L582         df["simulated_ratio"] = np.nan
L583         df["simulated_drift_abs"] = np.nan
L584         simulated_total_drift_abs = np.nan
L585     return df, alert, new_total_value, simulated_total_drift_abs
L586
L587
L588 def prepare_summary(df, total_drift_abs, alert):
L589     summary = {
L590         "symbol": "合計",
L591         "shares": df["shares"].sum(),
L592         "value": df["value"].sum(),
L593         "current_ratio": np.nan,
L594         "drift_abs": total_drift_abs,
L595     }
L596     if alert:
L597         summary["trade_shares"] = np.nan
L598     # Sort details by evaluation value descending before appending summary
L599     df = df.sort_values(by="value", ascending=False)
L600     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L601     if alert:
L602         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L603         df_small = df[cols].copy()
L604         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L605     else:
L606         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L607         df_small = df[cols].copy()
L608         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L609     return df_small
L610
L611
L612 def currency(x):
L613     return f"${x:,.0f}" if pd.notnull(x) else ""
L614
L615
L616 def formatters_for(alert):
L617     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L618     if alert:
L619         formatters["Δqty"] = "{:.0f}".format
L620     return formatters
L621
L622
L623 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L624     # 下段ヘッダ：📊と📉のみ（💼は①へ集約済み）
L625     header  = f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(int(drift_threshold)) + '%'}\n"
L626     header += f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L627     if alert:
L628         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L629         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L630     else:
L631         header += "✅ アラートなし\n"
L632     return header
L633
L634
L635 def send_slack(text):
L636     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L637     if not SLACK_WEBHOOK_URL:
L638         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L639     payload = {"text": text}
L640     try:
L641         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L642         resp.raise_for_status()
L643         print("✅ Slack（Webhook）へ送信しました")
L644     except Exception as e:
L645         print(f"⚠️ Slack通知エラー: {e}")
L646
L647
L648 def send_debug(debug_text):
L649     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L650     if not SLACK_WEBHOOK_URL:
L651         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L652     debug_payload = {"text": "```" + debug_text + "```"}
L653     try:
L654         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L655         resp.raise_for_status()
L656         print("✅ Debug情報をSlackに送信しました")
L657     except Exception as e:
L658         print(f"⚠️ Slack通知エラー: {e}")
L659
L660
L661 def main():
L662     portfolio = load_portfolio()
L663     symbols = [r["symbol"] for r in portfolio]
L664     # G集合は leaders.csv を使用（存在前提）
L665     g_syms = _read_leaders_symbols()
L666     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L667
L668     breadth_block, breadth_mode, breadth_score = build_breadth_header()
L669     gcd_mode, gcd_pct = _gcd_mode_today(g_syms)
L670
L671     # モードは GコンポジットDD のみで決定（シンプル化）
L672     final_mode = gcd_mode
L673     save_final_mode(final_mode)
L674
L675     cash_ratio, drift_threshold = compute_threshold_by_mode(final_mode)
L676
L677     df, total_value, total_drift_abs = build_dataframe(portfolio)
L678     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L679         df, total_value, total_drift_abs, drift_threshold
L680     )
L681     df_small = prepare_summary(df, total_drift_abs, alert)
L682     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L683         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L684         if col_sym:
L685             alert_keys = {str(k) for k in sell_alerts.keys()}
L686             df_small[col_sym] = df_small[col_sym].astype(str)
L687             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L688             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L689             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L690     formatters = formatters_for(alert)
L691     header_core = build_header(
L692         final_mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L693     )
L694
L695     # --- Slack送信：①（判定＋このモードの設定）と②（Breadth詳細）を確実に二分割 ---
L696     me_g = MODE_EMOJIS.get(gcd_mode, "")
L697     me_b = MODE_EMOJIS.get(breadth_mode, "")
L698     block_gcd = (
L699         f"① GコンポジットDD: -{gcd_pct:.1f}%"
L700         f"（基準: C={CD_CAUTION*100:.0f}% / E={CD_EMERG*100:.0f}%） 判定: {me_g} {gcd_mode}"
L701     )
L702     # ①ブロック：ここまで＋このモードの設定（📊はここに出さない）
L703     first_block = "```\n" + block_gcd + "\n" + _mode_tail_line(final_mode) + "\n```"
L704
L705     # ②ブロック：Breadthのみ（“総合（参考表示）”は廃止）
L706     block_breadth = f"② Breadth: {me_b} {breadth_mode}（テンプレ合格本数: {breadth_score}）"
L707     # breadth_block の中身（コードフェンス除去＋重複行を除去）
L708     breadth_details = ""
L709     if breadth_block:
L710         inner = breadth_block
L711         if inner.startswith("```"):
L712             inner = inner[len("```"):]
L713             if inner.startswith("\n"):
L714                 inner = inner[1:]
L715             if inner.endswith("```"):
L716                 inner = inner[:-3]
L717         # ②タイトルで既出の行は削除
L718         inner_lines = [ln for ln in inner.splitlines() if ("現在モード" not in ln and "テンプレ合格本数" not in ln)]
L719         breadth_details = "\n".join(inner_lines).strip()
L720     second_body = block_breadth + ("\n" + breadth_details if breadth_details else "")
L721     second_block = "```\n" + second_body.strip() + "\n```"
L722
L723     # 連続コードブロックが結合されないよう空行を1行追加
L724     header = first_block + "\n\n" + second_block + "\n" + header_core
L725     if sell_alerts:
L726         def fmt_pair(date_tags):
L727             date, tags = date_tags
L728             return f"{date}:" + "・".join(tags)
L729         listed = []
L730         for t, arr in sell_alerts.items():
L731             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L732         hits = ", ".join(listed)
L733         if "✅ アラートなし" in header:
L734             header = header.replace(
L735                 "✅ アラートなし",
L736                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L737             )
L738         else:
L739             header += f"\n🟥 {hits}"
L740     table_text = df_small.to_string(formatters=formatters, index=False)
L741     send_slack(header + "\n```" + table_text + "```")
L742
L743     if debug_mode:
L744         debug_cols = [
L745             "symbol",
L746             "shares",
L747             "price",
L748             "value",
L749             "current_ratio",
L750             "drift",
L751             "drift_abs",
L752             "adjusted_ratio",
L753             "adjustable",
L754             "trade_shares",
L755             "new_shares",
L756             "new_value",
L757             "simulated_ratio",
L758             "simulated_drift_abs",
L759         ]
L760         debug_text = (
L761             "=== DEBUG: full dataframe ===\n"
L762             + df[debug_cols].to_string()
L763             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L764             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L765         )
L766         print("\n" + debug_text)
L767         send_debug(debug_text)
L768
L769
L770 if __name__ == "__main__":
L771     main()
L772
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 permissions:
L13   contents: write
L14
L15 jobs:
L16   build-and-report:
L17     runs-on: ubuntu-latest
L18
L19     steps:
L20       - name: Debug start
L21         run: echo '🚀 DEBUGstarted'
L22               
L23       - name: Checkout repository
L24         uses: actions/checkout@v4
L25         with:
L26           fetch-depth: 0
L27
L28       - name: Setup Python
L29         uses: actions/setup-python@v4
L30         with:
L31           python-version: '3.x'
L32
L33       - name: Install dependencies
L34         run: pip install -r requirements.txt
L35
L36       - name: Prepare results directory
L37         run: mkdir -p results
L38
L39       - name: Run drift.py
L40         env:
L41           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L42           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L43         run: python drift.py
L44
L45       - name: Commit results if changed
L46         if: ${{ github.event_name != 'pull_request' }}
L47         run: |
L48           git config user.name  "github-actions[bot]"
L49           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L50           git add results/ || true
L51           if git diff --cached --quiet; then
L52             echo "No changes to commit."
L53             exit 0
L54           fi
L55           git pull --rebase --autostash origin "${GITHUB_REF_NAME:-$GITHUB_REF}" || true
L56           git commit -m "ci: update results [skip ci]"
L57           git push origin HEAD:${GITHUB_REF_NAME:-$GITHUB_REF}
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（GコンポジットDDのみ／Breadthは参考指標）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）。Gが先行して良化すれば1段階回復*
L20
L21 ### ① GコンポジットDD（Growthのみ・**最終モードはこれで決定**）
L22 - 対象：ポートフォリオのうち `bucket = "G"` の銘柄を Growth 群として集計
L23 - 算出：各G銘柄の `Low_today / Peak60(High)` を等加重平均し、`1 - 平均` を%表示（正の値が下落幅）
L24 - しきい値：**CAUTION = 10% / EMERG = 15%**
L25 - ログ：Slackとは別に、標準出力へ銘柄別の Peak60・Low・比率・DD% を降順で記録
L26
L27 ### ② ブレッドス（trend_template 合格本数）※**参考表示のみ**
L28 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L29 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L30   - 緊急入り: max(q05, 12本)
L31   - 緊急解除: max(q20, 18本)
L32   - 通常復帰: max(q60, 36本)
L33 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L34
L35 > メモ：Breadthは市場の体温計として併記するが、**モードの決定はGコンポジットDDのみ**。
L36
L37 ---
L38
L39 ## モード別設定（現金・ドリフト・保有数）
L40
L41 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L42 |--------------|----------|-------------------|----------|------------|-------------|------|
L43 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L44 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% + 追加10% |
L45 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% + 追加10% |
L46
L47 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L48 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L49 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L50
L51 <!-- 冗長な定数管理の注記は削除。実装は config.py に準拠。 -->
L52
L53 ---
L54
L55 ## 新規買付
L56 - **新規INは等分比率（=5%）の半分まで**を上限。  
L57 - 追加補充や半戻し買付も同じ上限に従う。
L58
L59 ---
L60
L61 ## 半戻し（リバランス）
L62 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L63 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L64 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L65
L66 ---
L67
L68 ## モード移行の実務手順
L69 - モードが変わったら、**MMF≒現金**として扱い、Growth枠数だけ調整：  
L70   1. **Gを削る**（CAUTION/EMERG）：⭐️低スコアのGから順に外し、`current_tickers.csv` から行削除（=現金化）。  
L71   2. **現金として保持**。  
L72   3. **NORMAL復帰時の補充**：`current_tickers.csv` に銘柄を追加（スコア上位から）。以降は日次ドリフト/TSルールに従う。  
L73 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて均等比率を再計算。
L74
L75 ---
L76
L77 ## 入替銘柄選定
L78 - **ファクター分散最適化手法を用いて日次でスコア集計**し、**スコア上位からIN/OUT**を決定。  
L79 - 参考：Oxfordキャピタル、Alpha Investor、Motley Fool、moomooスクリーニング等。  
L80 - 年間NISA枠はGrowth群から低ボラ銘柄を選定し利用（長期保持に固執しない）。
L81
L82 ---
L83
L84 ## 実行タイミング
L85 - 判定：米国市場終値直後  
L86 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 20銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから価格を取得（レジームは trend_template 本数に基づく（基準 N_G=12））。
L6   - 緊急入り: `max(q05, 12本)`
L7   - 緊急解除: `max(q20, 18本)` （ceil(1.5*12)）
L8   - 通常復帰: `max(q60, 36本)` （3*12）
L9
L10 ## 定数・設定
L11 - `FINNHUB_API_KEY` / `SLACK_WEBHOOK_URL` を環境変数から取得。
L12 - 無料枠を考慮したAPIレート制限: `RATE_LIMIT = 55`。
L13 - デバッグ出力用フラグ `debug_mode`。
L14
L15 ## 主な関数
L16 ### finnhub_get
L17 - 基本的なレート制限付きでFinnhub APIを呼び出し、JSONレスポンスを辞書で返す。
L18
L19 ### fetch_price
L20 - `quote` エンドポイントで株価を取得し、失敗時は `NaN` を返す。
L21
L22 ### fetch_vix_ma5
L23 - yfinanceでVIX終値を取得する関数。将来再利用のため残置。
L24
L25 ### load_portfolio
L26 - `current_tickers.csv` から銘柄と保有株数を読み込み、目標比率4%を付与したリストを生成。
L27
L28 ### compute_threshold_by_mode
L29 - モード(NORMAL/CAUTION/EMERG) に応じて **12% / 14% / 停止(∞)** を返す（`config.py` を参照）。
L30
L31 ### build_dataframe
L32 - 各銘柄の評価額や現在比率、ドリフト、半戻し後比率(`adjusted_ratio`)を計算しDataFrame化。
L33
L34 ### simulate
L35 - ドリフト合計が閾値を超えた場合、半戻し後の売買株数と新比率を試算し、シミュレート後ドリフトを返す。
L36
L37 ### prepare_summary
L38 - 評価額順に並べ替えた後、合計行を付与してSlack表示用テーブルを作成。
L39
L40 ### formatters_for / currency
L41 - 通貨・比率・株数の表示フォーマットを定義。
L42
L43 ### build_header
L44 - 現金保有率・閾値・ドリフト値およびアラート有無をSlackメッセージ用ヘッダに整形。TS(基本)はモード別に `config.py` から動的表示し、段階TSは base から -3/-6/-8 pt。
L45
L46 ### send_slack / send_debug
L47 - 通常通知およびデバッグ詳細をSlack Webhookへ送信。
L48
L49 ### main
L50 - 上記関数を順に呼び出し、日次ドリフトチェックの一連処理を実行。
L51
L52 ## 実行フロー
L53 1. `load_portfolio` で現ポートフォリオを読み込む。
L54 2. `build_breadth_header` でモードを取得し、`compute_threshold_by_mode` で現金保有率とドリフト閾値を決定。
L55 3. `build_dataframe` で現在比率とドリフトを計算。
L56 4. `simulate` で閾値超過時の半戻し案を試算。
L57 5. `prepare_summary` と `build_header` で通知本文とテーブルを構築。
L58 6. `send_slack` で結果を送信。`debug_mode` がTrueなら `send_debug` も併用。
```
