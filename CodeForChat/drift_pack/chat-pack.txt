# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: config.py, drift.py, .github/workflows/daily-report.yml, documents/README.md, documents/drift_design.md
# 作成日時: 2025-09-19 22:06:30 (JST)
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <config.py>
```text
L1 # 共通設定（factor / drift から参照）
L2 TOTAL_TARGETS = 20
L3
L4 # 基準のバケット数（NORMAL）
L5 COUNTS_BASE = {"G": 12, "D": 8}
L6
L7 # モード別の推奨バケット数
L8 COUNTS_BY_MODE = {
L9     "NORMAL": {"G": 12, "D": 8},
L10     "CAUTION": {"G": 10, "D": 8},
L11     "EMERG": {"G": 8,  "D": 8},
L12 }
L13
L14 # モード別のドリフト閾値（%）
L15 DRIFT_THRESHOLD_BY_MODE = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L16
L17 # モード別のTS（基本幅, 小数=割合）
L18 TS_BASE_BY_MODE = {"NORMAL": 0.15, "CAUTION": 0.13, "EMERG": 0.10}
L19 # 利益到達(+30/+60/+100%)時の段階タイト化（ポイント差）
L20 TS_STEP_DELTAS_PT = (3, 6, 8)
L21
L22 # Breadthの校正は N_G に連動（緊急解除=ceil(1.5*N_G), 通常復帰=3*N_G）
L23 N_G = COUNTS_BASE["G"]
L24 N_D = COUNTS_BASE["D"]
L25
```

## <drift.py>
```text
L1 import pandas as pd, yfinance as yf
L2 import numpy as np
L3 import requests
L4 import os
L5 import csv
L6 import json
L7 import time
L8 from pathlib import Path
L9 import config
L10
L11 # --- breadth utilities (factor parity) ---
L12 BENCH = "^GSPC"
L13 CAND_PRICE_MAX = 450.0
L14 RESULTS_DIR = "results"
L15 os.makedirs(RESULTS_DIR, exist_ok=True)
L16
L17
L18 def _state_file():
L19     return str(Path(RESULTS_DIR) / "breadth_state.json")
L20
L21
L22 def load_mode(default="NORMAL"):
L23     try:
L24         m = json.loads(open(_state_file()).read()).get("mode", default)
L25         return m if m in ("EMERG","CAUTION","NORMAL") else default
L26     except Exception:
L27         return default
L28
L29
L30 def save_mode(mode: str):
L31     try:
L32         open(_state_file(),"w").write(json.dumps({"mode": mode}))
L33     except Exception:
L34         pass
L35
L36
L37 def _read_csv_list(fname):
L38     p = Path(__file__).with_name(fname)
L39     if not p.exists(): return []
L40     return pd.read_csv(p, header=None).iloc[:,0].astype(str).str.upper().tolist()
L41
L42
L43 def _load_universe():
L44     # exist + candidate を使用。candidate は価格上限で事前フィルタ
L45     exist = _read_csv_list("current_tickers.csv")
L46     cand  = _read_csv_list("candidate_tickers.csv")
L47     cand_info = yf.Tickers(" ".join(cand)) if cand else None
L48     cand_keep = []
L49     for t in cand:
L50         try:
L51             px = cand_info.tickers[t].fast_info.get("lastPrice", float("inf"))
L52         except Exception:
L53             px = float("inf")
L54         if pd.notna(px) and float(px) <= CAND_PRICE_MAX:
L55             cand_keep.append(t)
L56     tickers = sorted(set(exist + cand_keep))
L57     return exist, cand_keep, tickers
L58
L59
L60 def _fetch_prices_600d(tickers):
L61     data = yf.download(
L62         tickers + [BENCH],
L63         period="600d",
L64         auto_adjust=True,
L65         progress=False,
L66         threads=False,
L67     )
L68     close = data["Close"]
L69     px = close.dropna(how="all", axis=1).ffill(limit=2)
L70     spx = close[BENCH].reindex(px.index).ffill()
L71     return px, spx
L72
L73
L74 def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L75     # scorer.py の実装をそのまま移植（ベクトル化版）
L76     import numpy as np, pandas as pd
L77     if px is None or px.empty:
L78         return pd.Series(dtype=int)
L79     px = px.dropna(how="all", axis=1)
L80     if win_days and win_days > 0:
L81         px = px.tail(win_days)
L82     if px.empty:
L83         return pd.Series(dtype=int)
L84     # 欠損吸収
L85     px = px.ffill(limit=2)
L86     spx = spx.reindex(px.index).ffill()
L87
L88     ma50  = px.rolling(50,  min_periods=50).mean()
L89     ma150 = px.rolling(150, min_periods=150).mean()
L90     ma200 = px.rolling(200, min_periods=200).mean()
L91
L92     tt = (px > ma150)
L93     tt &= (px > ma200)
L94     tt &= (ma150 > ma200)
L95     tt &= (ma200 - ma200.shift(21) > 0)
L96     tt &= (ma50  > ma150)
L97     tt &= (ma50  > ma200)
L98     tt &= (px    > ma50)
L99
L100     lo252 = px.rolling(252, min_periods=252).min()
L101     hi252 = px.rolling(252, min_periods=252).max()
L102     tt &= (px.divide(lo252).sub(1.0) >= 0.30)
L103     tt &= (px >= (0.75 * hi252))
L104
L105     r12  = px.divide(px.shift(252)).sub(1.0)
L106     br12 = spx.divide(spx.shift(252)).sub(1.0)
L107     r1   = px.divide(px.shift(22)).sub(1.0)
L108     br1  = spx.divide(spx.shift(22)).sub(1.0)
L109     rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L110     tt &= (rs >= 0.10)
L111
L112     return tt.fillna(False).sum(axis=1).astype(int)
L113
L114
L115 def build_breadth_header():
L116     # factor._build_breadth_lead_lines と同一挙動
L117     exist, cand, tickers = _load_universe()
L118     if not tickers:
L119         return "", "NORMAL", 0
L120     px, spx = _fetch_prices_600d(tickers)
L121     win = int(os.getenv("BREADTH_CALIB_WIN_DAYS", "600"))
L122     C_ts = trend_template_breadth_series(px, spx, win_days=win)
L123     if C_ts.empty:
L124         return "", "NORMAL", 0
L125     warmup = int(os.getenv("BREADTH_WARMUP_DAYS","252"))
L126     base = C_ts.iloc[warmup:] if len(C_ts)>warmup else C_ts
L127     C_full = int(C_ts.iloc[-1])
L128
L129     q05 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_IN",  "0.05"))), nan=0.0))
L130     q20 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_OUT", "0.20"))), nan=0.0))
L131     q60 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_WARN_OUT",  "0.60"))), nan=0.0))
L132
L133     # G枠サイズ（Breadth基準）
L134     N_G = config.N_G
L135     th_in_rec   = max(N_G, q05)
L136     th_out_rec  = max(int(np.ceil(1.5*N_G)), q20)
L137     th_norm_rec = max(3*N_G, q60)
L138
L139     use_calib = os.getenv("BREADTH_USE_CALIB", "true").strip().lower() == "true"
L140     if use_calib:
L141         th_in, th_out, th_norm, th_src = th_in_rec, th_out_rec, th_norm_rec, "自動"
L142     else:
L143         th_in   = int(os.getenv("GTT_EMERG_IN", str(N_G)))
L144         th_out  = int(os.getenv("GTT_EMERG_OUT", str(int(1.5*N_G))))
L145         th_norm = int(os.getenv("GTT_CAUTION_OUT", str(3*N_G)))
L146         th_src = "手動"
L147
L148     prev = load_mode("NORMAL")
L149     if   prev == "EMERG":
L150         mode = "EMERG"   if (C_full < th_out)  else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L151     elif prev == "CAUTION":
L152         mode = "CAUTION" if (C_full < th_norm) else "NORMAL"
L153     else:
L154         mode = "EMERG"   if (C_full < th_in)   else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L155     save_mode(mode)
L156
L157     _MODE_JA   = {"EMERG":"緊急","CAUTION":"警戒","NORMAL":"通常"}
L158     _MODE_EMOJI= {"EMERG":"🚨","CAUTION":"⚠️","NORMAL":"🟢"}
L159     mode_ja, emoji = _MODE_JA.get(mode,mode), _MODE_EMOJI.get(mode,"ℹ️")
L160     eff_days = len(base)
L161
L162     lead_lines = [
L163         f"{emoji} *現在モード: {mode_ja}*",
L164         f"テンプレ合格本数: *{C_full}本*",
L165         "しきい値（{0}）".format(th_src),
L166         f"  ・緊急入り: <{th_in}本",
L167         f"  ・緊急解除: ≥{th_out}本",
L168         f"  ・通常復帰: ≥{th_norm}本",
L169         f"参考指標（過去~{win}営業日, 有効={eff_days}日）",
L170         f"  ・下位5%: {q05}本",
L171         f"  ・下位20%: {q20}本",
L172         f"  ・60%分位: {q60}本",
L173     ]
L174     return "```" + "\n".join(lead_lines) + "```", mode, C_full
L175 # Debug flag
L176 debug_mode = False  # set to True for detailed output
L177
L178 # --- Finnhub settings & helper ---
L179 FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
L180 if not FINNHUB_API_KEY:
L181     raise ValueError("FINNHUB_API_KEY not set (環境変数が未設定です)")
L182
L183 RATE_LIMIT = 55  # requests per minute (free tier is 60)
L184 call_times = []
L185
L186
L187 def finnhub_get(endpoint, params):
L188     """Call Finnhub API with basic rate limiting."""
L189     now = time.time()
L190     cutoff = now - 60
L191     while call_times and call_times[0] < cutoff:
L192         call_times.pop(0)
L193     if len(call_times) >= RATE_LIMIT:
L194         sleep_time = 60 - (now - call_times[0])
L195         time.sleep(sleep_time)
L196     params = {**params, "token": FINNHUB_API_KEY}
L197     try:
L198         resp = requests.get(f"https://finnhub.io/api/v1/{endpoint}", params=params)
L199         resp.raise_for_status()
L200         data = resp.json()
L201     except requests.exceptions.JSONDecodeError as e:
L202         print(f"⚠️ Finnhub API JSON decode error: {e}")
L203         return {}
L204     except Exception as e:
L205         print(f"⚠️ Finnhub API error: {e}")
L206         return {}
L207     call_times.append(time.time())
L208     return data
L209
L210
L211 def fetch_price(symbol):
L212     try:
L213         data = finnhub_get("quote", {"symbol": symbol})
L214         price = data.get("c")
L215         return float(price) if price not in (None, 0) else float("nan")
L216     except Exception:
L217         return float("nan")
L218
L219
L220 def fetch_vix_ma5():
L221     """Retrieve VIX 5-day moving average via yfinance."""
L222     try:
L223         vix = (
L224             yf.download("^VIX", period="7d", interval="1d", progress=False, auto_adjust=False)["Close"]
L225             .dropna()
L226             .tail(5)
L227         )
L228         if len(vix) < 5:
L229             return float("nan")
L230         return vix.mean().item()
L231     except Exception:
L232         return float("nan")
L233
L234
L235
L236 # === Minervini-like sell signals ===
L237 def _yf_df(sym, period="6mo"):
L238     """日足/MA/出来高平均を取得。欠損時は None。"""
L239     try:
L240         df = yf.download(sym, period=period, interval="1d", auto_adjust=False, progress=False)
L241         if df is None or df.empty:
L242             return None
L243         return df.dropna().assign(
L244             ma20=lambda d: d["Close"].rolling(20).mean(),
L245             ma50=lambda d: d["Close"].rolling(50).mean(),
L246             vol50=lambda d: d["Volume"].rolling(50).mean(),
L247         )
L248     except Exception:
L249         return None
L250
L251
L252 def _scalar(row, col):
L253     """Series/npスカラ→Pythonスカラ化（NaNはNaNのまま）"""
L254     try:
L255         v = row[col]
L256         if hasattr(v, "item"):
L257             try:
L258                 v = v.item()
L259             except Exception:
L260                 pass
L261         return v
L262     except Exception:
L263         return float("nan")
L264
L265
L266 def _is_strict_down(seq):
L267     """数列が厳密に連続で切り下がっているか（len>=4を想定）。NaN含みはFalse。"""
L268     try:
L269         xs = [float(x) for x in seq]
L270         if any(pd.isna(x) for x in xs) or len(xs) < 4:
L271             return False
L272         return all(b < a for a, b in zip(xs[:-1], xs[1:]))
L273     except Exception:
L274         return False
L275
L276
L277 def _signals_for_day(df, idx):
L278     """df.loc[idx] 1日分に対しシグナル配列を返す（値動き/出来高ベースのみ）。"""
L279     try:
L280         sig = []
L281         d = df.loc[idx]
L282         close = _scalar(d, "Close")
L283         ma20 = _scalar(d, "ma20")
L284         ma50 = _scalar(d, "ma50")
L285         vol = _scalar(d, "Volume")
L286         vol50 = _scalar(d, "vol50")
L287
L288         if pd.notna(close) and pd.notna(ma20) and close < ma20:
L289             sig.append("20DMA↓")
L290
L291         if all(pd.notna(x) for x in (close, ma50, vol, vol50)) and close < ma50 and vol > 1.5 * vol50:
L292             sig.append("50DMA↓(大商い)")
L293
L294         last4 = df.loc[:idx].tail(4)
L295         last10 = df.loc[:idx].tail(10)
L296
L297         lows_desc = _is_strict_down(last4["Low"].tolist()) if last4["Low"].notna().all() else False
L298         reds = int((last10["Close"] < last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L299         if lows_desc or reds > 5:
L300             sig.append("連続安値/陰線優勢")
L301
L302         ups = int((last10["Close"] > last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L303         if ups >= 7:
L304             sig.append("上げ偏重(>70%)")
L305
L306         last15 = df.loc[:idx].tail(15)
L307         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L308         if pd.notna(base0) and pd.notna(close) and base0 != 0 and (close / base0 - 1) >= 0.25:
L309             sig.append("+25%/15日内")
L310
L311         if len(df.loc[:idx]) >= 2:
L312             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L313             t1_high = _scalar(t1, "High")
L314             t0_open = _scalar(t0, "Open")
L315             t0_close = _scalar(t0, "Close")
L316             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L317                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L318                     sig.append("GU→陰線")
L319         return sig
L320     except Exception:
L321         return []
L322
L323
L324 def scan_sell_signals(symbols, lookback_days=5):
L325     """
L326     直近 lookback_days 日のうち一度でもシグナルが出たら {sym: [(date,[signals]),...]} を返す。
L327     日付は YYYY-MM-DD。Slackで列挙する。
L328     """
L329     out = {}
L330     for s in symbols:
L331         df = _yf_df(s)
L332         if df is None or len(df) < 60:
L333             continue
L334         alerts = []
L335         for idx in df.tail(lookback_days).index:
L336             tags = _signals_for_day(df, idx)
L337             if tags:
L338                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L339         if alerts:
L340             out[s] = alerts
L341     return out
L342
L343
L344 def load_portfolio():
L345     tickers_path = Path(__file__).with_name("current_tickers.csv")
L346     with tickers_path.open() as f:
L347         reader = list(csv.reader(f))
L348     return [
L349         {"symbol": sym.strip().upper(), "shares": int(qty), "target_ratio": 1 / len(reader)}
L350         for sym, qty in reader
L351     ]
L352
L353
L354 def compute_threshold():
L355     vix_ma5 = fetch_vix_ma5()
L356     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L357     return vix_ma5, drift_threshold
L358
L359
L360 def compute_threshold_by_mode(mode: str):
L361     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L362     m = (mode or "NORMAL").upper()
L363     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L364     drift_map = config.DRIFT_THRESHOLD_BY_MODE
L365     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L366
L367
L368 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L369     """
L370     モード別の推奨保有数 (G_count, D_count, cash_slots) を返す。
L371     cash_slotsは「外すG枠の数」（各枠=5%）。
L372     NORMAL: G12/D8/現金化0, CAUTION: G10/D8/現金化2, EMERG: G8/D8/現金化4
L373     """
L374     m = (mode or "NORMAL").upper()
L375     base = config.COUNTS_BY_MODE.get("NORMAL", config.COUNTS_BASE)
L376     now  = config.COUNTS_BY_MODE.get(m, base)
L377     cash_slots = max(0, base["G"] - now["G"])
L378     return now["G"], now["D"], cash_slots
L379
L380
L381 def build_dataframe(portfolio):
L382     for stock in portfolio:
L383         price = fetch_price(stock["symbol"])
L384         stock["price"] = price
L385         stock["value"] = price * stock["shares"]
L386
L387     df = pd.DataFrame(portfolio)
L388     total_value = df["value"].sum()
L389     df["current_ratio"] = df["value"] / total_value
L390     df["drift"] = df["current_ratio"] - df["target_ratio"]
L391     df["drift_abs"] = df["drift"].abs()
L392     total_drift_abs = df["drift_abs"].sum()
L393     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L394     df["adjustable"] = (
L395         (df["adjusted_ratio"] * total_value) >= df["price"]
L396     ) & df["price"].notna() & df["price"].gt(0)
L397     return df, total_value, total_drift_abs
L398
L399
L400 def simulate(df, total_value, total_drift_abs, drift_threshold):
L401     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L402     if alert:
L403         df["trade_shares"] = df.apply(
L404             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L405             if r["adjustable"] and r["price"] > 0 else 0,
L406             axis=1,
L407         )
L408         df["new_shares"] = df["shares"] + df["trade_shares"]
L409         df["new_value"] = df["new_shares"] * df["price"]
L410         new_total_value = df["new_value"].sum()
L411         df["simulated_ratio"] = df["new_value"] / new_total_value
L412         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L413         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L414     else:
L415         df["trade_shares"] = np.nan
L416         df["new_shares"] = np.nan
L417         df["new_value"] = np.nan
L418         new_total_value = np.nan
L419         df["simulated_ratio"] = np.nan
L420         df["simulated_drift_abs"] = np.nan
L421         simulated_total_drift_abs = np.nan
L422     return df, alert, new_total_value, simulated_total_drift_abs
L423
L424
L425 def prepare_summary(df, total_drift_abs, alert):
L426     summary = {
L427         "symbol": "合計",
L428         "shares": df["shares"].sum(),
L429         "value": df["value"].sum(),
L430         "current_ratio": np.nan,
L431         "drift_abs": total_drift_abs,
L432     }
L433     if alert:
L434         summary["trade_shares"] = np.nan
L435     # Sort details by evaluation value descending before appending summary
L436     df = df.sort_values(by="value", ascending=False)
L437     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L438     if alert:
L439         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L440         df_small = df[cols].copy()
L441         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L442     else:
L443         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L444         df_small = df[cols].copy()
L445         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L446     return df_small
L447
L448
L449 def currency(x):
L450     return f"${x:,.0f}" if pd.notnull(x) else ""
L451
L452
L453 def formatters_for(alert):
L454     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L455     if alert:
L456         formatters["Δqty"] = "{:.0f}".format
L457     return formatters
L458
L459
L460 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L461     header = (
L462         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L463         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L464         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L465     )
L466     if alert:
L467         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L468         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L469     else:
L470         header += "✅ アラートなし\n"
L471     # ★ 追記: TSルール（G/D共通）と推奨保有数
L472     # TS(基本)をモードで動的表示。段階TSは「基本から -3/-6/-8 pt」固定。
L473     base_ts = config.TS_BASE_BY_MODE.get(mode.upper(), config.TS_BASE_BY_MODE["NORMAL"])
L474     d1, d2, d3 = config.TS_STEP_DELTAS_PT
L475     ts_line = f"*🛡 TS:* 基本 -{base_ts*100:.0f}% / +30%→-{max(base_ts*100 - d1, 0):.0f}% / +60%→-{max(base_ts*100 - d2, 0):.0f}% / +100%→-{max(base_ts*100 - d3, 0):.0f}%\n"
L476     header += ts_line
L477     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L478     cash_pct = cash_slots * (100 / (config.TOTAL_TARGETS))  # 1枠=総数分割の%（20銘柄なら5%）
L479     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct:.0f}%）\n"
L480     return header
L481
L482
L483 def send_slack(text):
L484     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L485     if not SLACK_WEBHOOK_URL:
L486         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L487     payload = {"text": text}
L488     try:
L489         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L490         resp.raise_for_status()
L491         print("✅ Slack（Webhook）へ送信しました")
L492     except Exception as e:
L493         print(f"⚠️ Slack通知エラー: {e}")
L494
L495
L496 def send_debug(debug_text):
L497     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L498     if not SLACK_WEBHOOK_URL:
L499         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L500     debug_payload = {"text": "```" + debug_text + "```"}
L501     try:
L502         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L503         resp.raise_for_status()
L504         print("✅ Debug情報をSlackに送信しました")
L505     except Exception as e:
L506         print(f"⚠️ Slack通知エラー: {e}")
L507
L508
L509 def main():
L510     portfolio = load_portfolio()
L511     symbols = [r["symbol"] for r in portfolio]
L512     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L513
L514     breadth_block, mode, _C = build_breadth_header()
L515
L516     cash_ratio, drift_threshold = compute_threshold_by_mode(mode)
L517
L518     df, total_value, total_drift_abs = build_dataframe(portfolio)
L519     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L520         df, total_value, total_drift_abs, drift_threshold
L521     )
L522     df_small = prepare_summary(df, total_drift_abs, alert)
L523     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L524         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L525         if col_sym:
L526             alert_keys = {str(k) for k in sell_alerts.keys()}
L527             df_small[col_sym] = df_small[col_sym].astype(str)
L528             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L529             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L530             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L531     formatters = formatters_for(alert)
L532     header = build_header(
L533         mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L534     )
L535     if breadth_block:
L536         header = breadth_block + "\n" + header
L537     if sell_alerts:
L538         def fmt_pair(date_tags):
L539             date, tags = date_tags
L540             return f"{date}:" + "・".join(tags)
L541         listed = []
L542         for t, arr in sell_alerts.items():
L543             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L544         hits = ", ".join(listed)
L545         if "✅ アラートなし" in header:
L546             header = header.replace(
L547                 "✅ アラートなし",
L548                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L549             )
L550         else:
L551             header += f"\n🟥 {hits}"
L552     table_text = df_small.to_string(formatters=formatters, index=False)
L553     send_slack(header + "\n```" + table_text + "```")
L554
L555     if debug_mode:
L556         debug_cols = [
L557             "symbol",
L558             "shares",
L559             "price",
L560             "value",
L561             "current_ratio",
L562             "drift",
L563             "drift_abs",
L564             "adjusted_ratio",
L565             "adjustable",
L566             "trade_shares",
L567             "new_shares",
L568             "new_value",
L569             "simulated_ratio",
L570             "simulated_drift_abs",
L571         ]
L572         debug_text = (
L573             "=== DEBUG: full dataframe ===\n"
L574             + df[debug_cols].to_string()
L575             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L576             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L577         )
L578         print("\n" + debug_text)
L579         send_debug(debug_text)
L580
L581
L582 if __name__ == "__main__":
L583     main()
L584
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=12）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 12本)`（= N_G）
L17   - 緊急解除: `max(q20, 18本)`（= ceil(1.5×12)）
L18   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **14%**
L24  - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（20×5%に全戻しのみ）
L25
L26 ## モード別の推奨“保有銘柄数”（MMF≒現金）
L27 *各枠=5%（20銘柄均等）。モード移行時は**Gの枠数のみ**調整し、外した枠は現金として保持。*
L28
L29 - **NORMAL:** G **12** / D **8** / 現金化枠 **0**  
L30 - **CAUTION:** G **10** / D **8** / 現金化枠 **2**（= 10%）  
L31 - **EMERG:** G **8**  / D **8** / 現金化枠 **4**（= 20%）  
L32
L33 > 実運用：⭐️低スコアのGから順に外す。解除時はfactor上位から補充。
L34
L35 ## トレーリングストップ
L36 - **基本TS (モード別):** NORMAL **15%** / CAUTION **13%** / EMERG **10%**
L37 - 含み益が **+30% / +60% / +100%** 到達で、基本から **-3pt / -6pt / -8pt** 引き上げ
L38 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L39
L40 ## 半戻し（リバランス）手順
L41 ドリフトチェックで**アラート**が出た場合（合計|drift| がモード閾値を超過、EMERG除く）、翌営業日の米国寄付きで下記を実施する。
L42
L43 1. **売却（必須）**  
L44    Slackテーブルの **Δqty がマイナスの銘柄を売却** する（寄付き成行推奨）。  
L45    これは「半戻し」計算に基づく過重量の削減を意味する。
L46
L47 2. **購入（任意・半戻し目安）**  
L48    半戻し後の合計|drift|を**シミュレーション値（Slackヘッダに表示）**に近づけることを目安に、  
L49    **任意の銘柄を買い増し**してバランスを取る（Δqtyがプラスの銘柄を優先してもよい）。
L50
L51 3. **トレーリングストップの再設定（必須）**  
L52    すべての保有銘柄について、最新の評価額に合わせてTSを**再発注／更新**する。  
L53    ルールは下記（利益到達で段階的にタイト化）：  
L54    - **基本TS:** -15%  
L55    - **+30% 到達 → TS -12%**  
L56    - **+60% 到達 → TS -9%**  
L57    - **+100% 到達 → TS -7%**  
L58    ※ストップ価格の引き上げは許可、**引き下げは不可**（利益保全の原則）。
L59
L60 4. **例外（EMERGモード）**  
L61    緊急(EMERG)では**ドリフト由来の売買は停止（∞）**。20銘柄×各5%への**全戻し**のみ許容。
L62
L63 5. **実行タイミング**
L64    - 判定：米国市場終値直後
L65    - 執行：翌営業日の米国寄付き成行
L66
L67 ## モード移行の実務手順（超シンプル）
L68 モードが変わったら、**MMF≒現金**として扱い、**Gの枠数だけ**を調整する：
L69 1. **Gを削る**（CAUTION/EMERG）  
L70    - ⭐️低スコアのGから順に外す。  
L71    - **`current_tickers.csv` から外すG銘柄の行を削除**（＝その枠は現金化）。
L72 2. **現金として保持**  
L73    - 外した枠は現金（またはMMF相当）でプール。  
L74 3. **復帰時の補充**（NORMALへ）  
L75    - **`current_tickers.csv` に銘柄を追加**（factor上位から）。  
L76    - 以降は日次ドリフト/TSルールに従う。
L77
L78 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて自動で均等比率が再計算される。
L79
L80 ## 入替銘柄選定
L81 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L82 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L83
L84 ## 再エントリー（クールダウン）
L85 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L86
L87 ## 実行タイミング
L88 - 判定：米国市場終値直後
L89 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 20銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから価格を取得（レジームは trend_template 本数に基づく（基準 N_G=12））。
L6   - 緊急入り: `max(q05, 12本)`
L7   - 緊急解除: `max(q20, 18本)` （ceil(1.5*12)）
L8   - 通常復帰: `max(q60, 36本)` （3*12）
L9
L10 ## 定数・設定
L11 - `FINNHUB_API_KEY` / `SLACK_WEBHOOK_URL` を環境変数から取得。
L12 - 無料枠を考慮したAPIレート制限: `RATE_LIMIT = 55`。
L13 - デバッグ出力用フラグ `debug_mode`。
L14
L15 ## 主な関数
L16 ### finnhub_get
L17 - 基本的なレート制限付きでFinnhub APIを呼び出し、JSONレスポンスを辞書で返す。
L18
L19 ### fetch_price
L20 - `quote` エンドポイントで株価を取得し、失敗時は `NaN` を返す。
L21
L22 ### fetch_vix_ma5
L23 - yfinanceでVIX終値を取得する関数。将来再利用のため残置。
L24
L25 ### load_portfolio
L26 - `current_tickers.csv` から銘柄と保有株数を読み込み、目標比率4%を付与したリストを生成。
L27
L28 ### compute_threshold_by_mode
L29 - モード(NORMAL/CAUTION/EMERG) に応じて **12% / 14% / 停止(∞)** を返す（`config.py` を参照）。
L30
L31 ### build_dataframe
L32 - 各銘柄の評価額や現在比率、ドリフト、半戻し後比率(`adjusted_ratio`)を計算しDataFrame化。
L33
L34 ### simulate
L35 - ドリフト合計が閾値を超えた場合、半戻し後の売買株数と新比率を試算し、シミュレート後ドリフトを返す。
L36
L37 ### prepare_summary
L38 - 評価額順に並べ替えた後、合計行を付与してSlack表示用テーブルを作成。
L39
L40 ### formatters_for / currency
L41 - 通貨・比率・株数の表示フォーマットを定義。
L42
L43 ### build_header
L44 - 現金保有率・閾値・ドリフト値およびアラート有無をSlackメッセージ用ヘッダに整形。TS(基本)はモード別に `config.py` から動的表示し、段階TSは base から -3/-6/-8 pt。
L45
L46 ### send_slack / send_debug
L47 - 通常通知およびデバッグ詳細をSlack Webhookへ送信。
L48
L49 ### main
L50 - 上記関数を順に呼び出し、日次ドリフトチェックの一連処理を実行。
L51
L52 ## 実行フロー
L53 1. `load_portfolio` で現ポートフォリオを読み込む。
L54 2. `build_breadth_header` でモードを取得し、`compute_threshold_by_mode` で現金保有率とドリフト閾値を決定。
L55 3. `build_dataframe` で現在比率とドリフトを計算。
L56 4. `simulate` で閾値超過時の半戻し案を試算。
L57 5. `prepare_summary` と `build_header` で通知本文とテーブルを構築。
L58 6. `send_slack` で結果を送信。`debug_mode` がTrueなら `send_debug` も併用。
```
