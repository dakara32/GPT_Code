# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: config.py, drift.py, .github/workflows/daily-report.yml, documents/README.md, documents/drift_design.md
# 作成日時: 2025-09-26 19:38:33 (JST)
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <config.py>
```text
L1 # 共通設定（factor / drift から参照）
L2 TOTAL_TARGETS = 20
L3
L4 # 基準のバケット数（NORMAL）
L5 COUNTS_BASE = {"G": 12, "D": 8}
L6
L7 # モード別の推奨バケット数
L8 COUNTS_BY_MODE = {
L9     "NORMAL": {"G": 12, "D": 8},
L10     "CAUTION": {"G": 10, "D": 8},
L11     "EMERG": {"G": 8,  "D": 8},
L12 }
L13
L14 # モード別のドリフト閾値（%）
L15 DRIFT_THRESHOLD_BY_MODE = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L16
L17 # モード別のTS（基本幅, 小数=割合）
L18 TS_BASE_BY_MODE = {"NORMAL": 0.15, "CAUTION": 0.13, "EMERG": 0.10}
L19 # 利益到達(+30/+60/+100%)時の段階タイト化（ポイント差）
L20 TS_STEP_DELTAS_PT = (3, 6, 8)
L21
L22 # Breadthの校正は N_G に連動（緊急解除=ceil(1.5*N_G), 通常復帰=3*N_G）
L23 N_G = COUNTS_BASE["G"]
L24 N_D = COUNTS_BASE["D"]
L25
```

## <drift.py>
```text
L1 import pandas as pd, yfinance as yf
L2 import numpy as np
L3 import requests
L4 import os
L5 import json
L6 import time
L7 from pathlib import Path
L8 import csv
L9 import config
L10
L11 # --- コンポジットDDのしきい値（G枠平均DD基準） ---
L12 CD_CAUTION = 0.10  # -10% で警戒モード
L13 CD_EMERG = 0.15  # -15% で緊急モード
L14
L15 MODE_LABELS_JA = {"NORMAL": "通常", "CAUTION": "警戒", "EMERG": "緊急"}
L16 MODE_EMOJIS = {"NORMAL": "🟢", "CAUTION": "⚠️", "EMERG": "🚨"}
L17 MODE_RANK = {"NORMAL": 0, "CAUTION": 1, "EMERG": 2}
L18
L19 # --- breadth utilities (factor parity) ---
L20 BENCH = "^GSPC"
L21 CAND_PRICE_MAX = 450.0
L22 RESULTS_DIR = "results"
L23 os.makedirs(RESULTS_DIR, exist_ok=True)
L24
L25 def _state_file():
L26     return str(Path(RESULTS_DIR) / "breadth_state.json")
L27
L28
L29 def _load_state_dict() -> dict:
L30     try:
L31         with open(_state_file()) as fh:
L32             data = json.load(fh)
L33         return data if isinstance(data, dict) else {}
L34     except Exception:
L35         return {}
L36
L37
L38 def _save_state_dict(state: dict):
L39     try:
L40         with open(_state_file(), "w") as fh:
L41             json.dump(state, fh)
L42     except Exception:
L43         pass
L44
L45
L46 def load_breadth_mode(default: str = "NORMAL") -> str:
L47     state = _load_state_dict()
L48     mode = state.get("breadth_mode", state.get("mode", default))
L49     return mode if mode in MODE_RANK else default
L50
L51
L52 def save_breadth_mode(mode: str):
L53     state = _load_state_dict()
L54     state["breadth_mode"] = mode
L55     _save_state_dict(state)
L56
L57
L58 def load_final_mode(default: str = "NORMAL") -> str:
L59     state = _load_state_dict()
L60     mode = state.get("final_mode", state.get("mode", default))
L61     return mode if mode in MODE_RANK else default
L62
L63
L64 def save_final_mode(mode: str):
L65     state = _load_state_dict()
L66     state["final_mode"] = mode
L67     state.setdefault("breadth_mode", state.get("breadth_mode", mode))
L68     state["mode"] = mode
L69     _save_state_dict(state)
L70
L71
L72 def _read_csv_list(fname):
L73     p = Path(__file__).with_name(fname)
L74     if not p.exists(): return []
L75     return pd.read_csv(p, header=None).iloc[:,0].astype(str).str.upper().tolist()
L76
L77
L78 def _load_universe():
L79     # exist + candidate を使用。candidate は価格上限で事前フィルタ
L80     exist = _read_csv_list("current_tickers.csv")
L81     cand  = _read_csv_list("candidate_tickers.csv")
L82     cand_info = yf.Tickers(" ".join(cand)) if cand else None
L83     cand_keep = []
L84     for t in cand:
L85         try:
L86             px = cand_info.tickers[t].fast_info.get("lastPrice", float("inf"))
L87         except Exception:
L88             px = float("inf")
L89         if pd.notna(px) and float(px) <= CAND_PRICE_MAX:
L90             cand_keep.append(t)
L91     tickers = sorted(set(exist + cand_keep))
L92     return exist, cand_keep, tickers
L93
L94
L95 def _fetch_prices_600d(tickers):
L96     data = yf.download(
L97         tickers + [BENCH],
L98         period="600d",
L99         auto_adjust=True,
L100         progress=False,
L101         threads=False,
L102     )
L103     close = data["Close"]
L104     px = close.dropna(how="all", axis=1).ffill(limit=2)
L105     spx = close[BENCH].reindex(px.index).ffill()
L106     return px, spx
L107
L108
L109 def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L110     # scorer.py の実装をそのまま移植（ベクトル化版）
L111     import numpy as np, pandas as pd
L112     if px is None or px.empty:
L113         return pd.Series(dtype=int)
L114     px = px.dropna(how="all", axis=1)
L115     if win_days and win_days > 0:
L116         px = px.tail(win_days)
L117     if px.empty:
L118         return pd.Series(dtype=int)
L119     # 欠損吸収
L120     px = px.ffill(limit=2)
L121     spx = spx.reindex(px.index).ffill()
L122
L123     ma50  = px.rolling(50,  min_periods=50).mean()
L124     ma150 = px.rolling(150, min_periods=150).mean()
L125     ma200 = px.rolling(200, min_periods=200).mean()
L126
L127     tt = (px > ma150)
L128     tt &= (px > ma200)
L129     tt &= (ma150 > ma200)
L130     tt &= (ma200 - ma200.shift(21) > 0)
L131     tt &= (ma50  > ma150)
L132     tt &= (ma50  > ma200)
L133     tt &= (px    > ma50)
L134
L135     lo252 = px.rolling(252, min_periods=252).min()
L136     hi252 = px.rolling(252, min_periods=252).max()
L137     tt &= (px.divide(lo252).sub(1.0) >= 0.30)
L138     tt &= (px >= (0.75 * hi252))
L139
L140     r12  = px.divide(px.shift(252)).sub(1.0)
L141     br12 = spx.divide(spx.shift(252)).sub(1.0)
L142     r1   = px.divide(px.shift(22)).sub(1.0)
L143     br1  = spx.divide(spx.shift(22)).sub(1.0)
L144     rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L145     tt &= (rs >= 0.10)
L146
L147     return tt.fillna(False).sum(axis=1).astype(int)
L148
L149
L150 def build_breadth_header():
L151     # factor._build_breadth_lead_lines と同一挙動
L152     exist, cand, tickers = _load_universe()
L153     if not tickers:
L154         return "", "NORMAL", 0
L155     px, spx = _fetch_prices_600d(tickers)
L156     win = int(os.getenv("BREADTH_CALIB_WIN_DAYS", "600"))
L157     C_ts = trend_template_breadth_series(px, spx, win_days=win)
L158     if C_ts.empty:
L159         return "", "NORMAL", 0
L160     warmup = int(os.getenv("BREADTH_WARMUP_DAYS","252"))
L161     base = C_ts.iloc[warmup:] if len(C_ts)>warmup else C_ts
L162     C_full = int(C_ts.iloc[-1])
L163
L164     q05 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_IN",  "0.05"))), nan=0.0))
L165     q20 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_OUT", "0.20"))), nan=0.0))
L166     q60 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_WARN_OUT",  "0.60"))), nan=0.0))
L167
L168     # G枠サイズ（Breadth基準）
L169     N_G = config.N_G
L170     th_in_rec   = max(N_G, q05)
L171     th_out_rec  = max(int(np.ceil(1.5*N_G)), q20)
L172     th_norm_rec = max(3*N_G, q60)
L173
L174     use_calib = os.getenv("BREADTH_USE_CALIB", "true").strip().lower() == "true"
L175     if use_calib:
L176         th_in, th_out, th_norm, th_src = th_in_rec, th_out_rec, th_norm_rec, "自動"
L177     else:
L178         th_in   = int(os.getenv("GTT_EMERG_IN", str(N_G)))
L179         th_out  = int(os.getenv("GTT_EMERG_OUT", str(int(1.5*N_G))))
L180         th_norm = int(os.getenv("GTT_CAUTION_OUT", str(3*N_G)))
L181         th_src = "手動"
L182
L183     prev = load_breadth_mode("NORMAL")
L184     if   prev == "EMERG":
L185         mode = "EMERG"   if (C_full < th_out)  else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L186     elif prev == "CAUTION":
L187         mode = "CAUTION" if (C_full < th_norm) else "NORMAL"
L188     else:
L189         mode = "EMERG"   if (C_full < th_in)   else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L190     save_breadth_mode(mode)
L191
L192     mode_ja, emoji = MODE_LABELS_JA.get(mode, mode), MODE_EMOJIS.get(mode, "ℹ️")
L193     eff_days = len(base)
L194
L195     lead_lines = [
L196         f"{emoji} *現在モード: {mode_ja}*",
L197         f"テンプレ合格本数: *{C_full}本*",
L198         "しきい値（{0}）".format(th_src),
L199         f"  ・緊急入り: <{th_in}本",
L200         f"  ・緊急解除: ≥{th_out}本",
L201         f"  ・通常復帰: ≥{th_norm}本",
L202         f"参考指標（過去~{win}営業日, 有効={eff_days}日）",
L203         f"  ・下位5%: {q05}本",
L204         f"  ・下位20%: {q20}本",
L205         f"  ・60%分位: {q60}本",
L206     ]
L207     return "```" + "\n".join(lead_lines) + "```", mode, C_full
L208
L209
L210 def _load_growth_symbols(portfolio: list[dict]) -> list[str]:
L211     growth = []
L212     for row in portfolio:
L213         bucket = str(row.get("bucket", "")).strip().upper()
L214         if bucket == "G":
L215             sym = str(row.get("symbol", "")).strip().upper()
L216             if sym:
L217                 growth.append(sym)
L218     return sorted(set(growth))
L219
L220
L221 def _format_mode(mode: str) -> str:
L222     upper = (mode or "NORMAL").upper()
L223     return f"{MODE_EMOJIS.get(upper, 'ℹ️')} {MODE_LABELS_JA.get(upper, upper)}"
L224
L225
L226 def _gcd_mode_today(g_syms: list[str]) -> tuple[str, float]:
L227     """G枠の等加重コンポジットDD（Low/Peak60）を算出しモードを返す。"""
L228
L229     if not g_syms:
L230         print("📝 audit[G-CD details]: G銘柄が空のため算出対象がありません")
L231         print("📝 audit[G-CD summary]: drawdown=0.00% => NORMAL")
L232         return "NORMAL", 0.0
L233
L234     try:
L235         df = yf.download(
L236             g_syms,
L237             period="100d",
L238             interval="1d",
L239             auto_adjust=False,
L240             progress=False,
L241         )
L242     except Exception as e:
L243         print(f"⚠️ audit[G-CD details]: 株価データ取得に失敗しました ({e})")
L244         print("📝 audit[G-CD summary]: drawdown=0.00% => NORMAL")
L245         return "NORMAL", 0.0
L246
L247     if not isinstance(df, pd.DataFrame) or df.empty:
L248         print("⚠️ audit[G-CD details]: 株価データが空のため算出できません")
L249         print("📝 audit[G-CD summary]: drawdown=0.00% => NORMAL")
L250         return "NORMAL", 0.0
L251
L252     try:
L253         hi_all = df["High"] if "High" in df.columns else None
L254         lo_all = df["Low"] if "Low" in df.columns else None
L255     except Exception as e:
L256         print(f"⚠️ audit[G-CD details]: High/Low データ取得に失敗しました ({e})")
L257         print("📝 audit[G-CD summary]: drawdown=0.00% => NORMAL")
L258         return "NORMAL", 0.0
L259
L260     if hi_all is None or lo_all is None:
L261         print("⚠️ audit[G-CD details]: High/Low データが欠落しています")
L262         print("📝 audit[G-CD summary]: drawdown=0.00% => NORMAL")
L263         return "NORMAL", 0.0
L264
L265     if isinstance(hi_all, pd.Series):
L266         hi_all = hi_all.to_frame(name=g_syms[0])
L267     if isinstance(lo_all, pd.Series):
L268         lo_all = lo_all.to_frame(name=g_syms[0])
L269
L270     if hi_all.empty or lo_all.empty:
L271         print("⚠️ audit[G-CD details]: High/Low データが空のため算出できません")
L272         print("📝 audit[G-CD summary]: drawdown=0.00% => NORMAL")
L273         return "NORMAL", 0.0
L274
L275     roll_hi = hi_all.rolling(60, min_periods=20).max()
L276     if roll_hi.empty or lo_all.empty:
L277         print("⚠️ audit[G-CD details]: Peak60/Low データが揃いません")
L278         print("📝 audit[G-CD summary]: drawdown=0.00% => NORMAL")
L279         return "NORMAL", 0.0
L280
L281     peak_row = roll_hi.iloc[-1]
L282     low_row = lo_all.iloc[-1]
L283
L284     details: list[tuple[str, float, float, float, float]] = []
L285     for sym in g_syms:
L286         p = float(peak_row.get(sym, float("nan"))) if hasattr(peak_row, "get") else float("nan")
L287         lt = float(low_row.get(sym, float("nan"))) if hasattr(low_row, "get") else float("nan")
L288         if pd.notna(p) and p > 0 and pd.notna(lt) and lt > 0:
L289             ratio = lt / p
L290             ddpct = (1.0 - ratio) * 100.0
L291             details.append((sym, p, lt, ratio, ddpct))
L292
L293     if not details:
L294         print("⚠️ audit[G-CD details]: 有効な銘柄データがありません")
L295         print("📝 audit[G-CD summary]: drawdown=0.00% => NORMAL")
L296         return "NORMAL", 0.0
L297
L298     details.sort(key=lambda x: x[4], reverse=True)
L299     today = pd.Timestamp.now(tz="America/New_York").date().isoformat()
L300     print(f"📝 audit[G-CD details] {today}  G={len(g_syms)}")
L301     print("  SYMBOL        Peak60(H)     Low(T)     ratio    DD%")
L302     for sym, peak, low, ratio, ddpct in details:
L303         print(f"  {sym:<8}  {peak:>12.6g}  {low:>10.6g}   {ratio:>6.3f}  {ddpct:>6.2f}")
L304
L305     avg_ratio = float(np.mean([r for _, _, _, r, _ in details]))
L306     gcd_pct = max(0.0, (1.0 - avg_ratio) * 100.0)
L307     if gcd_pct >= CD_EMERG * 100:
L308         mode = "EMERG"
L309     elif gcd_pct >= CD_CAUTION * 100:
L310         mode = "CAUTION"
L311     else:
L312         mode = "NORMAL"
L313
L314     print(
L315         "📝 audit[G-CD summary]: "
L316         f"avg_low/peak60={avg_ratio:.4f}  drawdown={gcd_pct:.2f}%  => {mode}"
L317     )
L318     return mode, gcd_pct
L319 # Debug flag
L320 debug_mode = False  # set to True for detailed output
L321
L322 # --- Finnhub settings & helper ---
L323 FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
L324 if not FINNHUB_API_KEY:
L325     raise ValueError("FINNHUB_API_KEY not set (環境変数が未設定です)")
L326
L327 RATE_LIMIT = 55  # requests per minute (free tier is 60)
L328 call_times = []
L329
L330
L331 def finnhub_get(endpoint, params):
L332     """Call Finnhub API with basic rate limiting."""
L333     now = time.time()
L334     cutoff = now - 60
L335     while call_times and call_times[0] < cutoff:
L336         call_times.pop(0)
L337     if len(call_times) >= RATE_LIMIT:
L338         sleep_time = 60 - (now - call_times[0])
L339         time.sleep(sleep_time)
L340     params = {**params, "token": FINNHUB_API_KEY}
L341     try:
L342         resp = requests.get(f"https://finnhub.io/api/v1/{endpoint}", params=params)
L343         resp.raise_for_status()
L344         data = resp.json()
L345     except requests.exceptions.JSONDecodeError as e:
L346         print(f"⚠️ Finnhub API JSON decode error: {e}")
L347         return {}
L348     except Exception as e:
L349         print(f"⚠️ Finnhub API error: {e}")
L350         return {}
L351     call_times.append(time.time())
L352     return data
L353
L354
L355 def fetch_price(symbol):
L356     try:
L357         data = finnhub_get("quote", {"symbol": symbol})
L358         price = data.get("c")
L359         return float(price) if price not in (None, 0) else float("nan")
L360     except Exception:
L361         return float("nan")
L362
L363
L364 def fetch_vix_ma5():
L365     """Retrieve VIX 5-day moving average via yfinance."""
L366     try:
L367         vix = (
L368             yf.download("^VIX", period="7d", interval="1d", progress=False, auto_adjust=False)["Close"]
L369             .dropna()
L370             .tail(5)
L371         )
L372         if len(vix) < 5:
L373             return float("nan")
L374         return vix.mean().item()
L375     except Exception:
L376         return float("nan")
L377
L378
L379
L380 # === Minervini-like sell signals ===
L381 def _yf_df(sym, period="6mo"):
L382     """日足/MA/出来高平均を取得。欠損時は None。"""
L383     try:
L384         df = yf.download(sym, period=period, interval="1d", auto_adjust=False, progress=False)
L385         if df is None or df.empty:
L386             return None
L387         return df.dropna().assign(
L388             ma20=lambda d: d["Close"].rolling(20).mean(),
L389             ma50=lambda d: d["Close"].rolling(50).mean(),
L390             vol50=lambda d: d["Volume"].rolling(50).mean(),
L391         )
L392     except Exception:
L393         return None
L394
L395
L396 def _scalar(row, col):
L397     """Series/npスカラ→Pythonスカラ化（NaNはNaNのまま）"""
L398     try:
L399         v = row[col]
L400         if hasattr(v, "item"):
L401             try:
L402                 v = v.item()
L403             except Exception:
L404                 pass
L405         return v
L406     except Exception:
L407         return float("nan")
L408
L409
L410 def _is_strict_down(seq):
L411     """数列が厳密に連続で切り下がっているか（len>=4を想定）。NaN含みはFalse。"""
L412     try:
L413         xs = [float(x) for x in seq]
L414         if any(pd.isna(x) for x in xs) or len(xs) < 4:
L415             return False
L416         return all(b < a for a, b in zip(xs[:-1], xs[1:]))
L417     except Exception:
L418         return False
L419
L420
L421 def _signals_for_day(df, idx):
L422     """df.loc[idx] 1日分に対しシグナル配列を返す（値動き/出来高ベースのみ）。"""
L423     try:
L424         sig = []
L425         d = df.loc[idx]
L426         close = _scalar(d, "Close")
L427         ma20 = _scalar(d, "ma20")
L428         ma50 = _scalar(d, "ma50")
L429         vol = _scalar(d, "Volume")
L430         vol50 = _scalar(d, "vol50")
L431
L432         if pd.notna(close) and pd.notna(ma20) and close < ma20:
L433             sig.append("20DMA↓")
L434
L435         if all(pd.notna(x) for x in (close, ma50, vol, vol50)) and close < ma50 and vol > 1.5 * vol50:
L436             sig.append("50DMA↓(大商い)")
L437
L438         last4 = df.loc[:idx].tail(4)
L439         last10 = df.loc[:idx].tail(10)
L440
L441         lows_desc = _is_strict_down(last4["Low"].tolist()) if last4["Low"].notna().all() else False
L442         reds = int((last10["Close"] < last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L443         if lows_desc or reds > 5:
L444             sig.append("連続安値/陰線優勢")
L445
L446         ups = int((last10["Close"] > last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L447         if ups >= 7:
L448             sig.append("上げ偏重(>70%)")
L449
L450         last15 = df.loc[:idx].tail(15)
L451         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L452         if pd.notna(base0) and pd.notna(close) and base0 != 0 and (close / base0 - 1) >= 0.25:
L453             sig.append("+25%/15日内")
L454
L455         if len(df.loc[:idx]) >= 2:
L456             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L457             t1_high = _scalar(t1, "High")
L458             t0_open = _scalar(t0, "Open")
L459             t0_close = _scalar(t0, "Close")
L460             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L461                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L462                     sig.append("GU→陰線")
L463         return sig
L464     except Exception:
L465         return []
L466
L467
L468 def scan_sell_signals(symbols, lookback_days=5):
L469     """
L470     直近 lookback_days 日のうち一度でもシグナルが出たら {sym: [(date,[signals]),...]} を返す。
L471     日付は YYYY-MM-DD。Slackで列挙する。
L472     """
L473     out = {}
L474     for s in symbols:
L475         df = _yf_df(s)
L476         if df is None or len(df) < 60:
L477             continue
L478         alerts = []
L479         for idx in df.tail(lookback_days).index:
L480             tags = _signals_for_day(df, idx)
L481             if tags:
L482                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L483         if alerts:
L484             out[s] = alerts
L485     return out
L486
L487
L488 def load_portfolio():
L489     tickers_path = Path(__file__).with_name("current_tickers.csv")
L490     with tickers_path.open() as f:
L491         rows = [row for row in csv.reader(f) if row and row[0].strip()]
L492     n = len(rows)
L493     portfolio = []
L494     for row in rows:
L495         sym = row[0].strip().upper()
L496         qty = int(row[1]) if len(row) > 1 and row[1].strip() else 0
L497         bucket = row[2].strip().upper() if len(row) > 2 else ""
L498         entry = {
L499             "symbol": sym,
L500             "shares": qty,
L501             "target_ratio": 1 / n if n else 0.0,
L502             "bucket": bucket,
L503         }
L504         portfolio.append(entry)
L505     return portfolio
L506
L507
L508 def compute_threshold():
L509     vix_ma5 = fetch_vix_ma5()
L510     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L511     return vix_ma5, drift_threshold
L512
L513
L514 def compute_threshold_by_mode(mode: str):
L515     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L516     m = (mode or "NORMAL").upper()
L517     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L518     drift_map = config.DRIFT_THRESHOLD_BY_MODE
L519     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L520
L521
L522 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L523     """
L524     モード別の推奨保有数 (G_count, D_count, cash_slots) を返す。
L525     cash_slotsは「外すG枠の数」（各枠=5%）。
L526     NORMAL: G12/D8/現金化0, CAUTION: G10/D8/現金化2, EMERG: G8/D8/現金化4
L527     """
L528     m = (mode or "NORMAL").upper()
L529     base = config.COUNTS_BY_MODE.get("NORMAL", config.COUNTS_BASE)
L530     now  = config.COUNTS_BY_MODE.get(m, base)
L531     cash_slots = max(0, base["G"] - now["G"])
L532     return now["G"], now["D"], cash_slots
L533
L534
L535 def build_dataframe(portfolio):
L536     for stock in portfolio:
L537         price = fetch_price(stock["symbol"])
L538         stock["price"] = price
L539         stock["value"] = price * stock["shares"]
L540
L541     df = pd.DataFrame(portfolio)
L542     total_value = df["value"].sum()
L543     df["current_ratio"] = df["value"] / total_value
L544     df["drift"] = df["current_ratio"] - df["target_ratio"]
L545     df["drift_abs"] = df["drift"].abs()
L546     total_drift_abs = df["drift_abs"].sum()
L547     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L548     df["adjustable"] = (
L549         (df["adjusted_ratio"] * total_value) >= df["price"]
L550     ) & df["price"].notna() & df["price"].gt(0)
L551     return df, total_value, total_drift_abs
L552
L553
L554 def simulate(df, total_value, total_drift_abs, drift_threshold):
L555     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L556     if alert:
L557         df["trade_shares"] = df.apply(
L558             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L559             if r["adjustable"] and r["price"] > 0 else 0,
L560             axis=1,
L561         )
L562         df["new_shares"] = df["shares"] + df["trade_shares"]
L563         df["new_value"] = df["new_shares"] * df["price"]
L564         new_total_value = df["new_value"].sum()
L565         df["simulated_ratio"] = df["new_value"] / new_total_value
L566         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L567         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L568     else:
L569         df["trade_shares"] = np.nan
L570         df["new_shares"] = np.nan
L571         df["new_value"] = np.nan
L572         new_total_value = np.nan
L573         df["simulated_ratio"] = np.nan
L574         df["simulated_drift_abs"] = np.nan
L575         simulated_total_drift_abs = np.nan
L576     return df, alert, new_total_value, simulated_total_drift_abs
L577
L578
L579 def prepare_summary(df, total_drift_abs, alert):
L580     summary = {
L581         "symbol": "合計",
L582         "shares": df["shares"].sum(),
L583         "value": df["value"].sum(),
L584         "current_ratio": np.nan,
L585         "drift_abs": total_drift_abs,
L586     }
L587     if alert:
L588         summary["trade_shares"] = np.nan
L589     # Sort details by evaluation value descending before appending summary
L590     df = df.sort_values(by="value", ascending=False)
L591     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L592     if alert:
L593         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L594         df_small = df[cols].copy()
L595         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L596     else:
L597         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L598         df_small = df[cols].copy()
L599         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L600     return df_small
L601
L602
L603 def currency(x):
L604     return f"${x:,.0f}" if pd.notnull(x) else ""
L605
L606
L607 def formatters_for(alert):
L608     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L609     if alert:
L610         formatters["Δqty"] = "{:.0f}".format
L611     return formatters
L612
L613
L614 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L615     header = (
L616         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L617         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L618         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L619     )
L620     if alert:
L621         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L622         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L623     else:
L624         header += "✅ アラートなし\n"
L625     # ★ 追記: TSルール（G/D共通）と推奨保有数
L626     # TS(基本)をモードで動的表示。段階TSは「基本から -3/-6/-8 pt」固定。
L627     base_ts = config.TS_BASE_BY_MODE.get(mode.upper(), config.TS_BASE_BY_MODE["NORMAL"])
L628     d1, d2, d3 = config.TS_STEP_DELTAS_PT
L629     ts_line = f"*🛡 TS:* 基本 -{base_ts*100:.0f}% / +30%→-{max(base_ts*100 - d1, 0):.0f}% / +60%→-{max(base_ts*100 - d2, 0):.0f}% / +100%→-{max(base_ts*100 - d3, 0):.0f}%\n"
L630     header += ts_line
L631     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L632     cash_pct = cash_slots * (100 / (config.TOTAL_TARGETS))  # 1枠=総数分割の%（20銘柄なら5%）
L633     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct:.0f}%）\n"
L634     return header
L635
L636
L637 def send_slack(text):
L638     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L639     if not SLACK_WEBHOOK_URL:
L640         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L641     payload = {"text": text}
L642     try:
L643         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L644         resp.raise_for_status()
L645         print("✅ Slack（Webhook）へ送信しました")
L646     except Exception as e:
L647         print(f"⚠️ Slack通知エラー: {e}")
L648
L649
L650 def send_debug(debug_text):
L651     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L652     if not SLACK_WEBHOOK_URL:
L653         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L654     debug_payload = {"text": "```" + debug_text + "```"}
L655     try:
L656         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L657         resp.raise_for_status()
L658         print("✅ Debug情報をSlackに送信しました")
L659     except Exception as e:
L660         print(f"⚠️ Slack通知エラー: {e}")
L661
L662
L663 def main():
L664     portfolio = load_portfolio()
L665     symbols = [r["symbol"] for r in portfolio]
L666     g_syms = _load_growth_symbols(portfolio)
L667     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L668
L669     breadth_block, breadth_mode, breadth_score = build_breadth_header()
L670     gcd_mode, gcd_pct = _gcd_mode_today(g_syms)
L671
L672     prev_final = load_final_mode("NORMAL")
L673     gcd_rank = MODE_RANK.get(gcd_mode, 0)
L674     breadth_rank = MODE_RANK.get(breadth_mode, 0)
L675     prev_rank = MODE_RANK.get(prev_final, 0)
L676     if max(gcd_rank, breadth_rank) > prev_rank:
L677         final_mode = gcd_mode if gcd_rank >= breadth_rank else breadth_mode
L678     elif gcd_rank < prev_rank and breadth_rank < prev_rank:
L679         final_mode = gcd_mode if gcd_rank >= breadth_rank else breadth_mode
L680     else:
L681         final_mode = prev_final
L682     save_final_mode(final_mode)
L683
L684     cash_ratio, drift_threshold = compute_threshold_by_mode(final_mode)
L685
L686     df, total_value, total_drift_abs = build_dataframe(portfolio)
L687     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L688         df, total_value, total_drift_abs, drift_threshold
L689     )
L690     df_small = prepare_summary(df, total_drift_abs, alert)
L691     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L692         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L693         if col_sym:
L694             alert_keys = {str(k) for k in sell_alerts.keys()}
L695             df_small[col_sym] = df_small[col_sym].astype(str)
L696             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L697             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L698             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L699     formatters = formatters_for(alert)
L700     header_core = build_header(
L701         final_mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L702     )
L703
L704     summary_lines = [
L705         (
L706             f"① GコンポジットDD: -{gcd_pct:.1f}%"
L707             f"（基準: C={CD_CAUTION*100:.0f}% / E={CD_EMERG*100:.0f}%） 判定: {_format_mode(gcd_mode)}"
L708         ),
L709         f"② Breadth: {_format_mode(breadth_mode)} （テンプレ合格本数: {breadth_score}）",
L710         f"総合（OR悪化/AND回復）: {_format_mode(final_mode)}",
L711     ]
L712     prepend_block = "\n".join(summary_lines)
L713
L714     if breadth_block:
L715         if breadth_block.startswith("```"):
L716             inner = breadth_block[len("```") :]
L717             if inner.startswith("\n"):
L718                 inner = inner[1:]
L719             if inner.endswith("```"):
L720                 inner = inner[: -len("```")]
L721             inner = inner.strip("\n")
L722             inner_lines = [line for line in inner.splitlines() if "現在モード" not in line]
L723             cleaned_inner = "\n".join(inner_lines)
L724             if cleaned_inner:
L725                 new_inner = prepend_block + "\n" + cleaned_inner
L726             else:
L727                 new_inner = prepend_block
L728             breadth_block = "```\n" + new_inner + "\n```"
L729         else:
L730             lines = [line for line in breadth_block.splitlines() if "現在モード" not in line]
L731             cleaned_block = "\n".join(lines)
L732             breadth_block = prepend_block + ("\n" + cleaned_block if cleaned_block else "")
L733         header = breadth_block + "\n" + header_core
L734     else:
L735         header = prepend_block + "\n" + header_core
L736     if sell_alerts:
L737         def fmt_pair(date_tags):
L738             date, tags = date_tags
L739             return f"{date}:" + "・".join(tags)
L740         listed = []
L741         for t, arr in sell_alerts.items():
L742             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L743         hits = ", ".join(listed)
L744         if "✅ アラートなし" in header:
L745             header = header.replace(
L746                 "✅ アラートなし",
L747                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L748             )
L749         else:
L750             header += f"\n🟥 {hits}"
L751     table_text = df_small.to_string(formatters=formatters, index=False)
L752     send_slack(header + "\n```" + table_text + "```")
L753
L754     if debug_mode:
L755         debug_cols = [
L756             "symbol",
L757             "shares",
L758             "price",
L759             "value",
L760             "current_ratio",
L761             "drift",
L762             "drift_abs",
L763             "adjusted_ratio",
L764             "adjustable",
L765             "trade_shares",
L766             "new_shares",
L767             "new_value",
L768             "simulated_ratio",
L769             "simulated_drift_abs",
L770         ]
L771         debug_text = (
L772             "=== DEBUG: full dataframe ===\n"
L773             + df[debug_cols].to_string()
L774             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L775             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L776         )
L777         print("\n" + debug_text)
L778         send_debug(debug_text)
L779
L780
L781 if __name__ == "__main__":
L782     main()
L783
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（コンボ：GコンポジットDD × ブレッドス）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）*
L20
L21 ### ① GコンポジットDD（Growthのみ）
L22 - 対象（Growthの定義）：当日保有銘柄のうち **β ≥ -0.6** を Growth とみなす（Defenseは無視）
L23 - 判定：各銘柄の「今日の安値 / 直近60日高値」から等加重平均を算出し、平均ドローダウン率を評価
L24 - 閾値：
L25   - 平均DD ≥ 15% → ①=EMERG
L26   - 平均DD ≥ 10% → ①=CAUTION
L27   - それ未満 → ①=NORMAL
L28 - 補足：Slackログとは別に、システムログへ銘柄別のPeak60・Low・DD%を降順で出力
L29
L30 ### ② ブレッドス（trend_template 合格本数）
L31 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L32 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L33   - 緊急入り: max(q05, 12本)
L34   - 緊急解除: max(q20, 18本)
L35   - 通常復帰: max(q60, 36本)
L36 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L37
L38 ### コンボルール
L39 - **悪化（ダウングレード）**：
L40   final_mode = max(mode①, mode②)
L41   - 例：①=CAUTION, ②=NORMAL → final=CAUTION
L42   - 例：①=EMERG, ②=CAUTION → final=EMERG
L43
L44 - **回復（アップグレード）**：
L45   final_mode を1段階下げるには、mode① と mode② がともに下位モードに揃った場合のみ
L46   - 例：EMERG→CAUTION は ①=CAUTION **かつ** ②=CAUTION
L47   - 例：CAUTION→NORMAL は ①=NORMAL **かつ** ②=NORMAL
L48
L49 > 直感フレーズ：**「悪化はどちらか赤で赤、回復は両方青で青」**
L50
L51 ---
L52
L53 ## モード別設定（現金・ドリフト・保有数）
L54
L55 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L56 |--------------|----------|-------------------|----------|------------|-------------|------|
L57 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L58 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% |
L59 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% |
L60
L61 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L62 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L63 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L64
L65 ---
L66
L67 ## 新規買付
L68 - **新規INは等分比率（=5%）の半分まで**を上限。  
L69 - 追加補充や半戻し買付も同じ上限に従う。
L70
L71 ---
L72
L73 ## 半戻し（リバランス）
L74 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L75 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L76 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L77
L78 ---
L79
L80 ## モード移行の実務手順
L81 - モードが変わったら、**MMF≒現金**として扱い、Growth枠数だけ調整：  
L82   1. **Gを削る**（CAUTION/EMERG）：⭐️低スコアのGから順に外し、`current_tickers.csv` から行削除（=現金化）。  
L83   2. **現金として保持**。  
L84   3. **NORMAL復帰時の補充**：`current_tickers.csv` に銘柄を追加（スコア上位から）。以降は日次ドリフト/TSルールに従う。  
L85 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて均等比率を再計算。
L86
L87 ---
L88
L89 ## 入替銘柄選定
L90 - **ファクター分散最適化手法を用いて日次でスコア集計**し、**スコア上位からIN/OUT**を決定。  
L91 - 参考：Oxfordキャピタル、Alpha Investor、Motley Fool、moomooスクリーニング等。  
L92 - 年間NISA枠はGrowth群から低ボラ銘柄を選定し利用（長期保持に固執しない）。
L93
L94 ---
L95
L96 ## 実行タイミング
L97 - 判定：米国市場終値直後  
L98 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 20銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから価格を取得（レジームは trend_template 本数に基づく（基準 N_G=12））。
L6   - 緊急入り: `max(q05, 12本)`
L7   - 緊急解除: `max(q20, 18本)` （ceil(1.5*12)）
L8   - 通常復帰: `max(q60, 36本)` （3*12）
L9
L10 ## 定数・設定
L11 - `FINNHUB_API_KEY` / `SLACK_WEBHOOK_URL` を環境変数から取得。
L12 - 無料枠を考慮したAPIレート制限: `RATE_LIMIT = 55`。
L13 - デバッグ出力用フラグ `debug_mode`。
L14
L15 ## 主な関数
L16 ### finnhub_get
L17 - 基本的なレート制限付きでFinnhub APIを呼び出し、JSONレスポンスを辞書で返す。
L18
L19 ### fetch_price
L20 - `quote` エンドポイントで株価を取得し、失敗時は `NaN` を返す。
L21
L22 ### fetch_vix_ma5
L23 - yfinanceでVIX終値を取得する関数。将来再利用のため残置。
L24
L25 ### load_portfolio
L26 - `current_tickers.csv` から銘柄と保有株数を読み込み、目標比率4%を付与したリストを生成。
L27
L28 ### compute_threshold_by_mode
L29 - モード(NORMAL/CAUTION/EMERG) に応じて **12% / 14% / 停止(∞)** を返す（`config.py` を参照）。
L30
L31 ### build_dataframe
L32 - 各銘柄の評価額や現在比率、ドリフト、半戻し後比率(`adjusted_ratio`)を計算しDataFrame化。
L33
L34 ### simulate
L35 - ドリフト合計が閾値を超えた場合、半戻し後の売買株数と新比率を試算し、シミュレート後ドリフトを返す。
L36
L37 ### prepare_summary
L38 - 評価額順に並べ替えた後、合計行を付与してSlack表示用テーブルを作成。
L39
L40 ### formatters_for / currency
L41 - 通貨・比率・株数の表示フォーマットを定義。
L42
L43 ### build_header
L44 - 現金保有率・閾値・ドリフト値およびアラート有無をSlackメッセージ用ヘッダに整形。TS(基本)はモード別に `config.py` から動的表示し、段階TSは base から -3/-6/-8 pt。
L45
L46 ### send_slack / send_debug
L47 - 通常通知およびデバッグ詳細をSlack Webhookへ送信。
L48
L49 ### main
L50 - 上記関数を順に呼び出し、日次ドリフトチェックの一連処理を実行。
L51
L52 ## 実行フロー
L53 1. `load_portfolio` で現ポートフォリオを読み込む。
L54 2. `build_breadth_header` でモードを取得し、`compute_threshold_by_mode` で現金保有率とドリフト閾値を決定。
L55 3. `build_dataframe` で現在比率とドリフトを計算。
L56 4. `simulate` で閾値超過時の半戻し案を試算。
L57 5. `prepare_summary` と `build_header` で通知本文とテーブルを構築。
L58 6. `send_slack` で結果を送信。`debug_mode` がTrueなら `send_debug` も併用。
```
