# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: drift.py, .github/workflows/daily-report.yml, documents/README.md, documents/drift_design.md
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <drift.py>
```text
L1 import pandas as pd, yfinance as yf
L2 import numpy as np
L3 import requests
L4 import os
L5 import csv
L6 import time
L7 from pathlib import Path
L8
L9 # Debug flag
L10 debug_mode = False  # set to True for detailed output
L11
L12 # --- Finnhub settings & helper ---
L13 FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
L14 if not FINNHUB_API_KEY:
L15     raise ValueError("FINNHUB_API_KEY not set (環境変数が未設定です)")
L16
L17 RATE_LIMIT = 55  # requests per minute (free tier is 60)
L18 call_times = []
L19
L20
L21 def finnhub_get(endpoint, params):
L22     """Call Finnhub API with basic rate limiting."""
L23     now = time.time()
L24     cutoff = now - 60
L25     while call_times and call_times[0] < cutoff:
L26         call_times.pop(0)
L27     if len(call_times) >= RATE_LIMIT:
L28         sleep_time = 60 - (now - call_times[0])
L29         time.sleep(sleep_time)
L30     params = {**params, "token": FINNHUB_API_KEY}
L31     try:
L32         resp = requests.get(f"https://finnhub.io/api/v1/{endpoint}", params=params)
L33         resp.raise_for_status()
L34         data = resp.json()
L35     except requests.exceptions.JSONDecodeError as e:
L36         print(f"⚠️ Finnhub API JSON decode error: {e}")
L37         return {}
L38     except Exception as e:
L39         print(f"⚠️ Finnhub API error: {e}")
L40         return {}
L41     call_times.append(time.time())
L42     return data
L43
L44
L45 def fetch_price(symbol):
L46     try:
L47         data = finnhub_get("quote", {"symbol": symbol})
L48         price = data.get("c")
L49         return float(price) if price not in (None, 0) else float("nan")
L50     except Exception:
L51         return float("nan")
L52
L53
L54 def fetch_vix_ma5():
L55     """Retrieve VIX 5-day moving average via yfinance."""
L56     try:
L57         vix = (
L58             yf.download("^VIX", period="7d", interval="1d", progress=False, auto_adjust=False)["Close"]
L59             .dropna()
L60             .tail(5)
L61         )
L62         if len(vix) < 5:
L63             return float("nan")
L64         return vix.mean().item()
L65     except Exception:
L66         return float("nan")
L67
L68
L69 # === Minervini-like sell signals ===
L70 def _yf_df(sym, period="6mo"):
L71     """日足/MA/出来高平均を取得。欠損時は None。"""
L72     try:
L73         df = yf.download(sym, period=period, interval="1d", auto_adjust=False, progress=False)
L74         if df is None or df.empty:
L75             return None
L76         return df.dropna().assign(
L77             ma20=lambda d: d["Close"].rolling(20).mean(),
L78             ma50=lambda d: d["Close"].rolling(50).mean(),
L79             vol50=lambda d: d["Volume"].rolling(50).mean(),
L80         )
L81     except Exception:
L82         return None
L83
L84
L85 def _scalar(row, col):
L86     """Series/npスカラ→Pythonスカラ化（NaNはNaNのまま）"""
L87     try:
L88         v = row[col]
L89         if hasattr(v, "item"):
L90             try:
L91                 v = v.item()
L92             except Exception:
L93                 pass
L94         return v
L95     except Exception:
L96         return float("nan")
L97
L98
L99 def _is_strict_down(seq):
L100     """数列が厳密に連続で切り下がっているか（len>=4を想定）。NaN含みはFalse。"""
L101     try:
L102         xs = [float(x) for x in seq]
L103         if any(pd.isna(x) for x in xs) or len(xs) < 4:
L104             return False
L105         return all(b < a for a, b in zip(xs[:-1], xs[1:]))
L106     except Exception:
L107         return False
L108
L109
L110 def _signals_for_day(df, idx):
L111     """df.loc[idx] 1日分に対しシグナル配列を返す（値動き/出来高ベースのみ）。"""
L112     try:
L113         sig = []
L114         d = df.loc[idx]
L115         close = _scalar(d, "Close")
L116         open_ = _scalar(d, "Open")
L117         ma20 = _scalar(d, "ma20")
L118         ma50 = _scalar(d, "ma50")
L119         vol = _scalar(d, "Volume")
L120         vol50 = _scalar(df.iloc[-1], "vol50")
L121         if any(pd.isna(x) for x in (close, open_, vol, vol50)):
L122             return sig
L123         if pd.notna(ma20) and close < ma20:
L124             sig.append("20DMA↓")
L125         if pd.notna(ma50) and close < ma50 and vol > 1.5 * vol50:
L126             sig.append("50DMA↓(大商い)")
L127
L128         last4 = df.loc[:idx].tail(4)
L129         lows_desc = _is_strict_down(last4["Low"].tolist())
L130         last10 = df.loc[:idx].tail(10)
L131         reds = int((last10["Close"] < last10["Open"]).sum())
L132         if lows_desc or reds > 5:
L133             sig.append("連続安値/陰線優勢")
L134
L135         ups = int((last10["Close"] > last10["Open"]).sum())
L136         if ups >= 7:
L137             sig.append("上げ偏重(>70%)")
L138
L139         last15 = df.loc[:idx].tail(15)
L140         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L141         if pd.notna(base0) and base0 != 0 and (close / base0 - 1) >= 0.25:
L142             sig.append("+25%/15日内")
L143
L144         if len(df.loc[:idx]) >= 2:
L145             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L146             t1_high = _scalar(t1, "High")
L147             t0_open = _scalar(t0, "Open")
L148             t0_close = _scalar(t0, "Close")
L149             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L150                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L151                     sig.append("GU→陰線")
L152         return sig
L153     except Exception:
L154         return []
L155
L156
L157 def scan_sell_signals(symbols, lookback_days=5):
L158     """
L159     直近 lookback_days 日のうち一度でもシグナルが出たら {sym: [(date,[signals]),...]} を返す。
L160     日付は YYYY-MM-DD。Slackで列挙する。
L161     """
L162     out = {}
L163     for s in symbols:
L164         df = _yf_df(s)
L165         if df is None or len(df) < 60:
L166             continue
L167         alerts = []
L168         for idx in df.tail(lookback_days).index:
L169             tags = _signals_for_day(df, idx)
L170             if tags:
L171                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L172         if alerts:
L173             out[s] = alerts
L174     return out
L175
L176
L177 def load_portfolio():
L178     tickers_path = Path(__file__).with_name("current_tickers.csv")
L179     with tickers_path.open() as f:
L180         reader = list(csv.reader(f))
L181     return [
L182         {"symbol": sym.strip().upper(), "shares": int(qty), "target_ratio": 1 / len(reader)}
L183         for sym, qty in reader
L184     ]
L185
L186
L187 def compute_threshold():
L188     vix_ma5 = fetch_vix_ma5()
L189     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L190     return vix_ma5, drift_threshold
L191
L192
L193 def build_dataframe(portfolio):
L194     for stock in portfolio:
L195         price = fetch_price(stock["symbol"])
L196         stock["price"] = price
L197         stock["value"] = price * stock["shares"]
L198
L199     df = pd.DataFrame(portfolio)
L200     total_value = df["value"].sum()
L201     df["current_ratio"] = df["value"] / total_value
L202     df["drift"] = df["current_ratio"] - df["target_ratio"]
L203     df["drift_abs"] = df["drift"].abs()
L204     total_drift_abs = df["drift_abs"].sum()
L205     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L206     df["adjustable"] = (
L207         (df["adjusted_ratio"] * total_value) >= df["price"]
L208     ) & df["price"].notna() & df["price"].gt(0)
L209     return df, total_value, total_drift_abs
L210
L211
L212 def simulate(df, total_value, total_drift_abs, drift_threshold):
L213     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L214     if alert:
L215         df["trade_shares"] = df.apply(
L216             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L217             if r["adjustable"] and r["price"] > 0 else 0,
L218             axis=1,
L219         )
L220         df["new_shares"] = df["shares"] + df["trade_shares"]
L221         df["new_value"] = df["new_shares"] * df["price"]
L222         new_total_value = df["new_value"].sum()
L223         df["simulated_ratio"] = df["new_value"] / new_total_value
L224         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L225         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L226     else:
L227         df["trade_shares"] = np.nan
L228         df["new_shares"] = np.nan
L229         df["new_value"] = np.nan
L230         new_total_value = np.nan
L231         df["simulated_ratio"] = np.nan
L232         df["simulated_drift_abs"] = np.nan
L233         simulated_total_drift_abs = np.nan
L234     return df, alert, new_total_value, simulated_total_drift_abs
L235
L236
L237 def prepare_summary(df, total_drift_abs, alert):
L238     summary = {
L239         "symbol": "合計",
L240         "shares": df["shares"].sum(),
L241         "value": df["value"].sum(),
L242         "current_ratio": np.nan,
L243         "drift_abs": total_drift_abs,
L244     }
L245     if alert:
L246         summary["trade_shares"] = np.nan
L247     # Sort details by evaluation value descending before appending summary
L248     df = df.sort_values(by="value", ascending=False)
L249     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L250     if alert:
L251         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L252         df_small = df[cols].copy()
L253         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L254     else:
L255         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L256         df_small = df[cols].copy()
L257         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L258     return df_small
L259
L260
L261 def currency(x):
L262     return f"${x:,.0f}" if pd.notnull(x) else ""
L263
L264
L265 def formatters_for(alert):
L266     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L267     if alert:
L268         formatters["Δqty"] = "{:.0f}".format
L269     return formatters
L270
L271
L272 def build_header(vix_ma5, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L273     header = (
L274         f"*📈 VIX MA5:* {vix_ma5:.2f}\n"
L275         f"*📊 ドリフト閾値:* {'🔴(高VIX)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L276         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L277     )
L278     if alert:
L279         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L280         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L281     else:
L282         header += "✅ アラートなし\n"
L283     return header
L284
L285
L286 def send_slack(text):
L287     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L288     if not SLACK_WEBHOOK_URL:
L289         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L290     payload = {"text": text}
L291     try:
L292         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L293         resp.raise_for_status()
L294         print("✅ Slack（Webhook）へ送信しました")
L295     except Exception as e:
L296         print(f"⚠️ Slack通知エラー: {e}")
L297
L298
L299 def send_debug(debug_text):
L300     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L301     if not SLACK_WEBHOOK_URL:
L302         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L303     debug_payload = {"text": "```" + debug_text + "```"}
L304     try:
L305         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L306         resp.raise_for_status()
L307         print("✅ Debug情報をSlackに送信しました")
L308     except Exception as e:
L309         print(f"⚠️ Slack通知エラー: {e}")
L310
L311
L312 def main():
L313     portfolio = load_portfolio()
L314     symbols = [r["symbol"] for r in portfolio]
L315     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L316     vix_ma5, drift_threshold = compute_threshold()
L317     df, total_value, total_drift_abs = build_dataframe(portfolio)
L318     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L319         df, total_value, total_drift_abs, drift_threshold
L320     )
L321     df_small = prepare_summary(df, total_drift_abs, alert)
L322     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L323         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L324         if col_sym:
L325             df_small.insert(0, "⚠", df_small[col_sym].apply(lambda x: "🔴" if x in sell_alerts else ""))
L326     formatters = formatters_for(alert)
L327     header = build_header(
L328         vix_ma5, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L329     )
L330     if sell_alerts:
L331         def fmt_pair(date_tags):
L332             date, tags = date_tags
L333             return f"{date}:" + "・".join(tags)
L334         listed = []
L335         for t, arr in sell_alerts.items():
L336             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L337         hits = ", ".join(listed)
L338         if "✅ アラートなし" in header:
L339             header = header.replace(
L340                 "✅ アラートなし",
L341                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L342             )
L343         else:
L344             header += f"\n🟥 {hits}"
L345     table_text = df_small.to_string(formatters=formatters, index=False)
L346     send_slack(header + "\n```" + table_text + "```")
L347
L348     if debug_mode:
L349         debug_cols = [
L350             "symbol",
L351             "shares",
L352             "price",
L353             "value",
L354             "current_ratio",
L355             "drift",
L356             "drift_abs",
L357             "adjusted_ratio",
L358             "adjustable",
L359             "trade_shares",
L360             "new_shares",
L361             "new_value",
L362             "simulated_ratio",
L363             "simulated_drift_abs",
L364         ]
L365         debug_text = (
L366             "=== DEBUG: full dataframe ===\n"
L367             + df[debug_cols].to_string()
L368             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L369             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L370         )
L371         print("\n" + debug_text)
L372         send_debug(debug_text)
L373
L374
L375 if __name__ == "__main__":
L376     main()
L377
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 25銘柄を均等配分（現金を除き1銘柄あたり4%）
L5 - moomoo証券で運用
L6
L7 ## Barbell Growth-Defense方針
L8 - Growth枠12銘柄：高成長で乖離源となる攻めの銘柄
L9 - Defense枠13銘柄：低ボラで安定成長し配当を増やす守りの銘柄
L10 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L11
L12 ## 現金比率（VIX 5日移動平均で判定）
L13 - VIX MA5 < 20: 5%
L14 - 20 ≤ VIX MA5 < 26: 7.5%
L15 - VIX MA5 ≥ 27: 12%（高VIX緊急モード）
L16
L17 ## ドリフト閾値
L18 - VIX MA5 < 20: 10%
L19 - 20 ≤ VIX MA5 < 26: 12%
L20 - VIX MA5 ≥ 27: 高VIX緊急モードへ移行
L21
L22 ## 通常モードの運用
L23 - 毎営業日、①90日経過 or ②ドリフトが閾値超過で半戻し
L24 - 半戻し：乖離の50%を中央へ寄せ、現金比率を上表どおりに調整
L25 - 全銘柄のトレーリングストップ(TS)を再設定
L26 - ドリフト＝Σ|現在比率−4%|（端数切り捨て）
L27
L28 ## 高VIX緊急モード（MA5 > 27で発動）
L29 1. 全25銘柄を各4%へ全戻し
L30 2. 現金比率12%へ引上げ
L31 3. 全銘柄のTSを再設定し以降の売買とドリフト計算を停止
L32
L33 ## 高VIX緊急モードの解除
L34 - MA5 < 23 または30営業日経過で解除
L35 - 緊急モード中にTS発動で減少した銘柄を補充し25銘柄×4%にリバランス
L36 - 通常モードの日次チェックを再開
L37
L38 ## 段階的トレーリングストップ
L39 - Growth: 基本25%
L40 - Defense: 基本20%
L41 - 含み益が40/60/80%に達したらTSを3/5/8ポイントずつ引き上げ
L42 - TS発動で減少した銘柄は翌日以降に補充（緊急モード中は補充しない）
L43
L44 ## 入替銘柄選定
L45 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L46 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L47
L48 ## 実行タイミング
L49 - 判定：米国市場終値直後
L50 - 執行：翌営業日の米国寄付き成行
L51
L52 ## VIX早見表
L53 | VIX MA5 | ドリフト閾値 | 現金比率 | モード |
L54 |--------|--------------|---------|-------|
L55 | <20    | 10           | 5%      | 通常 |
L56 | 20–26  | 12           | 7.5%    | 通常 |
L57 | ≥27    | –            | 12%     | 高VIX緊急 |
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 25銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから価格・VIX情報を取得し、現況比率と調整案を計算。
L6
L7 ## 定数・設定
L8 - `FINNHUB_API_KEY` / `SLACK_WEBHOOK_URL` を環境変数から取得。
L9 - 無料枠を考慮したAPIレート制限: `RATE_LIMIT = 55`。
L10 - デバッグ出力用フラグ `debug_mode`。
L11
L12 ## 主な関数
L13 ### finnhub_get
L14 - 基本的なレート制限付きでFinnhub APIを呼び出し、JSONレスポンスを辞書で返す。
L15
L16 ### fetch_price
L17 - `quote` エンドポイントで株価を取得し、失敗時は `NaN` を返す。
L18
L19 ### fetch_vix_ma5
L20 - yfinanceでVIX終値を取得し、直近5営業日の移動平均を算出。
L21
L22 ### load_portfolio
L23 - `current_tickers.csv` から銘柄と保有株数を読み込み、目標比率4%を付与したリストを生成。
L24
L25 ### compute_threshold
L26 - VIX MA5に応じてドリフト閾値を10%/12%/高VIXモード(∞)に設定。
L27
L28 ### build_dataframe
L29 - 各銘柄の評価額や現在比率、ドリフト、半戻し後比率(`adjusted_ratio`)を計算しDataFrame化。
L30
L31 ### simulate
L32 - ドリフト合計が閾値を超えた場合、半戻し後の売買株数と新比率を試算し、シミュレート後ドリフトを返す。
L33
L34 ### prepare_summary
L35 - 評価額順に並べ替えた後、合計行を付与してSlack表示用テーブルを作成。
L36
L37 ### formatters_for / currency
L38 - 通貨・比率・株数の表示フォーマットを定義。
L39
L40 ### build_header
L41 - VIX・閾値・ドリフト値およびアラート有無をSlackメッセージ用ヘッダに整形。
L42
L43 ### send_slack / send_debug
L44 - 通常通知およびデバッグ詳細をSlack Webhookへ送信。
L45
L46 ### main
L47 - 上記関数を順に呼び出し、日次ドリフトチェックの一連処理を実行。
L48
L49 ## 実行フロー
L50 1. `load_portfolio` で現ポートフォリオを読み込む。
L51 2. `compute_threshold` でVIX MA5とドリフト閾値を決定。
L52 3. `build_dataframe` で現在比率とドリフトを計算。
L53 4. `simulate` で閾値超過時の半戻し案を試算。
L54 5. `prepare_summary` と `build_header` で通知本文とテーブルを構築。
L55 6. `send_slack` で結果を送信。`debug_mode` がTrueなら `send_debug` も併用。
```
