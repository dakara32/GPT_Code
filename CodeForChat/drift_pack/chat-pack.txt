# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: drift.py, .github/workflows/daily-report.yml, documents/README.md, documents/drift_design.md
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <drift.py>
```text
L1 import pandas as pd, yfinance as yf
L2 import numpy as np
L3 import requests
L4 import os
L5 import csv
L6 import json
L7 import time
L8 from pathlib import Path
L9
L10 # --- breadth utilities (factor parity) ---
L11 BENCH = "^GSPC"
L12 CAND_PRICE_MAX = 450.0
L13 RESULTS_DIR = "results"
L14 os.makedirs(RESULTS_DIR, exist_ok=True)
L15
L16
L17 def _state_file():
L18     return str(Path(RESULTS_DIR) / "breadth_state.json")
L19
L20
L21 def load_mode(default="NORMAL"):
L22     try:
L23         m = json.loads(open(_state_file()).read()).get("mode", default)
L24         return m if m in ("EMERG","CAUTION","NORMAL") else default
L25     except Exception:
L26         return default
L27
L28
L29 def save_mode(mode: str):
L30     try:
L31         open(_state_file(),"w").write(json.dumps({"mode": mode}))
L32     except Exception:
L33         pass
L34
L35
L36 def _read_csv_list(fname):
L37     p = Path(__file__).with_name(fname)
L38     if not p.exists(): return []
L39     return pd.read_csv(p, header=None).iloc[:,0].astype(str).str.upper().tolist()
L40
L41
L42 def _load_universe():
L43     # exist + candidate を使用。candidate は価格上限で事前フィルタ
L44     exist = _read_csv_list("current_tickers.csv")
L45     cand  = _read_csv_list("candidate_tickers.csv")
L46     cand_info = yf.Tickers(" ".join(cand)) if cand else None
L47     cand_keep = []
L48     for t in cand:
L49         try:
L50             px = cand_info.tickers[t].fast_info.get("lastPrice", float("inf"))
L51         except Exception:
L52             px = float("inf")
L53         if pd.notna(px) and float(px) <= CAND_PRICE_MAX:
L54             cand_keep.append(t)
L55     tickers = sorted(set(exist + cand_keep))
L56     return exist, cand_keep, tickers
L57
L58
L59 def _fetch_prices_600d(tickers):
L60     data = yf.download(tickers + [BENCH], period="600d", auto_adjust=True, progress=False)
L61     px   = data["Close"].dropna(how="all", axis=1)
L62     spx  = data["Close"][BENCH].dropna()
L63     return px, spx
L64
L65
L66 def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L67     # scorer.py の実装をそのまま移植（ベクトル化版）
L68     import numpy as np, pandas as pd
L69     if px is None or px.empty:
L70         return pd.Series(dtype=int)
L71     px = px.dropna(how="all", axis=1)
L72     if win_days and win_days > 0:
L73         px = px.tail(win_days)
L74     if px.empty:
L75         return pd.Series(dtype=int)
L76     spx = spx.reindex(px.index).ffill()
L77
L78     ma50  = px.rolling(50).mean()
L79     ma150 = px.rolling(150).mean()
L80     ma200 = px.rolling(200).mean()
L81
L82     tt = (px > ma150)
L83     tt &= (px > ma200)
L84     tt &= (ma150 > ma200)
L85     tt &= (ma200 - ma200.shift(21) > 0)
L86     tt &= (ma50  > ma150)
L87     tt &= (ma50  > ma200)
L88     tt &= (px    > ma50)
L89
L90     lo252 = px.rolling(252).min()
L91     hi252 = px.rolling(252).max()
L92     tt &= (px.divide(lo252).sub(1.0) >= 0.30)
L93     tt &= (px >= (0.75 * hi252))
L94
L95     r12  = px.divide(px.shift(252)).sub(1.0)
L96     br12 = spx.divide(spx.shift(252)).sub(1.0)
L97     r1   = px.divide(px.shift(22)).sub(1.0)
L98     br1  = spx.divide(spx.shift(22)).sub(1.0)
L99     rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L100     tt &= (rs >= 0.10)
L101
L102     return tt.fillna(False).sum(axis=1).astype(int)
L103
L104
L105 def build_breadth_header():
L106     # factor._build_breadth_lead_lines と同一挙動
L107     exist, cand, tickers = _load_universe()
L108     if not tickers:
L109         return "", "NORMAL", 0
L110     px, spx = _fetch_prices_600d(tickers)
L111     win = int(os.getenv("BREADTH_CALIB_WIN_DAYS", "600"))
L112     C_ts = trend_template_breadth_series(px, spx, win_days=win)
L113     if C_ts.empty:
L114         return "", "NORMAL", 0
L115     warmup = int(os.getenv("BREADTH_WARMUP_DAYS","252"))
L116     base = C_ts.iloc[warmup:] if len(C_ts)>warmup else C_ts
L117     C_full = int(C_ts.iloc[-1])
L118
L119     q05 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_IN",  "0.05"))), nan=0.0))
L120     q20 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_OUT", "0.20"))), nan=0.0))
L121     q60 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_WARN_OUT",  "0.60"))), nan=0.0))
L122
L123     # G枠サイズ（Breadth基準）
L124     N_G = 15
L125     th_in_rec   = max(N_G, q05)
L126     th_out_rec  = max(int(np.ceil(1.5*N_G)), q20)
L127     th_norm_rec = max(3*N_G, q60)
L128
L129     use_calib = os.getenv("BREADTH_USE_CALIB", "true").strip().lower() == "true"
L130     if use_calib:
L131         th_in, th_out, th_norm, th_src = th_in_rec, th_out_rec, th_norm_rec, "自動"
L132     else:
L133         th_in   = int(os.getenv("GTT_EMERG_IN", str(N_G)))
L134         th_out  = int(os.getenv("GTT_EMERG_OUT", str(int(1.5*N_G))))
L135         th_norm = int(os.getenv("GTT_CAUTION_OUT", str(3*N_G)))
L136         th_src = "手動"
L137
L138     prev = load_mode("NORMAL")
L139     if   prev == "EMERG":
L140         mode = "EMERG"   if (C_full < th_out)  else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L141     elif prev == "CAUTION":
L142         mode = "CAUTION" if (C_full < th_norm) else "NORMAL"
L143     else:
L144         mode = "EMERG"   if (C_full < th_in)   else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L145     save_mode(mode)
L146
L147     _MODE_JA   = {"EMERG":"緊急","CAUTION":"警戒","NORMAL":"通常"}
L148     _MODE_EMOJI= {"EMERG":"🚨","CAUTION":"⚠️","NORMAL":"🟢"}
L149     mode_ja, emoji = _MODE_JA.get(mode,mode), _MODE_EMOJI.get(mode,"ℹ️")
L150     eff_days = len(base)
L151
L152     lead_lines = [
L153         f"{emoji} *現在モード: {mode_ja}*",
L154         f"テンプレ合格本数: *{C_full}本*",
L155         "しきい値（{0}）".format(th_src),
L156         f"  ・緊急入り: <{th_in}本",
L157         f"  ・緊急解除: ≥{th_out}本",
L158         f"  ・通常復帰: ≥{th_norm}本",
L159         f"参考指標（過去~{win}営業日, 有効={eff_days}日）",
L160         f"  ・下位5%: {q05}本",
L161         f"  ・下位20%: {q20}本",
L162         f"  ・60%分位: {q60}本",
L163     ]
L164     return "```" + "\n".join(lead_lines) + "```", mode, C_full
L165 # Debug flag
L166 debug_mode = False  # set to True for detailed output
L167
L168 # --- Finnhub settings & helper ---
L169 FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
L170 if not FINNHUB_API_KEY:
L171     raise ValueError("FINNHUB_API_KEY not set (環境変数が未設定です)")
L172
L173 RATE_LIMIT = 55  # requests per minute (free tier is 60)
L174 call_times = []
L175
L176
L177 def finnhub_get(endpoint, params):
L178     """Call Finnhub API with basic rate limiting."""
L179     now = time.time()
L180     cutoff = now - 60
L181     while call_times and call_times[0] < cutoff:
L182         call_times.pop(0)
L183     if len(call_times) >= RATE_LIMIT:
L184         sleep_time = 60 - (now - call_times[0])
L185         time.sleep(sleep_time)
L186     params = {**params, "token": FINNHUB_API_KEY}
L187     try:
L188         resp = requests.get(f"https://finnhub.io/api/v1/{endpoint}", params=params)
L189         resp.raise_for_status()
L190         data = resp.json()
L191     except requests.exceptions.JSONDecodeError as e:
L192         print(f"⚠️ Finnhub API JSON decode error: {e}")
L193         return {}
L194     except Exception as e:
L195         print(f"⚠️ Finnhub API error: {e}")
L196         return {}
L197     call_times.append(time.time())
L198     return data
L199
L200
L201 def fetch_price(symbol):
L202     try:
L203         data = finnhub_get("quote", {"symbol": symbol})
L204         price = data.get("c")
L205         return float(price) if price not in (None, 0) else float("nan")
L206     except Exception:
L207         return float("nan")
L208
L209
L210 def fetch_vix_ma5():
L211     """Retrieve VIX 5-day moving average via yfinance."""
L212     try:
L213         vix = (
L214             yf.download("^VIX", period="7d", interval="1d", progress=False, auto_adjust=False)["Close"]
L215             .dropna()
L216             .tail(5)
L217         )
L218         if len(vix) < 5:
L219             return float("nan")
L220         return vix.mean().item()
L221     except Exception:
L222         return float("nan")
L223
L224
L225
L226 # === Minervini-like sell signals ===
L227 def _yf_df(sym, period="6mo"):
L228     """日足/MA/出来高平均を取得。欠損時は None。"""
L229     try:
L230         df = yf.download(sym, period=period, interval="1d", auto_adjust=False, progress=False)
L231         if df is None or df.empty:
L232             return None
L233         return df.dropna().assign(
L234             ma20=lambda d: d["Close"].rolling(20).mean(),
L235             ma50=lambda d: d["Close"].rolling(50).mean(),
L236             vol50=lambda d: d["Volume"].rolling(50).mean(),
L237         )
L238     except Exception:
L239         return None
L240
L241
L242 def _scalar(row, col):
L243     """Series/npスカラ→Pythonスカラ化（NaNはNaNのまま）"""
L244     try:
L245         v = row[col]
L246         if hasattr(v, "item"):
L247             try:
L248                 v = v.item()
L249             except Exception:
L250                 pass
L251         return v
L252     except Exception:
L253         return float("nan")
L254
L255
L256 def _is_strict_down(seq):
L257     """数列が厳密に連続で切り下がっているか（len>=4を想定）。NaN含みはFalse。"""
L258     try:
L259         xs = [float(x) for x in seq]
L260         if any(pd.isna(x) for x in xs) or len(xs) < 4:
L261             return False
L262         return all(b < a for a, b in zip(xs[:-1], xs[1:]))
L263     except Exception:
L264         return False
L265
L266
L267 def _signals_for_day(df, idx):
L268     """df.loc[idx] 1日分に対しシグナル配列を返す（値動き/出来高ベースのみ）。"""
L269     try:
L270         sig = []
L271         d = df.loc[idx]
L272         close = _scalar(d, "Close")
L273         ma20 = _scalar(d, "ma20")
L274         ma50 = _scalar(d, "ma50")
L275         vol = _scalar(d, "Volume")
L276         vol50 = _scalar(d, "vol50")
L277
L278         if pd.notna(close) and pd.notna(ma20) and close < ma20:
L279             sig.append("20DMA↓")
L280
L281         if all(pd.notna(x) for x in (close, ma50, vol, vol50)) and close < ma50 and vol > 1.5 * vol50:
L282             sig.append("50DMA↓(大商い)")
L283
L284         last4 = df.loc[:idx].tail(4)
L285         last10 = df.loc[:idx].tail(10)
L286
L287         lows_desc = _is_strict_down(last4["Low"].tolist()) if last4["Low"].notna().all() else False
L288         reds = int((last10["Close"] < last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L289         if lows_desc or reds > 5:
L290             sig.append("連続安値/陰線優勢")
L291
L292         ups = int((last10["Close"] > last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L293         if ups >= 7:
L294             sig.append("上げ偏重(>70%)")
L295
L296         last15 = df.loc[:idx].tail(15)
L297         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L298         if pd.notna(base0) and pd.notna(close) and base0 != 0 and (close / base0 - 1) >= 0.25:
L299             sig.append("+25%/15日内")
L300
L301         if len(df.loc[:idx]) >= 2:
L302             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L303             t1_high = _scalar(t1, "High")
L304             t0_open = _scalar(t0, "Open")
L305             t0_close = _scalar(t0, "Close")
L306             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L307                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L308                     sig.append("GU→陰線")
L309         return sig
L310     except Exception:
L311         return []
L312
L313
L314 def scan_sell_signals(symbols, lookback_days=5):
L315     """
L316     直近 lookback_days 日のうち一度でもシグナルが出たら {sym: [(date,[signals]),...]} を返す。
L317     日付は YYYY-MM-DD。Slackで列挙する。
L318     """
L319     out = {}
L320     for s in symbols:
L321         df = _yf_df(s)
L322         if df is None or len(df) < 60:
L323             continue
L324         alerts = []
L325         for idx in df.tail(lookback_days).index:
L326             tags = _signals_for_day(df, idx)
L327             if tags:
L328                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L329         if alerts:
L330             out[s] = alerts
L331     return out
L332
L333
L334 def load_portfolio():
L335     tickers_path = Path(__file__).with_name("current_tickers.csv")
L336     with tickers_path.open() as f:
L337         reader = list(csv.reader(f))
L338     return [
L339         {"symbol": sym.strip().upper(), "shares": int(qty), "target_ratio": 1 / len(reader)}
L340         for sym, qty in reader
L341     ]
L342
L343
L344 def compute_threshold():
L345     vix_ma5 = fetch_vix_ma5()
L346     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L347     return vix_ma5, drift_threshold
L348
L349
L350 def compute_threshold_by_mode(mode: str):
L351     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L352     m = (mode or "NORMAL").upper()
L353     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L354     # ★ 閾値をREADMEに合わせて統一：NORMAL=12%, CAUTION=14%, EMERG=∞
L355     drift_map = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L356     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L357
L358
L359 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L360     """
L361     モード別の推奨保有数 (G_count, D_count, cash_slots) を返す。
L362     cash_slotsは「外すG枠の数」（各枠=4%）。
L363     NORMAL: G15/D10/現金化0, CAUTION: G13/D10/現金化2, EMERG: G10/D10/現金化5
L364     """
L365     m = (mode or "NORMAL").upper()
L366     if m == "CAUTION":
L367         return 13, 10, 2
L368     if m == "EMERG":
L369         return 10, 10, 5
L370     return 15, 10, 0
L371
L372
L373 def build_dataframe(portfolio):
L374     for stock in portfolio:
L375         price = fetch_price(stock["symbol"])
L376         stock["price"] = price
L377         stock["value"] = price * stock["shares"]
L378
L379     df = pd.DataFrame(portfolio)
L380     total_value = df["value"].sum()
L381     df["current_ratio"] = df["value"] / total_value
L382     df["drift"] = df["current_ratio"] - df["target_ratio"]
L383     df["drift_abs"] = df["drift"].abs()
L384     total_drift_abs = df["drift_abs"].sum()
L385     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L386     df["adjustable"] = (
L387         (df["adjusted_ratio"] * total_value) >= df["price"]
L388     ) & df["price"].notna() & df["price"].gt(0)
L389     return df, total_value, total_drift_abs
L390
L391
L392 def simulate(df, total_value, total_drift_abs, drift_threshold):
L393     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L394     if alert:
L395         df["trade_shares"] = df.apply(
L396             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L397             if r["adjustable"] and r["price"] > 0 else 0,
L398             axis=1,
L399         )
L400         df["new_shares"] = df["shares"] + df["trade_shares"]
L401         df["new_value"] = df["new_shares"] * df["price"]
L402         new_total_value = df["new_value"].sum()
L403         df["simulated_ratio"] = df["new_value"] / new_total_value
L404         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L405         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L406     else:
L407         df["trade_shares"] = np.nan
L408         df["new_shares"] = np.nan
L409         df["new_value"] = np.nan
L410         new_total_value = np.nan
L411         df["simulated_ratio"] = np.nan
L412         df["simulated_drift_abs"] = np.nan
L413         simulated_total_drift_abs = np.nan
L414     return df, alert, new_total_value, simulated_total_drift_abs
L415
L416
L417 def prepare_summary(df, total_drift_abs, alert):
L418     summary = {
L419         "symbol": "合計",
L420         "shares": df["shares"].sum(),
L421         "value": df["value"].sum(),
L422         "current_ratio": np.nan,
L423         "drift_abs": total_drift_abs,
L424     }
L425     if alert:
L426         summary["trade_shares"] = np.nan
L427     # Sort details by evaluation value descending before appending summary
L428     df = df.sort_values(by="value", ascending=False)
L429     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L430     if alert:
L431         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L432         df_small = df[cols].copy()
L433         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L434     else:
L435         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L436         df_small = df[cols].copy()
L437         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L438     return df_small
L439
L440
L441 def currency(x):
L442     return f"${x:,.0f}" if pd.notnull(x) else ""
L443
L444
L445 def formatters_for(alert):
L446     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L447     if alert:
L448         formatters["Δqty"] = "{:.0f}".format
L449     return formatters
L450
L451
L452 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L453     header = (
L454         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L455         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L456         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L457     )
L458     if alert:
L459         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L460         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L461     else:
L462         header += "✅ アラートなし\n"
L463     # ★ 追記: TSルール（G/D共通）と推奨保有数
L464     header += "*🛡 TS:* 基本 -15% / +30%→-12% / +60%→-9% / +100%→-7%\n"
L465     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L466     cash_pct = cash_slots * 4
L467     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct}%）\n"
L468     return header
L469
L470
L471 def send_slack(text):
L472     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L473     if not SLACK_WEBHOOK_URL:
L474         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L475     payload = {"text": text}
L476     try:
L477         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L478         resp.raise_for_status()
L479         print("✅ Slack（Webhook）へ送信しました")
L480     except Exception as e:
L481         print(f"⚠️ Slack通知エラー: {e}")
L482
L483
L484 def send_debug(debug_text):
L485     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L486     if not SLACK_WEBHOOK_URL:
L487         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L488     debug_payload = {"text": "```" + debug_text + "```"}
L489     try:
L490         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L491         resp.raise_for_status()
L492         print("✅ Debug情報をSlackに送信しました")
L493     except Exception as e:
L494         print(f"⚠️ Slack通知エラー: {e}")
L495
L496
L497 def main():
L498     portfolio = load_portfolio()
L499     symbols = [r["symbol"] for r in portfolio]
L500     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L501
L502     breadth_block, mode, _C = build_breadth_header()
L503
L504     cash_ratio, drift_threshold = compute_threshold_by_mode(mode)
L505
L506     df, total_value, total_drift_abs = build_dataframe(portfolio)
L507     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L508         df, total_value, total_drift_abs, drift_threshold
L509     )
L510     df_small = prepare_summary(df, total_drift_abs, alert)
L511     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L512         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L513         if col_sym:
L514             alert_keys = {str(k) for k in sell_alerts.keys()}
L515             df_small[col_sym] = df_small[col_sym].astype(str)
L516             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L517             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L518             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L519     formatters = formatters_for(alert)
L520     header = build_header(
L521         mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L522     )
L523     if breadth_block:
L524         header = breadth_block + "\n" + header
L525     if sell_alerts:
L526         def fmt_pair(date_tags):
L527             date, tags = date_tags
L528             return f"{date}:" + "・".join(tags)
L529         listed = []
L530         for t, arr in sell_alerts.items():
L531             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L532         hits = ", ".join(listed)
L533         if "✅ アラートなし" in header:
L534             header = header.replace(
L535                 "✅ アラートなし",
L536                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L537             )
L538         else:
L539             header += f"\n🟥 {hits}"
L540     table_text = df_small.to_string(formatters=formatters, index=False)
L541     send_slack(header + "\n```" + table_text + "```")
L542
L543     if debug_mode:
L544         debug_cols = [
L545             "symbol",
L546             "shares",
L547             "price",
L548             "value",
L549             "current_ratio",
L550             "drift",
L551             "drift_abs",
L552             "adjusted_ratio",
L553             "adjustable",
L554             "trade_shares",
L555             "new_shares",
L556             "new_value",
L557             "simulated_ratio",
L558             "simulated_drift_abs",
L559         ]
L560         debug_text = (
L561             "=== DEBUG: full dataframe ===\n"
L562             + df[debug_cols].to_string()
L563             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L564             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L565         )
L566         print("\n" + debug_text)
L567         send_debug(debug_text)
L568
L569
L570 if __name__ == "__main__":
L571     main()
L572
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 25銘柄を均等配分（現金を除き1銘柄あたり4%）
L5 - moomoo証券で運用
L6 - **Growth枠 15銘柄 / Defense枠 10銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **15銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **10銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=15）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 15本)`（= N_G）
L17   - 緊急解除: `max(q20, 23本)`（= ceil(1.5×15)）
L18   - 通常復帰: `max(q60, 45本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **14%**
L24  - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（25×4%に全戻しのみ）
L25
L26 ## モード別の推奨“保有銘柄数”（MMF≒現金）
L27 *各枠=4%（25銘柄均等）。モード移行時は**Gの枠数のみ**調整し、外した枠は現金として保持。*
L28
L29 - **NORMAL:** G **15** / D **10** / 現金化枠 **0**  
L30 - **CAUTION:** G **13** / D **10** / 現金化枠 **2**（= 8%）  
L31 - **EMERG:** G **10** / D **10** / 現金化枠 **5**（= 20%）  
L32
L33 > 実運用：⭐️低スコアのGから順に外す。解除時はfactor上位から補充。
L34
L35 ## トレーリングストップ
L36 - **基本TS=15%**
L37 - 含み益が **+30% / +60% / +100%** 到達で TS を **12% / 9% / 7%** に段階引き上げ
L38 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L39
L40 ## 半戻し（リバランス）手順
L41 ドリフトチェックで**アラート**が出た場合（合計|drift| がモード閾値を超過、EMERG除く）、翌営業日の米国寄付きで下記を実施する。
L42
L43 1. **売却（必須）**  
L44    Slackテーブルの **Δqty がマイナスの銘柄を売却** する（寄付き成行推奨）。  
L45    これは「半戻し」計算に基づく過重量の削減を意味する。
L46
L47 2. **購入（任意・半戻し目安）**  
L48    半戻し後の合計|drift|を**シミュレーション値（Slackヘッダに表示）**に近づけることを目安に、  
L49    **任意の銘柄を買い増し**してバランスを取る（Δqtyがプラスの銘柄を優先してもよい）。
L50
L51 3. **トレーリングストップの再設定（必須）**  
L52    すべての保有銘柄について、最新の評価額に合わせてTSを**再発注／更新**する。  
L53    ルールは下記（利益到達で段階的にタイト化）：  
L54    - **基本TS:** -15%  
L55    - **+30% 到達 → TS -12%**  
L56    - **+60% 到達 → TS -9%**  
L57    - **+100% 到達 → TS -7%**  
L58    ※ストップ価格の引き上げは許可、**引き下げは不可**（利益保全の原則）。
L59
L60 4. **例外（EMERGモード）**  
L61    緊急(EMERG)では**ドリフト由来の売買は停止（∞）**。25銘柄×各4%への**全戻し**のみ許容。
L62
L63 5. **実行タイミング**
L64    - 判定：米国市場終値直後
L65    - 執行：翌営業日の米国寄付き成行
L66
L67 ## モード移行の実務手順（超シンプル）
L68 モードが変わったら、**MMF≒現金**として扱い、**Gの枠数だけ**を調整する：
L69 1. **Gを削る**（CAUTION/EMERG）  
L70    - ⭐️低スコアのGから順に外す。  
L71    - **`current_tickers.csv` から外すG銘柄の行を削除**（＝その枠は現金化）。
L72 2. **現金として保持**  
L73    - 外した枠は現金（またはMMF相当）でプール。  
L74 3. **復帰時の補充**（NORMALへ）  
L75    - **`current_tickers.csv` に銘柄を追加**（factor上位から）。  
L76    - 以降は日次ドリフト/TSルールに従う。
L77
L78 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて自動で均等比率が再計算される。
L79
L80 ## 入替銘柄選定
L81 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L82 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L83
L84 ## 再エントリー（クールダウン）
L85 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L86
L87 ## 実行タイミング
L88 - 判定：米国市場終値直後
L89 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 25銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから価格を取得（レジームは trend_template 本数に基づく（基準 N_G=15））。
L6   - 緊急入り: `max(q05, 15本)`
L7   - 緊急解除: `max(q20, 23本)` （ceil(1.5*15)）
L8   - 通常復帰: `max(q60, 45本)` （3*15）
L9
L10 ## 定数・設定
L11 - `FINNHUB_API_KEY` / `SLACK_WEBHOOK_URL` を環境変数から取得。
L12 - 無料枠を考慮したAPIレート制限: `RATE_LIMIT = 55`。
L13 - デバッグ出力用フラグ `debug_mode`。
L14
L15 ## 主な関数
L16 ### finnhub_get
L17 - 基本的なレート制限付きでFinnhub APIを呼び出し、JSONレスポンスを辞書で返す。
L18
L19 ### fetch_price
L20 - `quote` エンドポイントで株価を取得し、失敗時は `NaN` を返す。
L21
L22 ### fetch_vix_ma5
L23 - yfinanceでVIX終値を取得する関数。将来再利用のため残置。
L24
L25 ### load_portfolio
L26 - `current_tickers.csv` から銘柄と保有株数を読み込み、目標比率4%を付与したリストを生成。
L27
L28 ### compute_threshold_by_mode
L29 - モード(NORMAL/CAUTION/EMERG) に応じて **12% / 14% / 停止(∞)** を返す。
L30
L31 ### build_dataframe
L32 - 各銘柄の評価額や現在比率、ドリフト、半戻し後比率(`adjusted_ratio`)を計算しDataFrame化。
L33
L34 ### simulate
L35 - ドリフト合計が閾値を超えた場合、半戻し後の売買株数と新比率を試算し、シミュレート後ドリフトを返す。
L36
L37 ### prepare_summary
L38 - 評価額順に並べ替えた後、合計行を付与してSlack表示用テーブルを作成。
L39
L40 ### formatters_for / currency
L41 - 通貨・比率・株数の表示フォーマットを定義。
L42
L43 ### build_header
L44 - 現金保有率・閾値・ドリフト値およびアラート有無をSlackメッセージ用ヘッダに整形。
L45
L46 ### send_slack / send_debug
L47 - 通常通知およびデバッグ詳細をSlack Webhookへ送信。
L48
L49 ### main
L50 - 上記関数を順に呼び出し、日次ドリフトチェックの一連処理を実行。
L51
L52 ## 実行フロー
L53 1. `load_portfolio` で現ポートフォリオを読み込む。
L54 2. `build_breadth_header` でモードを取得し、`compute_threshold_by_mode` で現金保有率とドリフト閾値を決定。
L55 3. `build_dataframe` で現在比率とドリフトを計算。
L56 4. `simulate` で閾値超過時の半戻し案を試算。
L57 5. `prepare_summary` と `build_header` で通知本文とテーブルを構築。
L58 6. `send_slack` で結果を送信。`debug_mode` がTrueなら `send_debug` も併用。
```
