```text
% / 7%** に段階引き上げ
L28 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L29
L30 ## 半戻し（リバランス）手順
L31 ドリフトチェックで**アラート**が出た場合（合計|drift| がモード閾値を超過、EMERG除く）、翌営業日の米国寄付きで下記を実施する。
L32
L33 1. **売却（必須）**  
L34    Slackテーブルの **Δqty がマイナスの銘柄を売却** する（寄付き成行推奨）。  
L35    これは「半戻し」計算に基づく過重量の削減を意味する。
L36
L37 2. **購入（任意・半戻し目安）**  
L38    半戻し後の合計|drift|を**シミュレーション値（Slackヘッダに表示）**に近づけることを目安に、  
L39    **任意の銘柄を買い増し**してバランスを取る（Δqtyがプラスの銘柄を優先してもよい）。
L40
L41 3. **トレーリングストップの再設定（必須）**  
L42    すべての保有銘柄について、最新の評価額に合わせてTSを**再発注／更新**する。  
L43    ルールは下記（利益到達で段階的にタイト化）：  
L44    - **基本TS:** -15%  
L45    - **+30% 到達 → TS -12%**  
L46    - **+60% 到達 → TS -9%**  
L47    - **+100% 到達 → TS -7%**  
L48    ※ストップ価格の引き上げは許可、**引き下げは不可**（利益保全の原則）。
L49
L50 4. **例外（EMERGモード）**  
L51    緊急(EMERG)では**ドリフト由来の売買は停止（∞）**。25銘柄×各4%への**全戻し**のみ許容。
L52
L53 5. **実行タイミング**  
L54    - 判定：米国市場終値直後  
L55    - 執行：翌営業日の米国寄付き成行
L56
L57 ## 入替銘柄選定
L58 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L59 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L60
L61 ## 再エントリー（クールダウン）
L62 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L63
L64 ## 実行タイミング
L65 - 判定：米国市場終値直後
L66 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 25銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから価格を取得（レジームは trend_template 本数に基づく）。
L6
L7 ## 定数・設定
L8 - `FINNHUB_API_KEY` / `SLACK_WEBHOOK_URL` を環境変数から取得。
L9 - 無料枠を考慮したAPIレート制限: `RATE_LIMIT = 55`。
L10 - デバッグ出力用フラグ `debug_mode`。
L11
L12 ## 主な関数
L13 ### finnhub_get
L14 - 基本的なレート制限付きでFinnhub APIを呼び出し、JSONレスポンスを辞書で返す。
L15
L16 ### fetch_price
L17 - `quote` エンドポイントで株価を取得し、失敗時は `NaN` を返す。
L18
L19 ### fetch_vix_ma5
L20 - yfinanceでVIX終値を取得する関数。将来再利用のため残置。
L21
L22 ### load_portfolio
L23 - `current_tickers.csv` から銘柄と保有株数を読み込み、目標比率4%を付与したリストを生成。
L24
L25 ### compute_threshold_by_mode
L26 - モード(NORMAL/CAUTION/EMERG) に応じて **12% / 14% / 停止(∞)** を返す。
L27
L28 ### build_dataframe
L29 - 各銘柄の評価額や現在比率、ドリフト、半戻し後比率(`adjusted_ratio`)を計算しDataFrame化。
L30
L31 ### simulate
L32 - ドリフト合計が閾値を超えた場合、半戻し後の売買株数と新比率を試算し、シミュレート後ドリフトを返す。
L33
L34 ### prepare_summary
L35 - 評価額順に並べ替えた後、合計行を付与してSlack表示用テーブルを作成。
L36
L37 ### formatters_for / currency
L38 - 通貨・比率・株数の表示フォーマットを定義。
L39
L40 ### build_header
L41 - 現金保有率・閾値・ドリフト値およびアラート有無をSlackメッセージ用ヘッダに整形。
L42
L43 ### send_slack / send_debug
L44 - 通常通知およびデバッグ詳細をSlack Webhookへ送信。
L45
L46 ### main
L47 - 上記関数を順に呼び出し、日次ドリフトチェックの一連処理を実行。
L48
L49 ## 実行フロー
L50 1. `load_portfolio` で現ポートフォリオを読み込む。
L51 2. `build_breadth_header` でモードを取得し、`compute_threshold_by_mode` で現金保有率とドリフト閾値を決定。
L52 3. `build_dataframe` で現在比率とドリフトを計算。
L53 4. `simulate` で閾値超過時の半戻し案を試算。
L54 5. `prepare_summary` と `build_header` で通知本文とテーブルを構築。
L55 6. `send_slack` で結果を送信。`debug_mode` がTrueなら `send_debug` も併用。
```

```