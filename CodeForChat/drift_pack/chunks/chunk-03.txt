```text
L585     return df, alert, new_total_value, simulated_total_drift_abs
L586
L587
L588 def prepare_summary(df, total_drift_abs, alert):
L589     summary = {
L590         "symbol": "合計",
L591         "shares": df["shares"].sum(),
L592         "value": df["value"].sum(),
L593         "current_ratio": np.nan,
L594         "drift_abs": total_drift_abs,
L595     }
L596     if alert:
L597         summary["trade_shares"] = np.nan
L598     # Sort details by evaluation value descending before appending summary
L599     df = df.sort_values(by="value", ascending=False)
L600     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L601     if alert:
L602         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L603         df_small = df[cols].copy()
L604         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L605     else:
L606         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L607         df_small = df[cols].copy()
L608         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L609     return df_small
L610
L611
L612 def currency(x):
L613     return f"${x:,.0f}" if pd.notnull(x) else ""
L614
L615
L616 def formatters_for(alert):
L617     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L618     if alert:
L619         formatters["Δqty"] = "{:.0f}".format
L620     return formatters
L621
L622
L623 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L624     # 下段ヘッダ：📊と📉のみ（💼は①へ集約済み）
L625     header  = f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(int(drift_threshold)) + '%'}\n"
L626     header += f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L627     if alert:
L628         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L629         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L630     else:
L631         header += "✅ アラートなし\n"
L632     return header
L633
L634
L635 def send_slack(text):
L636     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L637     if not SLACK_WEBHOOK_URL:
L638         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L639     payload = {"text": text}
L640     try:
L641         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L642         resp.raise_for_status()
L643         print("✅ Slack（Webhook）へ送信しました")
L644     except Exception as e:
L645         print(f"⚠️ Slack通知エラー: {e}")
L646
L647
L648 def send_debug(debug_text):
L649     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L650     if not SLACK_WEBHOOK_URL:
L651         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L652     debug_payload = {"text": "```" + debug_text + "```"}
L653     try:
L654         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L655         resp.raise_for_status()
L656         print("✅ Debug情報をSlackに送信しました")
L657     except Exception as e:
L658         print(f"⚠️ Slack通知エラー: {e}")
L659
L660
L661 def main():
L662     portfolio = load_portfolio()
L663     symbols = [r["symbol"] for r in portfolio]
L664     # G集合は leaders.csv を使用（存在前提）
L665     g_syms = _read_leaders_symbols()
L666     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L667
L668     breadth_block, breadth_mode, breadth_score = build_breadth_header()
L669     gcd_mode, gcd_pct = _gcd_mode_today(g_syms)
L670
L671     # モードは GコンポジットDD のみで決定（シンプル化）
L672     final_mode = gcd_mode
L673     save_final_mode(final_mode)
L674
L675     cash_ratio, drift_threshold = compute_threshold_by_mode(final_mode)
L676
L677     df, total_value, total_drift_abs = build_dataframe(portfolio)
L678     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L679         df, total_value, total_drift_abs, drift_threshold
L680     )
L681     df_small = prepare_summary(df, total_drift_abs, alert)
L682     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L683         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L684         if col_sym:
L685             alert_keys = {str(k) for k in sell_alerts.keys()}
L686             df_small[col_sym] = df_small[col_sym].astype(str)
L687             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L688             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L689             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L690     formatters = formatters_for(alert)
L691     header_core = build_header(
L692         final_mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L693     )
L694
L695     # --- Slack送信：①（判定＋このモードの設定）と②（Breadth詳細）を確実に二分割 ---
L696     me_g = MODE_EMOJIS.get(gcd_mode, "")
L697     me_b = MODE_EMOJIS.get(breadth_mode, "")
L698     block_gcd = (
L699         f"① GコンポジットDD: -{gcd_pct:.1f}%"
L700         f"（基準: C={CD_CAUTION*100:.0f}% / E={CD_EMERG*100:.0f}%） 判定: {me_g} {gcd_mode}"
L701     )
L702     # ①ブロック：ここまで＋このモードの設定（📊はここに出さない）
L703     first_block = "```\n" + block_gcd + "\n" + _mode_tail_line(final_mode) + "\n```"
L704
L705     # ②ブロック：Breadthのみ（“総合（参考表示）”は廃止）
L706     block_breadth = f"② Breadth: {me_b} {breadth_mode}（テンプレ合格本数: {breadth_score}）"
L707     # breadth_block の中身（コードフェンス除去＋重複行を除去）
L708     breadth_details = ""
L709     if breadth_block:
L710         inner = breadth_block
L711         if inner.startswith("```"):
L712             inner = inner[len("```"):]
L713             if inner.startswith("\n"):
L714                 inner = inner[1:]
L715             if inner.endswith("```"):
L716                 inner = inner[:-3]
L717         # ②タイトルで既出の行は削除
L718         inner_lines = [ln for ln in inner.splitlines() if ("現在モード" not in ln and "テンプレ合格本数" not in ln)]
L719         breadth_details = "\n".join(inner_lines).strip()
L720     second_body = block_breadth + ("\n" + breadth_details if breadth_details else "")
L721     second_block = "```\n" + second_body.strip() + "\n```"
L722
L723     # 連続コードブロックが結合されないよう空行を1行追加
L724     header = first_block + "\n\n" + second_block + "\n" + header_core
L725     if sell_alerts:
L726         def fmt_pair(date_tags):
L727             date, tags = date_tags
L728             return f"{date}:" + "・".join(tags)
L729         listed = []
L730         for t, arr in sell_alerts.items():
L731             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L732         hits = ", ".join(listed)
L733         if "✅ アラートなし" in header:
L734             header = header.replace(
L735                 "✅ アラートなし",
L736                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L737             )
L738         else:
L739             header += f"\n🟥 {hits}"
L740     table_text = df_small.to_string(formatters=formatters, index=False)
L741     send_slack(header + "\n```" + table_text + "```")
L742
L743     if debug_mode:
L744         debug_cols = [
L745             "symbol",
L746             "shares",
L747             "price",
L748             "value",
L749             "current_ratio",
L750             "drift",
L751             "drift_abs",
L752             "adjusted_ratio",
L753             "adjustable",
L754             "trade_shares",
L755             "new_shares",
L756             "new_value",
L757             "simulated_ratio",
L758             "simulated_drift_abs",
L759         ]
L760         debug_text = (
L761             "=== DEBUG: full dataframe ===\n"
L762             + df[debug_cols].to_string()
L763             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L764             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L765         )
L766         print("\n" + debug_text)
L767         send_debug(debug_text)
L768
L769
L770 if __name__ == "__main__":
L771     main()
L772
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 permissions:
L13   contents: write
L14
L15 jobs:
L16   build-and-report:
L17     runs-on: ubuntu-latest
L18
L19     steps:
L20       - name: Debug start
L21         run: echo '🚀 DEBUGstarted'
L22               
L23       - name: Checkout repository
L24         uses: actions/checkout@v4
L25         with:
L26           fetch-depth: 0
L27
L28       - name: Setup Python
L29         uses: actions/setup-python@v4
L30         with:
L31           python-version: '3.x'
L32
L33       - name: Install dependencies
L34         run: pip install -r requirements.txt
L35
L36       - name: Prepare results directory
L37         run: mkdir -p results
L38
L39       - name: Run drift.py
L40         env:
L41           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L42           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L43         run: python drift.py
L44
L45       - name: Commit results if changed
L46         if: ${{ github.event_name != 'pull_request' }}
L47         run: |
L48           git config user.name  "github-actions[bot]"
L49           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L50           git add results/ || true
L51           if git diff --cached --quiet; then
L52             echo "No changes to commit."
L53             exit 0
L54           fi
L55           git pull --rebase --autostash origin "${GITHUB_REF_NAME:-$GITHUB_REF}" || true
L56           git commit -m "ci: update results [skip ci]"
L57           git push origin HEAD:${GITHUB_REF_NAME:-$GITHUB_REF}
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（GコンポジットDDのみ／Breadthは参考指標）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）。Gが先行して良化すれば1段階回復*
L20
L21 ### ① GコンポジットDD（Growthのみ・**最終モードはこれで決定**）
L22 - 対象：ポートフォリオのうち `bucket = "G"` の銘柄を Growth 群として集計
L23 - 算出：各G銘柄の `Low_today / Peak60(High)` を等加重平均し、`1 - 平均` を%表示（正の値が下落幅）
L24 - しきい値：**CAUTION = 10% / EMERG = 15%**
L25 - ログ：Slackとは別に、標準出力へ銘柄別の Peak60・Low・比率・DD% を降順で記録
L26
L27 ### ② ブレッドス（trend_template 合格本数）※**参考表示のみ**
L28 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L29 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L30   - 緊急入り: max(q05, 12本)
L31   - 緊急解除: max(q20, 18本)
L32   - 通常復帰: max(q60, 36本)
L33 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L34
L35 > メモ：Breadthは市場の体温計として併記するが、**モードの決定はGコンポジットDDのみ**。
L36
L37 ---
L38
L39 ## モード別設定（現金・ドリフト・保有数）
L40
L41 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L42 |--------------|----------|-------------------|----------|------------|-------------|------|
L43 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L44 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% + 追加10% |
L45 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% + 追加10% |
L46
L47 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L48 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L49 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L50
L51 <!-- 冗長な定数管理の注記は削除。実装は config.py に準拠。 -->
L52
L53 ---
L54
L55 ## 新規買付
L56 - **新規INは等分比率（=5%）の半分まで**を上限。  
L57 - 追加補充や半戻し買付も同じ上限に従う。
L58
L59 ---
L60
L61 ## 半戻し（リバランス）
L62 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L63 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L64 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L65
L66 ---
L67
L68 ## モード移行の実務手順
L69 - モードが変わったら、**MMF≒現金**として扱い、Gro
```