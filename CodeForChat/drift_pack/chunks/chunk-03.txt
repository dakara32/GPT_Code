```text
summary(df, total_drift_abs, alert):
L586     summary = {
L587         "symbol": "合計",
L588         "shares": df["shares"].sum(),
L589         "value": df["value"].sum(),
L590         "current_ratio": np.nan,
L591         "drift_abs": total_drift_abs,
L592     }
L593     if alert:
L594         summary["trade_shares"] = np.nan
L595     # Sort details by evaluation value descending before appending summary
L596     df = df.sort_values(by="value", ascending=False)
L597     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L598     if alert:
L599         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L600         df_small = df[cols].copy()
L601         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L602     else:
L603         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L604         df_small = df[cols].copy()
L605         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L606     return df_small
L607
L608
L609 def currency(x):
L610     return f"${x:,.0f}" if pd.notnull(x) else ""
L611
L612
L613 def formatters_for(alert):
L614     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L615     if alert:
L616         formatters["Δqty"] = "{:.0f}".format
L617     return formatters
L618
L619
L620 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L621     # 💼は①に集約し非表示。📊は維持。
L622     header  = f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(int(drift_threshold)) + '%'}\n"
L623     header += f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L624     if alert:
L625         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L626         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L627     else:
L628         header += "✅ アラートなし\n"
L629     return header
L630
L631
L632 def send_slack(text):
L633     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L634     if not SLACK_WEBHOOK_URL:
L635         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L636     payload = {"text": text}
L637     try:
L638         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L639         resp.raise_for_status()
L640         print("✅ Slack（Webhook）へ送信しました")
L641     except Exception as e:
L642         print(f"⚠️ Slack通知エラー: {e}")
L643
L644
L645 def send_debug(debug_text):
L646     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L647     if not SLACK_WEBHOOK_URL:
L648         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L649     debug_payload = {"text": "```" + debug_text + "```"}
L650     try:
L651         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L652         resp.raise_for_status()
L653         print("✅ Debug情報をSlackに送信しました")
L654     except Exception as e:
L655         print(f"⚠️ Slack通知エラー: {e}")
L656
L657
L658 def main():
L659     portfolio = load_portfolio()
L660     symbols = [r["symbol"] for r in portfolio]
L661     # G集合は leaders.csv を使用（存在前提）
L662     g_syms = _read_leaders_symbols()
L663     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L664
L665     breadth_block, breadth_mode, breadth_score = build_breadth_header()
L666     gcd_mode, gcd_pct = _gcd_mode_today(g_syms)
L667
L668     # モードは GコンポジットDD のみで決定（シンプル化）
L669     final_mode = gcd_mode
L670     save_final_mode(final_mode)
L671
L672     cash_ratio, drift_threshold = compute_threshold_by_mode(final_mode)
L673
L674     df, total_value, total_drift_abs = build_dataframe(portfolio)
L675     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L676         df, total_value, total_drift_abs, drift_threshold
L677     )
L678     df_small = prepare_summary(df, total_drift_abs, alert)
L679     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L680         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L681         if col_sym:
L682             alert_keys = {str(k) for k in sell_alerts.keys()}
L683             df_small[col_sym] = df_small[col_sym].astype(str)
L684             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L685             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L686             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L687     formatters = formatters_for(alert)
L688     header_core = build_header(
L689         final_mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L690     )
L691
L692     # --- Slack 送信：①ブロック（判定＋このモードの設定〜推奨現金比率）を独立、②以降は別ブロック ---
L693     me_g = MODE_EMOJIS.get(gcd_mode, "")
L694     me_b = MODE_EMOJIS.get(breadth_mode, "")
L695     block_gcd = (
L696         f"① GコンポジットDD: -{gcd_pct:.1f}%"
L697         f"（基準: C={CD_CAUTION*100:.0f}% / E={CD_EMERG*100:.0f}%） 判定: {me_g} {gcd_mode}"
L698     )
L699     # ①ブロック：ここまで＋このモードの設定〜推奨現金比率まで
L700     first_block = "```\n" + block_gcd + "\n" + _mode_tail_line(final_mode) + "\n```"
L701
L702     # ②以降ブロック：Breadthのみ（“総合（参考表示）”は削除）
L703     block_breadth = f"② Breadth: {me_b} {breadth_mode}（テンプレ合格本数: {breadth_score}）"
L704     # breadth_block の中身（コードフェンス除去＋重複行は除去）
L705     breadth_details = ""
L706     if breadth_block:
L707         inner = breadth_block
L708         if inner.startswith("```"):
L709             inner = inner[len("```"):]
L710             if inner.startswith("\n"):
L711                 inner = inner[1:]
L712             if inner.endswith("```"):
L713                 inner = inner[:-3]
L714         inner_lines = [ln for ln in inner.splitlines() if ("現在モード" not in ln and "テンプレ合格本数" not in ln)]
L715         breadth_details = "\n".join(inner_lines).strip()
L716     second_body = block_breadth + ("\n" + breadth_details if breadth_details else "")
L717     second_block = "```\n" + second_body.strip() + "\n```"
L718
L719     header = first_block + "\n" + second_block + "\n" + header_core
L720     if sell_alerts:
L721         def fmt_pair(date_tags):
L722             date, tags = date_tags
L723             return f"{date}:" + "・".join(tags)
L724         listed = []
L725         for t, arr in sell_alerts.items():
L726             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L727         hits = ", ".join(listed)
L728         if "✅ アラートなし" in header:
L729             header = header.replace(
L730                 "✅ アラートなし",
L731                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L732             )
L733         else:
L734             header += f"\n🟥 {hits}"
L735     table_text = df_small.to_string(formatters=formatters, index=False)
L736     send_slack(header + "\n```" + table_text + "```")
L737
L738     if debug_mode:
L739         debug_cols = [
L740             "symbol",
L741             "shares",
L742             "price",
L743             "value",
L744             "current_ratio",
L745             "drift",
L746             "drift_abs",
L747             "adjusted_ratio",
L748             "adjustable",
L749             "trade_shares",
L750             "new_shares",
L751             "new_value",
L752             "simulated_ratio",
L753             "simulated_drift_abs",
L754         ]
L755         debug_text = (
L756             "=== DEBUG: full dataframe ===\n"
L757             + df[debug_cols].to_string()
L758             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L759             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L760         )
L761         print("\n" + debug_text)
L762         send_debug(debug_text)
L763
L764
L765 if __name__ == "__main__":
L766     main()
L767
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（コンボ：GコンポジットDD × ブレッドス）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）。Gが先行して良化すれば1段階回復*
L20
L21 ### ① GコンポジットDD（Growthのみ）
L22 - 対象：ポートフォリオのうち `bucket = "G"` の銘柄を Growth 群として集計
L23 - 算出：各G銘柄の `Low_today / Peak60(High)` を等加重平均し、`1 - 平均` を%表示（正の値が下落幅）
L24 - しきい値：**CAUTION = 10% / EMERG = 15%**
L25 - ログ：Slackとは別に、標準出力へ銘柄別の Peak60・Low・比率・DD% を降順で記録
L26
L27 ### ② ブレッドス（trend_template 合格本数）
L28 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L29 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L30   - 緊急入り: max(q05, 12本)
L31   - 緊急解除: max(q20, 18本)
L32   - 通常復帰: max(q60, 36本)
L33 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L34
L35 ### コンボルール
L36 - **悪化（ダウングレード）**：①と②のうちランクが高い方（NORMAL < CAUTION < EMERG）を採用 = OR悪化
L37   - 例：①=CAUTION, ②=NORMAL → final=CAUTION
L38   - 例：①=EMERG, ②=CAUTION → final=EMERG
L39
L40 - **回復（アップグレード）**：基本は①②がともに現在より下位モードに揃ったときのみ1段階回復 = AND回復
L41   - 例：EMERG→CAUTION は ①=CAUTION **かつ** ②=CAUTION
L42   - 例：CAUTION→NORMAL は ①=NORMAL **かつ** ②=NORMAL
L43   - ただし GコンポジットDD が先行して下位モードに改善した場合は、1段階だけ先行回復を許容
L44
L45 > 直感フレーズ：**「悪化はどちらか赤で赤、回復は両方青で青。Gが先に青なら1段階戻す」**
L46
L47 ---
L48
L49 ## モード別設定（現金・ドリフト・保有数）
L50
L51 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L52 |--------------|----------|-------------------|----------|------------|-------------|------|
L53 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L54 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% + 追加10% |
L55 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% + 追加10% |
L56
L57 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L58 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L59 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L60
L61 > 定数管理：現金比率・ドリフト閾値・TS・段階TS・推奨保有数・総枠は `config.py`
L62 > の `CASH_RATIO_BY_MODE / DRIFT_THRESHOLD_BY_MODE / TS_BASE_BY_MODE / TS_STEP_DELTAS_PT / COUNTS_BY_MODE / TOTAL_TARGETS`
L63 > を参照する。
L64
L65 ---
L66
L67 ## 新規買付
L68 - **新規INは等分比率（=5%）の半分まで**を上限。  
L69 - 追加補充や半戻し買付も同じ上限に従う。
L70
L71 ---
L72
L73 ## 半戻し（リバランス）
L74 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L75 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L76 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L77
L78 ---
L79
L80 ## モード移行の実務手順
L81 - モードが変わったら、**MMF
```