```text
ll(x) else ""
L605
L606
L607 def formatters_for(alert):
L608     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L609     if alert:
L610         formatters["Δqty"] = "{:.0f}".format
L611     return formatters
L612
L613
L614 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L615     header = (
L616         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L617         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L618         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L619     )
L620     if alert:
L621         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L622         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L623     else:
L624         header += "✅ アラートなし\n"
L625     # ★ 追記: TSルール（G/D共通）と推奨保有数
L626     # TS(基本)をモードで動的表示。段階TSは「基本から -3/-6/-8 pt」固定。
L627     base_ts = config.TS_BASE_BY_MODE.get(mode.upper(), config.TS_BASE_BY_MODE["NORMAL"])
L628     d1, d2, d3 = config.TS_STEP_DELTAS_PT
L629     ts_line = f"*🛡 TS:* 基本 -{base_ts*100:.0f}% / +30%→-{max(base_ts*100 - d1, 0):.0f}% / +60%→-{max(base_ts*100 - d2, 0):.0f}% / +100%→-{max(base_ts*100 - d3, 0):.0f}%\n"
L630     header += ts_line
L631     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L632     cash_pct = cash_slots * (100 / (config.TOTAL_TARGETS))  # 1枠=総数分割の%（20銘柄なら5%）
L633     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct:.0f}%）\n"
L634     return header
L635
L636
L637 def send_slack(text):
L638     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L639     if not SLACK_WEBHOOK_URL:
L640         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L641     payload = {"text": text}
L642     try:
L643         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L644         resp.raise_for_status()
L645         print("✅ Slack（Webhook）へ送信しました")
L646     except Exception as e:
L647         print(f"⚠️ Slack通知エラー: {e}")
L648
L649
L650 def send_debug(debug_text):
L651     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L652     if not SLACK_WEBHOOK_URL:
L653         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L654     debug_payload = {"text": "```" + debug_text + "```"}
L655     try:
L656         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L657         resp.raise_for_status()
L658         print("✅ Debug情報をSlackに送信しました")
L659     except Exception as e:
L660         print(f"⚠️ Slack通知エラー: {e}")
L661
L662
L663 def main():
L664     portfolio = load_portfolio()
L665     symbols = [r["symbol"] for r in portfolio]
L666     g_syms = _load_growth_symbols(portfolio)
L667     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L668
L669     breadth_block, breadth_mode, breadth_score = build_breadth_header()
L670     gcd_mode, gcd_pct = _gcd_mode_today(g_syms)
L671
L672     prev_final = load_final_mode("NORMAL")
L673     gcd_rank = MODE_RANK.get(gcd_mode, 0)
L674     breadth_rank = MODE_RANK.get(breadth_mode, 0)
L675     prev_rank = MODE_RANK.get(prev_final, 0)
L676     if max(gcd_rank, breadth_rank) > prev_rank:
L677         final_mode = gcd_mode if gcd_rank >= breadth_rank else breadth_mode
L678     elif gcd_rank < prev_rank and breadth_rank < prev_rank:
L679         final_mode = gcd_mode if gcd_rank >= breadth_rank else breadth_mode
L680     else:
L681         final_mode = prev_final
L682     save_final_mode(final_mode)
L683
L684     cash_ratio, drift_threshold = compute_threshold_by_mode(final_mode)
L685
L686     df, total_value, total_drift_abs = build_dataframe(portfolio)
L687     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L688         df, total_value, total_drift_abs, drift_threshold
L689     )
L690     df_small = prepare_summary(df, total_drift_abs, alert)
L691     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L692         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L693         if col_sym:
L694             alert_keys = {str(k) for k in sell_alerts.keys()}
L695             df_small[col_sym] = df_small[col_sym].astype(str)
L696             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L697             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L698             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L699     formatters = formatters_for(alert)
L700     header_core = build_header(
L701         final_mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L702     )
L703
L704     summary_lines = [
L705         (
L706             f"① GコンポジットDD: -{gcd_pct:.1f}%"
L707             f"（基準: C={CD_CAUTION*100:.0f}% / E={CD_EMERG*100:.0f}%） 判定: {_format_mode(gcd_mode)}"
L708         ),
L709         f"② Breadth: {_format_mode(breadth_mode)} （テンプレ合格本数: {breadth_score}）",
L710         f"総合（OR悪化/AND回復）: {_format_mode(final_mode)}",
L711     ]
L712     prepend_block = "\n".join(summary_lines)
L713
L714     if breadth_block:
L715         if breadth_block.startswith("```"):
L716             inner = breadth_block[len("```") :]
L717             if inner.startswith("\n"):
L718                 inner = inner[1:]
L719             if inner.endswith("```"):
L720                 inner = inner[: -len("```")]
L721             inner = inner.strip("\n")
L722             inner_lines = [line for line in inner.splitlines() if "現在モード" not in line]
L723             cleaned_inner = "\n".join(inner_lines)
L724             if cleaned_inner:
L725                 new_inner = prepend_block + "\n" + cleaned_inner
L726             else:
L727                 new_inner = prepend_block
L728             breadth_block = "```\n" + new_inner + "\n```"
L729         else:
L730             lines = [line for line in breadth_block.splitlines() if "現在モード" not in line]
L731             cleaned_block = "\n".join(lines)
L732             breadth_block = prepend_block + ("\n" + cleaned_block if cleaned_block else "")
L733         header = breadth_block + "\n" + header_core
L734     else:
L735         header = prepend_block + "\n" + header_core
L736     if sell_alerts:
L737         def fmt_pair(date_tags):
L738             date, tags = date_tags
L739             return f"{date}:" + "・".join(tags)
L740         listed = []
L741         for t, arr in sell_alerts.items():
L742             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L743         hits = ", ".join(listed)
L744         if "✅ アラートなし" in header:
L745             header = header.replace(
L746                 "✅ アラートなし",
L747                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L748             )
L749         else:
L750             header += f"\n🟥 {hits}"
L751     table_text = df_small.to_string(formatters=formatters, index=False)
L752     send_slack(header + "\n```" + table_text + "```")
L753
L754     if debug_mode:
L755         debug_cols = [
L756             "symbol",
L757             "shares",
L758             "price",
L759             "value",
L760             "current_ratio",
L761             "drift",
L762             "drift_abs",
L763             "adjusted_ratio",
L764             "adjustable",
L765             "trade_shares",
L766             "new_shares",
L767             "new_value",
L768             "simulated_ratio",
L769             "simulated_drift_abs",
L770         ]
L771         debug_text = (
L772             "=== DEBUG: full dataframe ===\n"
L773             + df[debug_cols].to_string()
L774             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L775             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L776         )
L777         print("\n" + debug_text)
L778         send_debug(debug_text)
L779
L780
L781 if __name__ == "__main__":
L782     main()
L783
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（コンボ：GコンポジットDD × ブレッドス）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）*
L20
L21 ### ① GコンポジットDD（Growthのみ）
L22 - 対象（Growthの定義）：当日保有銘柄のうち **β ≥ -0.6** を Growth とみなす（Defenseは無視）
L23 - 判定：各銘柄の「今日の安値 / 直近60日高値」から等加重平均を算出し、平均ドローダウン率を評価
L24 - 閾値：
L25   - 平均DD ≥ 15% → ①=EMERG
L26   - 平均DD ≥ 10% → ①=CAUTION
L27   - それ未満 → ①=NORMAL
L28 - 補足：Slackログとは別に、システムログへ銘柄別のPeak60・Low・DD%を降順で出力
L29
L30 ### ② ブレッドス（trend_template 合格本数）
L31 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L32 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L33   - 緊急入り: max(q05, 12本)
L34   - 緊急解除: max(q20, 18本)
L35   - 通常復帰: max(q60, 36本)
L36 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L37
L38 ### コンボルール
L39 - **悪化（ダウングレード）**：
L40   final_mode = max(mode①, mode②)
L41   - 例：①=CAUTION, ②=NORMAL → final=CAUTION
L42   - 例：①=EMERG, ②=CAUTION → final=EMERG
L43
L44 - **回復（アップグレード）**：
L45   final_mode を1段階下げるには、mode① と mode② がともに下位モードに揃った場合のみ
L46   - 例：EMERG→CAUTION は ①=CAUTION **かつ** ②=CAUTION
L47   - 例：CAUTION→NORMAL は ①=NORMAL **かつ** ②=NORMAL
L48
L49 > 直感フレーズ：**「悪化はどちらか赤で赤、回復は両方青で青」**
L50
L51 ---
L52
L53 ## モード別設定（現金・ドリフト・保有数）
L54
L55 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L56 |--------------|----------|-------------------|----------|------------|-------------|------|
L57 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L58 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% |
L59 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% |
L60
L61 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L62 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L63 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L64
L65 ---
L66
L67 ## 新規買付
L68 - **新規INは等分比率（=5%）の半分まで**を上限。  
L69 - 追加補充や半戻し買付も同じ上限に従う。
L70
L71 ---
L72
L73 ## 半戻し（リバランス）
L74 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L75 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L76 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L77
L78 ---
L79
L80 ## モード移行の実務手順
L81 - モードが変わったら、**MMF≒現金**として扱い、
```