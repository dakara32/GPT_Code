```text
reshold)+'%'}\n"
L608         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L609     )
L610     if alert:
L611         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L612         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L613     else:
L614         header += "✅ アラートなし\n"
L615     # ★ 追記: TSルール（G/D共通）と推奨保有数
L616     # TS(基本)をモードで動的表示。段階TSは「基本から -3/-6/-8 pt」固定。
L617     base_ts = config.TS_BASE_BY_MODE.get(mode.upper(), config.TS_BASE_BY_MODE["NORMAL"])
L618     d1, d2, d3 = config.TS_STEP_DELTAS_PT
L619     ts_line = f"*🛡 TS:* 基本 -{base_ts*100:.0f}% / +30%→-{max(base_ts*100 - d1, 0):.0f}% / +60%→-{max(base_ts*100 - d2, 0):.0f}% / +100%→-{max(base_ts*100 - d3, 0):.0f}%\n"
L620     header += ts_line
L621     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L622     cash_pct = cash_slots * (100 / (config.TOTAL_TARGETS))  # 1枠=総数分割の%（20銘柄なら5%）
L623     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct:.0f}%）\n"
L624     return header
L625
L626
L627 def send_slack(text):
L628     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L629     if not SLACK_WEBHOOK_URL:
L630         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L631     payload = {"text": text}
L632     try:
L633         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L634         resp.raise_for_status()
L635         print("✅ Slack（Webhook）へ送信しました")
L636     except Exception as e:
L637         print(f"⚠️ Slack通知エラー: {e}")
L638
L639
L640 def send_debug(debug_text):
L641     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L642     if not SLACK_WEBHOOK_URL:
L643         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L644     debug_payload = {"text": "```" + debug_text + "```"}
L645     try:
L646         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L647         resp.raise_for_status()
L648         print("✅ Debug情報をSlackに送信しました")
L649     except Exception as e:
L650         print(f"⚠️ Slack通知エラー: {e}")
L651
L652
L653 def main():
L654     portfolio = load_portfolio()
L655     symbols = [r["symbol"] for r in portfolio]
L656     g_syms = _load_growth_symbols(portfolio)
L657     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L658
L659     breadth_block, breadth_mode, breadth_score = build_breadth_header()
L660     ts_mode, k5, today_hits = _ts_mode_growth_5d(g_syms, breadth_mode)
L661     combo_mode = _combine_modes(ts_mode, breadth_mode)
L662
L663     cash_ratio, drift_threshold = compute_threshold_by_mode(breadth_mode)
L664
L665     df, total_value, total_drift_abs = build_dataframe(portfolio)
L666     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L667         df, total_value, total_drift_abs, drift_threshold
L668     )
L669     df_small = prepare_summary(df, total_drift_abs, alert)
L670     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L671         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L672         if col_sym:
L673             alert_keys = {str(k) for k in sell_alerts.keys()}
L674             df_small[col_sym] = df_small[col_sym].astype(str)
L675             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L676             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L677             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L678     formatters = formatters_for(alert)
L679     header_core = build_header(
L680         breadth_mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L681     )
L682
L683     g_count = len(g_syms)
L684     hits_line = "なし" if not today_hits else ", ".join(sorted(today_hits))
L685     summary_lines = [
L686         f"① Growth TS: {_format_mode(ts_mode)} （5Dユニーク: {k5} / G={g_count}）",
L687         f"・当日ヒット: {hits_line}",
L688         f"② Breadth: {_format_mode(breadth_mode)} （テンプレ合格本数: {breadth_score}）",
L689         f"総合（OR悪化/AND回復）: {_format_mode(combo_mode)}",
L690     ]
L691     prepend_block = "\n".join(summary_lines)
L692
L693     if breadth_block:
L694         if breadth_block.startswith("```"):
L695             inner = breadth_block[len("```") :]
L696             if inner.startswith("\n"):
L697                 inner = inner[1:]
L698             if inner.endswith("```"):
L699                 inner = inner[: -len("```")]
L700             inner = inner.strip("\n")
L701             inner_lines = [line for line in inner.splitlines() if "現在モード" not in line]
L702             cleaned_inner = "\n".join(inner_lines)
L703             if cleaned_inner:
L704                 new_inner = prepend_block + "\n" + cleaned_inner
L705             else:
L706                 new_inner = prepend_block
L707             breadth_block = "```\n" + new_inner + "\n```"
L708         else:
L709             lines = [line for line in breadth_block.splitlines() if "現在モード" not in line]
L710             cleaned_block = "\n".join(lines)
L711             breadth_block = prepend_block + ("\n" + cleaned_block if cleaned_block else "")
L712         header = breadth_block + "\n" + header_core
L713     else:
L714         header = prepend_block + "\n" + header_core
L715     if sell_alerts:
L716         def fmt_pair(date_tags):
L717             date, tags = date_tags
L718             return f"{date}:" + "・".join(tags)
L719         listed = []
L720         for t, arr in sell_alerts.items():
L721             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L722         hits = ", ".join(listed)
L723         if "✅ アラートなし" in header:
L724             header = header.replace(
L725                 "✅ アラートなし",
L726                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L727             )
L728         else:
L729             header += f"\n🟥 {hits}"
L730     table_text = df_small.to_string(formatters=formatters, index=False)
L731     send_slack(header + "\n```" + table_text + "```")
L732
L733     if debug_mode:
L734         debug_cols = [
L735             "symbol",
L736             "shares",
L737             "price",
L738             "value",
L739             "current_ratio",
L740             "drift",
L741             "drift_abs",
L742             "adjusted_ratio",
L743             "adjustable",
L744             "trade_shares",
L745             "new_shares",
L746             "new_value",
L747             "simulated_ratio",
L748             "simulated_drift_abs",
L749         ]
L750         debug_text = (
L751             "=== DEBUG: full dataframe ===\n"
L752             + df[debug_cols].to_string()
L753             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L754             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L755         )
L756         print("\n" + debug_text)
L757         send_debug(debug_text)
L758
L759
L760 if __name__ == "__main__":
L761     main()
L762
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（コンボ：先導株TS × ブレッドス）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）*
L20
L21 ### ① 先導株TSシグナル（Growthのみ）
L22 - 対象（Growthの定義）：当日保有銘柄のうち **β ≥ -0.6** を Growth とみなす（Defenseは無視）
L23 - 判定：直近60日高値からモード別基本TS幅（NORMAL:-15% / CAUTION:-13% / EMERG:-10%）以上の下落を「TS抵触」とみなす
L24 - 集計：直近5営業日のユニーク抵触銘柄数
L25   - 8銘柄以上 → ①=EMERG
L26   - 6銘柄以上 → ①=CAUTION
L27   - それ未満 → ①=NORMAL
L28 - 補足：同一日に複数回実行した場合は、**同日上書き**で管理
L29
L30 ### ② ブレッドス（trend_template 合格本数）
L31 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L32 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L33   - 緊急入り: max(q05, 12本)
L34   - 緊急解除: max(q20, 18本)
L35   - 通常復帰: max(q60, 36本)
L36 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L37
L38 ### コンボルール
L39 - **悪化（ダウングレード）**：
L40   final_mode = max(mode①, mode②)
L41   - 例：①=CAUTION, ②=NORMAL → final=CAUTION
L42   - 例：①=EMERG, ②=CAUTION → final=EMERG
L43
L44 - **回復（アップグレード）**：
L45   final_mode を1段階下げるには、mode① と mode② がともに下位モードに揃った場合のみ
L46   - 例：EMERG→CAUTION は ①=CAUTION **かつ** ②=CAUTION
L47   - 例：CAUTION→NORMAL は ①=NORMAL **かつ** ②=NORMAL
L48
L49 > 直感フレーズ：**「悪化はどちらか赤で赤、回復は両方青で青」**
L50
L51 ---
L52
L53 ## モード別設定（現金・ドリフト・保有数）
L54
L55 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L56 |--------------|----------|-------------------|----------|------------|-------------|------|
L57 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L58 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% |
L59 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% |
L60
L61 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L62 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L63 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L64
L65 ---
L66
L67 ## 新規買付
L68 - **新規INは等分比率（=5%）の半分まで**を上限。  
L69 - 追加補充や半戻し買付も同じ上限に従う。
L70
L71 ---
L72
L73 ## 半戻し（リバランス）
L74 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L75 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L76 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L77
L78 ---
L79
L80 ## モード移行の実務手順
L81 - モードが変わったら、**MMF≒現金**として扱い、Growth枠数だけ調整：  
L82   1. **Gを削る**（CAUTION/EMERG）：⭐️低スコアのGから順に外し、`current_tickers.csv` から行削除（=現金化）。  
L83   2. **現金として保持**。  
L84   3. **NORMAL復帰時の補充**：`current_tickers.csv` に銘柄を追加（スコア上位から）。以降は日次ドリフト/TSルールに従う。  
L85 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて均等比率を再計算。
L86
L87 ---
L88
L89 ## 入替銘柄選定
L90 - **ファクター分散最適化手法を用いて日次でスコア集計**し、**スコア上位からIN/OUT**を決定。  
L91 - 参考：Oxfordキャピタル、Alpha Investor、Motley Fool、moomooスクリーニング等。  
L92 - 年間NISA枠はGrowth群から低ボラ銘柄を選定し利用（長期保持に固執しない）。
L93
L94 ---
L95
L96 ## 実行タイミング
L97 - 判定：米国市場終値直後  
L98 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 20銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから価格を取得（レジームは trend_template 本数に基づく（基準 N_G=12））。
L6   - 緊急入り: `max(q05, 12本)`
L7   - 緊急解除: `max(q20, 18本)` （ceil(1.5*12)）
L8   - 通常復帰: `max(q60, 36本)` （3*12）
L9
L10 ## 定数・設定
L11 - `FINNHUB_API_KEY` / `SLACK_WEBHOOK_URL` を環境変数から取得。
L12 - 無料枠を考慮し
```