```text
     }
L591     if alert:
L592         summary["trade_shares"] = np.nan
L593     # Sort details by evaluation value descending before appending summary
L594     df = df.sort_values(by="value", ascending=False)
L595     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L596     if alert:
L597         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L598         df_small = df[cols].copy()
L599         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L600     else:
L601         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L602         df_small = df[cols].copy()
L603         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L604     return df_small
L605
L606
L607 def currency(x):
L608     return f"${x:,.0f}" if pd.notnull(x) else ""
L609
L610
L611 def formatters_for(alert):
L612     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L613     if alert:
L614         formatters["Δqty"] = "{:.0f}".format
L615     return formatters
L616
L617
L618 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L619     mode_ratio = config.CASH_RATIO_BY_MODE.get(mode.upper(), cash_ratio)
L620     header = (
L621         f"*💼 推奨現金比率:* {mode_ratio*100:.1f}%（モード準拠）\n"
L622         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L623         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L624     )
L625     if alert:
L626         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L627         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L628     else:
L629         header += "✅ アラートなし\n"
L630     return header
L631
L632
L633 def send_slack(text):
L634     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L635     if not SLACK_WEBHOOK_URL:
L636         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L637     payload = {"text": text}
L638     try:
L639         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L640         resp.raise_for_status()
L641         print("✅ Slack（Webhook）へ送信しました")
L642     except Exception as e:
L643         print(f"⚠️ Slack通知エラー: {e}")
L644
L645
L646 def send_debug(debug_text):
L647     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L648     if not SLACK_WEBHOOK_URL:
L649         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L650     debug_payload = {"text": "```" + debug_text + "```"}
L651     try:
L652         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L653         resp.raise_for_status()
L654         print("✅ Debug情報をSlackに送信しました")
L655     except Exception as e:
L656         print(f"⚠️ Slack通知エラー: {e}")
L657
L658
L659 def main():
L660     portfolio = load_portfolio()
L661     symbols = [r["symbol"] for r in portfolio]
L662     # G集合は leaders.csv を使用（存在前提）
L663     g_syms = _read_leaders_symbols()
L664     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L665
L666     breadth_block, breadth_mode, breadth_score = build_breadth_header()
L667     gcd_mode, gcd_pct = _gcd_mode_today(g_syms)
L668
L669     # モードは GコンポジットDD のみで決定（シンプル化）
L670     final_mode = gcd_mode
L671     save_final_mode(final_mode)
L672
L673     cash_ratio, drift_threshold = compute_threshold_by_mode(final_mode)
L674
L675     df, total_value, total_drift_abs = build_dataframe(portfolio)
L676     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L677         df, total_value, total_drift_abs, drift_threshold
L678     )
L679     df_small = prepare_summary(df, total_drift_abs, alert)
L680     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L681         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L682         if col_sym:
L683             alert_keys = {str(k) for k in sell_alerts.keys()}
L684             df_small[col_sym] = df_small[col_sym].astype(str)
L685             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L686             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L687             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L688     formatters = formatters_for(alert)
L689     header_core = build_header(
L690         final_mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L691     )
L692
L693     # --- Slack 送信：①ブロック（判定＋このモードの設定〜推奨現金比率）を独立、②以降は別ブロック ---
L694     me_g = MODE_EMOJIS.get(gcd_mode, "")
L695     me_b = MODE_EMOJIS.get(breadth_mode, "")
L696     me_f = MODE_EMOJIS.get(final_mode, "")
L697     block_gcd = (
L698         f"① GコンポジットDD: -{gcd_pct:.1f}%"
L699         f"（基準: C={CD_CAUTION*100:.0f}% / E={CD_EMERG*100:.0f}%） 判定: {me_g} {gcd_mode}"
L700     )
L701     # ①ブロック：ここまで＋このモードの設定〜推奨現金比率まで
L702     first_block = "```\n" + block_gcd + "\n" + _mode_tail_line(final_mode) + "\n```"
L703
L704     # ②以降ブロック：Breadth と参考総合表示（※モードはGのみで決定）
L705     block_breadth = f"② Breadth: {me_b} {breadth_mode}（テンプレ合格本数: {breadth_score}）"
L706     block_final = f"総合（参考表示）: {me_f} {final_mode}"
L707     # breadth_block の中身（コードフェンス除去＋「現在モード」行は除去）
L708     breadth_details = ""
L709     if breadth_block:
L710         inner = breadth_block
L711         if inner.startswith("```"):
L712             inner = inner[len("```"):]
L713             if inner.startswith("\n"):
L714                 inner = inner[1:]
L715             if inner.endswith("```"):
L716                 inner = inner[:-3]
L717         inner_lines = [ln for ln in inner.splitlines() if "現在モード" not in ln]
L718         breadth_details = "\n".join(inner_lines).strip()
L719     second_body = block_breadth + "\n" + block_final + ("\n" + breadth_details if breadth_details else "")
L720     second_block = "```\n" + second_body.strip() + "\n```"
L721
L722     header = first_block + "\n" + second_block + "\n" + header_core
L723     if sell_alerts:
L724         def fmt_pair(date_tags):
L725             date, tags = date_tags
L726             return f"{date}:" + "・".join(tags)
L727         listed = []
L728         for t, arr in sell_alerts.items():
L729             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L730         hits = ", ".join(listed)
L731         if "✅ アラートなし" in header:
L732             header = header.replace(
L733                 "✅ アラートなし",
L734                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L735             )
L736         else:
L737             header += f"\n🟥 {hits}"
L738     table_text = df_small.to_string(formatters=formatters, index=False)
L739     send_slack(header + "\n```" + table_text + "```")
L740
L741     if debug_mode:
L742         debug_cols = [
L743             "symbol",
L744             "shares",
L745             "price",
L746             "value",
L747             "current_ratio",
L748             "drift",
L749             "drift_abs",
L750             "adjusted_ratio",
L751             "adjustable",
L752             "trade_shares",
L753             "new_shares",
L754             "new_value",
L755             "simulated_ratio",
L756             "simulated_drift_abs",
L757         ]
L758         debug_text = (
L759             "=== DEBUG: full dataframe ===\n"
L760             + df[debug_cols].to_string()
L761             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L762             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L763         )
L764         print("\n" + debug_text)
L765         send_debug(debug_text)
L766
L767
L768 if __name__ == "__main__":
L769     main()
L770
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（コンボ：GコンポジットDD × ブレッドス）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）。Gが先行して良化すれば1段階回復*
L20
L21 ### ① GコンポジットDD（Growthのみ）
L22 - 対象：ポートフォリオのうち `bucket = "G"` の銘柄を Growth 群として集計
L23 - 算出：各G銘柄の `Low_today / Peak60(High)` を等加重平均し、`1 - 平均` を%表示（正の値が下落幅）
L24 - しきい値：**CAUTION = 10% / EMERG = 15%**
L25 - ログ：Slackとは別に、標準出力へ銘柄別の Peak60・Low・比率・DD% を降順で記録
L26
L27 ### ② ブレッドス（trend_template 合格本数）
L28 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L29 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L30   - 緊急入り: max(q05, 12本)
L31   - 緊急解除: max(q20, 18本)
L32   - 通常復帰: max(q60, 36本)
L33 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L34
L35 ### コンボルール
L36 - **悪化（ダウングレード）**：①と②のうちランクが高い方（NORMAL < CAUTION < EMERG）を採用 = OR悪化
L37   - 例：①=CAUTION, ②=NORMAL → final=CAUTION
L38   - 例：①=EMERG, ②=CAUTION → final=EMERG
L39
L40 - **回復（アップグレード）**：基本は①②がともに現在より下位モードに揃ったときのみ1段階回復 = AND回復
L41   - 例：EMERG→CAUTION は ①=CAUTION **かつ** ②=CAUTION
L42   - 例：CAUTION→NORMAL は ①=NORMAL **かつ** ②=NORMAL
L43   - ただし GコンポジットDD が先行して下位モードに改善した場合は、1段階だけ先行回復を許容
L44
L45 > 直感フレーズ：**「悪化はどちらか赤で赤、回復は両方青で青。Gが先に青なら1段階戻す」**
L46
L47 ---
L48
L49 ## モード別設定（現金・ドリフト・保有数）
L50
L51 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L52 |--------------|----------|-------------------|----------|------------|-------------|------|
L53 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L54 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% + 追加10% |
L55 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% + 追加10% |
L56
L57 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L58 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L59 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L60
L61 > 定数管理：現金比率・ドリフト閾値・TS・段階TS・推奨保有数・総枠は `config.py`
L62 > の `CASH_RATIO_BY_MODE / DRIFT_THRESHOLD_BY_MODE / TS_BASE_BY_MODE / TS_STEP_DELTAS_PT / COUNTS_BY_MODE / TOTAL_TARGETS`
L63 > を参照する。
L64
L65 ---
L66
L67 ## 新規買付
L68 - **新規INは等分比率（=5%）の半分まで**を上限。  
L69 - 追加補充や半戻し買付も同じ上限に従う。
L70
L71 ---
L72
L73 ## 半戻し（リバランス）
L74 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L75 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L76 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L77
L78 ---
L79
L80 ## モード移行の実務手順
L81 - モードが変わったら、**MMF≒現金**として扱い、Growth枠数だけ調整：  
L
```