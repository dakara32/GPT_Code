```text
7     summary = {
L618         "symbol": "合計",
L619         "shares": df["shares"].sum(),
L620         "value": df["value"].sum(),
L621         "current_ratio": np.nan,
L622         "drift_abs": total_drift_abs,
L623     }
L624     if alert:
L625         summary["trade_shares"] = np.nan
L626     # Sort details by evaluation value descending before appending summary
L627     df = df.sort_values(by="value", ascending=False)
L628     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L629     if alert:
L630         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L631         df_small = df[cols].copy()
L632         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L633     else:
L634         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L635         df_small = df[cols].copy()
L636         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L637     return df_small
L638
L639
L640 def currency(x):
L641     return f"${x:,.0f}" if pd.notnull(x) else ""
L642
L643
L644 def formatters_for(alert):
L645     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L646     if alert:
L647         formatters["Δqty"] = "{:.0f}".format
L648     return formatters
L649
L650
L651 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L652     header = (
L653         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L654         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L655         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L656     )
L657     if alert:
L658         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L659         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L660     else:
L661         header += "✅ アラートなし\n"
L662     # ★ 追記: TSルール（G/D共通）と推奨保有数
L663     # TS(基本)をモードで動的表示。段階TSは「基本から -3/-6/-8 pt」固定。
L664     base_ts = config.TS_BASE_BY_MODE.get(mode.upper(), config.TS_BASE_BY_MODE["NORMAL"])
L665     d1, d2, d3 = config.TS_STEP_DELTAS_PT
L666     ts_line = f"*🛡 TS:* 基本 -{base_ts*100:.0f}% / +30%→-{max(base_ts*100 - d1, 0):.0f}% / +60%→-{max(base_ts*100 - d2, 0):.0f}% / +100%→-{max(base_ts*100 - d3, 0):.0f}%\n"
L667     header += ts_line
L668     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L669     cash_pct = cash_slots * (100 / (config.TOTAL_TARGETS))  # 1枠=総数分割の%（20銘柄なら5%）
L670     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct:.0f}%）\n"
L671     return header
L672
L673
L674 def send_slack(text):
L675     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L676     if not SLACK_WEBHOOK_URL:
L677         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L678     payload = {"text": text}
L679     try:
L680         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L681         resp.raise_for_status()
L682         print("✅ Slack（Webhook）へ送信しました")
L683     except Exception as e:
L684         print(f"⚠️ Slack通知エラー: {e}")
L685
L686
L687 def send_debug(debug_text):
L688     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L689     if not SLACK_WEBHOOK_URL:
L690         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L691     debug_payload = {"text": "```" + debug_text + "```"}
L692     try:
L693         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L694         resp.raise_for_status()
L695         print("✅ Debug情報をSlackに送信しました")
L696     except Exception as e:
L697         print(f"⚠️ Slack通知エラー: {e}")
L698
L699
L700 def main():
L701     portfolio = load_portfolio()
L702     symbols = [r["symbol"] for r in portfolio]
L703     g_syms = _load_growth_symbols(portfolio)
L704     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L705
L706     breadth_block, breadth_mode, breadth_score = build_breadth_header()
L707     ts_mode, k5, ts_hits = _ts_mode_growth_eod(g_syms, breadth_mode)
L708     combo_mode = _combine_modes(ts_mode, breadth_mode)
L709
L710     cash_ratio, drift_threshold = compute_threshold_by_mode(breadth_mode)
L711
L712     df, total_value, total_drift_abs = build_dataframe(portfolio)
L713     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L714         df, total_value, total_drift_abs, drift_threshold
L715     )
L716     df_small = prepare_summary(df, total_drift_abs, alert)
L717     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L718         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L719         if col_sym:
L720             alert_keys = {str(k) for k in sell_alerts.keys()}
L721             df_small[col_sym] = df_small[col_sym].astype(str)
L722             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L723             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L724             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L725     formatters = formatters_for(alert)
L726     header_core = build_header(
L727         breadth_mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L728     )
L729
L730     g_count = len(g_syms)
L731     hits_line = "なし" if not ts_hits else ", ".join(sorted(ts_hits))
L732     summary_lines = [
L733         f"① Growth TS: {_format_mode(ts_mode)} （5Dユニーク: {k5} / G={g_count}）",
L734         f"・当日ヒット: {hits_line}",
L735         f"② Breadth: {_format_mode(breadth_mode)} （テンプレ合格本数: {breadth_score}）",
L736         f"総合（OR悪化/AND回復）: {_format_mode(combo_mode)}",
L737     ]
L738     prepend_block = "\n".join(summary_lines)
L739
L740     if breadth_block:
L741         if breadth_block.startswith("```"):
L742             remainder = breadth_block[len("```") :]
L743             if remainder.startswith("\n"):
L744                 remainder = remainder[1:]
L745             breadth_block = "```\n" + prepend_block + "\n" + remainder
L746         else:
L747             breadth_block = prepend_block + "\n" + breadth_block
L748         header = breadth_block + "\n" + header_core
L749     else:
L750         header = prepend_block + "\n" + header_core
L751     if sell_alerts:
L752         def fmt_pair(date_tags):
L753             date, tags = date_tags
L754             return f"{date}:" + "・".join(tags)
L755         listed = []
L756         for t, arr in sell_alerts.items():
L757             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L758         hits = ", ".join(listed)
L759         if "✅ アラートなし" in header:
L760             header = header.replace(
L761                 "✅ アラートなし",
L762                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L763             )
L764         else:
L765             header += f"\n🟥 {hits}"
L766     table_text = df_small.to_string(formatters=formatters, index=False)
L767     send_slack(header + "\n```" + table_text + "```")
L768
L769     if debug_mode:
L770         debug_cols = [
L771             "symbol",
L772             "shares",
L773             "price",
L774             "value",
L775             "current_ratio",
L776             "drift",
L777             "drift_abs",
L778             "adjusted_ratio",
L779             "adjustable",
L780             "trade_shares",
L781             "new_shares",
L782             "new_value",
L783             "simulated_ratio",
L784             "simulated_drift_abs",
L785         ]
L786         debug_text = (
L787             "=== DEBUG: full dataframe ===\n"
L788             + df[debug_cols].to_string()
L789             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L790             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L791         )
L792         print("\n" + debug_text)
L793         send_debug(debug_text)
L794
L795
L796 if __name__ == "__main__":
L797     main()
L798
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（コンボ：先導株TS × ブレッドス）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）*
L20
L21 ### ① 先導株TSシグナル（Growthのみ）
L22 - 対象（Growthの定義）：当日保有銘柄のうち **β ≥ -0.6** を Growth とみなす（Defenseは無視）
L23 - 判定：直近60日高値からモード別基本TS幅（NORMAL:-15% / CAUTION:-13% / EMERG:-10%）以上の下落を「TS抵触」とみなす
L24 - 集計：直近5営業日のユニーク抵触銘柄数
L25   - 8銘柄以上 → ①=EMERG
L26   - 6銘柄以上 → ①=CAUTION
L27   - それ未満 → ①=NORMAL
L28 - 補足：同一日に複数回実行した場合は、**同日上書き**で管理
L29
L30 ### ② ブレッドス（trend_template 合格本数）
L31 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L32 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L33   - 緊急入り: max(q05, 12本)
L34   - 緊急解除: max(q20, 18本)
L35   - 通常復帰: max(q60, 36本)
L36 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L37
L38 ### コンボルール
L39 - **悪化（ダウングレード）**：
L40   final_mode = max(mode①, mode②)
L41   - 例：①=CAUTION, ②=NORMAL → final=CAUTION
L42   - 例：①=EMERG, ②=CAUTION → final=EMERG
L43
L44 - **回復（アップグレード）**：
L45   final_mode を1段階下げるには、mode① と mode② がともに下位モードに揃った場合のみ
L46   - 例：EMERG→CAUTION は ①=CAUTION **かつ** ②=CAUTION
L47   - 例：CAUTION→NORMAL は ①=NORMAL **かつ** ②=NORMAL
L48
L49 > 直感フレーズ：**「悪化はどちらか赤で赤、回復は両方青で青」**
L50
L51 ---
L52
L53 ## モード別設定（現金・ドリフト・保有数）
L54
L55 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L56 |--------------|----------|-------------------|----------|------------|-------------|------|
L57 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L58 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% |
L59 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% |
L60
L61 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L62 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L63 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L64
L65 ---
L66
L67 ## 新規買付
L68 - **新規INは等分比率（=5%）の半分まで**を上限。  
L69 - 追加補充や半戻し買付も同じ上限に従う。
L70
L71 ---
L72
L73 ## 半戻し（リバランス）
L74 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L75 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L76 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L77
L78 ---
L79
L80 ## モード移行の実務手順
L81 - モードが変わったら、**MMF≒現金**として扱い、Gr
```