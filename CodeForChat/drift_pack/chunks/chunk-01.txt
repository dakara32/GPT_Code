```text
# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: config.py, drift.py, .github/workflows/daily-report.yml, documents/README.md, documents/drift_design.md
# 作成日時: 2025-09-27 11:38:42 (JST)
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <config.py>
```text
L1 # 共通設定（factor / drift から参照）
L2 TOTAL_TARGETS = 20
L3
L4 # 基準のバケット数（NORMAL）
L5 COUNTS_BASE = {"G": 12, "D": 8}
L6
L7 # モード別の推奨バケット数
L8 COUNTS_BY_MODE = {
L9     "NORMAL": {"G": 12, "D": 8},
L10     "CAUTION": {"G": 10, "D": 8},
L11     "EMERG": {"G": 8,  "D": 8},
L12 }
L13
L14 # モード別のドリフト閾値（%）
L15 DRIFT_THRESHOLD_BY_MODE = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L16
L17 # モード別の推奨現金比率
L18 CASH_RATIO_BY_MODE = {
L19     "NORMAL": 0.10,  # 10%
L20     "CAUTION": 0.20,  # 20%
L21     "EMERG": 0.30,  # 30%
L22 }
L23
L24 # モード別のTS（基本幅, 小数=割合）
L25 TS_BASE_BY_MODE = {"NORMAL": 0.15, "CAUTION": 0.13, "EMERG": 0.10}
L26 # 利益到達(+30/+60/+100%)時の段階タイト化（ポイント差）
L27 TS_STEP_DELTAS_PT = (3, 6, 8)
L28
L29 # Breadthの校正は N_G に連動（緊急解除=ceil(1.5*N_G), 通常復帰=3*N_G）
L30 N_G = COUNTS_BASE["G"]
L31 N_D = COUNTS_BASE["D"]
L32
```

## <drift.py>
```text
L1 import pandas as pd, yfinance as yf
L2 import numpy as np
L3 import requests
L4 import os
L5 import json
L6 import time
L7 from pathlib import Path
L8 import csv
L9 import config
L10
L11 # --- GコンポジットDDのしきい値（Growthの平均DD基準）---
L12 CD_CAUTION = 0.10   # -10% で警戒
L13 CD_EMERG = 0.15   # -15% で緊急
L14
L15 MODE_LABELS_JA = {"NORMAL": "通常", "CAUTION": "警戒", "EMERG": "緊急"}
L16 # Slack通知用のモードアイコン
L17 MODE_EMOJIS = {"NORMAL": "🟢", "CAUTION": "⚠️", "EMERG": "🔴"}
L18 MODE_RANK = {"NORMAL": 0, "CAUTION": 1, "EMERG": 2}
L19
L20 # --- breadth utilities (factor parity) ---
L21 BENCH = "^GSPC"
L22 CAND_PRICE_MAX = 450.0
L23 RESULTS_DIR = "results"
L24 os.makedirs(RESULTS_DIR, exist_ok=True)
L25
L26
L27 def _state_file():
L28     """Return path to JSON storing the latest breadth/final mode state."""
L29
L30     return str(Path(RESULTS_DIR) / "current_mode.json")
L31
L32
L33 def _load_state_dict() -> dict:
L34     p = Path(_state_file())
L35     if not p.exists():
L36         return {}
L37     try:
L38         data = json.loads(p.read_text(encoding="utf-8") or "{}")
L39         return data if isinstance(data, dict) else {}
L40     except Exception:
L41         return {}
L42
L43
L44 def _save_state_dict(state: dict):
L45     try:
L46         Path(_state_file()).write_text(
L47             json.dumps(state, ensure_ascii=False, indent=2), encoding="utf-8"
L48         )
L49     except Exception:
L50         pass
L51
L52
L53 def load_breadth_mode(default: str = "NORMAL") -> str:
L54     state = _load_state_dict()
L55     mode = state.get("breadth_mode", state.get("mode", default))
L56     return mode if mode in MODE_RANK else default
L57
L58
L59 def save_breadth_mode(mode: str):
L60     return  # 参考値のため保存しない（no-op）
L61
L62
L63 def load_final_mode(default: str = "NORMAL") -> str:
L64     state = _load_state_dict()
L65     mode = state.get("final_mode", state.get("mode", default))
L66     return mode if mode in MODE_RANK else default
L67
L68
L69 def save_final_mode(mode: str):
L70     """状態ファイルは mode のみを保存（G-CDで決定）"""
L71     m = (mode or "NORMAL").upper().strip()
L72     Path(_state_file()).write_text(
L73         json.dumps({"mode": m}, ensure_ascii=False, indent=2),
L74         encoding="utf-8",
L75     )
L76
L77
L78 def _read_csv_list(fname):
L79     p = Path(__file__).with_name(fname)
L80     if not p.exists(): return []
L81     return pd.read_csv(p, header=None).iloc[:,0].astype(str).str.upper().tolist()
L82
L83
L84 # leaders.csv 読み込み（results/leaders.csv, 1列想定）
L85 def _read_leaders_symbols() -> list[str]:
L86     p = Path(__file__).with_name("results").joinpath("leaders.csv")
L87     df = pd.read_csv(p, header=None)
L88     return sorted(set(df.iloc[:,0].astype(str).str.strip().str.upper().tolist()))
L89
L90 def _load_universe():
L91     # exist + candidate を使用。candidate は価格上限で事前フィルタ
L92     exist = _read_csv_list("current_tickers.csv")
L93     cand  = _read_csv_list("candidate_tickers.csv")
L94     cand_info = yf.Tickers(" ".join(cand)) if cand else None
L95     cand_keep = []
L96     for t in cand:
L97         try:
L98             px = cand_info.tickers[t].fast_info.get("lastPrice", float("inf"))
L99         except Exception:
L100             px = float("inf")
L101         if pd.notna(px) and float(px) <= CAND_PRICE_MAX:
L102             cand_keep.append(t)
L103     tickers = sorted(set(exist + cand_keep))
L104     return exist, cand_keep, tickers
L105
L106
L107 def _fetch_prices_600d(tickers):
L108     data = yf.download(
L109         tickers + [BENCH],
L110         period="600d",
L111         auto_adjust=True,
L112         progress=False,
L113         threads=False,
L114     )
L115     close = data["Close"]
L116     px = close.dropna(how="all", axis=1).ffill(limit=2)
L117     spx = close[BENCH].reindex(px.index).ffill()
L118     return px, spx
L119
L120
L121 def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L122     # scorer.py の実装をそのまま移植（ベクトル化版）
L123     import numpy as np, pandas as pd
L124     if px is None or px.empty:
L125         return pd.Series(dtype=int)
L126     px = px.dropna(how="all", axis=1)
L127     if win_days and win_days > 0:
L128         px = px.tail(win_days)
L129     if px.empty:
L130         return pd.Series(dtype=int)
L131     # 欠損吸収
L132     px = px.ffill(limit=2)
L133     spx = spx.reindex(px.index).ffill()
L134
L135     ma50  = px.rolling(50,  min_periods=50).mean()
L136     ma150 = px.rolling(150, min_periods=150).mean()
L137     ma200 = px.rolling(200, min_periods=200).mean()
L138
L139     tt = (px > ma150)
L140     tt &= (px > ma200)
L141     tt &= (ma150 > ma200)
L142     tt &= (ma200 - ma200.shift(21) > 0)
L143     tt &= (ma50  > ma150)
L144     tt &= (ma50  > ma200)
L145     tt &= (px    > ma50)
L146
L147     lo252 = px.rolling(252, min_periods=252).min()
L148     hi252 = px.rolling(252, min_periods=252).max()
L149     tt &= (px.divide(lo252).sub(1.0) >= 0.30)
L150     tt &= (px >= (0.75 * hi252))
L151
L152     r12  = px.divide(px.shift(252)).sub(1.0)
L153     br12 = spx.divide(spx.shift(252)).sub(1.0)
L154     r1   = px.divide(px.shift(22)).sub(1.0)
L155     br1  = spx.divide(spx.shift(22)).sub(1.0)
L156     rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L157     tt &= (rs >= 0.10)
L158
L159     return tt.fillna(False).sum(axis=1).astype(int)
L160
L161
L162 def build_breadth_header():
L163     # factor._build_breadth_lead_lines と同一挙動
L164     exist, cand, tickers = _load_universe()
L165     if not tickers:
L166         return "", "NORMAL", 0
L167     px, spx = _fetch_prices_600d(tickers)
L168     win = int(os.getenv("BREADTH_CALIB_WIN_DAYS", "600"))
L169     C_ts = trend_template_breadth_series(px, spx, win_days=win)
L170     if C_ts.empty:
L171         return "", "NORMAL", 0
L172     warmup = int(os.getenv("BREADTH_WARMUP_DAYS","252"))
L173     base = C_ts.iloc[warmup:] if len(C_ts)>warmup else C_ts
L174     C_full = int(C_ts.iloc[-1])
L175
L176     q05 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_IN",  "0.05"))), nan=0.0))
L177     q20 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_OUT", "0.20"))), nan=0.0))
L178     q60 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_WARN_OUT",  "0.60"))), nan=0.0))
L179
L180     # G枠サイズ（Breadth基準）
L181     N_G = config.N_G
L182     th_in_rec   = max(N_G, q05)
L183     th_out_rec  = max(int(np.ceil(1.5*N_G)), q20)
L184     th_norm_rec = max(3*N_G, q60)
L185
L186     use_calib = os.getenv("BREADTH_USE_CALIB", "true").strip().lower() == "true"
L187     if use_calib:
L188         th_in, th_out, th_norm, th_src = th_in_rec, th_out_rec, th_norm_rec, "自動"
L189     else:
L190         th_in   = int(os.getenv("GTT_EMERG_IN", str(N_G)))
L191         th_out  = int(os.getenv("GTT_EMERG_OUT", str(int(1.5*N_G))))
L192         th_norm = int(os.getenv("GTT_CAUTION_OUT", str(3*N_G)))
L193         th_src = "手動"
L194
L195     prev = load_breadth_mode("NORMAL")
L196     if   prev == "EMERG":
L197         mode = "EMERG"   if (C_full < th_out)  else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L198     elif prev == "CAUTION":
L199         mode = "CAUTION" if (C_full < th_norm) else "NORMAL"
L200     else:
L201         mode = "EMERG"   if (C_full < th_in)   else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L202     save_breadth_mode(mode)
L203
L204     mode_ja, emoji = MODE_LABELS_JA.get(mode, mode), MODE_EMOJIS.get(mode, "ℹ️")
L205     eff_days = len(base)
L206
L207     lead_lines = [
L208         f"{emoji} *現在モード: {mode_ja}*",
L209         f"テンプレ合格本数: *{C_full}本*",
L210         "しきい値（{0}）".format(th_src),
L211         f"  ・緊急入り: <{th_in}本",
L212         f"  ・緊急解除: ≥{th_out}本",
L213         f"  ・通常復帰: ≥{th_norm}本",
L214         f"参考指標（過去~{win}営業日, 有効={eff_days}日）",
L215         f"  ・下位5%: {q05}本",
L216         f"  ・下位20%: {q20}本",
L217         f"  ・60%分位: {q60}本",
L218     ]
L219     return "```" + "\n".join(lead_lines) + "```", mode, C_full
L220
L221
L222 def _format_mode(mode: str) -> str:
L223     upper = (mode or "NORMAL").upper()
L224     return f"{MODE_EMOJIS.get(upper, 'ℹ️')} {MODE_LABELS_JA.get(upper, upper)}"
L225
L226
L227 def _gcd_mode_today(g_syms: list[str]) -> tuple[str, float]:
L228     """
L229     現在のGrowth群について、Low_today / Peak60(High) の等加重平均から G-CD(%) を算出し、モードを返す。
L230     戻り値: (gcd_mode, gcd_pct)  ※gcd_pctは正の%（例 11.3 は -11.3%の下落）
L231     """
L232
L233     if not g_syms:
L234         print("📝 audit[G-CD details]: G銘柄が空のため算出対象がありません")
L235         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L236         return "NORMAL", 0.0
L237
L238     try:
L239         df = yf.download(
L240             g_syms,
L241             period="100d",
L242             interval="1d",
L243             auto_adjust=False,
L244             progress=False,
L245         )
L246     except Exception as e:
L247         print(f"⚠️ audit[G-CD details]: 株価データ取得に失敗しました ({e})")
L248         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L249         return "NORMAL", 0.0
L250
L251     if not isinstance(df, pd.DataFrame) or df.empty:
L252         print("⚠️ audit[G-CD details]: 株価データが空のため算出できません")
L253         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L254         return "NORMAL", 0.0
L255
L256     hi_all = df.get("High") if isinstance(df, pd.DataFrame) else None
L257     lo_all = df.get("Low") if isinstance(df, pd.DataFrame) else None
L258     if hi_all is None or lo_all is None:
L259         print("⚠️ audit[G-CD details]: High/Low データが欠落しています")
L260         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L261         return "NORMAL", 0.0
L262
L263     if isinstance(hi_all, pd.Series):
L264         hi_all = hi_all.to_frame(name=g_syms[0])
L265     if isinstance(lo_all, pd.Series):
L266         lo_all = lo_all.to_frame(name=g_syms[0])
L267
L268     if hi_all.empty or lo_all.empty:
L269         print("⚠️ audit[G-CD details]: High/Low データが空のため算出できません")
L270         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L271         return "NORMAL", 0.0
L272
L273     peak60 = hi_all.rolling(60, min_periods=20).max().tail(1).iloc[0]
L274     low_today = lo_all.tail(1).iloc[0]
L275
L276     details: list[tuple[str, float, float, float, float]] = []
L277     for sym in g_syms:
L278         p = float(peak60.get(sym, float("nan"))) if hasattr(peak60, "get") else float("nan")
L279         lt = float(low_today.get(sym, float("nan"))) if hasattr(low_today, "get") else float("nan")
L280         if pd.notna(p) and p > 0 and pd.notna(lt) and lt > 0:
L281             ratio = lt / p
L282             ddpct = (1.0 - ratio) * 100.0
L283             details.append((sym, p, lt, ratio, ddpct))
L284
L285     if not details:
L286         print("⚠️ aud
```