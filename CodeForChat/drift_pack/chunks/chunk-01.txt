```text
# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: config.py, drift.py, .github/workflows/daily-report.yml, documents/README.md, documents/drift_design.md
# 作成日時: 2025-09-27 08:08:05 (JST)
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <config.py>
```text
L1 # 共通設定（factor / drift から参照）
L2 TOTAL_TARGETS = 20
L3
L4 # 基準のバケット数（NORMAL）
L5 COUNTS_BASE = {"G": 12, "D": 8}
L6
L7 # モード別の推奨バケット数
L8 COUNTS_BY_MODE = {
L9     "NORMAL": {"G": 12, "D": 8},
L10     "CAUTION": {"G": 10, "D": 8},
L11     "EMERG": {"G": 8,  "D": 8},
L12 }
L13
L14 # モード別のドリフト閾値（%）
L15 DRIFT_THRESHOLD_BY_MODE = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L16
L17 # モード別の推奨現金比率
L18 CASH_RATIO_BY_MODE = {
L19     "NORMAL": 0.10,  # 10%
L20     "CAUTION": 0.20,  # 20%
L21     "EMERG": 0.30,  # 30%
L22 }
L23
L24 # モード別のTS（基本幅, 小数=割合）
L25 TS_BASE_BY_MODE = {"NORMAL": 0.15, "CAUTION": 0.13, "EMERG": 0.10}
L26 # 利益到達(+30/+60/+100%)時の段階タイト化（ポイント差）
L27 TS_STEP_DELTAS_PT = (3, 6, 8)
L28
L29 # Breadthの校正は N_G に連動（緊急解除=ceil(1.5*N_G), 通常復帰=3*N_G）
L30 N_G = COUNTS_BASE["G"]
L31 N_D = COUNTS_BASE["D"]
L32
```

## <drift.py>
```text
L1 import pandas as pd, yfinance as yf
L2 import numpy as np
L3 import requests
L4 import os
L5 import json
L6 import time
L7 from pathlib import Path
L8 import csv
L9 import config
L10
L11 # --- GコンポジットDDのしきい値（Growthの平均DD基準）---
L12 CD_CAUTION = 0.10   # -10% で警戒
L13 CD_EMERG = 0.15   # -15% で緊急
L14
L15 MODE_LABELS_JA = {"NORMAL": "通常", "CAUTION": "警戒", "EMERG": "緊急"}
L16 # Slack通知用のモードアイコン
L17 MODE_EMOJIS = {"NORMAL": "🟢", "CAUTION": "⚠️", "EMERG": "🔴"}
L18 MODE_RANK = {"NORMAL": 0, "CAUTION": 1, "EMERG": 2}
L19
L20 # --- breadth utilities (factor parity) ---
L21 BENCH = "^GSPC"
L22 CAND_PRICE_MAX = 450.0
L23 RESULTS_DIR = "results"
L24 os.makedirs(RESULTS_DIR, exist_ok=True)
L25
L26 def _state_file():
L27     return str(Path(RESULTS_DIR) / "breadth_state.json")
L28
L29
L30 def _load_state_dict() -> dict:
L31     try:
L32         with open(_state_file()) as fh:
L33             data = json.load(fh)
L34         return data if isinstance(data, dict) else {}
L35     except Exception:
L36         return {}
L37
L38
L39 def _save_state_dict(state: dict):
L40     try:
L41         with open(_state_file(), "w") as fh:
L42             json.dump(state, fh)
L43     except Exception:
L44         pass
L45
L46
L47 def load_breadth_mode(default: str = "NORMAL") -> str:
L48     state = _load_state_dict()
L49     mode = state.get("breadth_mode", state.get("mode", default))
L50     return mode if mode in MODE_RANK else default
L51
L52
L53 def save_breadth_mode(mode: str):
L54     state = _load_state_dict()
L55     state["breadth_mode"] = mode
L56     _save_state_dict(state)
L57
L58
L59 def load_final_mode(default: str = "NORMAL") -> str:
L60     state = _load_state_dict()
L61     mode = state.get("final_mode", state.get("mode", default))
L62     return mode if mode in MODE_RANK else default
L63
L64
L65 def save_final_mode(mode: str):
L66     state = _load_state_dict()
L67     state["final_mode"] = mode
L68     state.setdefault("breadth_mode", state.get("breadth_mode", mode))
L69     state["mode"] = mode
L70     _save_state_dict(state)
L71
L72
L73 def _read_csv_list(fname):
L74     p = Path(__file__).with_name(fname)
L75     if not p.exists(): return []
L76     return pd.read_csv(p, header=None).iloc[:,0].astype(str).str.upper().tolist()
L77
L78
L79 def _load_universe():
L80     # exist + candidate を使用。candidate は価格上限で事前フィルタ
L81     exist = _read_csv_list("current_tickers.csv")
L82     cand  = _read_csv_list("candidate_tickers.csv")
L83     cand_info = yf.Tickers(" ".join(cand)) if cand else None
L84     cand_keep = []
L85     for t in cand:
L86         try:
L87             px = cand_info.tickers[t].fast_info.get("lastPrice", float("inf"))
L88         except Exception:
L89             px = float("inf")
L90         if pd.notna(px) and float(px) <= CAND_PRICE_MAX:
L91             cand_keep.append(t)
L92     tickers = sorted(set(exist + cand_keep))
L93     return exist, cand_keep, tickers
L94
L95
L96 def _fetch_prices_600d(tickers):
L97     data = yf.download(
L98         tickers + [BENCH],
L99         period="600d",
L100         auto_adjust=True,
L101         progress=False,
L102         threads=False,
L103     )
L104     close = data["Close"]
L105     px = close.dropna(how="all", axis=1).ffill(limit=2)
L106     spx = close[BENCH].reindex(px.index).ffill()
L107     return px, spx
L108
L109
L110 def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L111     # scorer.py の実装をそのまま移植（ベクトル化版）
L112     import numpy as np, pandas as pd
L113     if px is None or px.empty:
L114         return pd.Series(dtype=int)
L115     px = px.dropna(how="all", axis=1)
L116     if win_days and win_days > 0:
L117         px = px.tail(win_days)
L118     if px.empty:
L119         return pd.Series(dtype=int)
L120     # 欠損吸収
L121     px = px.ffill(limit=2)
L122     spx = spx.reindex(px.index).ffill()
L123
L124     ma50  = px.rolling(50,  min_periods=50).mean()
L125     ma150 = px.rolling(150, min_periods=150).mean()
L126     ma200 = px.rolling(200, min_periods=200).mean()
L127
L128     tt = (px > ma150)
L129     tt &= (px > ma200)
L130     tt &= (ma150 > ma200)
L131     tt &= (ma200 - ma200.shift(21) > 0)
L132     tt &= (ma50  > ma150)
L133     tt &= (ma50  > ma200)
L134     tt &= (px    > ma50)
L135
L136     lo252 = px.rolling(252, min_periods=252).min()
L137     hi252 = px.rolling(252, min_periods=252).max()
L138     tt &= (px.divide(lo252).sub(1.0) >= 0.30)
L139     tt &= (px >= (0.75 * hi252))
L140
L141     r12  = px.divide(px.shift(252)).sub(1.0)
L142     br12 = spx.divide(spx.shift(252)).sub(1.0)
L143     r1   = px.divide(px.shift(22)).sub(1.0)
L144     br1  = spx.divide(spx.shift(22)).sub(1.0)
L145     rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L146     tt &= (rs >= 0.10)
L147
L148     return tt.fillna(False).sum(axis=1).astype(int)
L149
L150
L151 def build_breadth_header():
L152     # factor._build_breadth_lead_lines と同一挙動
L153     exist, cand, tickers = _load_universe()
L154     if not tickers:
L155         return "", "NORMAL", 0
L156     px, spx = _fetch_prices_600d(tickers)
L157     win = int(os.getenv("BREADTH_CALIB_WIN_DAYS", "600"))
L158     C_ts = trend_template_breadth_series(px, spx, win_days=win)
L159     if C_ts.empty:
L160         return "", "NORMAL", 0
L161     warmup = int(os.getenv("BREADTH_WARMUP_DAYS","252"))
L162     base = C_ts.iloc[warmup:] if len(C_ts)>warmup else C_ts
L163     C_full = int(C_ts.iloc[-1])
L164
L165     q05 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_IN",  "0.05"))), nan=0.0))
L166     q20 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_EMERG_OUT", "0.20"))), nan=0.0))
L167     q60 = int(np.nan_to_num(base.quantile(float(os.getenv("BREADTH_Q_WARN_OUT",  "0.60"))), nan=0.0))
L168
L169     # G枠サイズ（Breadth基準）
L170     N_G = config.N_G
L171     th_in_rec   = max(N_G, q05)
L172     th_out_rec  = max(int(np.ceil(1.5*N_G)), q20)
L173     th_norm_rec = max(3*N_G, q60)
L174
L175     use_calib = os.getenv("BREADTH_USE_CALIB", "true").strip().lower() == "true"
L176     if use_calib:
L177         th_in, th_out, th_norm, th_src = th_in_rec, th_out_rec, th_norm_rec, "自動"
L178     else:
L179         th_in   = int(os.getenv("GTT_EMERG_IN", str(N_G)))
L180         th_out  = int(os.getenv("GTT_EMERG_OUT", str(int(1.5*N_G))))
L181         th_norm = int(os.getenv("GTT_CAUTION_OUT", str(3*N_G)))
L182         th_src = "手動"
L183
L184     prev = load_breadth_mode("NORMAL")
L185     if   prev == "EMERG":
L186         mode = "EMERG"   if (C_full < th_out)  else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L187     elif prev == "CAUTION":
L188         mode = "CAUTION" if (C_full < th_norm) else "NORMAL"
L189     else:
L190         mode = "EMERG"   if (C_full < th_in)   else ("CAUTION" if (C_full < th_norm) else "NORMAL")
L191     save_breadth_mode(mode)
L192
L193     mode_ja, emoji = MODE_LABELS_JA.get(mode, mode), MODE_EMOJIS.get(mode, "ℹ️")
L194     eff_days = len(base)
L195
L196     lead_lines = [
L197         f"{emoji} *現在モード: {mode_ja}*",
L198         f"テンプレ合格本数: *{C_full}本*",
L199         "しきい値（{0}）".format(th_src),
L200         f"  ・緊急入り: <{th_in}本",
L201         f"  ・緊急解除: ≥{th_out}本",
L202         f"  ・通常復帰: ≥{th_norm}本",
L203         f"参考指標（過去~{win}営業日, 有効={eff_days}日）",
L204         f"  ・下位5%: {q05}本",
L205         f"  ・下位20%: {q20}本",
L206         f"  ・60%分位: {q60}本",
L207     ]
L208     return "```" + "\n".join(lead_lines) + "```", mode, C_full
L209
L210
L211 def _load_growth_symbols(portfolio: list[dict]) -> list[str]:
L212     growth = []
L213     for row in portfolio:
L214         bucket = str(row.get("bucket", "")).strip().upper()
L215         if bucket == "G":
L216             sym = str(row.get("symbol", "")).strip().upper()
L217             if sym:
L218                 growth.append(sym)
L219     return sorted(set(growth))
L220
L221
L222 def _format_mode(mode: str) -> str:
L223     upper = (mode or "NORMAL").upper()
L224     return f"{MODE_EMOJIS.get(upper, 'ℹ️')} {MODE_LABELS_JA.get(upper, upper)}"
L225
L226
L227 def _gcd_mode_today(g_syms: list[str]) -> tuple[str, float]:
L228     """
L229     現在のGrowth群について、Low_today / Peak60(High) の等加重平均から G-CD(%) を算出し、モードを返す。
L230     戻り値: (gcd_mode, gcd_pct)  ※gcd_pctは正の%（例 11.3 は -11.3%の下落）
L231     """
L232
L233     if not g_syms:
L234         print("📝 audit[G-CD details]: G銘柄が空のため算出対象がありません")
L235         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L236         return "NORMAL", 0.0
L237
L238     try:
L239         df = yf.download(
L240             g_syms,
L241             period="100d",
L242             interval="1d",
L243             auto_adjust=False,
L244             progress=False,
L245         )
L246     except Exception as e:
L247         print(f"⚠️ audit[G-CD details]: 株価データ取得に失敗しました ({e})")
L248         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L249         return "NORMAL", 0.0
L250
L251     if not isinstance(df, pd.DataFrame) or df.empty:
L252         print("⚠️ audit[G-CD details]: 株価データが空のため算出できません")
L253         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L254         return "NORMAL", 0.0
L255
L256     hi_all = df.get("High") if isinstance(df, pd.DataFrame) else None
L257     lo_all = df.get("Low") if isinstance(df, pd.DataFrame) else None
L258     if hi_all is None or lo_all is None:
L259         print("⚠️ audit[G-CD details]: High/Low データが欠落しています")
L260         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L261         return "NORMAL", 0.0
L262
L263     if isinstance(hi_all, pd.Series):
L264         hi_all = hi_all.to_frame(name=g_syms[0])
L265     if isinstance(lo_all, pd.Series):
L266         lo_all = lo_all.to_frame(name=g_syms[0])
L267
L268     if hi_all.empty or lo_all.empty:
L269         print("⚠️ audit[G-CD details]: High/Low データが空のため算出できません")
L270         print("📝 audit[G-CD summary]: avg_low/peak60=1.0000  drawdown=0.00%  => NORMAL")
L271         return "NORMAL", 0.0
L272
L273     peak60 = hi_all.rolling(60, min_periods=20).max().tail(1).iloc[0]
L274     low_today = lo_all.tail(1).iloc[0]
L275
L276     details: list[tuple[str, float, float, float, float]] = []
L277     for sym in g_syms:
L278         p = float(peak60.get(sym, float("nan"))) if hasattr(peak60, "get") else float("nan")
L279         lt = float(low_today.get(sym, float("nan"))) if hasattr(low_today, "get") else float("nan")
L280         if pd.notna(p) and p > 0 and pd.notna(lt) and lt > 0:
L281             ratio = lt / p
L282             ddpct = (1.0 - ratio) * 100.0
L283             details.append((sym, p, lt, ratio, ddpct))
L284
L285     if not details:
L286         print("⚠️ audit[G-CD details]: 有効な銘柄データがありません")
L287         print("📝 audit[G-CD summary]: avg_low/peak6
```