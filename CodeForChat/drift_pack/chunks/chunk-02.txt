```text
         for idx in df.tail(lookback_days).index:
L325             tags = _signals_for_day(df, idx)
L326             if tags:
L327                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L328         if alerts:
L329             out[s] = alerts
L330     return out
L331
L332
L333 def load_portfolio():
L334     tickers_path = Path(__file__).with_name("current_tickers.csv")
L335     with tickers_path.open() as f:
L336         reader = list(csv.reader(f))
L337     return [
L338         {"symbol": sym.strip().upper(), "shares": int(qty), "target_ratio": 1 / len(reader)}
L339         for sym, qty in reader
L340     ]
L341
L342
L343 def compute_threshold():
L344     vix_ma5 = fetch_vix_ma5()
L345     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L346     return vix_ma5, drift_threshold
L347
L348
L349 def build_dataframe(portfolio):
L350     for stock in portfolio:
L351         price = fetch_price(stock["symbol"])
L352         stock["price"] = price
L353         stock["value"] = price * stock["shares"]
L354
L355     df = pd.DataFrame(portfolio)
L356     total_value = df["value"].sum()
L357     df["current_ratio"] = df["value"] / total_value
L358     df["drift"] = df["current_ratio"] - df["target_ratio"]
L359     df["drift_abs"] = df["drift"].abs()
L360     total_drift_abs = df["drift_abs"].sum()
L361     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L362     df["adjustable"] = (
L363         (df["adjusted_ratio"] * total_value) >= df["price"]
L364     ) & df["price"].notna() & df["price"].gt(0)
L365     return df, total_value, total_drift_abs
L366
L367
L368 def simulate(df, total_value, total_drift_abs, drift_threshold):
L369     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L370     if alert:
L371         df["trade_shares"] = df.apply(
L372             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L373             if r["adjustable"] and r["price"] > 0 else 0,
L374             axis=1,
L375         )
L376         df["new_shares"] = df["shares"] + df["trade_shares"]
L377         df["new_value"] = df["new_shares"] * df["price"]
L378         new_total_value = df["new_value"].sum()
L379         df["simulated_ratio"] = df["new_value"] / new_total_value
L380         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L381         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L382     else:
L383         df["trade_shares"] = np.nan
L384         df["new_shares"] = np.nan
L385         df["new_value"] = np.nan
L386         new_total_value = np.nan
L387         df["simulated_ratio"] = np.nan
L388         df["simulated_drift_abs"] = np.nan
L389         simulated_total_drift_abs = np.nan
L390     return df, alert, new_total_value, simulated_total_drift_abs
L391
L392
L393 def prepare_summary(df, total_drift_abs, alert):
L394     summary = {
L395         "symbol": "合計",
L396         "shares": df["shares"].sum(),
L397         "value": df["value"].sum(),
L398         "current_ratio": np.nan,
L399         "drift_abs": total_drift_abs,
L400     }
L401     if alert:
L402         summary["trade_shares"] = np.nan
L403     # Sort details by evaluation value descending before appending summary
L404     df = df.sort_values(by="value", ascending=False)
L405     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L406     if alert:
L407         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L408         df_small = df[cols].copy()
L409         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L410     else:
L411         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L412         df_small = df[cols].copy()
L413         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L414     return df_small
L415
L416
L417 def currency(x):
L418     return f"${x:,.0f}" if pd.notnull(x) else ""
L419
L420
L421 def formatters_for(alert):
L422     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L423     if alert:
L424         formatters["Δqty"] = "{:.0f}".format
L425     return formatters
L426
L427
L428 def build_header(vix_ma5, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L429     header = (
L430         f"*📈 VIX MA5:* {vix_ma5:.2f}\n"
L431         f"*📊 ドリフト閾値:* {'🔴(高VIX)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L432         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L433     )
L434     if alert:
L435         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L436         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L437     else:
L438         header += "✅ アラートなし\n"
L439     return header
L440
L441
L442 def send_slack(text):
L443     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L444     if not SLACK_WEBHOOK_URL:
L445         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L446     payload = {"text": text}
L447     try:
L448         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L449         resp.raise_for_status()
L450         print("✅ Slack（Webhook）へ送信しました")
L451     except Exception as e:
L452         print(f"⚠️ Slack通知エラー: {e}")
L453
L454
L455 def send_debug(debug_text):
L456     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L457     if not SLACK_WEBHOOK_URL:
L458         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L459     debug_payload = {"text": "```" + debug_text + "```"}
L460     try:
L461         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L462         resp.raise_for_status()
L463         print("✅ Debug情報をSlackに送信しました")
L464     except Exception as e:
L465         print(f"⚠️ Slack通知エラー: {e}")
L466
L467
L468 def main():
L469     portfolio = load_portfolio()
L470     symbols = [r["symbol"] for r in portfolio]
L471     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L472     vix_ma5, drift_threshold = compute_threshold()
L473     df, total_value, total_drift_abs = build_dataframe(portfolio)
L474     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L475         df, total_value, total_drift_abs, drift_threshold
L476     )
L477     df_small = prepare_summary(df, total_drift_abs, alert)
L478     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L479         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L480         if col_sym:
L481             df_small.insert(0, "⚠", df_small[col_sym].apply(lambda x: "🔴" if x in sell_alerts else ""))
L482     formatters = formatters_for(alert)
L483     header = build_header(
L484         vix_ma5, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L485     )
L486     if sell_alerts:
L487         def fmt_pair(date_tags):
L488             date, tags = date_tags
L489             return f"{date}:" + "・".join(tags)
L490         listed = []
L491         for t, arr in sell_alerts.items():
L492             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L493         hits = ", ".join(listed)
L494         if "✅ アラートなし" in header:
L495             header = header.replace(
L496                 "✅ アラートなし",
L497                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L498             )
L499         else:
L500             header += f"\n🟥 {hits}"
L501     try:
L502         breadth_block, _mode, _C = build_breadth_header()
L503         if breadth_block:
L504             header = breadth_block + "\n" + header
L505     except Exception:
L506         pass
L507     table_text = df_small.to_string(formatters=formatters, index=False)
L508     send_slack(header + "\n```" + table_text + "```")
L509
L510     if debug_mode:
L511         debug_cols = [
L512             "symbol",
L513             "shares",
L514             "price",
L515             "value",
L516             "current_ratio",
L517             "drift",
L518             "drift_abs",
L519             "adjusted_ratio",
L520             "adjustable",
L521             "trade_shares",
L522             "new_shares",
L523             "new_value",
L524             "simulated_ratio",
L525             "simulated_drift_abs",
L526         ]
L527         debug_text = (
L528             "=== DEBUG: full dataframe ===\n"
L529             + df[debug_cols].to_string()
L530             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L531             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L532         )
L533         print("\n" + debug_text)
L534         send_debug(debug_text)
L535
L536
L537 if __name__ == "__main__":
L538     main()
L539
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 25銘柄を均等配分（現金を除き1銘柄あたり4%）
L5 - moomoo証券で運用
L6
L7 ## Barbell Growth-Defense方針
L8 - Growth枠12銘柄：高成長で乖離源となる攻めの銘柄
L9 - Defense枠13銘柄：低ボラで安定成長し配当を増やす守りの銘柄
L10 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L11
L12 ## レジーム判定（trend_template 合格“本数”で判定）
L13 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**
L14 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L15   - 緊急入り: `max(q05, 12本)`（= N_G）
L16   - 緊急解除: `max(q20, 18本)`（= 1.5×N_G）
L17   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L18 - ヒステリシス: 前回モードに依存（EMERG→解除は18本以上、CAUTION→通常は36本以上）
L19
L20 ## レジーム別の現金・ドリフト
L21 - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **10%**
L22 - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **12%**
L23 - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（25×4%に全戻しのみ）
L24
L25 ## トレーリングストップ（統一）
L26 - G/D 共通の **基本TS=15%**
L27 - 含み益が **+20% / +40% / +60%** 到達で TS を **12% / 9% / 7%** に段階引き上げ
L28 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L29
L30 ## 入替銘柄選定
L31 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L32 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L33
L34 ## 再エントリー（クールダウン）
L35 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L36
L37 ## 実行タイミング
L38 - 判定：米国市場終値直後
L39 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 25銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから価格・VIX情報を取得し、現況比率と調整案を計算。
L6
L7 ## 定数・設定
L8 - `FINNHUB_API_KEY` / `SLACK_WEBHOOK_URL` を環境変数から取得。
L9 - 無料枠を考慮したAPIレート制限: `RATE_LIMIT = 55`。
L10 - デバッグ出力用フラグ `debug_mode`。
L11
L12 ## 主な関数
L13 ### finnhub_get
L14 - 基本的なレート制限付きでFinnhub APIを呼び出し、JSONレスポンスを辞書で返す。
L15
L16 ### fetch_price
L17 - `quote` エンドポイントで株価を取得し、失敗時は `NaN` を返す。
L18
L19 ### fetch_vix_ma5
L20 - yfinanceでVIX終値を取得し、直近5営業日の移動平均を算出。
L21
L22 ### load_portfolio
L23 - `current_tickers.csv` から銘柄と保有株数を読み込み、目標比率4%を付与したリストを生成。
L24
L25 ### compute_threshold
L26 - VIX MA5に応じてドリフト閾値を10%/12%/高VIXモード(∞)に設定。
L27
L28 ### build_dataframe
L29 - 各銘柄の評価額や現在比率、ドリフト、半戻し後比率(`adjusted_ratio`)を計算しDataFrame化。
L30
L31 ### simulate
L32 - ドリフト合計が閾値を超えた場合、半戻し後の売買株数と新比率を試算し、シミュレート後ドリフトを返す。
L33
L34 ### prep
```