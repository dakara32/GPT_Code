```text
321         if df is None or len(df) < 60:
L322             continue
L323         alerts = []
L324         for idx in df.tail(lookback_days).index:
L325             tags = _signals_for_day(df, idx)
L326             if tags:
L327                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L328         if alerts:
L329             out[s] = alerts
L330     return out
L331
L332
L333 def load_portfolio():
L334     tickers_path = Path(__file__).with_name("current_tickers.csv")
L335     with tickers_path.open() as f:
L336         reader = list(csv.reader(f))
L337     return [
L338         {"symbol": sym.strip().upper(), "shares": int(qty), "target_ratio": 1 / len(reader)}
L339         for sym, qty in reader
L340     ]
L341
L342
L343 def compute_threshold():
L344     vix_ma5 = fetch_vix_ma5()
L345     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L346     return vix_ma5, drift_threshold
L347
L348
L349 def compute_threshold_by_mode(mode: str):
L350     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L351     m = (mode or "NORMAL").upper()
L352     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L353     # ★ 閾値をREADMEに合わせて統一：NORMAL=12%, CAUTION=14%, EMERG=∞
L354     drift_map = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L355     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L356
L357
L358 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L359     """
L360     モード別の推奨保有数 (G_count, D_count, cash_slots) を返す。
L361     cash_slotsは「外すG枠の数」（各枠=4%）。
L362     NORMAL: G15/D10/現金化0, CAUTION: G13/D10/現金化2, EMERG: G10/D10/現金化5
L363     """
L364     m = (mode or "NORMAL").upper()
L365     if m == "CAUTION":
L366         return 13, 10, 2
L367     if m == "EMERG":
L368         return 10, 10, 5
L369     return 15, 10, 0
L370
L371
L372 def build_dataframe(portfolio):
L373     for stock in portfolio:
L374         price = fetch_price(stock["symbol"])
L375         stock["price"] = price
L376         stock["value"] = price * stock["shares"]
L377
L378     df = pd.DataFrame(portfolio)
L379     total_value = df["value"].sum()
L380     df["current_ratio"] = df["value"] / total_value
L381     df["drift"] = df["current_ratio"] - df["target_ratio"]
L382     df["drift_abs"] = df["drift"].abs()
L383     total_drift_abs = df["drift_abs"].sum()
L384     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L385     df["adjustable"] = (
L386         (df["adjusted_ratio"] * total_value) >= df["price"]
L387     ) & df["price"].notna() & df["price"].gt(0)
L388     return df, total_value, total_drift_abs
L389
L390
L391 def simulate(df, total_value, total_drift_abs, drift_threshold):
L392     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L393     if alert:
L394         df["trade_shares"] = df.apply(
L395             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L396             if r["adjustable"] and r["price"] > 0 else 0,
L397             axis=1,
L398         )
L399         df["new_shares"] = df["shares"] + df["trade_shares"]
L400         df["new_value"] = df["new_shares"] * df["price"]
L401         new_total_value = df["new_value"].sum()
L402         df["simulated_ratio"] = df["new_value"] / new_total_value
L403         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L404         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L405     else:
L406         df["trade_shares"] = np.nan
L407         df["new_shares"] = np.nan
L408         df["new_value"] = np.nan
L409         new_total_value = np.nan
L410         df["simulated_ratio"] = np.nan
L411         df["simulated_drift_abs"] = np.nan
L412         simulated_total_drift_abs = np.nan
L413     return df, alert, new_total_value, simulated_total_drift_abs
L414
L415
L416 def prepare_summary(df, total_drift_abs, alert):
L417     summary = {
L418         "symbol": "合計",
L419         "shares": df["shares"].sum(),
L420         "value": df["value"].sum(),
L421         "current_ratio": np.nan,
L422         "drift_abs": total_drift_abs,
L423     }
L424     if alert:
L425         summary["trade_shares"] = np.nan
L426     # Sort details by evaluation value descending before appending summary
L427     df = df.sort_values(by="value", ascending=False)
L428     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L429     if alert:
L430         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L431         df_small = df[cols].copy()
L432         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L433     else:
L434         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L435         df_small = df[cols].copy()
L436         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L437     return df_small
L438
L439
L440 def currency(x):
L441     return f"${x:,.0f}" if pd.notnull(x) else ""
L442
L443
L444 def formatters_for(alert):
L445     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L446     if alert:
L447         formatters["Δqty"] = "{:.0f}".format
L448     return formatters
L449
L450
L451 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L452     header = (
L453         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L454         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L455         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L456     )
L457     if alert:
L458         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L459         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L460     else:
L461         header += "✅ アラートなし\n"
L462     # ★ 追記: TSルール（G/D共通）と推奨保有数
L463     header += "*🛡 TS:* 基本 -15% / +30%→-12% / +60%→-9% / +100%→-7%\n"
L464     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L465     cash_pct = cash_slots * 4
L466     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct}%）\n"
L467     return header
L468
L469
L470 def send_slack(text):
L471     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L472     if not SLACK_WEBHOOK_URL:
L473         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L474     payload = {"text": text}
L475     try:
L476         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L477         resp.raise_for_status()
L478         print("✅ Slack（Webhook）へ送信しました")
L479     except Exception as e:
L480         print(f"⚠️ Slack通知エラー: {e}")
L481
L482
L483 def send_debug(debug_text):
L484     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L485     if not SLACK_WEBHOOK_URL:
L486         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L487     debug_payload = {"text": "```" + debug_text + "```"}
L488     try:
L489         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L490         resp.raise_for_status()
L491         print("✅ Debug情報をSlackに送信しました")
L492     except Exception as e:
L493         print(f"⚠️ Slack通知エラー: {e}")
L494
L495
L496 def main():
L497     portfolio = load_portfolio()
L498     symbols = [r["symbol"] for r in portfolio]
L499     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L500
L501     breadth_block, mode, _C = build_breadth_header()
L502
L503     cash_ratio, drift_threshold = compute_threshold_by_mode(mode)
L504
L505     df, total_value, total_drift_abs = build_dataframe(portfolio)
L506     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L507         df, total_value, total_drift_abs, drift_threshold
L508     )
L509     df_small = prepare_summary(df, total_drift_abs, alert)
L510     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L511         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L512         if col_sym:
L513             alert_keys = {str(k) for k in sell_alerts.keys()}
L514             df_small[col_sym] = df_small[col_sym].astype(str)
L515             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L516             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L517             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L518     formatters = formatters_for(alert)
L519     header = build_header(
L520         mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L521     )
L522     if breadth_block:
L523         header = breadth_block + "\n" + header
L524     if sell_alerts:
L525         def fmt_pair(date_tags):
L526             date, tags = date_tags
L527             return f"{date}:" + "・".join(tags)
L528         listed = []
L529         for t, arr in sell_alerts.items():
L530             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L531         hits = ", ".join(listed)
L532         if "✅ アラートなし" in header:
L533             header = header.replace(
L534                 "✅ アラートなし",
L535                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L536             )
L537         else:
L538             header += f"\n🟥 {hits}"
L539     table_text = df_small.to_string(formatters=formatters, index=False)
L540     send_slack(header + "\n```" + table_text + "```")
L541
L542     if debug_mode:
L543         debug_cols = [
L544             "symbol",
L545             "shares",
L546             "price",
L547             "value",
L548             "current_ratio",
L549             "drift",
L550             "drift_abs",
L551             "adjusted_ratio",
L552             "adjustable",
L553             "trade_shares",
L554             "new_shares",
L555             "new_value",
L556             "simulated_ratio",
L557             "simulated_drift_abs",
L558         ]
L559         debug_text = (
L560             "=== DEBUG: full dataframe ===\n"
L561             + df[debug_cols].to_string()
L562             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L563             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L564         )
L565         print("\n" + debug_text)
L566         send_debug(debug_text)
L567
L568
L569 if __name__ == "__main__":
L570     main()
L571
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 25銘柄を均等配分（現金を除き1銘柄あたり4%）
L5 - moomoo証券で運用
L6 - **Growth枠 15銘柄 / Defense枠 10銘柄**（NORMAL 基準）
L7
L8 ## Barbel
```