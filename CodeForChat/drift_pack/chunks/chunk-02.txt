```text
     "üìù audit: 5D„É¶„Éã„Éº„ÇØÊï∞={0} / ‰ªäÊó•„Éí„ÉÉ„Éà‰∏ÄË¶ß={1}".format(
L298             len(uniq_hits), sorted(today_hits) if today_hits else []
L299         )
L300     )
L301
L302     if rows_today_printed == 0:
L303         reason = "„ÄÅ".join(sorted(set(today_reason_flags))) or "„Éá„Éº„ÇøÊ¨†Êêç„Åæ„Åü„ÅØÈäòÊüÑ„Å™„Åó"
L304         print(f"‚ö†Ô∏è audit: ‰ªäÊó•„ÅÆÊòéÁ¥∞„ÅåÁ©∫„Åß„ÅôÔºàÁêÜÁî±„ÅÆ„Éí„É≥„Éà: {reason}Ôºâ")
L305
L306     k5 = len(uniq_hits)
L307     mode1 = "EMERG" if k5 >= 8 else "CAUTION" if k5 >= 6 else "NORMAL"
L308     return mode1, k5, today_hits
L309 # Debug flag
L310 debug_mode = False  # set to True for detailed output
L311
L312 # --- Finnhub settings & helper ---
L313 FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
L314 if not FINNHUB_API_KEY:
L315     raise ValueError("FINNHUB_API_KEY not set (Áí∞Â¢ÉÂ§âÊï∞„ÅåÊú™Ë®≠ÂÆö„Åß„Åô)")
L316
L317 RATE_LIMIT = 55  # requests per minute (free tier is 60)
L318 call_times = []
L319
L320
L321 def finnhub_get(endpoint, params):
L322     """Call Finnhub API with basic rate limiting."""
L323     now = time.time()
L324     cutoff = now - 60
L325     while call_times and call_times[0] < cutoff:
L326         call_times.pop(0)
L327     if len(call_times) >= RATE_LIMIT:
L328         sleep_time = 60 - (now - call_times[0])
L329         time.sleep(sleep_time)
L330     params = {**params, "token": FINNHUB_API_KEY}
L331     try:
L332         resp = requests.get(f"https://finnhub.io/api/v1/{endpoint}", params=params)
L333         resp.raise_for_status()
L334         data = resp.json()
L335     except requests.exceptions.JSONDecodeError as e:
L336         print(f"‚ö†Ô∏è Finnhub API JSON decode error: {e}")
L337         return {}
L338     except Exception as e:
L339         print(f"‚ö†Ô∏è Finnhub API error: {e}")
L340         return {}
L341     call_times.append(time.time())
L342     return data
L343
L344
L345 def fetch_price(symbol):
L346     try:
L347         data = finnhub_get("quote", {"symbol": symbol})
L348         price = data.get("c")
L349         return float(price) if price not in (None, 0) else float("nan")
L350     except Exception:
L351         return float("nan")
L352
L353
L354 def fetch_vix_ma5():
L355     """Retrieve VIX 5-day moving average via yfinance."""
L356     try:
L357         vix = (
L358             yf.download("^VIX", period="7d", interval="1d", progress=False, auto_adjust=False)["Close"]
L359             .dropna()
L360             .tail(5)
L361         )
L362         if len(vix) < 5:
L363             return float("nan")
L364         return vix.mean().item()
L365     except Exception:
L366         return float("nan")
L367
L368
L369
L370 # === Minervini-like sell signals ===
L371 def _yf_df(sym, period="6mo"):
L372     """Êó•Ë∂≥/MA/Âá∫Êù•È´òÂπ≥Âùá„ÇíÂèñÂæó„ÄÇÊ¨†ÊêçÊôÇ„ÅØ None„ÄÇ"""
L373     try:
L374         df = yf.download(sym, period=period, interval="1d", auto_adjust=False, progress=False)
L375         if df is None or df.empty:
L376             return None
L377         return df.dropna().assign(
L378             ma20=lambda d: d["Close"].rolling(20).mean(),
L379             ma50=lambda d: d["Close"].rolling(50).mean(),
L380             vol50=lambda d: d["Volume"].rolling(50).mean(),
L381         )
L382     except Exception:
L383         return None
L384
L385
L386 def _scalar(row, col):
L387     """Series/np„Çπ„Ç´„É©‚ÜíPython„Çπ„Ç´„É©ÂåñÔºàNaN„ÅØNaN„ÅÆ„Åæ„ÅæÔºâ"""
L388     try:
L389         v = row[col]
L390         if hasattr(v, "item"):
L391             try:
L392                 v = v.item()
L393             except Exception:
L394                 pass
L395         return v
L396     except Exception:
L397         return float("nan")
L398
L399
L400 def _is_strict_down(seq):
L401     """Êï∞Âàó„ÅåÂé≥ÂØÜ„Å´ÈÄ£Á∂ö„ÅßÂàá„Çä‰∏ã„Åå„Å£„Å¶„ÅÑ„Çã„ÅãÔºàlen>=4„ÇíÊÉ≥ÂÆöÔºâ„ÄÇNaNÂê´„Åø„ÅØFalse„ÄÇ"""
L402     try:
L403         xs = [float(x) for x in seq]
L404         if any(pd.isna(x) for x in xs) or len(xs) < 4:
L405             return False
L406         return all(b < a for a, b in zip(xs[:-1], xs[1:]))
L407     except Exception:
L408         return False
L409
L410
L411 def _signals_for_day(df, idx):
L412     """df.loc[idx] 1Êó•ÂàÜ„Å´ÂØæ„Åó„Ç∑„Ç∞„Éä„É´ÈÖçÂàó„ÇíËøî„ÅôÔºàÂÄ§Âãï„Åç/Âá∫Êù•È´ò„Éô„Éº„Çπ„ÅÆ„ÅøÔºâ„ÄÇ"""
L413     try:
L414         sig = []
L415         d = df.loc[idx]
L416         close = _scalar(d, "Close")
L417         ma20 = _scalar(d, "ma20")
L418         ma50 = _scalar(d, "ma50")
L419         vol = _scalar(d, "Volume")
L420         vol50 = _scalar(d, "vol50")
L421
L422         if pd.notna(close) and pd.notna(ma20) and close < ma20:
L423             sig.append("20DMA‚Üì")
L424
L425         if all(pd.notna(x) for x in (close, ma50, vol, vol50)) and close < ma50 and vol > 1.5 * vol50:
L426             sig.append("50DMA‚Üì(Â§ßÂïÜ„ÅÑ)")
L427
L428         last4 = df.loc[:idx].tail(4)
L429         last10 = df.loc[:idx].tail(10)
L430
L431         lows_desc = _is_strict_down(last4["Low"].tolist()) if last4["Low"].notna().all() else False
L432         reds = int((last10["Close"] < last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L433         if lows_desc or reds > 5:
L434             sig.append("ÈÄ£Á∂öÂÆâÂÄ§/Èô∞Á∑öÂÑ™Âã¢")
L435
L436         ups = int((last10["Close"] > last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L437         if ups >= 7:
L438             sig.append("‰∏ä„ÅíÂÅèÈáç(>70%)")
L439
L440         last15 = df.loc[:idx].tail(15)
L441         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L442         if pd.notna(base0) and pd.notna(close) and base0 != 0 and (close / base0 - 1) >= 0.25:
L443             sig.append("+25%/15Êó•ÂÜÖ")
L444
L445         if len(df.loc[:idx]) >= 2:
L446             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L447             t1_high = _scalar(t1, "High")
L448             t0_open = _scalar(t0, "Open")
L449             t0_close = _scalar(t0, "Close")
L450             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L451                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L452                     sig.append("GU‚ÜíÈô∞Á∑ö")
L453         return sig
L454     except Exception:
L455         return []
L456
L457
L458 def scan_sell_signals(symbols, lookback_days=5):
L459     """
L460     Áõ¥Ëøë lookback_days Êó•„ÅÆ„ÅÜ„Å°‰∏ÄÂ∫¶„Åß„ÇÇ„Ç∑„Ç∞„Éä„É´„ÅåÂá∫„Åü„Çâ {sym: [(date,[signals]),...]} „ÇíËøî„Åô„ÄÇ
L461     Êó•‰ªò„ÅØ YYYY-MM-DD„ÄÇSlack„ÅßÂàóÊåô„Åô„Çã„ÄÇ
L462     """
L463     out = {}
L464     for s in symbols:
L465         df = _yf_df(s)
L466         if df is None or len(df) < 60:
L467             continue
L468         alerts = []
L469         for idx in df.tail(lookback_days).index:
L470             tags = _signals_for_day(df, idx)
L471             if tags:
L472                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L473         if alerts:
L474             out[s] = alerts
L475     return out
L476
L477
L478 def load_portfolio():
L479     tickers_path = Path(__file__).with_name("current_tickers.csv")
L480     with tickers_path.open() as f:
L481         rows = [row for row in csv.reader(f) if row and row[0].strip()]
L482     n = len(rows)
L483     portfolio = []
L484     for row in rows:
L485         sym = row[0].strip().upper()
L486         qty = int(row[1]) if len(row) > 1 and row[1].strip() else 0
L487         bucket = row[2].strip().upper() if len(row) > 2 else ""
L488         entry = {
L489             "symbol": sym,
L490             "shares": qty,
L491             "target_ratio": 1 / n if n else 0.0,
L492             "bucket": bucket,
L493         }
L494         portfolio.append(entry)
L495     return portfolio
L496
L497
L498 def compute_threshold():
L499     vix_ma5 = fetch_vix_ma5()
L500     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L501     return vix_ma5, drift_threshold
L502
L503
L504 def compute_threshold_by_mode(mode: str):
L505     """„É¢„Éº„Éâ„Å´Âøú„Åò„Å¶ÁèæÈáë‰øùÊúâÁéá„Å®„Éâ„É™„Éï„ÉàÈñæÂÄ§„ÇíËøî„ÅôÔºàREADMEÊ∫ñÊã†Ôºâ"""
L506     m = (mode or "NORMAL").upper()
L507     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L508     drift_map = config.DRIFT_THRESHOLD_BY_MODE
L509     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L510
L511
L512 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L513     """
L514     „É¢„Éº„ÉâÂà•„ÅÆÊé®Â•®‰øùÊúâÊï∞ (G_count, D_count, cash_slots) „ÇíËøî„Åô„ÄÇ
L515     cash_slots„ÅØ„ÄåÂ§ñ„ÅôGÊû†„ÅÆÊï∞„ÄçÔºàÂêÑÊû†=5%Ôºâ„ÄÇ
L516     NORMAL: G12/D8/ÁèæÈáëÂåñ0, CAUTION: G10/D8/ÁèæÈáëÂåñ2, EMERG: G8/D8/ÁèæÈáëÂåñ4
L517     """
L518     m = (mode or "NORMAL").upper()
L519     base = config.COUNTS_BY_MODE.get("NORMAL", config.COUNTS_BASE)
L520     now  = config.COUNTS_BY_MODE.get(m, base)
L521     cash_slots = max(0, base["G"] - now["G"])
L522     return now["G"], now["D"], cash_slots
L523
L524
L525 def build_dataframe(portfolio):
L526     for stock in portfolio:
L527         price = fetch_price(stock["symbol"])
L528         stock["price"] = price
L529         stock["value"] = price * stock["shares"]
L530
L531     df = pd.DataFrame(portfolio)
L532     total_value = df["value"].sum()
L533     df["current_ratio"] = df["value"] / total_value
L534     df["drift"] = df["current_ratio"] - df["target_ratio"]
L535     df["drift_abs"] = df["drift"].abs()
L536     total_drift_abs = df["drift_abs"].sum()
L537     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L538     df["adjustable"] = (
L539         (df["adjusted_ratio"] * total_value) >= df["price"]
L540     ) & df["price"].notna() & df["price"].gt(0)
L541     return df, total_value, total_drift_abs
L542
L543
L544 def simulate(df, total_value, total_drift_abs, drift_threshold):
L545     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L546     if alert:
L547         df["trade_shares"] = df.apply(
L548             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L549             if r["adjustable"] and r["price"] > 0 else 0,
L550             axis=1,
L551         )
L552         df["new_shares"] = df["shares"] + df["trade_shares"]
L553         df["new_value"] = df["new_shares"] * df["price"]
L554         new_total_value = df["new_value"].sum()
L555         df["simulated_ratio"] = df["new_value"] / new_total_value
L556         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L557         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L558     else:
L559         df["trade_shares"] = np.nan
L560         df["new_shares"] = np.nan
L561         df["new_value"] = np.nan
L562         new_total_value = np.nan
L563         df["simulated_ratio"] = np.nan
L564         df["simulated_drift_abs"] = np.nan
L565         simulated_total_drift_abs = np.nan
L566     return df, alert, new_total_value, simulated_total_drift_abs
L567
L568
L569 def prepare_summary(df, total_drift_abs, alert):
L570     summary = {
L571         "symbol": "ÂêàË®à",
L572         "shares": df["shares"].sum(),
L573         "value": df["value"].sum(),
L574         "current_ratio": np.nan,
L575         "drift_abs": total_drift_abs,
L576     }
L577     if alert:
L578         summary["trade_shares"] = np.nan
L579     # Sort details by evaluation value descending before appending summary
L580     df = df.sort_values(by="value", ascending=False)
L581     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L582     if alert:
L583         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L584         df_small = df[cols].copy()
L585         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Œîqty"]
L586     else:
L587         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L588         df_small = df[cols].copy()
L589         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L590     return df_small
L591
L592
L593 def currency(x):
L594     return f"${x:,.0f}" if pd.notnull(x) else ""
L595
L596
L597 def formatters_for(alert):
L598     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L599     if alert:
L600         formatters["Œîqty"] = "{:.0f}".format
L601     return formatters
L602
L603
L604 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L605     header = (
L606         f"*üíº ÁèæÈáë‰øùÊúâÁéá:* {cash_ratio*100:.1f}%\n"
L607         f"*üìä „Éâ„É™„Éï„ÉàÈñæÂÄ§:* {'üî¥(ÂÅúÊ≠¢)' if drift_threshold == float('inf') else str(drift_th
```