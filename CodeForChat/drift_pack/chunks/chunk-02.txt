```text
        t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L347             t1_high = _scalar(t1, "High")
L348             t0_open = _scalar(t0, "Open")
L349             t0_close = _scalar(t0, "Close")
L350             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L351                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L352                     sig.append("GU→陰線")
L353         return sig
L354     except Exception:
L355         return []
L356
L357
L358 def scan_sell_signals(symbols, lookback_days=5):
L359     """
L360     直近 lookback_days 日のうち一度でもシグナルが出たら {sym: [(date,[signals]),...]} を返す。
L361     日付は YYYY-MM-DD。Slackで列挙する。
L362     """
L363     out = {}
L364     for s in symbols:
L365         df = _yf_df(s)
L366         if df is None or len(df) < 60:
L367             continue
L368         alerts = []
L369         for idx in df.tail(lookback_days).index:
L370             tags = _signals_for_day(df, idx)
L371             if tags:
L372                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L373         if alerts:
L374             out[s] = alerts
L375     return out
L376
L377
L378 def load_portfolio():
L379     tickers_path = Path(__file__).with_name("current_tickers.csv")
L380     with tickers_path.open() as f:
L381         reader = list(csv.reader(f))
L382     return [
L383         {"symbol": sym.strip().upper(), "shares": int(qty), "target_ratio": 1 / len(reader)}
L384         for sym, qty in reader
L385     ]
L386
L387
L388 def compute_threshold():
L389     vix_ma5 = fetch_vix_ma5()
L390     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L391     return vix_ma5, drift_threshold
L392
L393
L394 def build_dataframe(portfolio):
L395     for stock in portfolio:
L396         price = fetch_price(stock["symbol"])
L397         stock["price"] = price
L398         stock["value"] = price * stock["shares"]
L399
L400     df = pd.DataFrame(portfolio)
L401     total_value = df["value"].sum()
L402     df["current_ratio"] = df["value"] / total_value
L403     df["drift"] = df["current_ratio"] - df["target_ratio"]
L404     df["drift_abs"] = df["drift"].abs()
L405     total_drift_abs = df["drift_abs"].sum()
L406     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L407     df["adjustable"] = (
L408         (df["adjusted_ratio"] * total_value) >= df["price"]
L409     ) & df["price"].notna() & df["price"].gt(0)
L410     return df, total_value, total_drift_abs
L411
L412
L413 def simulate(df, total_value, total_drift_abs, drift_threshold):
L414     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L415     if alert:
L416         df["trade_shares"] = df.apply(
L417             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L418             if r["adjustable"] and r["price"] > 0 else 0,
L419             axis=1,
L420         )
L421         df["new_shares"] = df["shares"] + df["trade_shares"]
L422         df["new_value"] = df["new_shares"] * df["price"]
L423         new_total_value = df["new_value"].sum()
L424         df["simulated_ratio"] = df["new_value"] / new_total_value
L425         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L426         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L427     else:
L428         df["trade_shares"] = np.nan
L429         df["new_shares"] = np.nan
L430         df["new_value"] = np.nan
L431         new_total_value = np.nan
L432         df["simulated_ratio"] = np.nan
L433         df["simulated_drift_abs"] = np.nan
L434         simulated_total_drift_abs = np.nan
L435     return df, alert, new_total_value, simulated_total_drift_abs
L436
L437
L438 def prepare_summary(df, total_drift_abs, alert):
L439     summary = {
L440         "symbol": "合計",
L441         "shares": df["shares"].sum(),
L442         "value": df["value"].sum(),
L443         "current_ratio": np.nan,
L444         "drift_abs": total_drift_abs,
L445     }
L446     if alert:
L447         summary["trade_shares"] = np.nan
L448     # Sort details by evaluation value descending before appending summary
L449     df = df.sort_values(by="value", ascending=False)
L450     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L451     if alert:
L452         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L453         df_small = df[cols].copy()
L454         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L455     else:
L456         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L457         df_small = df[cols].copy()
L458         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L459     return df_small
L460
L461
L462 def currency(x):
L463     return f"${x:,.0f}" if pd.notnull(x) else ""
L464
L465
L466 def formatters_for(alert):
L467     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L468     if alert:
L469         formatters["Δqty"] = "{:.0f}".format
L470     return formatters
L471
L472
L473 def build_header(vix_ma5, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L474     header = (
L475         f"*📈 VIX MA5:* {vix_ma5:.2f}\n"
L476         f"*📊 ドリフト閾値:* {'🔴(高VIX)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L477         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L478     )
L479     if alert:
L480         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L481         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L482     else:
L483         header += "✅ アラートなし\n"
L484     return header
L485
L486
L487 def send_slack(text):
L488     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L489     if not SLACK_WEBHOOK_URL:
L490         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L491     payload = {"text": text}
L492     try:
L493         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L494         resp.raise_for_status()
L495         print("✅ Slack（Webhook）へ送信しました")
L496     except Exception as e:
L497         print(f"⚠️ Slack通知エラー: {e}")
L498
L499
L500 def send_debug(debug_text):
L501     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L502     if not SLACK_WEBHOOK_URL:
L503         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L504     debug_payload = {"text": "```" + debug_text + "```"}
L505     try:
L506         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L507         resp.raise_for_status()
L508         print("✅ Debug情報をSlackに送信しました")
L509     except Exception as e:
L510         print(f"⚠️ Slack通知エラー: {e}")
L511
L512
L513 def main():
L514     portfolio = load_portfolio()
L515     symbols = [r["symbol"] for r in portfolio]
L516     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L517     vix_ma5, drift_threshold = compute_threshold()
L518     df, total_value, total_drift_abs = build_dataframe(portfolio)
L519     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L520         df, total_value, total_drift_abs, drift_threshold
L521     )
L522     df_small = prepare_summary(df, total_drift_abs, alert)
L523     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L524         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L525         if col_sym:
L526             df_small.insert(0, "⚠", df_small[col_sym].apply(lambda x: "🔴" if x in sell_alerts else ""))
L527     formatters = formatters_for(alert)
L528     header = build_header(
L529         vix_ma5, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L530     )
L531     if sell_alerts:
L532         def fmt_pair(date_tags):
L533             date, tags = date_tags
L534             return f"{date}:" + "・".join(tags)
L535         listed = []
L536         for t, arr in sell_alerts.items():
L537             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L538         hits = ", ".join(listed)
L539         if "✅ アラートなし" in header:
L540             header = header.replace(
L541                 "✅ アラートなし",
L542                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L543             )
L544         else:
L545             header += f"\n🟥 {hits}"
L546     table_text = df_small.to_string(formatters=formatters, index=False)
L547     breadth_head = build_breadth_header_block()
L548     send_slack((breadth_head + "\n" if breadth_head else "") + header + "\n```" + table_text + "```")
L549
L550     if debug_mode:
L551         debug_cols = [
L552             "symbol",
L553             "shares",
L554             "price",
L555             "value",
L556             "current_ratio",
L557             "drift",
L558             "drift_abs",
L559             "adjusted_ratio",
L560             "adjustable",
L561             "trade_shares",
L562             "new_shares",
L563             "new_value",
L564             "simulated_ratio",
L565             "simulated_drift_abs",
L566         ]
L567         debug_text = (
L568             "=== DEBUG: full dataframe ===\n"
L569             + df[debug_cols].to_string()
L570             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L571             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L572         )
L573         print("\n" + debug_text)
L574         send_debug(debug_text)
L575
L576
L577 if __name__ == "__main__":
L578     main()
L579
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 25銘柄を均等配分（現金を除き1銘柄あたり4%）
L5 - moomoo証券で運用
L6
L7 ## Barbell Growth-Defense方針
L8 - Growth枠12銘柄：高成長で乖離源となる攻めの銘柄
L9 - Defense枠13銘柄：低ボラで安定成長し配当を増やす守りの銘柄
L10 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L11
L12 ## レジーム判定（trend_template 合格“本数”で判定）
L13 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**
L14 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L15   - 緊急入り: `max(q05, 12本)`（= N_G）
L16   - 緊急解除: `max(q20, 18本)`（= 1.5×N_G）
L17   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L18 - ヒステリシス: 前回モードに依存（EMERG→解除は18本以上、CAUTION→通常は36本以上）
L19
L20 ## レジーム別の現金・ドリフト
L21 - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **10%**
L22 - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **12%**
L23 - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（25×4%に全戻しのみ）
L24
L25 ## トレーリングストップ（統一）
L26 - G/D 共通の **基本TS=15%**
L27 - 含み益が **+20% / +40% / +60%** 到達で TS を **12% / 9% / 7%** に段階引き上げ
L28 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L29
L30 ## 入替銘柄選定
L31 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L32 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L33
L34 ## 再エントリー（クールダウン）
L35 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L36
L37 ## 実行タイミング
L38 - 判定：米国市場終値直後
L39 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 25銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinanceから
```