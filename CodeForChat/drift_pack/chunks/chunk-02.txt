```text
 last15 = df.loc[:idx].tail(15)
L307         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L308         if pd.notna(base0) and pd.notna(close) and base0 != 0 and (close / base0 - 1) >= 0.25:
L309             sig.append("+25%/15日内")
L310
L311         if len(df.loc[:idx]) >= 2:
L312             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L313             t1_high = _scalar(t1, "High")
L314             t0_open = _scalar(t0, "Open")
L315             t0_close = _scalar(t0, "Close")
L316             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L317                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L318                     sig.append("GU→陰線")
L319         return sig
L320     except Exception:
L321         return []
L322
L323
L324 def scan_sell_signals(symbols, lookback_days=5):
L325     """
L326     直近 lookback_days 日のうち一度でもシグナルが出たら {sym: [(date,[signals]),...]} を返す。
L327     日付は YYYY-MM-DD。Slackで列挙する。
L328     """
L329     out = {}
L330     for s in symbols:
L331         df = _yf_df(s)
L332         if df is None or len(df) < 60:
L333             continue
L334         alerts = []
L335         for idx in df.tail(lookback_days).index:
L336             tags = _signals_for_day(df, idx)
L337             if tags:
L338                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L339         if alerts:
L340             out[s] = alerts
L341     return out
L342
L343
L344 def load_portfolio():
L345     tickers_path = Path(__file__).with_name("current_tickers.csv")
L346     with tickers_path.open() as f:
L347         reader = list(csv.reader(f))
L348     return [
L349         {"symbol": sym.strip().upper(), "shares": int(qty), "target_ratio": 1 / len(reader)}
L350         for sym, qty in reader
L351     ]
L352
L353
L354 def compute_threshold():
L355     vix_ma5 = fetch_vix_ma5()
L356     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L357     return vix_ma5, drift_threshold
L358
L359
L360 def compute_threshold_by_mode(mode: str):
L361     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L362     m = (mode or "NORMAL").upper()
L363     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L364     drift_map = config.DRIFT_THRESHOLD_BY_MODE
L365     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L366
L367
L368 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L369     """
L370     モード別の推奨保有数 (G_count, D_count, cash_slots) を返す。
L371     cash_slotsは「外すG枠の数」（各枠=5%）。
L372     NORMAL: G12/D8/現金化0, CAUTION: G10/D8/現金化2, EMERG: G8/D8/現金化4
L373     """
L374     m = (mode or "NORMAL").upper()
L375     base = config.COUNTS_BY_MODE.get("NORMAL", config.COUNTS_BASE)
L376     now  = config.COUNTS_BY_MODE.get(m, base)
L377     cash_slots = max(0, base["G"] - now["G"])
L378     return now["G"], now["D"], cash_slots
L379
L380
L381 def build_dataframe(portfolio):
L382     for stock in portfolio:
L383         price = fetch_price(stock["symbol"])
L384         stock["price"] = price
L385         stock["value"] = price * stock["shares"]
L386
L387     df = pd.DataFrame(portfolio)
L388     total_value = df["value"].sum()
L389     df["current_ratio"] = df["value"] / total_value
L390     df["drift"] = df["current_ratio"] - df["target_ratio"]
L391     df["drift_abs"] = df["drift"].abs()
L392     total_drift_abs = df["drift_abs"].sum()
L393     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L394     df["adjustable"] = (
L395         (df["adjusted_ratio"] * total_value) >= df["price"]
L396     ) & df["price"].notna() & df["price"].gt(0)
L397     return df, total_value, total_drift_abs
L398
L399
L400 def simulate(df, total_value, total_drift_abs, drift_threshold):
L401     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L402     if alert:
L403         df["trade_shares"] = df.apply(
L404             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L405             if r["adjustable"] and r["price"] > 0 else 0,
L406             axis=1,
L407         )
L408         df["new_shares"] = df["shares"] + df["trade_shares"]
L409         df["new_value"] = df["new_shares"] * df["price"]
L410         new_total_value = df["new_value"].sum()
L411         df["simulated_ratio"] = df["new_value"] / new_total_value
L412         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L413         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L414     else:
L415         df["trade_shares"] = np.nan
L416         df["new_shares"] = np.nan
L417         df["new_value"] = np.nan
L418         new_total_value = np.nan
L419         df["simulated_ratio"] = np.nan
L420         df["simulated_drift_abs"] = np.nan
L421         simulated_total_drift_abs = np.nan
L422     return df, alert, new_total_value, simulated_total_drift_abs
L423
L424
L425 def prepare_summary(df, total_drift_abs, alert):
L426     summary = {
L427         "symbol": "合計",
L428         "shares": df["shares"].sum(),
L429         "value": df["value"].sum(),
L430         "current_ratio": np.nan,
L431         "drift_abs": total_drift_abs,
L432     }
L433     if alert:
L434         summary["trade_shares"] = np.nan
L435     # Sort details by evaluation value descending before appending summary
L436     df = df.sort_values(by="value", ascending=False)
L437     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L438     if alert:
L439         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L440         df_small = df[cols].copy()
L441         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L442     else:
L443         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L444         df_small = df[cols].copy()
L445         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L446     return df_small
L447
L448
L449 def currency(x):
L450     return f"${x:,.0f}" if pd.notnull(x) else ""
L451
L452
L453 def formatters_for(alert):
L454     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L455     if alert:
L456         formatters["Δqty"] = "{:.0f}".format
L457     return formatters
L458
L459
L460 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L461     header = (
L462         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L463         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L464         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L465     )
L466     if alert:
L467         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L468         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L469     else:
L470         header += "✅ アラートなし\n"
L471     # ★ 追記: TSルール（G/D共通）と推奨保有数
L472     # TS(基本)をモードで動的表示。段階TSは「基本から -3/-6/-8 pt」固定。
L473     base_ts = config.TS_BASE_BY_MODE.get(mode.upper(), config.TS_BASE_BY_MODE["NORMAL"])
L474     d1, d2, d3 = config.TS_STEP_DELTAS_PT
L475     ts_line = f"*🛡 TS:* 基本 -{base_ts*100:.0f}% / +30%→-{max(base_ts*100 - d1, 0):.0f}% / +60%→-{max(base_ts*100 - d2, 0):.0f}% / +100%→-{max(base_ts*100 - d3, 0):.0f}%\n"
L476     header += ts_line
L477     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L478     cash_pct = cash_slots * (100 / (config.TOTAL_TARGETS))  # 1枠=総数分割の%（20銘柄なら5%）
L479     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct:.0f}%）\n"
L480     return header
L481
L482
L483 def send_slack(text):
L484     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L485     if not SLACK_WEBHOOK_URL:
L486         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L487     payload = {"text": text}
L488     try:
L489         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L490         resp.raise_for_status()
L491         print("✅ Slack（Webhook）へ送信しました")
L492     except Exception as e:
L493         print(f"⚠️ Slack通知エラー: {e}")
L494
L495
L496 def send_debug(debug_text):
L497     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L498     if not SLACK_WEBHOOK_URL:
L499         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L500     debug_payload = {"text": "```" + debug_text + "```"}
L501     try:
L502         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L503         resp.raise_for_status()
L504         print("✅ Debug情報をSlackに送信しました")
L505     except Exception as e:
L506         print(f"⚠️ Slack通知エラー: {e}")
L507
L508
L509 def main():
L510     portfolio = load_portfolio()
L511     symbols = [r["symbol"] for r in portfolio]
L512     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L513
L514     breadth_block, mode, _C = build_breadth_header()
L515
L516     cash_ratio, drift_threshold = compute_threshold_by_mode(mode)
L517
L518     df, total_value, total_drift_abs = build_dataframe(portfolio)
L519     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L520         df, total_value, total_drift_abs, drift_threshold
L521     )
L522     df_small = prepare_summary(df, total_drift_abs, alert)
L523     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L524         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L525         if col_sym:
L526             alert_keys = {str(k) for k in sell_alerts.keys()}
L527             df_small[col_sym] = df_small[col_sym].astype(str)
L528             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L529             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L530             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L531     formatters = formatters_for(alert)
L532     header = build_header(
L533         mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L534     )
L535     if breadth_block:
L536         header = breadth_block + "\n" + header
L537     if sell_alerts:
L538         def fmt_pair(date_tags):
L539             date, tags = date_tags
L540             return f"{date}:" + "・".join(tags)
L541         listed = []
L542         for t, arr in sell_alerts.items():
L543             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L544         hits = ", ".join(listed)
L545         if "✅ アラートなし" in header:
L546             header = header.replace(
L547                 "✅ アラートなし",
L548                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L549             )
L550         else:
L551             header += f"\n🟥 {hits}"
L552     table_text = df_small.to_string(formatters=formatters, index=False)
L553     send_slack(header + "\n```" + table_text + "```")
L554
L555     if debug_mode:
L556         debug_cols = [
L557             "symbol",
L558             "shares",
L559             "price",
L560             "value",
L561             "current_ratio",
L562             "drift",
L563             "drift_abs",
L564             "adjusted_ratio",
L565             "adjustable",
L566             "trade_shares",
L567             "new_shares",
L568             "new_value",
L569             "simulated_ratio",
L570             "simulated_drift_abs",
L571         ]
L572         debug_text = (
L573             "=== DEBUG: full dataframe ===\n"
L574             + df[debug_cols].to_string()
L575             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L576             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L577         )
L578         print("\n" + debug_text)
L579         send_debug(debug_text)
L580
L581
L582 if __name__ == "__main__":
L583     main()
L584
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9   
```