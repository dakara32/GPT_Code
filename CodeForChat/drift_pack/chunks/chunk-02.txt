```text
dit[G-CD summary]: drawdown=0.00% => NORMAL")
L296         return "NORMAL", 0.0
L297
L298     details.sort(key=lambda x: x[4], reverse=True)
L299     today = pd.Timestamp.now(tz="America/New_York").date().isoformat()
L300     print(f"üìù audit[G-CD details] {today}  G={len(g_syms)}")
L301     print("  SYMBOL        Peak60(H)     Low(T)     ratio    DD%")
L302     for sym, peak, low, ratio, ddpct in details:
L303         print(f"  {sym:<8}  {peak:>12.6g}  {low:>10.6g}   {ratio:>6.3f}  {ddpct:>6.2f}")
L304
L305     avg_ratio = float(np.mean([r for _, _, _, r, _ in details]))
L306     gcd_pct = max(0.0, (1.0 - avg_ratio) * 100.0)
L307     if gcd_pct >= CD_EMERG * 100:
L308         mode = "EMERG"
L309     elif gcd_pct >= CD_CAUTION * 100:
L310         mode = "CAUTION"
L311     else:
L312         mode = "NORMAL"
L313
L314     print(
L315         "üìù audit[G-CD summary]: "
L316         f"avg_low/peak60={avg_ratio:.4f}  drawdown={gcd_pct:.2f}%  => {mode}"
L317     )
L318     return mode, gcd_pct
L319 # Debug flag
L320 debug_mode = False  # set to True for detailed output
L321
L322 # --- Finnhub settings & helper ---
L323 FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
L324 if not FINNHUB_API_KEY:
L325     raise ValueError("FINNHUB_API_KEY not set (Áí∞Â¢ÉÂ§âÊï∞„ÅåÊú™Ë®≠ÂÆö„Åß„Åô)")
L326
L327 RATE_LIMIT = 55  # requests per minute (free tier is 60)
L328 call_times = []
L329
L330
L331 def finnhub_get(endpoint, params):
L332     """Call Finnhub API with basic rate limiting."""
L333     now = time.time()
L334     cutoff = now - 60
L335     while call_times and call_times[0] < cutoff:
L336         call_times.pop(0)
L337     if len(call_times) >= RATE_LIMIT:
L338         sleep_time = 60 - (now - call_times[0])
L339         time.sleep(sleep_time)
L340     params = {**params, "token": FINNHUB_API_KEY}
L341     try:
L342         resp = requests.get(f"https://finnhub.io/api/v1/{endpoint}", params=params)
L343         resp.raise_for_status()
L344         data = resp.json()
L345     except requests.exceptions.JSONDecodeError as e:
L346         print(f"‚ö†Ô∏è Finnhub API JSON decode error: {e}")
L347         return {}
L348     except Exception as e:
L349         print(f"‚ö†Ô∏è Finnhub API error: {e}")
L350         return {}
L351     call_times.append(time.time())
L352     return data
L353
L354
L355 def fetch_price(symbol):
L356     try:
L357         data = finnhub_get("quote", {"symbol": symbol})
L358         price = data.get("c")
L359         return float(price) if price not in (None, 0) else float("nan")
L360     except Exception:
L361         return float("nan")
L362
L363
L364 def fetch_vix_ma5():
L365     """Retrieve VIX 5-day moving average via yfinance."""
L366     try:
L367         vix = (
L368             yf.download("^VIX", period="7d", interval="1d", progress=False, auto_adjust=False)["Close"]
L369             .dropna()
L370             .tail(5)
L371         )
L372         if len(vix) < 5:
L373             return float("nan")
L374         return vix.mean().item()
L375     except Exception:
L376         return float("nan")
L377
L378
L379
L380 # === Minervini-like sell signals ===
L381 def _yf_df(sym, period="6mo"):
L382     """Êó•Ë∂≥/MA/Âá∫Êù•È´òÂπ≥Âùá„ÇíÂèñÂæó„ÄÇÊ¨†ÊêçÊôÇ„ÅØ None„ÄÇ"""
L383     try:
L384         df = yf.download(sym, period=period, interval="1d", auto_adjust=False, progress=False)
L385         if df is None or df.empty:
L386             return None
L387         return df.dropna().assign(
L388             ma20=lambda d: d["Close"].rolling(20).mean(),
L389             ma50=lambda d: d["Close"].rolling(50).mean(),
L390             vol50=lambda d: d["Volume"].rolling(50).mean(),
L391         )
L392     except Exception:
L393         return None
L394
L395
L396 def _scalar(row, col):
L397     """Series/np„Çπ„Ç´„É©‚ÜíPython„Çπ„Ç´„É©ÂåñÔºàNaN„ÅØNaN„ÅÆ„Åæ„ÅæÔºâ"""
L398     try:
L399         v = row[col]
L400         if hasattr(v, "item"):
L401             try:
L402                 v = v.item()
L403             except Exception:
L404                 pass
L405         return v
L406     except Exception:
L407         return float("nan")
L408
L409
L410 def _is_strict_down(seq):
L411     """Êï∞Âàó„ÅåÂé≥ÂØÜ„Å´ÈÄ£Á∂ö„ÅßÂàá„Çä‰∏ã„Åå„Å£„Å¶„ÅÑ„Çã„ÅãÔºàlen>=4„ÇíÊÉ≥ÂÆöÔºâ„ÄÇNaNÂê´„Åø„ÅØFalse„ÄÇ"""
L412     try:
L413         xs = [float(x) for x in seq]
L414         if any(pd.isna(x) for x in xs) or len(xs) < 4:
L415             return False
L416         return all(b < a for a, b in zip(xs[:-1], xs[1:]))
L417     except Exception:
L418         return False
L419
L420
L421 def _signals_for_day(df, idx):
L422     """df.loc[idx] 1Êó•ÂàÜ„Å´ÂØæ„Åó„Ç∑„Ç∞„Éä„É´ÈÖçÂàó„ÇíËøî„ÅôÔºàÂÄ§Âãï„Åç/Âá∫Êù•È´ò„Éô„Éº„Çπ„ÅÆ„ÅøÔºâ„ÄÇ"""
L423     try:
L424         sig = []
L425         d = df.loc[idx]
L426         close = _scalar(d, "Close")
L427         ma20 = _scalar(d, "ma20")
L428         ma50 = _scalar(d, "ma50")
L429         vol = _scalar(d, "Volume")
L430         vol50 = _scalar(d, "vol50")
L431
L432         if pd.notna(close) and pd.notna(ma20) and close < ma20:
L433             sig.append("20DMA‚Üì")
L434
L435         if all(pd.notna(x) for x in (close, ma50, vol, vol50)) and close < ma50 and vol > 1.5 * vol50:
L436             sig.append("50DMA‚Üì(Â§ßÂïÜ„ÅÑ)")
L437
L438         last4 = df.loc[:idx].tail(4)
L439         last10 = df.loc[:idx].tail(10)
L440
L441         lows_desc = _is_strict_down(last4["Low"].tolist()) if last4["Low"].notna().all() else False
L442         reds = int((last10["Close"] < last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L443         if lows_desc or reds > 5:
L444             sig.append("ÈÄ£Á∂öÂÆâÂÄ§/Èô∞Á∑öÂÑ™Âã¢")
L445
L446         ups = int((last10["Close"] > last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L447         if ups >= 7:
L448             sig.append("‰∏ä„ÅíÂÅèÈáç(>70%)")
L449
L450         last15 = df.loc[:idx].tail(15)
L451         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L452         if pd.notna(base0) and pd.notna(close) and base0 != 0 and (close / base0 - 1) >= 0.25:
L453             sig.append("+25%/15Êó•ÂÜÖ")
L454
L455         if len(df.loc[:idx]) >= 2:
L456             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L457             t1_high = _scalar(t1, "High")
L458             t0_open = _scalar(t0, "Open")
L459             t0_close = _scalar(t0, "Close")
L460             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L461                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L462                     sig.append("GU‚ÜíÈô∞Á∑ö")
L463         return sig
L464     except Exception:
L465         return []
L466
L467
L468 def scan_sell_signals(symbols, lookback_days=5):
L469     """
L470     Áõ¥Ëøë lookback_days Êó•„ÅÆ„ÅÜ„Å°‰∏ÄÂ∫¶„Åß„ÇÇ„Ç∑„Ç∞„Éä„É´„ÅåÂá∫„Åü„Çâ {sym: [(date,[signals]),...]} „ÇíËøî„Åô„ÄÇ
L471     Êó•‰ªò„ÅØ YYYY-MM-DD„ÄÇSlack„ÅßÂàóÊåô„Åô„Çã„ÄÇ
L472     """
L473     out = {}
L474     for s in symbols:
L475         df = _yf_df(s)
L476         if df is None or len(df) < 60:
L477             continue
L478         alerts = []
L479         for idx in df.tail(lookback_days).index:
L480             tags = _signals_for_day(df, idx)
L481             if tags:
L482                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L483         if alerts:
L484             out[s] = alerts
L485     return out
L486
L487
L488 def load_portfolio():
L489     tickers_path = Path(__file__).with_name("current_tickers.csv")
L490     with tickers_path.open() as f:
L491         rows = [row for row in csv.reader(f) if row and row[0].strip()]
L492     n = len(rows)
L493     portfolio = []
L494     for row in rows:
L495         sym = row[0].strip().upper()
L496         qty = int(row[1]) if len(row) > 1 and row[1].strip() else 0
L497         bucket = row[2].strip().upper() if len(row) > 2 else ""
L498         entry = {
L499             "symbol": sym,
L500             "shares": qty,
L501             "target_ratio": 1 / n if n else 0.0,
L502             "bucket": bucket,
L503         }
L504         portfolio.append(entry)
L505     return portfolio
L506
L507
L508 def compute_threshold():
L509     vix_ma5 = fetch_vix_ma5()
L510     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L511     return vix_ma5, drift_threshold
L512
L513
L514 def compute_threshold_by_mode(mode: str):
L515     """„É¢„Éº„Éâ„Å´Âøú„Åò„Å¶ÁèæÈáë‰øùÊúâÁéá„Å®„Éâ„É™„Éï„ÉàÈñæÂÄ§„ÇíËøî„ÅôÔºàREADMEÊ∫ñÊã†Ôºâ"""
L516     m = (mode or "NORMAL").upper()
L517     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L518     drift_map = config.DRIFT_THRESHOLD_BY_MODE
L519     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L520
L521
L522 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L523     """
L524     „É¢„Éº„ÉâÂà•„ÅÆÊé®Â•®‰øùÊúâÊï∞ (G_count, D_count, cash_slots) „ÇíËøî„Åô„ÄÇ
L525     cash_slots„ÅØ„ÄåÂ§ñ„ÅôGÊû†„ÅÆÊï∞„ÄçÔºàÂêÑÊû†=5%Ôºâ„ÄÇ
L526     NORMAL: G12/D8/ÁèæÈáëÂåñ0, CAUTION: G10/D8/ÁèæÈáëÂåñ2, EMERG: G8/D8/ÁèæÈáëÂåñ4
L527     """
L528     m = (mode or "NORMAL").upper()
L529     base = config.COUNTS_BY_MODE.get("NORMAL", config.COUNTS_BASE)
L530     now  = config.COUNTS_BY_MODE.get(m, base)
L531     cash_slots = max(0, base["G"] - now["G"])
L532     return now["G"], now["D"], cash_slots
L533
L534
L535 def build_dataframe(portfolio):
L536     for stock in portfolio:
L537         price = fetch_price(stock["symbol"])
L538         stock["price"] = price
L539         stock["value"] = price * stock["shares"]
L540
L541     df = pd.DataFrame(portfolio)
L542     total_value = df["value"].sum()
L543     df["current_ratio"] = df["value"] / total_value
L544     df["drift"] = df["current_ratio"] - df["target_ratio"]
L545     df["drift_abs"] = df["drift"].abs()
L546     total_drift_abs = df["drift_abs"].sum()
L547     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L548     df["adjustable"] = (
L549         (df["adjusted_ratio"] * total_value) >= df["price"]
L550     ) & df["price"].notna() & df["price"].gt(0)
L551     return df, total_value, total_drift_abs
L552
L553
L554 def simulate(df, total_value, total_drift_abs, drift_threshold):
L555     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L556     if alert:
L557         df["trade_shares"] = df.apply(
L558             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L559             if r["adjustable"] and r["price"] > 0 else 0,
L560             axis=1,
L561         )
L562         df["new_shares"] = df["shares"] + df["trade_shares"]
L563         df["new_value"] = df["new_shares"] * df["price"]
L564         new_total_value = df["new_value"].sum()
L565         df["simulated_ratio"] = df["new_value"] / new_total_value
L566         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L567         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L568     else:
L569         df["trade_shares"] = np.nan
L570         df["new_shares"] = np.nan
L571         df["new_value"] = np.nan
L572         new_total_value = np.nan
L573         df["simulated_ratio"] = np.nan
L574         df["simulated_drift_abs"] = np.nan
L575         simulated_total_drift_abs = np.nan
L576     return df, alert, new_total_value, simulated_total_drift_abs
L577
L578
L579 def prepare_summary(df, total_drift_abs, alert):
L580     summary = {
L581         "symbol": "ÂêàË®à",
L582         "shares": df["shares"].sum(),
L583         "value": df["value"].sum(),
L584         "current_ratio": np.nan,
L585         "drift_abs": total_drift_abs,
L586     }
L587     if alert:
L588         summary["trade_shares"] = np.nan
L589     # Sort details by evaluation value descending before appending summary
L590     df = df.sort_values(by="value", ascending=False)
L591     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L592     if alert:
L593         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L594         df_small = df[cols].copy()
L595         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Œîqty"]
L596     else:
L597         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L598         df_small = df[cols].copy()
L599         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L600     return df_small
L601
L602
L603 def currency(x):
L604     return f"${x:,.0f}" if pd.notnu
```