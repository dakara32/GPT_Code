```text
Dユニーク数={0} / 今日ヒット一覧={1}".format(
L297             len(uniq_hits), sorted(today_hits) if today_hits else []
L298         )
L299     )
L300
L301     if rows_today_printed == 0:
L302         reason = "、".join(sorted(set(today_reason_flags))) or "データ欠損または銘柄なし"
L303         print(f"⚠️ audit: 今日の明細が空です（理由のヒント: {reason}）")
L304
L305     k5 = len(uniq_hits)
L306     mode1 = "EMERG" if k5 >= 8 else "CAUTION" if k5 >= 6 else "NORMAL"
L307     return mode1, k5, today_hits
L308 # Debug flag
L309 debug_mode = False  # set to True for detailed output
L310
L311 # --- Finnhub settings & helper ---
L312 FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
L313 if not FINNHUB_API_KEY:
L314     raise ValueError("FINNHUB_API_KEY not set (環境変数が未設定です)")
L315
L316 RATE_LIMIT = 55  # requests per minute (free tier is 60)
L317 call_times = []
L318
L319
L320 def finnhub_get(endpoint, params):
L321     """Call Finnhub API with basic rate limiting."""
L322     now = time.time()
L323     cutoff = now - 60
L324     while call_times and call_times[0] < cutoff:
L325         call_times.pop(0)
L326     if len(call_times) >= RATE_LIMIT:
L327         sleep_time = 60 - (now - call_times[0])
L328         time.sleep(sleep_time)
L329     params = {**params, "token": FINNHUB_API_KEY}
L330     try:
L331         resp = requests.get(f"https://finnhub.io/api/v1/{endpoint}", params=params)
L332         resp.raise_for_status()
L333         data = resp.json()
L334     except requests.exceptions.JSONDecodeError as e:
L335         print(f"⚠️ Finnhub API JSON decode error: {e}")
L336         return {}
L337     except Exception as e:
L338         print(f"⚠️ Finnhub API error: {e}")
L339         return {}
L340     call_times.append(time.time())
L341     return data
L342
L343
L344 def fetch_price(symbol):
L345     try:
L346         data = finnhub_get("quote", {"symbol": symbol})
L347         price = data.get("c")
L348         return float(price) if price not in (None, 0) else float("nan")
L349     except Exception:
L350         return float("nan")
L351
L352
L353 def fetch_vix_ma5():
L354     """Retrieve VIX 5-day moving average via yfinance."""
L355     try:
L356         vix = (
L357             yf.download("^VIX", period="7d", interval="1d", progress=False, auto_adjust=False)["Close"]
L358             .dropna()
L359             .tail(5)
L360         )
L361         if len(vix) < 5:
L362             return float("nan")
L363         return vix.mean().item()
L364     except Exception:
L365         return float("nan")
L366
L367
L368
L369 # === Minervini-like sell signals ===
L370 def _yf_df(sym, period="6mo"):
L371     """日足/MA/出来高平均を取得。欠損時は None。"""
L372     try:
L373         df = yf.download(sym, period=period, interval="1d", auto_adjust=False, progress=False)
L374         if df is None or df.empty:
L375             return None
L376         return df.dropna().assign(
L377             ma20=lambda d: d["Close"].rolling(20).mean(),
L378             ma50=lambda d: d["Close"].rolling(50).mean(),
L379             vol50=lambda d: d["Volume"].rolling(50).mean(),
L380         )
L381     except Exception:
L382         return None
L383
L384
L385 def _scalar(row, col):
L386     """Series/npスカラ→Pythonスカラ化（NaNはNaNのまま）"""
L387     try:
L388         v = row[col]
L389         if hasattr(v, "item"):
L390             try:
L391                 v = v.item()
L392             except Exception:
L393                 pass
L394         return v
L395     except Exception:
L396         return float("nan")
L397
L398
L399 def _is_strict_down(seq):
L400     """数列が厳密に連続で切り下がっているか（len>=4を想定）。NaN含みはFalse。"""
L401     try:
L402         xs = [float(x) for x in seq]
L403         if any(pd.isna(x) for x in xs) or len(xs) < 4:
L404             return False
L405         return all(b < a for a, b in zip(xs[:-1], xs[1:]))
L406     except Exception:
L407         return False
L408
L409
L410 def _signals_for_day(df, idx):
L411     """df.loc[idx] 1日分に対しシグナル配列を返す（値動き/出来高ベースのみ）。"""
L412     try:
L413         sig = []
L414         d = df.loc[idx]
L415         close = _scalar(d, "Close")
L416         ma20 = _scalar(d, "ma20")
L417         ma50 = _scalar(d, "ma50")
L418         vol = _scalar(d, "Volume")
L419         vol50 = _scalar(d, "vol50")
L420
L421         if pd.notna(close) and pd.notna(ma20) and close < ma20:
L422             sig.append("20DMA↓")
L423
L424         if all(pd.notna(x) for x in (close, ma50, vol, vol50)) and close < ma50 and vol > 1.5 * vol50:
L425             sig.append("50DMA↓(大商い)")
L426
L427         last4 = df.loc[:idx].tail(4)
L428         last10 = df.loc[:idx].tail(10)
L429
L430         lows_desc = _is_strict_down(last4["Low"].tolist()) if last4["Low"].notna().all() else False
L431         reds = int((last10["Close"] < last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L432         if lows_desc or reds > 5:
L433             sig.append("連続安値/陰線優勢")
L434
L435         ups = int((last10["Close"] > last10["Open"]).sum()) if last10[["Close", "Open"]].notna().all().all() else 0
L436         if ups >= 7:
L437             sig.append("上げ偏重(>70%)")
L438
L439         last15 = df.loc[:idx].tail(15)
L440         base0 = _scalar(last15.iloc[0], "Close") if len(last15) > 0 else float("nan")
L441         if pd.notna(base0) and pd.notna(close) and base0 != 0 and (close / base0 - 1) >= 0.25:
L442             sig.append("+25%/15日内")
L443
L444         if len(df.loc[:idx]) >= 2:
L445             t1, t0 = df.loc[:idx].iloc[-2], df.loc[:idx].iloc[-1]
L446             t1_high = _scalar(t1, "High")
L447             t0_open = _scalar(t0, "Open")
L448             t0_close = _scalar(t0, "Close")
L449             if all(pd.notna(x) for x in (t1_high, t0_open, t0_close)):
L450                 if (t0_open > t1_high * 1.02) and (t0_close < t0_open):
L451                     sig.append("GU→陰線")
L452         return sig
L453     except Exception:
L454         return []
L455
L456
L457 def scan_sell_signals(symbols, lookback_days=5):
L458     """
L459     直近 lookback_days 日のうち一度でもシグナルが出たら {sym: [(date,[signals]),...]} を返す。
L460     日付は YYYY-MM-DD。Slackで列挙する。
L461     """
L462     out = {}
L463     for s in symbols:
L464         df = _yf_df(s)
L465         if df is None or len(df) < 60:
L466             continue
L467         alerts = []
L468         for idx in df.tail(lookback_days).index:
L469             tags = _signals_for_day(df, idx)
L470             if tags:
L471                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L472         if alerts:
L473             out[s] = alerts
L474     return out
L475
L476
L477 def load_portfolio():
L478     tickers_path = Path(__file__).with_name("current_tickers.csv")
L479     with tickers_path.open() as f:
L480         rows = [row for row in csv.reader(f) if row and row[0].strip()]
L481     n = len(rows)
L482     portfolio = []
L483     for row in rows:
L484         sym = row[0].strip().upper()
L485         qty = int(row[1]) if len(row) > 1 and row[1].strip() else 0
L486         bucket = row[2].strip().upper() if len(row) > 2 else ""
L487         entry = {
L488             "symbol": sym,
L489             "shares": qty,
L490             "target_ratio": 1 / n if n else 0.0,
L491             "bucket": bucket,
L492         }
L493         portfolio.append(entry)
L494     return portfolio
L495
L496
L497 def compute_threshold():
L498     vix_ma5 = fetch_vix_ma5()
L499     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L500     return vix_ma5, drift_threshold
L501
L502
L503 def compute_threshold_by_mode(mode: str):
L504     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L505     m = (mode or "NORMAL").upper()
L506     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L507     drift_map = config.DRIFT_THRESHOLD_BY_MODE
L508     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L509
L510
L511 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L512     """
L513     モード別の推奨保有数 (G_count, D_count, cash_slots) を返す。
L514     cash_slotsは「外すG枠の数」（各枠=5%）。
L515     NORMAL: G12/D8/現金化0, CAUTION: G10/D8/現金化2, EMERG: G8/D8/現金化4
L516     """
L517     m = (mode or "NORMAL").upper()
L518     base = config.COUNTS_BY_MODE.get("NORMAL", config.COUNTS_BASE)
L519     now  = config.COUNTS_BY_MODE.get(m, base)
L520     cash_slots = max(0, base["G"] - now["G"])
L521     return now["G"], now["D"], cash_slots
L522
L523
L524 def build_dataframe(portfolio):
L525     for stock in portfolio:
L526         price = fetch_price(stock["symbol"])
L527         stock["price"] = price
L528         stock["value"] = price * stock["shares"]
L529
L530     df = pd.DataFrame(portfolio)
L531     total_value = df["value"].sum()
L532     df["current_ratio"] = df["value"] / total_value
L533     df["drift"] = df["current_ratio"] - df["target_ratio"]
L534     df["drift_abs"] = df["drift"].abs()
L535     total_drift_abs = df["drift_abs"].sum()
L536     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L537     df["adjustable"] = (
L538         (df["adjusted_ratio"] * total_value) >= df["price"]
L539     ) & df["price"].notna() & df["price"].gt(0)
L540     return df, total_value, total_drift_abs
L541
L542
L543 def simulate(df, total_value, total_drift_abs, drift_threshold):
L544     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L545     if alert:
L546         df["trade_shares"] = df.apply(
L547             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L548             if r["adjustable"] and r["price"] > 0 else 0,
L549             axis=1,
L550         )
L551         df["new_shares"] = df["shares"] + df["trade_shares"]
L552         df["new_value"] = df["new_shares"] * df["price"]
L553         new_total_value = df["new_value"].sum()
L554         df["simulated_ratio"] = df["new_value"] / new_total_value
L555         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L556         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L557     else:
L558         df["trade_shares"] = np.nan
L559         df["new_shares"] = np.nan
L560         df["new_value"] = np.nan
L561         new_total_value = np.nan
L562         df["simulated_ratio"] = np.nan
L563         df["simulated_drift_abs"] = np.nan
L564         simulated_total_drift_abs = np.nan
L565     return df, alert, new_total_value, simulated_total_drift_abs
L566
L567
L568 def prepare_summary(df, total_drift_abs, alert):
L569     summary = {
L570         "symbol": "合計",
L571         "shares": df["shares"].sum(),
L572         "value": df["value"].sum(),
L573         "current_ratio": np.nan,
L574         "drift_abs": total_drift_abs,
L575     }
L576     if alert:
L577         summary["trade_shares"] = np.nan
L578     # Sort details by evaluation value descending before appending summary
L579     df = df.sort_values(by="value", ascending=False)
L580     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L581     if alert:
L582         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L583         df_small = df[cols].copy()
L584         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L585     else:
L586         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L587         df_small = df[cols].copy()
L588         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L589     return df_small
L590
L591
L592 def currency(x):
L593     return f"${x:,.0f}" if pd.notnull(x) else ""
L594
L595
L596 def formatters_for(alert):
L597     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L598     if alert:
L599         formatters["Δqty"] = "{:.0f}".format
L600     return formatters
L601
L602
L603 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L604     header = (
L605         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L606         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
```