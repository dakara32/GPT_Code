```text
         for idx in df.tail(lookback_days).index:
L325             tags = _signals_for_day(df, idx)
L326             if tags:
L327                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L328         if alerts:
L329             out[s] = alerts
L330     return out
L331
L332
L333 def load_portfolio():
L334     tickers_path = Path(__file__).with_name("current_tickers.csv")
L335     with tickers_path.open() as f:
L336         reader = list(csv.reader(f))
L337     return [
L338         {"symbol": sym.strip().upper(), "shares": int(qty), "target_ratio": 1 / len(reader)}
L339         for sym, qty in reader
L340     ]
L341
L342
L343 def compute_threshold():
L344     vix_ma5 = fetch_vix_ma5()
L345     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L346     return vix_ma5, drift_threshold
L347
L348
L349 def compute_threshold_by_mode(mode: str):
L350     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L351     m = (mode or "NORMAL").upper()
L352     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L353     drift_map = {"NORMAL": 10, "CAUTION": 12, "EMERG": float("inf")}
L354     return cash_map.get(m, 0.10), drift_map.get(m, 10)
L355
L356
L357 def build_dataframe(portfolio):
L358     for stock in portfolio:
L359         price = fetch_price(stock["symbol"])
L360         stock["price"] = price
L361         stock["value"] = price * stock["shares"]
L362
L363     df = pd.DataFrame(portfolio)
L364     total_value = df["value"].sum()
L365     df["current_ratio"] = df["value"] / total_value
L366     df["drift"] = df["current_ratio"] - df["target_ratio"]
L367     df["drift_abs"] = df["drift"].abs()
L368     total_drift_abs = df["drift_abs"].sum()
L369     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L370     df["adjustable"] = (
L371         (df["adjusted_ratio"] * total_value) >= df["price"]
L372     ) & df["price"].notna() & df["price"].gt(0)
L373     return df, total_value, total_drift_abs
L374
L375
L376 def simulate(df, total_value, total_drift_abs, drift_threshold):
L377     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L378     if alert:
L379         df["trade_shares"] = df.apply(
L380             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L381             if r["adjustable"] and r["price"] > 0 else 0,
L382             axis=1,
L383         )
L384         df["new_shares"] = df["shares"] + df["trade_shares"]
L385         df["new_value"] = df["new_shares"] * df["price"]
L386         new_total_value = df["new_value"].sum()
L387         df["simulated_ratio"] = df["new_value"] / new_total_value
L388         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L389         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L390     else:
L391         df["trade_shares"] = np.nan
L392         df["new_shares"] = np.nan
L393         df["new_value"] = np.nan
L394         new_total_value = np.nan
L395         df["simulated_ratio"] = np.nan
L396         df["simulated_drift_abs"] = np.nan
L397         simulated_total_drift_abs = np.nan
L398     return df, alert, new_total_value, simulated_total_drift_abs
L399
L400
L401 def prepare_summary(df, total_drift_abs, alert):
L402     summary = {
L403         "symbol": "合計",
L404         "shares": df["shares"].sum(),
L405         "value": df["value"].sum(),
L406         "current_ratio": np.nan,
L407         "drift_abs": total_drift_abs,
L408     }
L409     if alert:
L410         summary["trade_shares"] = np.nan
L411     # Sort details by evaluation value descending before appending summary
L412     df = df.sort_values(by="value", ascending=False)
L413     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L414     if alert:
L415         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L416         df_small = df[cols].copy()
L417         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L418     else:
L419         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L420         df_small = df[cols].copy()
L421         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L422     return df_small
L423
L424
L425 def currency(x):
L426     return f"${x:,.0f}" if pd.notnull(x) else ""
L427
L428
L429 def formatters_for(alert):
L430     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L431     if alert:
L432         formatters["Δqty"] = "{:.0f}".format
L433     return formatters
L434
L435
L436 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L437     header = (
L438         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L439         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L440         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L441     )
L442     if alert:
L443         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L444         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L445     else:
L446         header += "✅ アラートなし\n"
L447     return header
L448
L449
L450 def send_slack(text):
L451     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L452     if not SLACK_WEBHOOK_URL:
L453         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L454     payload = {"text": text}
L455     try:
L456         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L457         resp.raise_for_status()
L458         print("✅ Slack（Webhook）へ送信しました")
L459     except Exception as e:
L460         print(f"⚠️ Slack通知エラー: {e}")
L461
L462
L463 def send_debug(debug_text):
L464     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L465     if not SLACK_WEBHOOK_URL:
L466         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L467     debug_payload = {"text": "```" + debug_text + "```"}
L468     try:
L469         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L470         resp.raise_for_status()
L471         print("✅ Debug情報をSlackに送信しました")
L472     except Exception as e:
L473         print(f"⚠️ Slack通知エラー: {e}")
L474
L475
L476 def main():
L477     portfolio = load_portfolio()
L478     symbols = [r["symbol"] for r in portfolio]
L479     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L480
L481     breadth_block, mode, _C = build_breadth_header()
L482
L483     cash_ratio, drift_threshold = compute_threshold_by_mode(mode)
L484
L485     df, total_value, total_drift_abs = build_dataframe(portfolio)
L486     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L487         df, total_value, total_drift_abs, drift_threshold
L488     )
L489     df_small = prepare_summary(df, total_drift_abs, alert)
L490     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L491         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L492         if col_sym:
L493             df_small.insert(0, "⚠", df_small[col_sym].apply(lambda x: "🔴" if x in sell_alerts else ""))
L494     formatters = formatters_for(alert)
L495     header = build_header(
L496         mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L497     )
L498     if breadth_block:
L499         header = breadth_block + "\n" + header
L500     if sell_alerts:
L501         def fmt_pair(date_tags):
L502             date, tags = date_tags
L503             return f"{date}:" + "・".join(tags)
L504         listed = []
L505         for t, arr in sell_alerts.items():
L506             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L507         hits = ", ".join(listed)
L508         if "✅ アラートなし" in header:
L509             header = header.replace(
L510                 "✅ アラートなし",
L511                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L512             )
L513         else:
L514             header += f"\n🟥 {hits}"
L515     table_text = df_small.to_string(formatters=formatters, index=False)
L516     send_slack(header + "\n```" + table_text + "```")
L517
L518     if debug_mode:
L519         debug_cols = [
L520             "symbol",
L521             "shares",
L522             "price",
L523             "value",
L524             "current_ratio",
L525             "drift",
L526             "drift_abs",
L527             "adjusted_ratio",
L528             "adjustable",
L529             "trade_shares",
L530             "new_shares",
L531             "new_value",
L532             "simulated_ratio",
L533             "simulated_drift_abs",
L534         ]
L535         debug_text = (
L536             "=== DEBUG: full dataframe ===\n"
L537             + df[debug_cols].to_string()
L538             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L539             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L540         )
L541         print("\n" + debug_text)
L542         send_debug(debug_text)
L543
L544
L545 if __name__ == "__main__":
L546     main()
L547
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 25銘柄を均等配分（現金を除き1銘柄あたり4%）
L5 - moomoo証券で運用
L6
L7 ## Barbell Growth-Defense方針
L8 - Growth枠12銘柄：高成長で乖離源となる攻めの銘柄
L9 - Defense枠13銘柄：低ボラで安定成長し配当を増やす守りの銘柄
L10 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L11
L12 ## レジーム判定（trend_template 合格“本数”で判定）
L13 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**
L14 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L15   - 緊急入り: `max(q05, 12本)`（= N_G）
L16   - 緊急解除: `max(q20, 18本)`（= 1.5×N_G）
L17   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L18 - ヒステリシス: 前回モードに依存（EMERG→解除は18本以上、CAUTION→通常は36本以上）
L19
L20 ## レジーム別の現金・ドリフト
L21 - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **10%**
L22 - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **12%**
L23 - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（25×4%に全戻しのみ）
L24
L25 ## トレーリングストップ（統一）
L26 - G/D 共通の **基本TS=15%**
L27 - 含み益が **+20% / +40% / +60%** 到達で TS を **12% / 9% / 7%** に段階引き上げ
L28 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L29
L30 ## 入替銘柄選定
L31 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L32 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L33
L34 ## 再エントリー（クールダウン）
L35 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L36
L37 ## 実行タイミング
L38 - 判定：米国市場終値直後
L39 - 執行：翌営業日の米国寄付き成行
```

## <documents/drift_design.md>
```text
L1 # drift.py 詳細設計書
L2
L3 ## 概要
L4 - 25銘柄ポートフォリオのドリフトを日次監視し、閾値超過時に半戻し案をSlack通知するスクリプト。
L5 - Finnhubとyfinan
```