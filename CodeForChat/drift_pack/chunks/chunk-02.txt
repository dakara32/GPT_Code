```text
321         df = _yf_df(s)
L322         if df is None or len(df) < 60:
L323             continue
L324         alerts = []
L325         for idx in df.tail(lookback_days).index:
L326             tags = _signals_for_day(df, idx)
L327             if tags:
L328                 alerts.append((idx.strftime("%Y-%m-%d"), tags))
L329         if alerts:
L330             out[s] = alerts
L331     return out
L332
L333
L334 def load_portfolio():
L335     tickers_path = Path(__file__).with_name("current_tickers.csv")
L336     with tickers_path.open() as f:
L337         reader = list(csv.reader(f))
L338     return [
L339         {"symbol": sym.strip().upper(), "shares": int(qty), "target_ratio": 1 / len(reader)}
L340         for sym, qty in reader
L341     ]
L342
L343
L344 def compute_threshold():
L345     vix_ma5 = fetch_vix_ma5()
L346     drift_threshold = 10 if vix_ma5 < 20 else 12 if vix_ma5 < 26 else float("inf")
L347     return vix_ma5, drift_threshold
L348
L349
L350 def compute_threshold_by_mode(mode: str):
L351     """モードに応じて現金保有率とドリフト閾値を返す（README準拠）"""
L352     m = (mode or "NORMAL").upper()
L353     cash_map = {"NORMAL": 0.10, "CAUTION": 0.125, "EMERG": 0.20}
L354     # ★ 閾値をREADMEに合わせて統一：NORMAL=12%, CAUTION=14%, EMERG=∞
L355     drift_map = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L356     return cash_map.get(m, 0.10), drift_map.get(m, 12)
L357
L358
L359 def recommended_counts_by_mode(mode: str) -> tuple[int, int, int]:
L360     """
L361     モード別の推奨保有数 (G_count, D_count, cash_slots) を返す。
L362     cash_slotsは「外すG枠の数」（各枠=4%）。
L363     NORMAL: G15/D10/現金化0, CAUTION: G13/D10/現金化2, EMERG: G10/D10/現金化5
L364     """
L365     m = (mode or "NORMAL").upper()
L366     if m == "CAUTION":
L367         return 13, 10, 2
L368     if m == "EMERG":
L369         return 10, 10, 5
L370     return 15, 10, 0
L371
L372
L373 def build_dataframe(portfolio):
L374     for stock in portfolio:
L375         price = fetch_price(stock["symbol"])
L376         stock["price"] = price
L377         stock["value"] = price * stock["shares"]
L378
L379     df = pd.DataFrame(portfolio)
L380     total_value = df["value"].sum()
L381     df["current_ratio"] = df["value"] / total_value
L382     df["drift"] = df["current_ratio"] - df["target_ratio"]
L383     df["drift_abs"] = df["drift"].abs()
L384     total_drift_abs = df["drift_abs"].sum()
L385     df["adjusted_ratio"] = df["current_ratio"] - df["drift"] / 2
L386     df["adjustable"] = (
L387         (df["adjusted_ratio"] * total_value) >= df["price"]
L388     ) & df["price"].notna() & df["price"].gt(0)
L389     return df, total_value, total_drift_abs
L390
L391
L392 def simulate(df, total_value, total_drift_abs, drift_threshold):
L393     alert = drift_threshold != float("inf") and total_drift_abs * 100 > drift_threshold
L394     if alert:
L395         df["trade_shares"] = df.apply(
L396             lambda r: int(round(((r["adjusted_ratio"] * total_value) - r["value"]) / r["price"]))
L397             if r["adjustable"] and r["price"] > 0 else 0,
L398             axis=1,
L399         )
L400         df["new_shares"] = df["shares"] + df["trade_shares"]
L401         df["new_value"] = df["new_shares"] * df["price"]
L402         new_total_value = df["new_value"].sum()
L403         df["simulated_ratio"] = df["new_value"] / new_total_value
L404         df["simulated_drift_abs"] = (df["simulated_ratio"] - df["target_ratio"]).abs()
L405         simulated_total_drift_abs = df["simulated_drift_abs"].sum()
L406     else:
L407         df["trade_shares"] = np.nan
L408         df["new_shares"] = np.nan
L409         df["new_value"] = np.nan
L410         new_total_value = np.nan
L411         df["simulated_ratio"] = np.nan
L412         df["simulated_drift_abs"] = np.nan
L413         simulated_total_drift_abs = np.nan
L414     return df, alert, new_total_value, simulated_total_drift_abs
L415
L416
L417 def prepare_summary(df, total_drift_abs, alert):
L418     summary = {
L419         "symbol": "合計",
L420         "shares": df["shares"].sum(),
L421         "value": df["value"].sum(),
L422         "current_ratio": np.nan,
L423         "drift_abs": total_drift_abs,
L424     }
L425     if alert:
L426         summary["trade_shares"] = np.nan
L427     # Sort details by evaluation value descending before appending summary
L428     df = df.sort_values(by="value", ascending=False)
L429     df = pd.concat([df, pd.DataFrame([summary])], ignore_index=True)
L430     if alert:
L431         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs", "trade_shares"]
L432         df_small = df[cols].copy()
L433         df_small.columns = ["sym", "qty", "val", "now", "|d|", "Δqty"]
L434     else:
L435         cols = ["symbol", "shares", "value", "current_ratio", "drift_abs"]
L436         df_small = df[cols].copy()
L437         df_small.columns = ["sym", "qty", "val", "now", "|d|"]
L438     return df_small
L439
L440
L441 def currency(x):
L442     return f"${x:,.0f}" if pd.notnull(x) else ""
L443
L444
L445 def formatters_for(alert):
L446     formatters = {"val": currency, "now": "{:.2%}".format, "|d|": "{:.2%}".format}
L447     if alert:
L448         formatters["Δqty"] = "{:.0f}".format
L449     return formatters
L450
L451
L452 def build_header(mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs):
L453     header = (
L454         f"*💼 現金保有率:* {cash_ratio*100:.1f}%\n"
L455         f"*📊 ドリフト閾値:* {'🔴(停止)' if drift_threshold == float('inf') else str(drift_threshold)+'%'}\n"
L456         f"*📉 現在のドリフト合計:* {total_drift_abs * 100:.2f}%\n"
L457     )
L458     if alert:
L459         header += f"*🔁 半戻し後ドリフト合計(想定):* {simulated_total_drift_abs * 100:.2f}%\n"
L460         header += "🚨 *アラート: 発生！！ Δqtyのマイナス銘柄を売却、任意の銘柄を買い増してバランスを取りましょう！*\n"
L461     else:
L462         header += "✅ アラートなし\n"
L463     # ★ 追記: TSルール（G/D共通）と推奨保有数
L464     header += "*🛡 TS:* 基本 -15% / +30%→-12% / +60%→-9% / +100%→-7%\n"
L465     g_cnt, d_cnt, cash_slots = recommended_counts_by_mode(mode)
L466     cash_pct = cash_slots * 4
L467     header += f"*📋 推奨保有数:* G {g_cnt} / D {d_cnt}（現金化枠 {cash_slots}枠 ≒ {cash_pct}%）\n"
L468     return header
L469
L470
L471 def send_slack(text):
L472     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L473     if not SLACK_WEBHOOK_URL:
L474         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L475     payload = {"text": text}
L476     try:
L477         resp = requests.post(SLACK_WEBHOOK_URL, json=payload)
L478         resp.raise_for_status()
L479         print("✅ Slack（Webhook）へ送信しました")
L480     except Exception as e:
L481         print(f"⚠️ Slack通知エラー: {e}")
L482
L483
L484 def send_debug(debug_text):
L485     SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L486     if not SLACK_WEBHOOK_URL:
L487         raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L488     debug_payload = {"text": "```" + debug_text + "```"}
L489     try:
L490         resp = requests.post(SLACK_WEBHOOK_URL, json=debug_payload)
L491         resp.raise_for_status()
L492         print("✅ Debug情報をSlackに送信しました")
L493     except Exception as e:
L494         print(f"⚠️ Slack通知エラー: {e}")
L495
L496
L497 def main():
L498     portfolio = load_portfolio()
L499     symbols = [r["symbol"] for r in portfolio]
L500     sell_alerts = scan_sell_signals(symbols, lookback_days=5)
L501
L502     breadth_block, mode, _C = build_breadth_header()
L503
L504     cash_ratio, drift_threshold = compute_threshold_by_mode(mode)
L505
L506     df, total_value, total_drift_abs = build_dataframe(portfolio)
L507     df, alert, new_total_value, simulated_total_drift_abs = simulate(
L508         df, total_value, total_drift_abs, drift_threshold
L509     )
L510     df_small = prepare_summary(df, total_drift_abs, alert)
L511     if 'df_small' in locals() and isinstance(df_small, pd.DataFrame) and not df_small.empty:
L512         col_sym = "sym" if "sym" in df_small.columns else ("symbol" if "symbol" in df_small.columns else None)
L513         if col_sym:
L514             alert_keys = {str(k) for k in sell_alerts.keys()}
L515             df_small[col_sym] = df_small[col_sym].astype(str)
L516             df_small.insert(0, "⚠", df_small[col_sym].map(lambda x: "🔴" if x in alert_keys else ""))
L517             latest_tag = {s: " / ".join(sell_alerts[s][-1][1]) for s in sell_alerts}
L518             df_small.insert(1, "sig", df_small[col_sym].map(latest_tag).fillna(""))
L519     formatters = formatters_for(alert)
L520     header = build_header(
L521         mode, cash_ratio, drift_threshold, total_drift_abs, alert, simulated_total_drift_abs
L522     )
L523     if breadth_block:
L524         header = breadth_block + "\n" + header
L525     if sell_alerts:
L526         def fmt_pair(date_tags):
L527             date, tags = date_tags
L528             return f"{date}:" + "・".join(tags)
L529         listed = []
L530         for t, arr in sell_alerts.items():
L531             listed.append(f"*{t}*（" + ", ".join(fmt_pair(x) for x in arr) + "）")
L532         hits = ", ".join(listed)
L533         if "✅ アラートなし" in header:
L534             header = header.replace(
L535                 "✅ アラートなし",
L536                 f"⚠️ 売りシグナルあり: {len(sell_alerts)}銘柄\n🟥 {hits}",
L537             )
L538         else:
L539             header += f"\n🟥 {hits}"
L540     table_text = df_small.to_string(formatters=formatters, index=False)
L541     send_slack(header + "\n```" + table_text + "```")
L542
L543     if debug_mode:
L544         debug_cols = [
L545             "symbol",
L546             "shares",
L547             "price",
L548             "value",
L549             "current_ratio",
L550             "drift",
L551             "drift_abs",
L552             "adjusted_ratio",
L553             "adjustable",
L554             "trade_shares",
L555             "new_shares",
L556             "new_value",
L557             "simulated_ratio",
L558             "simulated_drift_abs",
L559         ]
L560         debug_text = (
L561             "=== DEBUG: full dataframe ===\n"
L562             + df[debug_cols].to_string()
L563             + f"\n\ntotal_value={total_value}, new_total_value={new_total_value}\n"
L564             + f"total_drift_abs={total_drift_abs}, simulated_total_drift_abs={simulated_total_drift_abs}"
L565         )
L566         print("\n" + debug_text)
L567         send_debug(debug_text)
L568
L569
L570 if __name__ == "__main__":
L571     main()
L572
```

## <.github/workflows/daily-report.yml>
```text
L1 name: Daily Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '30 23 * * 2-6'  # UTC 23:30 → JST 08:30（火〜土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v4
L25         with:
L26           python-version: '3.x'
L27
L28       - name: Install dependencies
L29         run: pip install -r requirements.txt
L30
L31       - name: Prepare results directory
L32         run: mkdir -p results
L33
L34       - name: Run drift.py
L35         env:
L36           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L37           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L38         run: python drift.py
L39
L40       - name: Persist breadth_state.json
L41         if: always()
L42         run: |
L43           git config user.name  "github-actions[bot]"
L44           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L45           git add results/breadth_state.json || true
L46           git commit -m "chore: update breadth_state [skip ci]" || echo "no changes"
L47           git push || true
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 25銘柄を均等配分（現金を除き1銘柄あたり4%）
L5 - moomoo証券で運用
L6 - **Growth枠 15銘柄 / Defense枠 10銘柄*
```