```text
(bad)}/{len(tickers)} latency={_fmt_ms(ms)}{slow}",{
L235         "level":level,"latency_ms":ms,"bad":bad
L236     }
L237
L238 # ================================================================
L239 # SEC: companyfactsÔºàRevenue/EPSÔºâ„Éò„É´„Çπ
L240 # ================================================================
L241 def _sec_headers():
L242     """
L243     SEC„ÅØÈÄ£Áµ°ÂÖà‰ªò„ÅçUser-Agent/From„ÇíÂº∑„ÅèÊé®Â•®„Éª‰∏ÄÈÉ®„ÅßÂøÖÈ†à„ÄÇ
L244     SEC_EMAIL„ÅåÁ©∫„Å™„ÇâÊúÄ‰ΩéÈôê„ÅÆUA„Å´„Åó„Å§„Å§„ÄÅ403Áô∫ÁîüÊôÇ„ÅØ‰∏ä‰Ωç„ÅßSKIPÊâ±„ÅÑ„Å´„Åô„Çã„ÄÇ
L245     """
L246     ua = (f"api-health-probe/1 (+mailto:{SEC_EMAIL})" if SEC_EMAIL else "api-health-probe/1")
L247     hdr = {
L248         "User-Agent": ua[:200],
L249         "Accept": "application/json",
L250     }
L251     if SEC_EMAIL:
L252         hdr["From"] = SEC_EMAIL[:200]
L253     return hdr
L254
L255 def _sec_get(url: str, params=None, retries=3, sleep_s: float=0.5):
L256     """
L257     403„ÇÑ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅØ‰∏ä‰Ωç„ÅßSKIPÂà§ÂÆö„Åß„Åç„Çã„Çà„ÅÜ None „ÇíËøî„Åô„ÄÇ
L258     """
L259     for i in range(retries):
L260         try:
L261             r = requests.get(url, params=params or {}, headers=_sec_headers(), timeout=15)
L262             if r.status_code==429:
L263                 time.sleep(min(2**i*sleep_s, 4.0)); continue
L264             if r.status_code==403:
L265                 # UA/FromÊú™Ë®≠ÂÆö„ÇÑ„Ç¢„ÇØ„Çª„ÇπÂà∂Èôê„ÄÇ‰∏ä‰Ωç„ÅßSKIP„ÄÇ
L266                 return None
L267             r.raise_for_status(); return r.json()
L268         except Exception:
L269             time.sleep(min(2**i*sleep_s, 2.0))
L270     return None
L271
L272 def _sec_ticker_map() -> Dict[str,str]:
L273     j = _sec_get("https://www.sec.gov/files/company_tickers.json")
L274     if j is None:
L275         return {}
L276     out={}
L277     it=(j.values() if isinstance(j,dict) else j)
L278     for item in it:
L279         try:
L280             t=(item.get("ticker") or item.get("TICKER") or "").upper()
L281             cik=str(item.get("cik_str") or item.get("CIK") or "").zfill(10)
L282             if t and cik: out[t]=cik
L283         except Exception: continue
L284     return out
L285
L286 SEC_REV_TAGS=["Revenues","RevenueFromContractWithCustomerExcludingAssessedTax","SalesRevenueNet","SalesRevenueGoodsNet","SalesRevenueServicesNet","Revenue"]
L287 SEC_EPS_TAGS=["EarningsPerShareDiluted","EarningsPerShareBasicAndDiluted","EarningsPerShare","EarningsPerShareBasic"]
L288
L289 def _normalize_for_sec(sym: str) -> List[str]:
L290     s=(sym or "").upper(); outs=[]; add=lambda x: outs.append(x) if x and x not in outs else None
L291     add(s); add(s.replace(".","-")); add(s.replace("-","")); add(s.replace(".","")); return outs
L292
L293 def _units_for_tags(facts: dict, spaces: List[str], tags: List[str]) -> list:
L294     got=[]
L295     for sp in spaces:
L296         d=(facts.get("facts") or {}).get(sp) or {}
L297         for tg in tags:
L298             arr=(d.get(tg) or {}).get("units") or {}
L299             for unit, vals in (arr.items() if isinstance(arr,dict) else []):
L300                 if isinstance(vals,list) and vals: got.append(vals)
L301     return got
L302
L303 def _series_q_and_a(arrs: list) -> Tuple[list, list]:
L304     q_pairs,a_pairs=[],[]
L305     for vals in arrs:
L306         for v in vals:
L307             try:
L308                 dt=v.get("end") or v.get("fy"); val=float(v.get("val")); form=(v.get("form") or "").upper()
L309                 if "10-Q" in form or "6-K" in form or form=="Q": q_pairs.append((dt,val))
L310                 elif "10-K" in form or "20-F" in form or form=="K": a_pairs.append((dt,val))
L311             except Exception: pass
L312     q_pairs=sorted(q_pairs,key=lambda x: str(x[0]),reverse=True)
L313     a_pairs=sorted(a_pairs,key=lambda x: str(x[0]),reverse=True)
L314     return q_pairs,a_pairs
L315
L316 def sec_health(tickers: List[str]) -> Tuple[str, Dict]:
L317     t0=_now_ms(); t2cik=_sec_ticker_map(); bad=[]
L318     # CIK„Éû„ÉÉ„Éó„ÅåÂèñ„Çå„Å™„ÅÑÔºà403/„Éç„ÉÉ„ÉàÊñ≠/UAÊú™Ë®≠ÂÆö„Å™„Å©Ôºâ„ÅØSKIPPED
L319     if not t2cik:
L320         ms=_now_ms()-t0
L321         note="no SEC_EMAIL/403" if not SEC_EMAIL else "SEC endpoint blocked"
L322         det=f"SEC:SKIPPED ({note}) latency={_fmt_ms(ms)}"
L323         return det,{"level":"SKIPPED","latency_ms":ms,"bad":[]}
L324     for t in tickers:
L325         cands=_normalize_for_sec(t); cik=next((t2cik.get(x) for x in cands if t2cik.get(x)), None)
L326         if not cik: bad.append(t); continue
L327         try:
L328             j=_sec_get(f"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik}.json")
L329             if j is None:
L330                 bad.append(t); continue
L331             rev_arr=_units_for_tags(j,["us-gaap","ifrs-full"],SEC_REV_TAGS)
L332             eps_arr=_units_for_tags(j,["us-gaap","ifrs-full"],SEC_EPS_TAGS)
L333             rev_q,rev_a=_series_q_and_a(rev_arr); eps_q,eps_a=_series_q_and_a(eps_arr)
L334             if not (rev_q or rev_a) or not (eps_q or eps_a): bad.append(t)
L335         except Exception: bad.append(t)
L336         time.sleep(0.30)  # SECË≤†Ëç∑ÈÖçÊÖÆ
L337     ms=_now_ms()-t0
L338     level="HEALTHY" if not bad else ("DEGRADED" if len(bad)<=len(tickers)//2 else "DOWN")
L339     slow=" SLOW" if ms>=TIMEOUT_MS_WARN else ""
L340     return f"SEC:{level} bad={len(bad)}/{len(tickers)} latency={_fmt_ms(ms)}{slow}",{
L341         "level":level,"latency_ms":ms,"bad":bad
L342     }
L343
L344 # ================================================================
L345 # Orchestration
L346 # ================================================================
L347 def main():
L348     cur_path, cand_path = _autodiscover_csv()
L349     if not cur_path or not cand_path:
L350         msg = f"‚ö†Ô∏è CSV not found. cur={cur_path} cand={cand_path} (set CSV_CURRENT/CSV_CANDIDATE or place files)"
L351         print(msg); _post_slack(msg)
L352         if SOFT_FAIL:
L353             sys.exit(0)
L354         sys.exit(78)
L355
L356     tickers=sorted(set(_read_tickers(cur_path)+_read_tickers(cand_path)))
L357     if not tickers:
L358         msg = f"‚ö†Ô∏è No tickers from CSV. cur={cur_path} cand={cand_path}"
L359         print(msg); _post_slack(msg)
L360         if SOFT_FAIL:
L361             sys.exit(0)
L362         sys.exit(78)
L363
L364     # YF
L365     det_price,meta_price=yf_price_health(tickers)
L366     det_info ,meta_info =yf_fastinfo_health(tickers)
L367     det_fin  ,meta_fin  =yf_financials_health(tickers)
L368
L369     # SEC
L370     det_sec  ,meta_sec  =sec_health(tickers)
L371
L372     # FinnhubÔºàÂøÖË¶ÅÊôÇ„ÅÆ„Åø„ÄÇYFË≤°ÂãôNGÈäòÊüÑ„Å∏„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ§úË®ºÔºâ
L373     need_finn=meta_fin["bad"]
L374     det_finn,meta_finn  =finnhub_health(need_finn if need_finn else tickers[:0])
L375
L376     # ÊúÄÊÇ™„É¨„Éô„É´
L377     levels=[meta_price["level"],meta_info["level"],meta_fin["level"],meta_sec["level"],meta_finn.get("level","SKIPPED")]
L378     pri={"DOWN":3,"DEGRADED":2,"HEALTHY":1,"SKIPPED":0}
L379     worst=max(levels,key=lambda x: pri.get(x,0))
L380     emoji={"HEALTHY":"‚úÖ","DEGRADED":"‚ö†Ô∏è","DOWN":"üõë"}.get(worst,"‚ÑπÔ∏è")
L381
L382     # ÂÖ±ÈÄöÈöúÂÆ≥ÔºàÂêå‰∏ÄÊó•„Å†„Åë„ÅÆÊ¨†Êêç„ÅåÈÅéÂçäÔºâ„ÇíÁ∞°ÊòìÊ§úÁü•Ôºà‰æ°Ê†ºÁ≥ªÂàó„Éô„Éº„ÇπÔºâ
L383     outage_note=""
L384     try:
L385         from collections import Counter
L386         missing_dates=meta_price.get("per_ticker_missing",{})
L387         date_counter=Counter(); one_day_missing=0
L388         for _,info in missing_dates.items():
L389             dates=info.get("dates",set()); max_gap=info.get("max_gap",0)
L390             if len(dates)==1 and max_gap==1:
L391                 one_day_missing+=1; date_counter.update(dates)
L392         threshold=max(1,len(tickers)//2)
L393         if one_day_missing>=threshold:
L394             (missing_day,hits),=date_counter.most_common(1)
L395             outage_note=f" | OUTAGE: common_missing_day={missing_day} hits={hits}"
L396             if worst=="HEALTHY":
L397                 worst="DEGRADED"; emoji="üü†"
L398     except Exception:
L399         pass
L400
L401     summary=f"{emoji} API_HEALTH {worst}{outage_note}\n{det_price} | {det_info} | {det_fin} | {det_sec} | {det_finn}"
L402     has_problem=("DEGRADED" in worst) or ("DOWN" in worst)
L403
L404     if has_problem:
L405         def head(xs): return ", ".join(xs[:10]) + (f" ‚Ä¶(+{len(xs)-10})" if len(xs)>10 else "")
L406         lines=[]
L407         if meta_price["missing"] or meta_price["nf"]:
L408             xs=[*meta_price["nf"],*meta_price["missing"]]; lines.append(f"YF_PRICE NG: {head(xs)}")
L409         if meta_info["bad"]:  lines.append(f"YF_INFO NG: {head(meta_info['bad'])}")
L410         if meta_fin["bad"]:   lines.append(f"YF_FIN NG: {head(meta_fin['bad'])}")
L411         if meta_sec["bad"]:   lines.append(f"SEC NG: {head(meta_sec['bad'])}")
L412         if meta_finn.get("bad"): lines.append(f"FINNHUB NG: {head(meta_finn['bad'])}")
L413         text=summary + ("\n" + "\n".join(lines) if lines else "")
L414     else:
L415         text=summary
L416
L417     print(text); _post_slack(text)
L418     if SOFT_FAIL: sys.exit(0)
L419     sys.exit(0 if worst=="HEALTHY" else 10 if worst=="DEGRADED" else 20)
L420
L421 if __name__=="__main__":
L422     main()
```

## <.github/workflows/api-health.yml>
```text
L1 name: api-health-probe
L2 on:
L3   push:
L4     branches: [ main ]
L5
L6 jobs:
L7   probe:
L8     runs-on: ubuntu-latest
L9     timeout-minutes: 10
L10     steps:
L11       - uses: actions/checkout@v4
L12       - name: Show repo tree (CSV check)
L13         run: |
L14           echo "== ls -R for quick CSV check =="
L15           ls -R | head -n 300
L16           echo "== grep probable csv files =="
L17           (git ls-files | grep -Ei '(current|candidate).*\.csv$' || true)
L18       - uses: actions/setup-python@v5
L19         with:
L20           python-version: "3.11"
L21       - name: Install deps
L22         run: |
L23           python -m pip install --upgrade pip
L24           pip install yfinance pandas numpy requests
L25       - name: Run API health probe
L26         env:
L27           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L28           FINNHUB_API_KEY:   ${{ secrets.FINNHUB_API_KEY }}
L29           SEC_EMAIL:         ${{ secrets.SEC_EMAIL }}
L30           # ‰∏äÊõ∏„Åç„Åó„Åü„ÅÑÂ†¥Âêà„Å†„ÅëÊåáÂÆöÔºà‰æã: CSV_CURRENT: data/current.csvÔºâ
L31           # CSV_CURRENT:       current.csv
L32           # CSV_CANDIDATE:     candidate.csv
L33           YF_PERIOD:         1y
L34           YF_MIN_LEN:        "120"
L35           TIMEOUT_MS_WARN:   "5000"
L36           SOFT_FAIL:         "0"
L37         run: |
L38           python tools/api_health_probe.py
```

```