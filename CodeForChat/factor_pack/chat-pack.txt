# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: factor.py, scorer.py, .github/workflows/weekly-report.yml, documents/README.md, documents/factor_design.md
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <factor.py>
```text
L1 """
L2 ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
L3 ┃ ROLE of factor.py                                     ┃
L4 ┃  - Orchestration ONLY（外部I/O・SSOT・Slack出力）     ┃
L5 ┃  - 計算ロジック（採点/フィルタ/相関低減）は scorer.py ┃
L6 ┃  - ここでロジックを実装/変更しない                   ┃
L7 ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
L8 """
L9 # === NOTE: 機能・入出力・ログ文言・例外挙動は不変。安全な短縮（import統合/複数代入/内包表記/メソッドチェーン/一行化/空行圧縮など）のみ適用 ===
L10 BONUS_COEFF = 0.4   # 攻め=0.3 / 中庸=0.4 / 守り=0.5
L11 import yfinance as yf, pandas as pd, numpy as np, os, requests, time
L12 from scipy.stats import zscore
L13 from dataclasses import dataclass
L14 from typing import Dict, List
L15 from scorer import Scorer, ttm_div_yield_portfolio
L16 from time import perf_counter
L17
L18
L19 class T:
L20     t = perf_counter()
L21
L22     @staticmethod
L23     def log(tag: str):
L24         now = perf_counter()
L25         print(f"[T] {tag}: {now - T.t:.2f}s")
L26         T.t = now
L27
L28
L29 T.log("start")
L30
L31 # ===== ユニバースと定数（冒頭に固定） =====
L32 exist, cand = [pd.read_csv(f, header=None)[0].tolist() for f in ("current_tickers.csv","candidate_tickers.csv")]
L33 T.log(f"csv loaded: exist={len(exist)} cand={len(cand)}")
L34 CAND_PRICE_MAX, bench = 450, '^GSPC'  # 価格上限・ベンチマーク
L35 N_G, N_D = 12, 13  # G/D枠サイズ
L36 g_weights = {'GRW':0.40,'MOM':0.45,'VOL':-0.15}
L37 D_BETA_MAX = float(os.environ.get("D_BETA_MAX", "0.8"))
L38 FILTER_SPEC = {"G":{"pre_mask":["trend_template"]},"D":{"pre_filter":{"beta_max":D_BETA_MAX}}}
L39 D_weights = {'QAL':0.15,'YLD':0.15,'VOL':-0.45,'TRD':0.25}
L40 def _fmt_w(w): return " ".join(f"{k}{int(v*100)}" for k,v in w.items())
L41
L42 # DRRS 初期プール・各種パラメータ
L43 corrM = 45
L44 DRRS_G, DRRS_D = dict(lookback=252,n_pc=3,gamma=1.2,lam=0.68,eta=0.8), dict(lookback=504,n_pc=4,gamma=0.8,lam=0.85,eta=0.5)
L45 DRRS_SHRINK = 0.10  # 残差相関の対角シュリンク（基礎）
L46
L47 # クロス相関ペナルティ（未定義なら設定）
L48 try: CROSS_MU_GD
L49 except NameError: CROSS_MU_GD = 0.40  # 推奨 0.35–0.45（lam=0.85想定）
L50
L51 # 出力関連
L52 RESULTS_DIR = "results"
L53 os.makedirs(RESULTS_DIR, exist_ok=True)
L54
L55 # その他
L56 debug_mode, FINNHUB_API_KEY = False, os.environ.get("FINNHUB_API_KEY")
L57
L58
L59 # ===== 共有DTO（クラス間I/O契約）＋ Config =====
L60 @dataclass(frozen=True)
L61 class InputBundle:
L62     # Input → Scorer で受け渡す素材（I/O禁止の生データ）
L63     cand: List[str]
L64     tickers: List[str]
L65     bench: str
L66     data: pd.DataFrame              # yfinance download結果（'Close','Volume'等の階層列）
L67     px: pd.DataFrame                # data['Close']
L68     spx: pd.Series                  # data['Close'][bench]
L69     tickers_bulk: object            # yfinance.Tickers
L70     info: Dict[str, dict]           # yfinance info per ticker
L71     eps_df: pd.DataFrame            # ['eps_ttm','eps_q_recent',...]
L72     fcf_df: pd.DataFrame            # ['fcf_ttm', ...]
L73     returns: pd.DataFrame           # px[tickers].pct_change()
L74
L75 @dataclass(frozen=True)
L76 class FeatureBundle:
L77     df: pd.DataFrame
L78     df_z: pd.DataFrame
L79     g_score: pd.Series
L80     d_score_all: pd.Series
L81     missing_logs: pd.DataFrame
L82
L83 @dataclass(frozen=True)
L84 class SelectionBundle:
L85     resG: dict
L86     resD: dict
L87     top_G: List[str]
L88     top_D: List[str]
L89     init_G: List[str]
L90     init_D: List[str]
L91
L92 @dataclass(frozen=True)
L93 class WeightsConfig:
L94     g: Dict[str,float]
L95     d: Dict[str,float]
L96
L97 @dataclass(frozen=True)
L98 class DRRSParams:
L99     corrM: int
L100     shrink: float
L101     G: Dict[str,float]   # lookback, n_pc, gamma, lam, eta
L102     D: Dict[str,float]
L103     cross_mu_gd: float
L104
L105 @dataclass(frozen=True)
L106 class PipelineConfig:
L107     weights: WeightsConfig
L108     drrs: DRRSParams
L109     price_max: float
L110
L111
L112 # ===== 共通ユーティリティ（複数クラスで使用） =====
L113 # (unused local utils removed – use scorer.py versions if needed)
L114
L115 def _env_true(name: str, default=False):
L116     v = os.getenv(name)
L117     return default if v is None else v.strip().lower() == "true"
L118
L119 def _slack(message, code=False):
L120     url = os.getenv("SLACK_WEBHOOK_URL")
L121     if not url:
L122         print("⚠️ SLACK_WEBHOOK_URL 未設定"); return
L123     try:
L124         requests.post(url, json={"text": f"```{message}```" if code else message}).raise_for_status()
L125     except Exception as e:
L126         print(f"⚠️ Slack通知エラー: {e}")
L127
L128 def _slack_debug(text: str, chunk=2800):
L129     url=os.getenv("SLACK_WEBHOOK_URL")
L130     if not url: print("⚠️ SLACK_WEBHOOK_URL 未設定"); return
L131     i=0
L132     while i<len(text):
L133         j=min(len(text), i+chunk); k=text.rfind("\n", i, j); j=k if k>i+100 else j
L134         blk={"type":"section","text":{"type":"mrkdwn","text":f"```{text[i:j]}```"}}
L135         try: requests.post(url, json={"blocks":[blk]}).raise_for_status()
L136         except Exception as e: print(f"⚠️ Slack通知エラー: {e}")
L137         i=j
L138
L139 def _compact_debug(fb, sb, prevG, prevD, max_rows=140):
L140     # ---- 列選択：既定は最小列、DEBUG_ALL_COLS=True で全列に ----
L141     want=["TR","EPS","REV","ROE","BETA_RAW","FCF","RS","TR_str","DIV_STREAK","DSC"]
L142     all_cols = _env_true("DEBUG_ALL_COLS", False)
L143     cols = list(fb.df_z.columns if all_cols else [c for c in want if c in fb.df_z.columns])
L144
L145     # ---- 差分（入替）----
L146     Gp, Dp = set(prevG or []), set(prevD or [])
L147     g_new=[t for t in (sb.top_G or []) if t not in Gp]; g_out=[t for t in Gp if t not in (sb.top_G or [])]
L148     d_new=[t for t in (sb.top_D or []) if t not in Dp]; d_out=[t for t in Dp if t not in (sb.top_D or [])]
L149
L150     # ---- 次点10（フラグで有無切替）----
L151     show_near = _env_true("DEBUG_NEAR5", True)
L152     gs = getattr(fb,"g_score",None); ds = getattr(fb,"d_score_all",None)
L153     gs = gs.sort_values(ascending=False) if show_near and hasattr(gs,"sort_values") else None
L154     ds = ds.sort_values(ascending=False) if show_near and hasattr(ds,"sort_values") else None
L155     g_miss = ([t for t in gs.index if t not in (sb.top_G or [])][:10]) if gs is not None else []
L156     d_excl = set((sb.top_G or [])+(sb.top_D or []))
L157     d_miss = ([t for t in ds.index if t not in d_excl][:10]) if ds is not None else []
L158
L159     # ---- 行選択：既定は入替+採用+次点、DEBUG_ALL_ROWS=True で全銘柄 ----
L160     all_rows = _env_true("DEBUG_ALL_ROWS", False)
L161     focus = list(fb.df_z.index) if all_rows else sorted(set(g_new+g_out+d_new+d_out+(sb.top_G or [])+(sb.top_D or [])+g_miss+d_miss))
L162     focus = focus[:max_rows]
L163
L164     # ---- ヘッダ（フィルター条件を明示）----
L165     def _fmt_near(lbl, ser, lst):
L166         if ser is None: return f"{lbl}: off"
L167         parts=[]
L168         for t in lst:
L169             x=ser.get(t, float("nan"))
L170             parts.append(f"{t}:{x:.3f}" if pd.notna(x) else f"{t}:nan")
L171         return f"{lbl}: "+(", ".join(parts) if parts else "-")
L172     head=[f"G new/out: {len(g_new)}/{len(g_out)}  D new/out: {len(d_new)}/{len(d_out)}",
L173           _fmt_near("G near10", gs, g_miss),
L174           _fmt_near("D near10", ds, d_miss),
L175           f"Filters: G pre_mask=['trend_template'], D pre_filter={{'beta_max': {D_BETA_MAX}}}",
L176           f"Cols={'ALL' if all_cols else 'MIN'}  Rows={'ALL' if all_rows else 'SUBSET'}"]
L177
L178     # ---- テーブル ----
L179     if fb.df_z.empty or not cols:
L180         tbl="(df_z or columns not available)"
L181     else:
L182         idx=[t for t in focus if t in fb.df_z.index]
L183         tbl=fb.df_z.loc[idx, cols].round(3).to_string(max_rows=None, max_cols=None)
L184
L185     # ---- 欠損ログ（フラグで有無切替）----
L186     miss_txt=""
L187     if _env_true("DEBUG_MISSING_LOGS", False):
L188         miss=getattr(fb,"missing_logs",None)
L189         if miss is not None and not miss.empty:
L190             miss_txt="\nMissing data (head)\n"+miss.head(10).to_string(index=False)
L191
L192     return "\n".join(head+["\nChanged/Selected (+ Near Miss)", tbl])+miss_txt
L193
L194 def _disjoint_keepG(top_G, top_D, poolD):
L195     """
L196     Gに含まれる銘柄をDから除去し、DはpoolD（次点）で補充する。
L197     - 引数:
L198         top_G: List[str]  … G最終12銘柄
L199         top_D: List[str]  … D最終13銘柄（重複を含む可能性あり）
L200         poolD: List[str]  … D候補の順位リスト（top_Dを含む上位拡張）
L201     - 戻り値: (top_G, top_D_disjoint)
L202     - 挙動:
L203         1) DにG重複があれば順に置換
L204         2) 置換候補は poolD から、既使用(G∪D)を避けて前から採用
L205         3) 補充分が尽きた場合は元の銘柄を残す（安全フォールバック）
L206     """
L207     used, D = set(top_G), list(top_D)
L208     i = 0
L209     for j, t in enumerate(D):
L210         if t in used:
L211             while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L212                 i += 1
L213             if i < len(poolD):
L214                 D[j] = poolD[i]; used.add(D[j]); i += 1
L215     return top_G, D
L216
L217
L218 # ===== Input：外部I/Oと前処理（CSV/API・欠損補完） =====
L219 class Input:
L220     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L221         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L222         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L223
L224     # ---- （Input専用）EPS補完・FCF算出系 ----
L225     @staticmethod
L226     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L227         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L228         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L229         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L230
L231     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L232
L233     @staticmethod
L234     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L235         if df is None or df.empty: return None
L236         idx_lower = {str(i).lower(): i for i in df.index}
L237         for name in names:
L238             key = name.lower()
L239             if key in idx_lower: return df.loc[idx_lower[key]]
L240         return None
L241
L242     @staticmethod
L243     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L244         if s is None or s.empty: return None
L245         vals = s.dropna().astype(float); return None if vals.empty else vals.iloc[:n].sum()
L246
L247     @staticmethod
L248     def _latest(s: pd.Series|None) -> float|None:
L249         if s is None or s.empty: return None
L250         vals = s.dropna().astype(float); return vals.iloc[0] if not vals.empty else None
L251
L252     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L253         from concurrent.futures import ThreadPoolExecutor, as_completed
L254         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L255
L256         def one(t: str):
L257             try:
L258                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L259                 qcf = tk.quarterly_cashflow
L260                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L261                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L262                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L263                 if any(v is None for v in (cfo, capex, fcf)):
L264                     acf = tk.cashflow
L265                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L266                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L267                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L268             except Exception as e:
L269                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L270             n=np.nan
L271             return {"ticker":t,
L272                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L273                     "capex_ttm_yf": n if capex is None else capex,
L274                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L275
L276         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L277         with ThreadPoolExecutor(max_workers=mw) as ex:
L278             for f in as_completed(ex.submit(one,t) for t in tickers): rows.append(f.result())
L279         return pd.DataFrame(rows).set_index("ticker")
L280
L281     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L282     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L283
L284     @staticmethod
L285     def _first_key(d: dict, keys: list[str]):
L286         for k in keys:
L287             if k in d and d[k] is not None: return d[k]
L288         return None
L289
L290     @staticmethod
L291     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L292         for i in range(retries):
L293             r = session.get(url, params=params, timeout=15)
L294             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L295             r.raise_for_status(); return r.json()
L296         r.raise_for_status()
L297
L298     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L299         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L300         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L301         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L302         for sym in tickers:
L303             cfo_ttm = capex_ttm = None
L304             try:
L305                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L306                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L307                 for item in arr[:4]:
L308                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L309                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L310                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L311             except Exception: pass
L312             if cfo_ttm is None or capex_ttm is None:
L313                 try:
L314                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L315                     arr = j.get("cashFlow") or []
L316                     if arr:
L317                         item0 = arr[0]
L318                         if cfo_ttm is None:
L319                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L320                             if v is not None: cfo_ttm = float(v)
L321                         if capex_ttm is None:
L322                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L323                             if v is not None: capex_ttm = float(v)
L324                 except Exception: pass
L325             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L326         return pd.DataFrame(rows).set_index("ticker")
L327
L328     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L329         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L330         T.log("financials (yf) done")
L331         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L332         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L333         if need:
L334             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L335             df = yf_df.join(fh_df, how="left")
L336             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L337                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L338             print("[T] financials (finnhub) done (fallback only)")
L339         else:
L340             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L341             print("[T] financials (finnhub) skipped (no missing)")
L342         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L343         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L344         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L345         fcf_calc = cfo - capex
L346         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L347         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L348         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L349         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L350         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L351         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L352         return df[cols].sort_index()
L353
L354     def _build_eps_df(self, tickers, tickers_bulk, info):
L355         eps_rows=[]
L356         for t in tickers:
L357             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L358             try:
L359                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L360                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L361                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L362                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L363                     eps_q = qearn["Earnings"].iloc[-1]/so
L364             except Exception: pass
L365             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L366         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L367
L368     def prepare_data(self):
L369         """Fetch price and fundamental data for all tickers."""
L370         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L371         for t in self.cand:
L372             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L373             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L374         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L375         T.log("price cap filter done (CAND_PRICE_MAX)")
L376         tickers = sorted(set(self.exist + cand_f))
L377         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L378         data = yf.download(tickers + [self.bench], period="600d", auto_adjust=True, progress=False)
L379         T.log("yf.download done")
L380         px, spx = data["Close"], data["Close"][self.bench]
L381         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L382         if clip_days > 0:
L383             px  = px.tail(clip_days + 1)
L384             spx = spx.tail(clip_days + 1)
L385             print(f"[T] price window clipped by env: {len(px)} rows (PRICE_CLIP_DAYS={clip_days})")
L386         else:
L387             print(f"[T] price window clip skipped; rows={len(px)}")
L388         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L389         for t in tickers:
L390             try: info[t] = tickers_bulk.tickers[t].info
L391             except Exception as e: print(f"{t}: info fetch failed ({e})"); info[t] = {}
L392         eps_df = self._build_eps_df(tickers, tickers_bulk, info)
L393         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L394         T.log("eps/fcf prep done")
L395         returns = px[tickers].pct_change()
L396         T.log("price prep/returns done")
L397         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L398
L399
L400 # ===== Selector：相関低減・選定（スコア＆リターンだけ読む） =====
L401 class Selector:
L402     # ---- DRRS helpers（Selector専用） ----
L403     @staticmethod
L404     def _z_np(X: np.ndarray) -> np.ndarray:
L405         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L406         return (np.nan_to_num(X)-m)/s
L407
L408     @classmethod
L409     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L410         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L411         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L412         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L413         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L414         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L415
L416     @classmethod
L417     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L418         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L419         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L420         if k==0: return []
L421         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L422         for _ in range(k):
L423             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L424             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L425             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L426         return sorted(S)
L427
L428     @staticmethod
L429     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L430         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L431         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L432
L433     @classmethod
L434     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L435         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L436         while improved and passes<max_pass:
L437             improved, passes = False, passes+1
L438             for i,out in enumerate(list(S)):
L439                 for inn in range(len(score)):
L440                     if inn in S: continue
L441                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L442                     if v>best+1e-10: S, best, improved = cand, v, True; break
L443                 if improved: break
L444         return S, best
L445
L446     @staticmethod
L447     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L448         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L449         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L450         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L451         return float(s[idx].sum() - lam*within - mu*cross)
L452
L453     @classmethod
L454     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L455         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L456         while improved and passes<max_pass:
L457             improved, passes = False, passes+1
L458             for i,out in enumerate(list(S)):
L459                 for inn in range(N):
L460                     if inn in S: continue
L461                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L462                     if v>best+1e-10: S, best, improved = cand, v, True; break
L463                 if improved: break
L464         return S, best
L465
L466     @staticmethod
L467     def avg_corr(C: np.ndarray, idx) -> float:
L468         k = len(idx); P = C[np.ix_(idx, idx)]
L469         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L470
L471     @classmethod
L472     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L473         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L474         union = [t for t in pool_tickers if t in returns_df.columns]
L475         for t in g_fixed:
L476             if t not in union: union.append(t)
L477         Rdf_all = returns_df[union]; Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all)>=lookback else Rdf_all; Rdf_all = Rdf_all.dropna()
L478         pool_eff, g_eff = [t for t in pool_tickers if t in Rdf_all.columns], [t for t in g_fixed if t in Rdf_all.columns]
L479         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L480         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L481         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L482         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L483         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L484         if len(g_eff)>0 and mu>0.0:
L485             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L486         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L487         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L488         selected_tickers = [pool_eff[i] for i in S]
L489         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L490
L491     # ---- 選定（スコア Series / returns だけを受ける）----
L492 # ===== Output：出力整形と送信（表示・Slack） =====
L493 class Output:
L494
L495     def __init__(self, debug=False):
L496         self.debug = debug
L497         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L498         self.g_title = self.d_title = ""
L499         self.g_formatters = self.d_formatters = {}
L500         # 低スコア（GSC+DSC）Top10 表示/送信用
L501         self.low10_table = None
L502
L503     # --- 表示（元 display_results のロジックそのまま） ---
L504     def display_results(self, *, exist, bench, df_z, g_score, d_score_all,
L505                         init_G, init_D, top_G, top_D, **kwargs):
L506         pd.set_option('display.float_format','{:.3f}'.format)
L507         print("📈 ファクター分散最適化の結果")
L508         if self.miss_df is not None and not self.miss_df.empty:
L509             print("Missing Data:")
L510             print(self.miss_df.to_string(index=False))
L511
L512         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L513         try:
L514             sc = getattr(self, "_sc", None)
L515             agg_G = getattr(sc, "_agg_G", None)
L516             agg_D = getattr(sc, "_agg_D", None)
L517         except Exception:
L518             sc = agg_G = agg_D = None
L519         class _SeriesProxy:
L520             __slots__ = ("primary", "fallback")
L521             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L522             def get(self, key, default=None):
L523                 try:
L524                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L525                     if v is not None and not (isinstance(v, float) and v != v):
L526                         return v
L527                 except Exception:
L528                     pass
L529                 try:
L530                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L531                 except Exception:
L532                     return default
L533         g_score = _SeriesProxy(agg_G, g_score)
L534         d_score_all = _SeriesProxy(agg_D, d_score_all)
L535         near_G = getattr(sc, "_near_G", []) if sc else []
L536         near_D = getattr(sc, "_near_D", []) if sc else []
L537
L538         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L539         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L540         self.g_table = pd.concat([df_z.loc[G_UNI,['GRW','MOM','TRD','VOL']], gsc_series], axis=1)
L541         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L542         self.g_formatters = {col:"{:.2f}".format for col in ['GRW','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L543         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L544                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L545         if near_G:
L546             add = [t for t in near_G if t not in set(G_UNI)][:10]
L547             if len(add) < 10:
L548                 try:
L549                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L550                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L551                     used = set(G_UNI + add)
L552                     def _push(lst):
L553                         nonlocal add, used
L554                         for t in lst:
L555                             if len(add) == 10: break
L556                             if t in aggG.index and t not in used:
L557                                 add.append(t); used.add(t)
L558                     _push(out_now)           # ① 今回 OUT を優先
L559                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L560                 except Exception:
L561                     pass
L562             if add:
L563                 near_tbl = pd.concat([df_z.loc[add,['GRW','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L564                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L565         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L566
L567         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L568         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L569         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L570         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L571         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L572         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L573         import scorer
L574         dw_eff = scorer.D_WEIGHTS_EFF
L575         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L576                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L577         if near_D:
L578             add = [t for t in near_D if t not in set(D_UNI)][:10]
L579             if add:
L580                 d_disp2 = pd.DataFrame(index=add)
L581                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L582                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L583                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L584         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L585
L586         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L587         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L588         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L589
L590         self.io_table = pd.DataFrame({
L591             'IN': pd.Series(in_list),
L592             '/ OUT': pd.Series(out_list)
L593         })
L594         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L595         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L596         self.io_table['GSC'] = pd.Series(g_list)
L597         self.io_table['DSC'] = pd.Series(d_list)
L598
L599         print("Changes:")
L600         print(self.io_table.to_string(index=False))
L601
L602         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False)['Close']
L603         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L604         for name,ticks in portfolios.items():
L605             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L606             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L607             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L608             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L609             if len(ticks)>=2:
L610                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L611                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L612                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L613             else: RAW_rho = RESID_rho = np.nan
L614             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L615         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L616         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L617         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L618         def _fmt_row(s):
L619             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L620         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L621         if self.debug:
L622             self.debug_table = pd.concat([df_z[['TR','EPS','REV','ROE','BETA','DIV','FCF','RS','TR_str','DIV_STREAK']], g_score.rename('GSC'), d_score_all.rename('DSC')], axis=1).round(3)
L623             print("Debug Data:"); print(self.debug_table.to_string())
L624
L625         # === 追加: GSC+DSC が低い順 TOP10 ===
L626         try:
L627             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L628             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L629             all_scores = all_scores.dropna(subset=['G_plus_D'])
L630             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L631             print("Low Score Candidates (GSC+DSC bottom 10):")
L632             print(self.low10_table.to_string())
L633         except Exception as e:
L634             print(f"[warn] low-score ranking failed: {e}")
L635             self.low10_table = None
L636
L637     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L638     def notify_slack(self):
L639         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L640         if not SLACK_WEBHOOK_URL: raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L641         def _filter_suffix_from(spec: dict, group: str) -> str:
L642             g = spec.get(group, {})
L643             parts = [str(m) for m in g.get("pre_mask", [])]
L644             for k, v in (g.get("pre_filter", {}) or {}).items():
L645                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L646                 name = {"beta": "β"}.get(base, base)
L647                 try: val = f"{float(v):g}"
L648                 except: val = str(v)
L649                 parts.append(f"{name}{op}{val}")
L650             return "" if not parts else " / filter:" + " & ".join(parts)
L651         def _inject_filter_suffix(title: str, group: str) -> str:
L652             suf = _filter_suffix_from(FILTER_SPEC, group)
L653             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L654         def _blk(title, tbl, fmt=None, drop=()):
L655             if tbl is None or getattr(tbl,'empty',False): return f"{title}\n(選定なし)\n"
L656             if drop and hasattr(tbl,'columns'):
L657                 keep = [c for c in tbl.columns if c not in drop]
L658                 tbl, fmt = tbl[keep], {k:v for k,v in (fmt or {}).items() if k in keep}
L659             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L660
L661         g_title = _inject_filter_suffix(self.g_title, "G")
L662         d_title = _inject_filter_suffix(self.d_title, "D")
L663         message  = "📈 ファクター分散最適化の結果\n"
L664         if self.miss_df is not None and not self.miss_df.empty:
L665             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L666         message += _blk(g_title, self.g_table, self.g_formatters, drop=("TRD",))
L667         message += _blk(d_title, self.d_table, self.d_formatters)
L668         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table,'empty',False) else f"```{self.io_table.to_string(index=False)}```\n")
L669         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L670         if self.debug and self.debug_table is not None:
L671             message += "\nDebug Data\n```" + self.debug_table.to_string() + "```"
L672         payload = {"text": message}
L673         try:
L674             resp = requests.post(SLACK_WEBHOOK_URL, json=payload); resp.raise_for_status(); print("✅ Slack（Webhook）へ送信しました")
L675         except Exception as e: print(f"⚠️ Slack通知エラー: {e}")
L676
L677
L678 def _infer_g_universe(feature_df, selected12=None, near5=None):
L679     try:
L680         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L681         if out: return out
L682     except Exception:
L683         pass
L684     base = set()
L685     for lst in (selected12 or []), (near5 or []):
L686         for x in (lst or []): base.add(x)
L687     return list(base) if base else list(feature_df.index)
L688
L689
L690 def _fmt_with_fire_mark(tickers, feature_df):
L691     out = []
L692     for t in tickers or []:
L693         try:
L694             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L695             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L696             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L697         except Exception:
L698             out.append(t)
L699     return out
L700
L701
L702 def _label_recent_event(t, feature_df):
L703     try:
L704         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L705         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L706         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L707         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L708         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L709     except Exception:
L710         pass
L711     return t
L712
L713
L714 # ===== パイプライン可視化：G/D共通フロー（出力は不変） ==============================
L715
L716 def io_build_input_bundle() -> InputBundle:
L717     """
L718     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L719     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L720     """
L721     inp = Input(cand=cand, exist=exist, bench=bench,
L722                 price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY)
L723     state = inp.prepare_data()
L724     return InputBundle(
L725         cand=state["cand"], tickers=state["tickers"], bench=bench,
L726         data=state["data"], px=state["px"], spx=state["spx"],
L727         tickers_bulk=state["tickers_bulk"], info=state["info"],
L728         eps_df=state["eps_df"], fcf_df=state["fcf_df"],
L729         returns=state["returns"]
L730     )
L731
L732 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L733               n_target: int) -> tuple[list, float, float, float]:
L734     """
L735     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L736     戻り値：(pick, avg_res_corr, sum_score, objective)
L737     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L738     """
L739     sc.cfg = cfg
L740
L741     if hasattr(sc, "score_build_features"):
L742         feat = sc.score_build_features(inb)
L743         if not hasattr(sc, "_feat_logged"):
L744             T.log("features built (scorer)")
L745             sc._feat_logged = True
L746         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L747     else:
L748         fb = sc.aggregate_scores(inb, cfg)
L749         if not hasattr(sc, "_feat_logged"):
L750             T.log("features built (scorer)")
L751             sc._feat_logged = True
L752         sc._feat = fb
L753         agg = fb.g_score if group == "G" else fb.d_score_all
L754         if group == "D" and hasattr(fb, "df"):
L755             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L756
L757     if hasattr(sc, "filter_candidates"):
L758         mask = sc.filter_candidates(inb, agg, group, cfg)
L759         agg = agg[mask]
L760
L761     selector = Selector()
L762     if hasattr(sc, "select_diversified"):
L763         pick, avg_r, sum_sc, obj = sc.select_diversified(
L764             agg, group, cfg, n_target,
L765             selector=selector, prev_tickers=None,
L766             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L767             cross_mu=cfg.drrs.cross_mu_gd
L768         )
L769     else:
L770         if group == "G":
L771             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L772             res = selector.select_bucket_drrs(
L773                 returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L774                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L775                 lam=cfg.drrs.G.get("lam", 0.68),
L776                 lookback=cfg.drrs.G.get("lookback", 252),
L777                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0
L778             )
L779         else:
L780             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L781             g_fixed = getattr(sc, "_top_G", None)
L782             res = selector.select_bucket_drrs(
L783                 returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L784                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L785                 lam=cfg.drrs.D.get("lam", 0.85),
L786                 lookback=cfg.drrs.D.get("lookback", 504),
L787                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L788                 mu=cfg.drrs.cross_mu_gd
L789             )
L790         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L791         sum_sc = res["sum_score"]; obj = res["objective"]
L792         if group == "D":
L793             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L794             T.log("selection finalized (G/D)")
L795     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L796     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L797     try:
L798         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L799         near10 = list(pool.sort_values(ascending=False).head(10).index)
L800         setattr(sc, f"_near_{group}", near10)
L801         setattr(sc, f"_agg_{group}", agg)
L802     except Exception:
L803         pass
L804
L805     if group == "D":
L806         T.log("save done")
L807     if group == "G":
L808         sc._top_G = pick
L809     return pick, avg_r, sum_sc, obj
L810
L811 def run_pipeline() -> SelectionBundle:
L812     """
L813     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L814     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L815     """
L816     inb = io_build_input_bundle()
L817     cfg = PipelineConfig(
L818         weights=WeightsConfig(g=g_weights, d=D_weights),
L819         drrs=DRRSParams(corrM=corrM, shrink=DRRS_SHRINK,
L820                          G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD),
L821         price_max=CAND_PRICE_MAX
L822     )
L823     sc = Scorer()
L824     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L825     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L826     alpha = Scorer.spx_to_alpha(inb.spx)
L827     sectors = {t: (inb.info.get(t, {}).get("sector") or "U") for t in poolG}
L828     scores = {t: Scorer.g_score.get(t, 0.0) for t in poolG}
L829     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L830     sc._top_G = top_G
L831     try:
L832         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L833         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L834     except Exception:
L835         pass
L836     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L837     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L838     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L839     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L840     fb = getattr(sc, "_feat", None)
L841     near_G = getattr(sc, "_near_G", [])
L842     selected12 = list(top_G)
L843     df = fb.df if fb is not None else pd.DataFrame()
L844     guni = _infer_g_universe(df, selected12, near_G)
L845     try:
L846         fire_recent = [t for t in guni
L847                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L848                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L849     except Exception:
L850         fire_recent = []
L851     lines = [
L852         "【G枠レポート｜週次モニタ（直近5営業日）】",
L853         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L854         f"選定12: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else "選定12: なし",
L855         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",
L856     ]
L857     if fire_recent:
L858         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L859         lines.append(f"過去5営業日の検知: {fire_list}")
L860     else:
L861         lines.append("過去5営業日の検知: なし")
L862     try:
L863         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L864         if webhook:
L865             requests.post(webhook, json={"text": "\n".join(lines)}, timeout=10)
L866     except Exception:
L867         pass
L868
L869     out = Output(debug=debug_mode)
L870     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L871     try: out._sc = sc
L872     except Exception: pass
L873     if hasattr(sc, "_feat"):
L874         try:
L875             out.miss_df = sc._feat.missing_logs
L876             out.display_results(
L877                 exist=exist, bench=bench, df_z=sc._feat.df_z,
L878                 g_score=sc._feat.g_score, d_score_all=sc._feat.d_score_all,
L879                 init_G=top_G, init_D=top_D, top_G=top_G, top_D=top_D
L880             )
L881         except Exception:
L882             pass
L883     out.notify_slack()
L884     sb = SelectionBundle(
L885         resG={"tickers": top_G, "avg_res_corr": avgG,
L886               "sum_score": sumG, "objective": objG},
L887         resD={"tickers": top_D, "avg_res_corr": avgD,
L888               "sum_score": sumD, "objective": objD},
L889         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D
L890     )
L891
L892     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L893     try:
L894         _low_df = (
L895             pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L896               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L897               .sort_values("G_plus_D")
L898               .head(10)
L899               .round(3)
L900         )
L901         _slack("Low Score Candidates (GSC+DSC bottom 10)\n"
L902                "```"
L903                + _low_df.to_string(index=True, index_names=False)
L904                + "\n```")
L905     except Exception as _e:
L906         _slack(f"Low Score Candidates: 作成失敗: {_e}")
L907
L908     if debug_mode:
L909         try:
L910             _slack_debug(_compact_debug(fb, sb, [], []))
L911         except Exception as e:
L912             print(f"[debug skipped] {e}")
L913
L914     return sb
L915
L916 if __name__ == "__main__":
L917     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py 
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #
L26 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L27 # =============================================================================
L28
L29 import os, sys, warnings
L30 import requests
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36
L37 if TYPE_CHECKING:
L38     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L39
L40 # ---- Dividend Helpers -------------------------------------------------------
L41 def _last_close(t, price_map=None):
L42     if price_map and (c := price_map.get(t)) is not None:
L43         return float(c)
L44     try:
L45         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L46         return float(h.iloc[-1]) if len(h) else np.nan
L47     except Exception:
L48         return np.nan
L49
L50 def _ttm_div_sum(t, lookback_days=400):
L51     try:
L52         div = yf.Ticker(t).dividends
L53         if div is None or len(div) == 0:
L54             return 0.0
L55         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L56         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L57         return ttm if ttm > 0 else float(div.tail(4).sum())
L58     except Exception:
L59         return 0.0
L60
L61 def ttm_div_yield_portfolio(tickers, price_map=None):
L62     ys = []
L63     for t in tickers:
L64         c = _last_close(t, price_map)
L65         if not np.isfinite(c) or c <= 0:
L66             ys.append(0.0)
L67             continue
L68         s = _ttm_div_sum(t)
L69         ys.append(s / c if s > 0 else 0.0)
L70     return float(np.mean(ys)) if ys else 0.0
L71
L72 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L73 def winsorize_s(s: pd.Series, p=0.02):
L74     if s is None or s.dropna().empty: return s
L75     lo, hi = np.nanpercentile(s.astype(float), [100*p, 100*(1-p)]); return s.clip(lo, hi)
L76
L77 def robust_z(s: pd.Series, p=0.02):
L78     s2 = winsorize_s(s, p); return np.nan_to_num(zscore(s2.fillna(s2.mean())))
L79
L80 def _safe_div(a, b):
L81     try:
L82         if b is None or float(b)==0 or pd.isna(b): return np.nan
L83         return float(a)/float(b)
L84     except Exception: return np.nan
L85
L86 def _safe_last(series: pd.Series, default=np.nan):
L87     try: return float(series.iloc[-1])
L88     except Exception: return default
L89
L90 D_WEIGHTS_EFF = None  # 出力表示互換のため
L91
L92 # ---- Scorer 本体 -------------------------------------------------------------
L93 class Scorer:
L94     """
L95     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L96     - cfg は必須（factor.PipelineConfig を渡す）。
L97     - 旧カラム名を自動リネームして新スキーマに吸収します。
L98     """
L99
L100     # === 先頭で旧→新カラム名マップ（移行用） ===
L101     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L102     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L103
L104     # === スキーマ簡易チェック（最低限） ===
L105     @staticmethod
L106     def _validate_ib_for_scorer(ib: Any):
L107         must_attrs = ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"]
L108         miss = [a for a in must_attrs if not hasattr(ib, a) or getattr(ib, a) is None]
L109         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L110
L111         # 後方互換のため、まず rename を試みる
L112         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME.keys()):
L113             ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L114         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME.keys()):
L115             ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L116
L117         # 必須列の存在確認
L118         need_eps = {"EPS_TTM","EPS_Q_LastQ"}
L119         need_fcf = {"FCF_TTM"}
L120         if not need_eps.issubset(set(ib.eps_df.columns)):
L121             raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L122         if not need_fcf.issubset(set(ib.fcf_df.columns)):
L123             raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L124
L125     # ----（Scorer専用）テクニカル・指標系 ----
L126     @staticmethod
L127     def trend(s: pd.Series):
L128         if len(s)<200: return np.nan
L129         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L130         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L131         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L132         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L133         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L134         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L135         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L136         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L137         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L138         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L139         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L140         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L141
L142     @staticmethod
L143     def rs(s, b):
L144         n, nb = len(s), len(b)
L145         if n<60 or nb<60: return np.nan
L146         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L147         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L148         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L149
L150     @staticmethod
L151     def tr_str(s):
L152         if len(s)<50: return np.nan
L153         return s.iloc[-1]/s.rolling(50).mean().iloc[-1] - 1
L154
L155     @staticmethod
L156     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L157         r = (s/b).dropna()
L158         if len(r)<win: return np.nan
L159         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L160         try: return float(np.polyfit(x, y, 1)[0])
L161         except Exception: return np.nan
L162
L163     @staticmethod
L164     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L165         ev = info_t.get('enterpriseValue', np.nan)
L166         if pd.notna(ev) and ev>0: return float(ev)
L167         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L168         try:
L169             bs = tk.quarterly_balance_sheet
L170             if bs is not None and not bs.empty:
L171                 c = bs.columns[0]
L172                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L173                     if k in bs.index: debt = float(bs.loc[k,c]); break
L174                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L175                     if k in bs.index: cash = float(bs.loc[k,c]); break
L176         except Exception: pass
L177         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L178         return np.nan
L179
L180     @staticmethod
L181     def dividend_status(ticker: str) -> str:
L182         t = yf.Ticker(ticker)
L183         try:
L184             if not t.dividends.empty: return "has"
L185         except Exception: return "unknown"
L186         try:
L187             a = t.actions
L188             if a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0: return "none_confident"
L189         except Exception: pass
L190         try:
L191             fi = t.fast_info
L192             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L193         except Exception: pass
L194         return "unknown"
L195
L196     @staticmethod
L197     def div_streak(t):
L198         try:
L199             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L200             years, streak = sorted(ann.index), 0
L201             for i in range(len(years)-1,0,-1):
L202                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L203                 else: break
L204             return streak
L205         except Exception: return 0
L206
L207     @staticmethod
L208     def fetch_finnhub_metrics(symbol):
L209         api_key = os.environ.get("FINNHUB_API_KEY")
L210         if not api_key: return {}
L211         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L212         try:
L213             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L214             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L215         except Exception: return {}
L216
L217     @staticmethod
L218     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L219         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L220         n = min(len(r), len(m), lookback)
L221         if n<60: return np.nan
L222         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L223         return np.nan if var==0 else cov/var
L224
L225     @staticmethod
L226     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L227                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L228         """
L229         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L230         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L231         """
L232         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L233         b50  = ((spx/ma50 - 1) + bands[0])/(2*bands[0])
L234         b200 = ((spx/ma200 - 1) + bands[1])/(2*bands[1])
L235         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L236         b = float(hist.iloc[-1])
L237         lo, mid = float(hist.quantile(q[0])), float(hist.quantile(q[1]))
L238         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L239
L240     @staticmethod
L241     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L242         """
L243         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L244         戻り値は降順ソート済み。
L245         """
L246         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L247         cnt, pen = {}, {}
L248         for t in order:
L249             sec = sectors.get(t, "U")
L250             k = cnt.get(sec, 0) + 1
L251             pen[t] = alpha * max(0, k - cap)
L252             cnt[sec] = k
L253         return (s - pd.Series(pen)).sort_values(ascending=False)
L254
L255     @staticmethod
L256     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L257         """
L258         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L259         """
L260         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L261         if not hard:
L262             return list(eff.head(N).index)
L263         pick, used = [], {}
L264         for t in eff.index:
L265             s = sectors.get(t, "U")
L266             if used.get(s, 0) < hard:
L267                 pick.append(t)
L268                 used[s] = used.get(s, 0) + 1
L269             if len(pick) == N:
L270                 break
L271         return pick
L272
L273     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L274     def aggregate_scores(self, ib: Any, cfg):
L275         if cfg is None:
L276             raise ValueError("cfg is required; pass factor.PipelineConfig")
L277         self._validate_ib_for_scorer(ib)
L278
L279         px, spx, tickers = ib.px, ib.spx, ib.tickers
L280         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L281
L282         df, missing_logs = pd.DataFrame(index=tickers), []
L283         for t in tickers:
L284             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L285             # --- 基本特徴 ---
L286             df.loc[t,'TR']   = self.trend(s)
L287             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L288             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L289             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L290             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L291
L292             # --- 配当（欠損補完含む） ---
L293             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L294             if div is None or pd.isna(div):
L295                 try:
L296                     divs = yf.Ticker(t).dividends
L297                     if divs is not None and not divs.empty:
L298                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L299                         if last_close and last_close>0: div = float(div_1y/last_close)
L300                 except Exception: pass
L301             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L302
L303             # --- FCF/EV ---
L304             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L305             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L306
L307             # --- モメンタム・ボラ関連 ---
L308             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L309             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L310             n = int(min(len(r), len(rm)))
L311
L312             DOWNSIDE_DEV = np.nan
L313             if n>=60:
L314                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L315                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L316             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L317
L318             MDD_1Y = np.nan
L319             try:
L320                 w = s.iloc[-min(len(s),252):].dropna()
L321                 if len(w)>=30:
L322                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L323             except Exception: pass
L324             df.loc[t,'MDD_1Y'] = MDD_1Y
L325
L326             RESID_VOL = np.nan
L327             if n>=120:
L328                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L329                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L330                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L331                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L332             df.loc[t,'RESID_VOL'] = RESID_VOL
L333
L334             DOWN_OUTPERF = np.nan
L335             if n>=60:
L336                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L337                 if mask.sum()>=10:
L338                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L339                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L340             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L341
L342             # --- 長期移動平均/位置 ---
L343             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L344             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L345
L346             # --- 配当の詳細系 ---
L347             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L348             try:
L349                 divs = yf.Ticker(t).dividends.dropna()
L350                 if not divs.empty:
L351                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L352                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L353                     ann = divs.groupby(divs.index.year).sum()
L354                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L355                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L356                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L357                 so = d.get('sharesOutstanding',None)
L358                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L359                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L360             except Exception: pass
L361             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L362
L363             # --- 財務安定性 ---
L364             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L365
L366             # --- EPS 変動 ---
L367             EPS_VAR_8Q = np.nan
L368             try:
L369                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L370                 if qe is not None and not qe.empty and so:
L371                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L372                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L373             except Exception: pass
L374             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L375
L376             # --- サイズ/流動性 ---
L377             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L378             try:
L379                 vol_series = ib.data['Volume'][t].dropna()
L380                 if len(vol_series)>=5 and len(s)==len(vol_series):
L381                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L382             except Exception: pass
L383             df.loc[t,'ADV60_USD'] = adv60
L384
L385             # --- 売上/利益の加速度等 ---
L386             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L387             REV_ANNUAL_STREAK = np.nan
L388             try:
L389                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L390                 if qe is not None and not qe.empty:
L391                     if 'Revenue' in qe.columns:
L392                         rev = qe['Revenue'].dropna().astype(float)
L393                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L394                         if len(rev)>=6:
L395                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L396                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L397                         yoy_list=[]
L398                         for k in range(1,5):
L399                             if len(rev)>=4+k:
L400                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L401                                 if pd.notna(y): yoy_list.append(y)
L402                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L403                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L404                         try:
L405                             g = rev.groupby(rev.index.year)
L406                             ann_sum, cnt = g.sum(), g.count()
L407                             ann_sum = ann_sum[cnt >= 4]
L408                             if len(ann_sum) >= 3:
L409                                 yoy = ann_sum.pct_change().dropna()
L410                                 streak = 0
L411                                 for v in yoy.iloc[::-1]:
L412                                     if pd.isna(v) or v <= 0:
L413                                         break
L414                                     streak += 1
L415                                 REV_ANNUAL_STREAK = float(streak)
L416                         except Exception:
L417                             pass
L418                     if 'Earnings' in qe.columns and so:
L419                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L420                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L421                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L422             except Exception: pass
L423             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'], df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_Q_YOY, EPS_Q_YOY, REV_YOY_ACC, REV_YOY_VAR
L424             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L425
L426             # --- Rule of 40 や周辺 ---
L427             total_rev_ttm = d.get('totalRevenue',np.nan)
L428             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L429             df.loc[t,'FCF_MGN'] = FCF_MGN
L430             rule40 = np.nan
L431             try:
L432                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L433             except Exception: pass
L434             df.loc[t,'RULE40'] = rule40
L435
L436             # --- トレンド補助 ---
L437             sma50  = s.rolling(50).mean()
L438             sma150 = s.rolling(150).mean()
L439             sma200 = s.rolling(200).mean()
L440             p = _safe_last(s)
L441
L442             df.loc[t,'MA50_OVER_150'] = (
L443                 _safe_last(sma50)/_safe_last(sma150) - 1
L444                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L445             )
L446             df.loc[t,'MA150_OVER_200'] = (
L447                 _safe_last(sma150)/_safe_last(sma200) - 1
L448                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L449             )
L450
L451             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L452             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L453
L454             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L455             if len(sma200.dropna()) >= 21:
L456                 cur200 = _safe_last(sma200)
L457                 old2001 = float(sma200.iloc[-21])
L458                 if old2001:
L459                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L460
L461             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L462             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L463             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L464             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L465             if len(sma200.dropna())>=105:
L466                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L467                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L468             # NEW: 200日線が連続で上向きの「日数」
L469             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L470             try:
L471                 s200 = sma200.dropna()
L472                 if len(s200) >= 2:
L473                     diff200 = s200.diff()
L474                     up = 0
L475                     for v in diff200.iloc[::-1]:
L476                         if pd.isna(v) or v <= 0:
L477                             break
L478                         up += 1
L479                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L480             except Exception:
L481                 pass
L482             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L483             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L484             if hi52 and hi52>0 and pd.notna(p):
L485                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L486             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L487             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L488
L489             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L490
L491             # --- 欠損メモ ---
L492             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L493             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L494             if need_finnhub:
L495                 fin_data = self.fetch_finnhub_metrics(t)
L496                 for col in need_finnhub:
L497                     val = fin_data.get(col)
L498                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L499             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L500                 if pd.isna(df.loc[t,col]):
L501                     if col=='DIV':
L502                         status = self.dividend_status(t)
L503                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L504                     else:
L505                         missing_logs.append({'Ticker':t,'Column':col})
L506
L507         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L508             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L509             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L510             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L511             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L512             c5 = (row.get('TR_str', np.nan) > 0)
L513             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L514             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L515             c8 = (row.get('RS', np.nan) >= 0.10)
L516             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L517
L518         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L519         assert 'trend_template' in df.columns
L520
L521         # === Z化と合成 ===
L522         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L523
L524         df_z = pd.DataFrame(index=df.index)
L525         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L526         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L527         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L528         for col in ['REV_Q_YOY','EPS_Q_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']: df_z[col] = robust_z(df[col])
L529         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L530
L531         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L532         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L533         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L534         df_z['GROWTH_F']  = robust_z(
L535               0.25*df_z['REV']          # ↓0.30→0.25
L536             + 0.20*df_z['EPS_Q_YOY']
L537             + 0.15*df_z['REV_Q_YOY']
L538             + 0.15*df_z['REV_YOY_ACC']
L539             + 0.10*df_z['RULE40']
L540             + 0.10*df_z['FCF_MGN']
L541             + 0.10*df_z['EPS']          # ★追加：黒字優遇／赤字減点
L542             + 0.05*df_z['REV_ANN_STREAK']
L543             - 0.05*df_z['REV_YOY_VAR']
L544         ).clip(-3.0,3.0)
L545         df_z['MOM_F'] = robust_z(
L546               0.40*df_z['RS']
L547             + 0.15*df_z['TR_str']
L548             + 0.15*df_z['RS_SLOPE_6W']
L549             + 0.15*df_z['RS_SLOPE_13W']
L550             + 0.10*df_z['MA200_SLOPE_5M']
L551             + 0.10*df_z['MA200_UP_STREAK_D']
L552         ).clip(-3.0,3.0)
L553         df_z['VOL'] = robust_z(df['BETA'])
L554         df_z.rename(columns={'GROWTH_F':'GRW','MOM_F':'MOM','QUALITY_F':'QAL','YIELD_F':'YLD'}, inplace=True)
L555         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L556         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L557
L558         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L559         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L560         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L561         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L562
L563         # --- 重みは cfg を優先（外部があればそれを使用） ---
L564         # ① 全銘柄で G/D スコアを算出（unmasked）
L565         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L566
L567         d_comp = pd.concat({
L568             'QAL': df_z['D_QAL'],
L569             'YLD': df_z['D_YLD'],
L570             'VOL': df_z['D_VOL_RAW'],
L571             'TRD': df_z['D_TRD']
L572         }, axis=1)
L573         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L574         globals()['D_WEIGHTS_EFF'] = dw.copy()
L575         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L576
L577         # ② テンプレ判定（既存ロジックそのまま）
L578         mask = df['trend_template']
L579         if not bool(mask.any()):
L580             mask = (
L581                 (df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L582                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L583                 (df.get('RS', np.nan) >= 0.08) &
L584                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L585                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L586                 (df.get('MA150_OVER_200', np.nan) > 0) &
L587                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L588                 (df.get('TR_str', np.nan) > 0)
L589             ).fillna(False)
L590             df['trend_template'] = mask
L591
L592         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L593         g_score = g_score_all.loc[mask]
L594         Scorer.g_score = g_score
L595         df_z['GSC'] = g_score_all
L596         df_z['DSC'] = d_score_all
L597
L598         try:
L599             current = (
L600                 pd.read_csv("current_tickers.csv")
L601                   .iloc[:, 0]
L602                   .str.upper()
L603                   .tolist()
L604             )
L605         except FileNotFoundError:
L606             warnings.warn("current_tickers.csv not found — bonus skipped")
L607             current = []
L608
L609         mask_bonus = g_score.index.isin(current)
L610         if mask_bonus.any():
L611             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L612             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L613             # 2) g 側の σ を取り、NaN なら 0 に丸める
L614             sigma_g = g_score.std()
L615             if pd.isna(sigma_g):
L616                 sigma_g = 0.0
L617             bonus_g = round(k * sigma_g, 3)
L618             g_score.loc[mask_bonus] += bonus_g
L619             Scorer.g_score = g_score
L620             # 3) D 側も同様に σ の NaN をケア
L621             sigma_d = d_score_all.std()
L622             if pd.isna(sigma_d):
L623                 sigma_d = 0.0
L624             bonus_d = round(k * sigma_d, 3)
L625             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L626
L627         try:
L628             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L629         except Exception:
L630             pass
L631
L632         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L633         return FeatureBundle(
L634             df=df,
L635             df_z=df_z,
L636             g_score=g_score,
L637             d_score_all=d_score_all,
L638             missing_logs=pd.DataFrame(missing_logs)
L639         )
L640
L641
L642 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L643     """
L644     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L645     次の列を feature_df に追加する（index=ticker）。
L646       - G_BREAKOUT_recent_5d : bool
L647       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L648       - G_PULLBACK_recent_5d : bool
L649       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L650       - G_PIVOT_price        : float
L651     失敗しても例外は握り潰し、既存処理を阻害しない。
L652     """
L653     try:
L654         px   = bundle.px                      # 終値 DataFrame
L655         hi   = bundle.data['High']
L656         lo   = bundle.data['Low']
L657         vol  = bundle.data['Volume']
L658         bench= bundle.spx                     # ベンチマーク Series
L659
L660         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L661         g_universe = getattr(self_obj, "g_universe", None)
L662         if g_universe is None:
L663             try:
L664                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L665             except Exception:
L666                 g_universe = list(feature_df.index)
L667         if not g_universe:
L668             return feature_df
L669
L670         # 指標
L671         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L672         ma50  = px[g_universe].rolling(50).mean()
L673         ma150 = px[g_universe].rolling(150).mean()
L674         ma200 = px[g_universe].rolling(200).mean()
L675         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L676         vol20 = vol[g_universe].rolling(20).mean()
L677         vol50 = vol[g_universe].rolling(50).mean()
L678
L679         # トレンドテンプレート合格
L680         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L681                             & (ma150 > ma200) & (ma200.diff() > 0)
L682
L683         # 汎用ピボット：直近65営業日の高値（当日除外）
L684         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L685
L686         # 相対力：年内高値更新
L687         bench_aligned = bench.reindex(px.index).ffill()
L688         rs = px[g_universe].div(bench_aligned, axis=0)
L689         rs_high = rs.rolling(252).max().shift(1)
L690
L691         # ブレイクアウト「発生日」：条件立ち上がり
L692         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L693                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L694         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L695
L696         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L697         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L698         volume_dryup = (vol20 / vol50) <= 1.0
L699         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L700         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L701         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L702
L703         # 直近N営業日内の発火 / 最終発生日
L704         rows = []
L705         for t in g_universe:
L706             def _recent_and_date(s, win):
L707                 sw = s[t].iloc[-win:]
L708                 if sw.any():
L709                     d = sw[sw].index[-1]
L710                     return True, d.strftime("%Y-%m-%d")
L711                 return False, ""
L712             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L713             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L714             rows.append((t, {
L715                 "G_BREAKOUT_recent_5d": br_recent,
L716                 "G_BREAKOUT_last_date": br_date,
L717                 "G_PULLBACK_recent_5d": pb_recent,
L718                 "G_PULLBACK_last_date": pb_date,
L719                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L720             }))
L721         flags = pd.DataFrame({k: v for k, v in rows}).T
L722
L723         # 列を作成・上書き
L724         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L725         for c in cols:
L726             if c not in feature_df.columns:
L727                 feature_df[c] = np.nan
L728         feature_df.loc[flags.index, flags.columns] = flags
L729
L730     except Exception:
L731         pass
L732     return feature_df
L733
L734
L735
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15
L16     steps:
L17       - name: Debug start
L18         run: echo '🚀 DEBUGstarted'
L19               
L20       - name: Checkout repository
L21         uses: actions/checkout@v3
L22
L23       - name: Setup Python
L24         uses: actions/setup-python@v5
L25         with:
L26           python-version: '3.x'                # （必要最小限のまま。固定したければ '3.13'）
L27           cache: 'pip'                         # ★ pipキャッシュを有効化
L28           cache-dependency-path: requirements.txt  # ★ 依存ファイルをキャッシュキーに
L29
L30       - name: Install dependencies
L31         run: pip install -r requirements.txt
L32
L33       - name: Prepare results directory
L34         run: mkdir -p results
L35
L36       - name: Run factor & scoring
L37         env:
L38           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L39           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L40           FIN_THREADS: "8"
L41         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 25銘柄を均等配分（現金を除き1銘柄あたり4%）
L5 - moomoo証券で運用
L6
L7 ## Barbell Growth-Defense方針
L8 - Growth枠12銘柄：高成長で乖離源となる攻めの銘柄
L9 - Defense枠13銘柄：低ボラで安定成長し配当を増やす守りの銘柄
L10 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L11
L12 ## 現金比率（VIX 5日移動平均で判定）
L13 - VIX MA5 < 20: 5%
L14 - 20 ≤ VIX MA5 < 26: 7.5%
L15 - VIX MA5 ≥ 27: 12%（高VIX緊急モード）
L16
L17 ## ドリフト閾値
L18 - VIX MA5 < 20: 10%
L19 - 20 ≤ VIX MA5 < 26: 12%
L20 - VIX MA5 ≥ 27: 高VIX緊急モードへ移行
L21
L22 ## 通常モードの運用
L23 - 毎営業日、①90日経過 or ②ドリフトが閾値超過で半戻し
L24 - 半戻し：乖離の50%を中央へ寄せ、現金比率を上表どおりに調整
L25 - 全銘柄のトレーリングストップ(TS)を再設定
L26 - ドリフト＝Σ|現在比率−4%|（端数切り捨て）
L27
L28 ## 高VIX緊急モード（MA5 > 27で発動）
L29 1. 全25銘柄を各4%へ全戻し
L30 2. 現金比率12%へ引上げ
L31 3. 全銘柄のTSを再設定し以降の売買とドリフト計算を停止
L32
L33 ## 高VIX緊急モードの解除
L34 - MA5 < 23 または30営業日経過で解除
L35 - 緊急モード中にTS発動で減少した銘柄を補充し25銘柄×4%にリバランス
L36 - 通常モードの日次チェックを再開
L37
L38 ## 段階的トレーリングストップ
L39 - Growth: 基本25%
L40 - Defense: 基本20%
L41 - 含み益が40/60/80%に達したらTSを3/5/8ポイントずつ引き上げ
L42 - TS発動で減少した銘柄は翌日以降に補充（緊急モード中は補充しない）
L43
L44 ## 入替銘柄選定
L45 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L46 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L47
L48 ## 実行タイミング
L49 - 判定：米国市場終値直後
L50 - 執行：翌営業日の米国寄付き成行
L51
L52 ## VIX早見表
L53 | VIX MA5 | ドリフト閾値 | 現金比率 | モード |
L54 |--------|--------------|---------|-------|
L55 | <20    | 10           | 5%      | 通常 |
L56 | 20–26  | 12           | 7.5%    | 通常 |
L57 | ≥27    | –            | 12%     | 高VIX緊急 |
```

## <documents/factor_design.md>
```text
L1 # factor.py 詳細設計書
L2
L3 ## 概要
L4 - 既存ポートフォリオの銘柄と検討中の銘柄群を同時に扱う銘柄選定パイプライン。
L5 - 価格・財務データを取り込みスコアリングとDRRS選定を行うことで、以下のアウトプットを得る。
L6   - 採用銘柄と惜しくも漏れた銘柄のスコア一覧
L7   - IN/OUTのティッカーリストとOUT側の低スコア銘柄
L8   - 新旧ポートフォリオの比較表
L9   - 検討中銘柄の低スコアランキング（整理用）
L10
L11 ## 全体フロー
L12 1. **Input** – `current_tickers.csv`と`candidate_tickers.csv`を読み込み、yfinanceやFinnhubのAPIから価格・財務データを収集して`InputBundle`を整備。
L13 2. **Score Calculation** – Scorerが特徴量を計算し因子スコアを合成して`FeatureBundle`を生成。
L14 3. **Correlation Reduction & Selection** – SelectorがDRRSロジックで相関を抑えつつG/D銘柄を選定し`SelectionBundle`を得る。
L15 4. **Output** – 採用結果と周辺情報を表・Slack通知として出力。
L16
L17 ```mermaid
L18 flowchart LR
L19   A[Input\nAPI & 前処理] --> B[Score Calculation\n特徴量・因子合成]
L20   B --> C[Correlation Reduction\nDRRS選定]
L21   C --> D[Output\nSlack通知]
L22 ```
L23
L24 ## 定数・設定
L25 | 変数 | 内容 | 主な用途 |
L26 | --- | --- | --- |
L27 | `exist` / `cand` | 現行ポートフォリオと検討中銘柄のティッカーリスト | スコア対象ユニバースの構成、候補整理 |
L28 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L29 | `CAND_PRICE_MAX` | 候補銘柄の許容価格上限 | 高額銘柄の事前除外 |
L30 | `N_G` / `N_D` | G/D採用枠の件数 | 最終的に選ぶ銘柄数の制約 |
L31 | `g_weights` / `D_weights` | 各因子の重みdict | G/Dスコア合成 |
L32 | `D_BETA_MAX` | Dバケットの許容β上限 | 高β銘柄の除外フィルタ |
L33 | `FILTER_SPEC` | G/Dごとの前処理フィルタ | トレンドマスクやβ上限設定 |
L34 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L35 | `DRRS_G` / `DRRS_D` | DRRSパラメータdict | バケット別の相関低減設定 |
L36 | `DRRS_SHRINK` | 残差相関の対角シュリンク率 | `residual_corr`の安定化 |
L37 | `CROSS_MU_GD` | G-D間クロス相関ペナルティμ | 2バケット同時最適化で相関抑制 |
L38 | `RESULTS_DIR` | 選定結果保存ディレクトリ | `_save_sel`/`_load_prev`の入出力 |
L39
L40 選定結果は`results/`配下にJSONとして保存し、次回実行時に`_load_prev`で読み込んで選定条件に反映。
L41
L42 ## DTO/Config
L43 各ステップ間で受け渡すデータ構造と設定値。変数の意味合いと利用箇所を以下に示す。
L44
L45 ### InputBundle（Input → Scorer）
L46 | 変数 | 内容 | 主な用途 |
L47 | --- | --- | --- |
L48 | `cand` | 候補銘柄ティッカーのリスト | OUTテーブルや低スコアランキング対象の母集団 |
L49 | `tickers` | 現行+候補を合わせたティッカー一覧 | 価格・出来高ダウンロード、リターン計算 |
L50 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L51 | `data` | yfinanceのダウンロード結果（階層列） | `px`/`spx`/リターン等の基礎データ |
L52 | `px` | `data['Close']`だけを抜き出した価格系列 | 指標計算・リターン生成 |
L53 | `spx` | `data['Close'][bench]` のSeries | `rs`や`calc_beta`の基準指数 |
L54 | `tickers_bulk` | `yf.Tickers`オブジェクト | `info`等の一括取得 |
L55 | `info` | ティッカー別のyfinance情報dict | セクター判定やEPS補完 |
L56 | `eps_df` | EPS TTM/直近EPS等をまとめた表 | 成長指標の算出 |
L57 | `fcf_df` | CFO・CapEx・FCF TTMと情報源フラグ | FCF/EVや配当カバレッジ |
L58 | `returns` | `px.pct_change()`のリターン表 | 相関行列・DRRS計算 |
L59
L60 ### FeatureBundle（Scorer → Selector）
L61 | 変数 | 内容 | 主な用途 |
L62 | --- | --- | --- |
L63 | `df` | 計算済み指標の生値テーブル | デバッグ・出力表示 |
L64 | `df_z` | ウィンザー後Zスコア化した指標表 | 因子スコア合成、選定基準 |
L65 | `g_score` | Gバケット総合スコア | G選定、IN/OUT比較 |
L66 | `d_score_all` | Dバケット総合スコア（全銘柄） | D選定、低スコアランキング |
L67 | `missing_logs` | 欠損指標と補完状況のログ | データ品質チェック |
L68
L69 ### SelectionBundle（Selector → Output）
L70 | 変数 | 内容 | 主な用途 |
L71 | --- | --- | --- |
L72 | `resG` | G選定結果の詳細dict（`tickers`、目的値等） | 結果保存・平均相関などの指標表示 |
L73 | `resD` | D選定結果の詳細dict | 同上 |
L74 | `top_G` | 最終採用Gティッカー | 新ポートフォリオ構築 |
L75 | `top_D` | 最終採用Dティッカー | 同上 |
L76 | `init_G` | DRRS前のG初期候補 | 惜しくも外れた銘柄表示 |
L77 | `init_D` | DRRS前のD初期候補 | 同上 |
L78
L79 ### WeightsConfig
L80 | 変数 | 内容 | 主な用途 |
L81 | --- | --- | --- |
L82 | `g` | G因子（GRW/MOM/VOL）の重みdict | `g_score`合成 |
L83 | `d` | D因子（D_QAL/D_YLD/D_VOL_RAW/D_TRD）の重みdict | `d_score_all`合成 |
L84
L85 ### DRRSParams
L86 | 変数 | 内容 | 主な用途 |
L87 | --- | --- | --- |
L88 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L89 | `shrink` | 残差相関のシュリンク率 | `residual_corr`の対角強調 |
L90 | `G` | Gバケット用パラメータdict（`lookback`等） | `select_bucket_drrs`設定 |
L91 | `D` | Dバケット用パラメータdict | 同上 |
L92 | `cross_mu_gd` | G-Dクロス相関ペナルティ係数μ | `select_buckets`の目的関数 |
L93
L94 ### PipelineConfig
L95 | 変数 | 内容 | 主な用途 |
L96 | --- | --- | --- |
L97 | `weights` | `WeightsConfig`のインスタンス | スコア合成の重み参照 |
L98 | `drrs` | `DRRSParams`のインスタンス | 選定ステップの設定値 |
L99 | `price_max` | 候補銘柄の許容価格上限 | Input段階でのフィルタ |
L100
L101 ## 共通ユーティリティ
L102 - `winsorize_s` / `robust_z` : 外れ値処理とZスコア化。
L103 - `_safe_div` / `_safe_last` : 例外を潰した分割・末尾取得。
L104 - `_load_prev` / `_save_sel` : 選定結果の読み書き。
L105
L106 ## クラス設計
L107 ### Step1: Input
L108 `current_tickers.csv`の現行銘柄と`candidate_tickers.csv`の検討中銘柄を起点にデータを集約する。外部I/Oと前処理を担当し、`prepare_data`で`InputBundle`を生成。価格・財務データの取得は**yfinanceを優先し、欠損がある指標のみFinnhub APIで補完**する。
L109 主なメソッド:
L110 - `impute_eps_ttm` : 四半期EPS×4でTTMを推定し欠損時のみ差し替え。
L111 - `fetch_cfo_capex_ttm_yf` : yfinanceの四半期/年次キャッシュフローからCFO・CapEx・FCF TTMを算出。
L112 - `fetch_cfo_capex_ttm_finnhub` : yfinanceで欠けた銘柄のみFinnhub APIで補完。
L113 - `compute_fcf_with_fallback` : yfinance値を基準にFinnhub値で穴埋めし、CFO/CapEx/FCFと情報源フラグを返す。
L114 - `_build_eps_df` : `info`や`quarterly_earnings`からEPS TTMと直近EPSを計算し、`impute_eps_ttm`で補完。
L115 - `prepare_data` :
L116     0. CSVから現行銘柄と候補銘柄のティッカー一覧を読み込む。
L117     1. 候補銘柄の現在値を取得し価格上限でフィルタ。
L118     2. 既存+候補から対象ティッカーを決定し、価格・出来高を一括ダウンロード（yfinance）。
L119     3. yfinance値を基にEPS/FCFテーブルやベンチマーク系列、リターンを構築し、欠損セルはFinnhub呼び出しで穴埋め。
L120     4. 上記を`InputBundle`に格納して返す。
L121
L122 ### Step2: Score Calculation (Scorer)
L123 特徴量計算とスコア合成を担当し、`FeatureBundle`を返す。
L124
L125 #### 補助関数
L126 - `trend(s)` : 50/150/200日移動平均や52週レンジから-0.5〜0.5で構成されたトレンド指標。
L127 - `rs(s,b)` / `tr_str(s)` / `rs_line_slope(s,b,win)` : 相対強さや短期トレンド、RS回帰傾きを算出。
L128 - `ev_fallback` : `enterpriseValue`欠損時に負債・現金からEVを推定。
L129 - `dividend_status` / `div_streak` : 配当未設定状況の判定と増配年数カウント。
L130 - `fetch_finnhub_metrics` : Finnhub APIからEPS成長・ROE・βなど不足指標を取得。
L131 - `calc_beta` : ベンチマークとの共分散からβを算出。
L132 - `spx_to_alpha` : S&P500の位置情報からDRRSで用いるαを推定。
L133 - `soft_cap_effective_scores` / `pick_top_softcap` : セクターソフトキャップ付きスコア調整と上位抽出。
L134
L135 **補助関数と生成指標**
L136
L137 | 補助関数 | 生成指標 | 略称 |
L138 | --- | --- | --- |
L139 | `trend` | トレンド総合値 | `TR` |
L140 | `rs` | 相対強さ | `RS` |
L141 | `tr_str` | 価格と50日線の乖離 | `TR_str` |
L142 | `rs_line_slope` | RS線の回帰傾き | `RS_SLOPE_*` |
L143 | `calc_beta` | β | `BETA` |
L144 | `div_streak` | 連続増配年数 | `DIV_STREAK` |
L145
L146 #### `aggregate_scores` 詳細
L147 1. 各銘柄の価格系列や`info`を基に以下を算出。
L148    - **トレンド/モメンタム**: `TR`、`RS`、`TR_str`、多様な移動平均比、`RS_SLOPE_*`など。
L149    - **リスク**: `BETA`、`DOWNSIDE_DEV`、`MDD_1Y`、`RESID_VOL`、`DOWN_OUTPERF`、`EXT_200`等。
L150    - **配当**: `DIV`、`DIV_TTM_PS`、`DIV_VAR5`、`DIV_YOY`、`DIV_FCF_COVER`、`DIV_STREAK`。
L151    - **財務・成長**: `EPS`、`REV`、`ROE`、`FCF/EV`、`REV_Q_YOY`、`EPS_Q_YOY`、`REV_YOY_ACC`、`REV_YOY_VAR`、`REV_ANN_STREAK`、`RULE40`、`FCF_MGN` 等。
L152    - **安定性/サイズ**: `DEBT2EQ`、`CURR_RATIO`、`MARKET_CAP`、`ADV60_USD`、`EPS_VAR_8Q`など。
L153 2. 指標欠損はFinnhub API等で補完し、未取得項目を`missing_logs`に記録。
L154 3. `winsorize_s`→`robust_z`で標準化し`df_z`へ保存。サイズ・流動性は対数変換。
L155 4. 正規化済指標から因子スコアを合成。
L156    - 各因子の構成と重みは以下の通り。
L157      - **GRW**: 0.30×`REV` + 0.20×`EPS_Q_YOY` + 0.15×`REV_Q_YOY` + 0.15×`REV_YOY_ACC` + 0.10×`RULE40` + 0.10×`FCF_MGN` + 0.10×`REV_ANN_STREAK` − 0.05×`REV_YOY_VAR`。
L158      - **MOM**: 0.40×`RS` + 0.15×`TR_str` + 0.15×`RS_SLOPE_6W` + 0.15×`RS_SLOPE_13W` + 0.10×`MA200_SLOPE_5M` + 0.10×`MA200_UP_STREAK_D`。
L159      - **VOL**: `BETA`単体を使用。
L160      - **QAL**: 0.60×`FCF_W` + 0.40×`ROE_W`で作成。
L161      - **YLD**: 0.30×`DIV` + 0.70×`DIV_STREAK`。
L162      - **D_QAL**: 0.35×`QAL` + 0.20×`FCF` + 0.15×`CURR_RATIO` − 0.15×`DEBT2EQ` − 0.15×`EPS_VAR_8Q`。
L163      - **D_YLD**: 0.45×`DIV` + 0.25×`DIV_STREAK` + 0.20×`DIV_FCF_COVER` − 0.10×`DIV_VAR5`。
L164      - **D_VOL_RAW**: 0.40×`DOWNSIDE_DEV` + 0.22×`RESID_VOL` + 0.18×`MDD_1Y` − 0.10×`DOWN_OUTPERF` − 0.05×`EXT_200` − 0.08×`SIZE` − 0.10×`LIQ` + 0.10×`BETA`。
L165      - **D_TRD**: 0.40×`MA200_SLOPE_5M` − 0.30×`EXT_200` + 0.15×`NEAR_52W_HIGH` + 0.15×`TR`。
L166     - 主な指標の略称と意味:
L167
L168       | 略称 | 補助関数 | 概要 |
L169       | --- | --- | --- |
L170       | TR | `trend` | 50/150/200日移動平均と52週レンジを組み合わせたトレンド総合値 |
L171       | RS | `rs` | ベンチマークに対する相対強さ（12M/1Mリターン差） |
L172       | TR_str | `tr_str` | 価格と50日移動平均の乖離 |
L173       | RS_SLOPE_6W | `rs_line_slope` | 相対強さ線の6週回帰傾き |
L174       | RS_SLOPE_13W | `rs_line_slope` | 相対強さ線の13週回帰傾き |
L175       | MA200_SLOPE_5M | - | 200日移動平均の5か月騰落率 |
L176       | MA200_UP_STREAK_D | - | 200日線が連続で上向いた日数 |
L177       | BETA | `calc_beta` | ベンチマークに対するβ |
L178       | DOWNSIDE_DEV | - | 下方リターンのみの年率化標準偏差 |
L179       | RESID_VOL | - | βで調整した残差リターンの年率化標準偏差 |
L180       | MDD_1Y | - | 過去1年の最大ドローダウン |
L181       | DOWN_OUTPERF | - | 市場下落日に対する平均超過リターン |
L182       | EXT_200 | - | 200日移動平均からの絶対乖離率 |
L183       | NEAR_52W_HIGH | - | 52週高値までの下方距離（0=高値） |
L184       | FCF_W | - | ウィンザー処理後のFCF/EV |
L185       | ROE_W | - | ウィンザー処理後のROE |
L186       | FCF | - | FCF/EV |
L187       | QAL | - | FCF_WとROE_Wを組み合わせた品質スコア |
L188       | CURR_RATIO | - | 流動比率 |
L189       | DEBT2EQ | - | 負債資本倍率 |
L190       | EPS_VAR_8Q | - | EPSの8四半期標準偏差 |
L191       | DIV | - | 年率換算配当利回り |
L192       | DIV_STREAK | `div_streak` | 連続増配年数 |
L193       | DIV_FCF_COVER | - | 配当のFCFカバレッジ |
L194       | DIV_VAR5 | - | 5年配当変動率 |
L195       | DIV_TTM_PS | - | 1株当たりTTM配当 |
L196       | DIV_YOY | - | 前年比配当成長率 |
L197       | REV | - | 売上成長率TTM |
L198       | EPS_Q_YOY | - | 四半期EPSの前年同期比 |
L199       | REV_Q_YOY | - | 四半期売上の前年同期比 |
L200       | REV_YOY_ACC | - | 売上成長率の加速分 |
L201       | RULE40 | - | 売上成長率とFCFマージンの合計 |
L202       | FCF_MGN | - | FCFマージン |
L203       | REV_ANN_STREAK | - | 年次売上成長の連続年数 |
L204       | REV_YOY_VAR | - | 年次売上成長率の変動性 |
L205       | SIZE | - | 時価総額の対数値 |
L206       | LIQ | - | 60日平均出来高ドルの対数値 |
L207    - Gバケット: `GRW`、`MOM`、`VOL`を`cfg.weights.g`（0.40/0.45/-0.15）で加重し`g_score`を得る。
L208    - Dバケット: `D_QAL`、`D_YLD`、`D_VOL_RAW`、`D_TRD`を`cfg.weights.d`（0.15/0.15/-0.45/0.25）で加重し`d_score_all`を算出。
L209    - セクターcapによる`soft_cap_effective_scores`を適用し、G採用銘柄にはトレンドテンプレートフィルタを適用。
L210 5. `_apply_growth_entry_flags`でブレイクアウト/押し目発火状況を付加し、`FeatureBundle`を返す。
L211
L212 ### Step3: Correlation Reduction & Selection (Selector)
L213 DRRSアルゴリズムで相関を抑えた銘柄選定を行い、`SelectionBundle`を返す。`results/`に保存された前回選定（`G_selection.json` / `D_selection.json`）を`_load_prev`で読み込み、目的値が大きく悪化しない限り維持する。新しい採用集合は`_save_sel`でJSONに書き出し次回以降の入力に備える。
L214 主なメソッド:
L215 - `residual_corr` : 収益率行列をZスコア化し、上位主成分を除去した残差から相関行列を求め、平均相関に応じてシュリンク。
L216 - `rrqr_like_det` : スコアを重み付けしたQR分解風の手順で初期候補をk件抽出し、スコアの高い非相関な集合を得る。
L217 - `swap_local_det` / `swap_local_det_cross` : `sum(score) - λ*within_corr - μ*cross_corr`を目的関数として、入れ替え探索で局所的に最適化。
L218 - `select_bucket_drrs` : プール銘柄とスコアから残差相関を計算し、上記2段階(初期選択→入れ替え)でk銘柄を決定。過去採用銘柄との比較で目的値が劣化しなければ維持する。
L219 - `select_buckets` : Gバケットを選定後、その結果を除いた候補からDバケットを選ぶ。D選定時はGとの相関ペナルティμを付与し、両バケットの分散を制御する。
L220
L221 #### 相関低減ロジック詳細
L222 1. **残差相関行列の構築 (`residual_corr`)**
L223    - リターン行列`R`をZスコア化。
L224    - SVDで上位`n_pc`主成分`F`を求め、最小二乗で係数`B`を算出し残差`E = Z - F@B`を得る。
L225    - `E`の相関行列`C`を計算し、平均絶対相関に応じてシュリンク量`shrink_eff`を補正して対角を強調。
L226 2. **初期候補の抽出 (`rrqr_like_det`)**
L227    - スコアを0-1正規化した重み`w`とし、`Z*(1+γw)`で列ノルムを強調。
L228    - 残差ノルム最大の列を逐次選び、QRライクなデフレーションを行って非相関かつ高スコアな`k`銘柄集合`S0`を得る。
L229 3. **局所探索 (`swap_local_det` / `swap_local_det_cross`)**
L230    - 目的関数`Σz_score − λ·within_corr − μ·cross_corr`を最大化。
L231    - 選択集合の各銘柄を他候補と入れ替え、改善がなくなるまでまたは`max_pass`回まで探索。
L232    - `swap_local_det_cross`はGバケットとのクロス相関行列`C_cross`を使用し、ペナルティ`μ`を付与。
L233 4. **過去採用の維持とクロスペナルティ (`select_bucket_drrs` / `select_buckets`)**
L234    - 局所探索結果`S`と過去集合`P`の目的値を比較し、`S`が`P`より`η`未満の改善なら`P`を維持。
L235    - `select_buckets`ではGを先に決定し、D選定時にGとの相関ペナルティ`μ`を加えてクロス分散を抑制。
L236
L237 ### Step4: Output
L238 選定結果を可視化し共有する工程。以下の内容をテーブル化して標準出力とSlackへ送る。
L239 - 採用銘柄と惜しくも選外となった銘柄のスコア一覧
L240 - IN/OUTリストとOUT銘柄のスコア（低得点銘柄を確認しやすく）
L241 - 新旧ポートフォリオの比較表（組入れ・除外、スコア変化）
L242 - 検討中銘柄の低スコアランキング
L243
L244 主なメソッド:
L245 - `display_results` : 上記テーブルに加えパフォーマンス指標や分散化指標を表示。
L246 - `notify_slack` : Slack Webhookへ同内容を送信。
L247 - 補助:`_avg_offdiag`、`_resid_avg_rho`、`_raw_avg_rho`、`_cross_block_raw_rho`。
L248
L249 ## エントリポイント
L250 1. `PipelineConfig`を構築。
L251 2. **Step1** `Input.prepare_data`で`InputBundle`を生成。
L252 3. **Step2** `Scorer.aggregate_scores`で`FeatureBundle`を取得。
L253 4. **Step3** `Selector.select_buckets`で`SelectionBundle`を算出。
L254 5. **Step4** `Output.display_results`と`notify_slack`で結果を出力。
```
