# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: config.py, factor.py, scorer.py, .github/workflows/weekly-report.yml, documents/README.md, documents/factor_design.md
# 作成日時: 2025-09-19 22:29:09 (JST)
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <config.py>
```text
L1 # 共通設定（factor / drift から参照）
L2 TOTAL_TARGETS = 20
L3
L4 # 基準のバケット数（NORMAL）
L5 COUNTS_BASE = {"G": 12, "D": 8}
L6
L7 # モード別の推奨バケット数
L8 COUNTS_BY_MODE = {
L9     "NORMAL": {"G": 12, "D": 8},
L10     "CAUTION": {"G": 10, "D": 8},
L11     "EMERG": {"G": 8,  "D": 8},
L12 }
L13
L14 # モード別のドリフト閾値（%）
L15 DRIFT_THRESHOLD_BY_MODE = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L16
L17 # モード別のTS（基本幅, 小数=割合）
L18 TS_BASE_BY_MODE = {"NORMAL": 0.15, "CAUTION": 0.13, "EMERG": 0.10}
L19 # 利益到達(+30/+60/+100%)時の段階タイト化（ポイント差）
L20 TS_STEP_DELTAS_PT = (3, 6, 8)
L21
L22 # Breadthの校正は N_G に連動（緊急解除=ceil(1.5*N_G), 通常復帰=3*N_G）
L23 N_G = COUNTS_BASE["G"]
L24 N_D = COUNTS_BASE["D"]
L25
```

## <factor.py>
```text
L1 '''ROLE: Orchestration ONLY（外部I/O・SSOT・Slack出力）, 計算は scorer.py'''
L2 # === NOTE: 機能・入出力・ログ文言・例外挙動は不変。安全な短縮（import統合/複数代入/内包表記/メソッドチェーン/一行化/空行圧縮など）のみ適用 ===
L3 BONUS_COEFF = 0.55  # 推奨: 攻め=0.45 / 中庸=0.55 / 守り=0.65
L4 SWAP_DELTA_Z = 0.15   # 僅差判定: σの15%。(緩め=0.10 / 標準=0.15 / 固め=0.20)
L5 SWAP_KEEP_BUFFER = 3  # n_target+この順位以内の現行は保持。(粘り弱=2 / 標準=3 / 粘り強=4〜5)
L6 import logging, os, time, requests
L7 from concurrent.futures import ThreadPoolExecutor
L8 from dataclasses import dataclass
L9 from time import perf_counter
L10 from typing import Any, Dict, List, Tuple
L11
L12 import numpy as np
L13 import pandas as pd
L14 import yfinance as yf
L15 from scipy.stats import zscore  # used via scorer
L16
L17 from scorer import Scorer, ttm_div_yield_portfolio, _log
L18 import config
L19
L20 # その他
L21 debug_mode, FINNHUB_API_KEY = True, os.environ.get("FINNHUB_API_KEY")
L22
L23 logger = logging.getLogger(__name__)
L24 logging.basicConfig(level=(logging.INFO if debug_mode else logging.WARNING), force=True)
L25
L26 class T:
L27     t = perf_counter()
L28
L29     @staticmethod
L30     def log(tag):
L31         now = perf_counter()
L32         print(f"[T] {tag}: {now - T.t:.2f}s")
L33         T.t = now
L34
L35 T.log("start")
L36
L37 # === ユニバースと定数（冒頭に固定） ===
L38 exist, cand = [pd.read_csv(f, header=None)[0].tolist() for f in ("current_tickers.csv","candidate_tickers.csv")]
L39 T.log(f"csv loaded: exist={len(exist)} cand={len(cand)}")
L40 CAND_PRICE_MAX, bench = 450, '^GSPC'  # 価格上限・ベンチマーク
L41 N_G, N_D = config.N_G, config.N_D  # G/D枠サイズ（NORMAL基準: G12/D8）
L42 g_weights = {'GROWTH_F':0.35,'MOM':0.55,'VOL':-0.10}
L43 D_BETA_MAX = float(os.environ.get("D_BETA_MAX", "0.8"))
L44 FILTER_SPEC = {"G":{"pre_mask":["trend_template"]},"D":{"pre_filter":{"beta_max":D_BETA_MAX}}}
L45 D_weights = {'QAL':0.1,'YLD':0.3,'VOL':-0.5,'TRD':0.1}
L46 _fmt_w = lambda w: " ".join(f"{k}{int(v*100)}" for k, v in w.items())
L47
L48 # DRRS 初期プール・各種パラメータ
L49 corrM = 45
L50 DRRS_G, DRRS_D = dict(lookback=252,n_pc=3,gamma=1.2,lam=0.68,eta=0.8), dict(lookback=504,n_pc=4,gamma=0.8,lam=0.85,eta=0.5)
L51 DRRS_SHRINK = 0.10  # 残差相関の対角シュリンク（基礎）
L52
L53 # クロス相関ペナルティ（未定義なら設定）
L54 try: CROSS_MU_GD
L55 except NameError: CROSS_MU_GD = 0.40  # 推奨 0.35–0.45（lam=0.85想定）
L56
L57 # 出力関連
L58 RESULTS_DIR = "results"
L59 os.makedirs(RESULTS_DIR, exist_ok=True)
L60
L61 # === 共有DTO（クラス間I/O契約）＋ Config ===
L62 @dataclass(frozen=True)
L63 class InputBundle:
L64     # Input → Scorer で受け渡す素材（I/O禁止の生データ）
L65     cand: List[str]
L66     tickers: List[str]
L67     bench: str
L68     data: pd.DataFrame              # yfinance download結果（'Close','Volume'等の階層列）
L69     px: pd.DataFrame                # data['Close']
L70     spx: pd.Series                  # data['Close'][bench]
L71     tickers_bulk: object            # yfinance.Tickers
L72     info: Dict[str, dict]           # yfinance info per ticker
L73     eps_df: pd.DataFrame            # ['eps_ttm','eps_q_recent',...]
L74     fcf_df: pd.DataFrame            # ['fcf_ttm', ...]
L75     returns: pd.DataFrame           # px[tickers].pct_change()
L76
L77 @dataclass(frozen=True)
L78 class FeatureBundle:
L79     df: pd.DataFrame
L80     df_z: pd.DataFrame
L81     g_score: pd.Series
L82     d_score_all: pd.Series
L83     missing_logs: pd.DataFrame
L84     df_full: pd.DataFrame | None = None
L85     df_full_z: pd.DataFrame | None = None
L86     scaler: Any | None = None
L87
L88 @dataclass(frozen=True)
L89 class SelectionBundle:
L90     resG: dict
L91     resD: dict
L92     top_G: List[str]
L93     top_D: List[str]
L94     init_G: List[str]
L95     init_D: List[str]
L96
L97 @dataclass(frozen=True)
L98 class WeightsConfig:
L99     g: Dict[str,float]
L100     d: Dict[str,float]
L101
L102 @dataclass(frozen=True)
L103 class DRRSParams:
L104     corrM: int
L105     shrink: float
L106     G: Dict[str,float]   # lookback, n_pc, gamma, lam, eta
L107     D: Dict[str,float]
L108     cross_mu_gd: float
L109
L110 @dataclass(frozen=True)
L111 class PipelineConfig:
L112     weights: WeightsConfig
L113     drrs: DRRSParams
L114     price_max: float
L115     debug_mode: bool = False
L116
L117 # === 共通ユーティリティ（複数クラスで使用） ===
L118 # (unused local utils removed – use scorer.py versions if needed)
L119
L120 _env_true = lambda name, default=False: (os.getenv(name) or str(default)).strip().lower() == "true"
L121
L122 def _post_slack(payload: dict):
L123     url = os.getenv("SLACK_WEBHOOK_URL")
L124     if not url: print("⚠️ SLACK_WEBHOOK_URL 未設定"); return
L125     try:
L126         requests.post(url, json=payload).raise_for_status()
L127     except Exception as e:
L128         print(f"⚠️ Slack通知エラー: {e}")
L129
L130 def _slack_send_text_chunks(url: str, text: str, chunk: int = 2800) -> None:
L131     """Slackへテキストを分割送信（コードブロック形式）。"""
L132
L133     def _post_text(payload: str) -> None:
L134         try:
L135             resp = requests.post(url, json={"text": payload})
L136             print(f"[DBG] debug_post status={getattr(resp,'status_code',None)} size={len(payload)}")
L137             if resp is not None:
L138                 resp.raise_for_status()
L139         except Exception as e:
L140             print(f"[ERR] debug_post_failed: {e}")
L141
L142     body = (text or "").strip()
L143     if not body:
L144         print("[DBG] skip debug send: empty body")
L145         return
L146
L147     block, block_len = [], 0
L148
L149     def _flush():
L150         nonlocal block, block_len
L151         if block:
L152             _post_text("```" + "\n".join(block) + "```")
L153             block, block_len = [], 0
L154
L155     for raw in body.splitlines():
L156         line = raw or ""
L157         while len(line) > chunk:
L158             head, line = line[:chunk], line[chunk:]
L159             _flush()
L160             _post_text("```" + head + "```")
L161         add_len = len(line) if not block else len(line) + 1
L162         if block and block_len + add_len > chunk:
L163             _flush(); add_len = len(line)
L164         block.append(line)
L165         block_len += add_len
L166     _flush()
L167
L168 def _disjoint_keepG(top_G, top_D, poolD):
L169     """G重複をDから除去し、poolDで順次補充（枯渇時は元銘柄維持）。"""
L170     used, D, i = set(top_G), list(top_D), 0
L171     for j, t in enumerate(D):
L172         if t not in used:
L173             continue
L174         while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L175             i += 1
L176         if i < len(poolD):
L177             D[j] = poolD[i]; used.add(D[j]); i += 1
L178     return top_G, D
L179
L180
L181 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L182                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L183     import pandas as pd, numpy as np
L184     sel = list(pick)
L185     if not sel: return sel
L186     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L187     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L188     std = agg.std()
L189     sigma = float(std) if pd.notna(std) else 0.0
L190     thresh = kth - delta_z * sigma
L191     ranked_all = agg.sort_values(ascending=False)
L192     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L193     for t in cand:
L194         within_score = pd.notna(agg[t]) and agg[t] >= thresh
L195         within_rank = t in ranked_all.index and ranked_all.index.get_loc(t) < n_target + keep_buffer
L196         if not (within_score or within_rank):
L197             continue
L198         non_inc = [x for x in sel if x not in incumbents]
L199         if not non_inc:
L200             break
L201         weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L202         if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L203             sel.remove(weakest); sel.append(t)
L204     if len(sel) > n_target:
L205         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L206     return sel
L207
L208
L209 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L210 class Input:
L211     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L212         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L213         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L214
L215     # ---- （Input専用）EPS補完・FCF算出系 ----
L216     @staticmethod
L217     def _sec_headers():
L218         mail = (os.getenv("SEC_CONTACT_EMAIL") or "yasonba55@gmail.com").strip()
L219         app = (os.getenv("SEC_APP_NAME") or "FactorBot/1.0").strip()
L220         return {"User-Agent": f"{app} ({mail})", "From": mail, "Accept": "application/json"}
L221
L222     @staticmethod
L223     def _sec_get(url: str, retries: int = 3, backoff: float = 0.5):
L224         for i in range(retries):
L225             r = requests.get(url, headers=Input._sec_headers(), timeout=20)
L226             if r.status_code in (429, 503, 403):
L227                 time.sleep(min(2 ** i * backoff, 8.0))
L228                 continue
L229             r.raise_for_status(); return r.json()
L230         r.raise_for_status()
L231
L232     @staticmethod
L233     def _sec_ticker_map():
L234         j = Input._sec_get("https://data.sec.gov/api/xbrl/company_tickers.json")
L235         mp = {}
L236         for _, v in (j or {}).items():
L237             try:
L238                 mp[str(v["ticker"]).upper()] = f"{int(v['cik_str']):010d}"
L239             except Exception:
L240                 continue
L241         return mp
L242
L243     # --- 追加: ADR/OTC向けの簡易正規化（末尾Y/F, ドット等） ---
L244     @staticmethod
L245     def _normalize_ticker(sym: str) -> list[str]:
L246         s = (sym or "").upper().strip()
L247         # 追加: 先頭の$や全角の記号を除去
L248         s = s.lstrip("$").replace("＄", "").replace("．", ".").replace("－", "-")
L249         cand: list[str] = []
L250
L251         def add(x: str) -> None:
L252             if x and x not in cand:
L253                 cand.append(x)
L254
L255         # 1) 原文を最優先（SECは BRK.B, BF.B など . を正式採用）
L256         add(s)
L257         # 2) Yahoo系バリアント（. と - の揺れを相互に）
L258         if "." in s:
L259             add(s.replace(".", "-"))
L260             add(s.replace(".", ""))
L261         if "-" in s:
L262             add(s.replace("-", "."))
L263             add(s.replace("-", ""))
L264         # 3) ドット・ハイフン・ピリオド無し版（最後の保険）
L265         add(s.replace("-", "").replace(".", ""))
L266         # 4) ADR簡易：末尾Y/Fの除去（SECマップは本体ティッカーを持つことがある）
L267         if len(s) >= 2 and s[-1] in {"Y", "F"}:
L268             add(s[:-1])
L269         return cand
L270
L271     @staticmethod
L272     def _sec_companyfacts(cik: str):
L273         return Input._sec_get(f"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik}.json")
L274
L275     @staticmethod
L276     def _units_for_tags(facts: dict, namespaces: list[str], tags: list[str]) -> list[dict]:
L277         """facts から namespace/tag を横断して units 配列を収集（存在順に連結）。"""
L278         out: list[dict] = []
L279         facts = (facts or {}).get("facts", {})
L280         for ns in namespaces:
L281             node = facts.get(ns, {}) if isinstance(facts, dict) else {}
L282             for tg in tags:
L283                 try:
L284                     units = node[tg]["units"]
L285                 except Exception:
L286                     continue
L287                 picks: list[dict] = []
L288                 if "USD/shares" in units:
L289                     picks.extend(list(units["USD/shares"]))
L290                 if "USD" in units:
L291                     picks.extend(list(units["USD"]))
L292                 if not picks:
L293                     for arr in units.values():
L294                         picks.extend(list(arr))
L295                 out.extend(picks)
L296         return out
L297
L298     @staticmethod
L299     def _only_quarterly(arr: list[dict]) -> list[dict]:
L300         """companyfactsの混在配列から『四半期』だけを抽出。
L301
L302         - frame に "Q" を含む（例: CY2024Q2I）
L303         - fp が Q1/Q2/Q3/Q4
L304         - form が 10-Q/10-Q/A/6-K
L305         """
L306         if not arr:
L307             return []
L308         q_forms = {"10-Q", "10-Q/A", "6-K"}
L309         out = [
L310             x
L311             for x in arr
L312             if (
L313                 "Q" in (x.get("frame") or "").upper()
L314                 or (x.get("fp") or "").upper() in {"Q1", "Q2", "Q3", "Q4"}
L315                 or (x.get("form") or "").upper() in q_forms
L316             )
L317         ]
L318         out.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L319         return out
L320
L321     @staticmethod
L322     def _series_from_facts_with_dates(arr, key_val="val", key_dt="end", normalize=float):
L323         """companyfactsアイテム配列から (date,value) を返す。dateはYYYY-MM-DDを想定。"""
L324         out: List[Tuple[str, float]] = []
L325         for x in (arr or []):
L326             try:
L327                 d = x.get(key_dt)
L328                 if d is None:
L329                     continue
L330                 v = x.get(key_val)
L331                 out.append((str(d), normalize(v) if v is not None else float("nan")))
L332             except Exception:
L333                 continue
L334         out.sort(key=lambda t: t[0], reverse=True)
L335         return out
L336
L337     def fetch_eps_rev_from_sec(self, tickers: list[str]) -> dict:
L338         out = {}
L339         t2cik = self._sec_ticker_map()
L340         n_map = n_rev = n_eps = 0
L341         miss_map: list[str] = []
L342         miss_facts: list[str] = []
L343         for t in tickers:
L344             base = (t or "").upper()
L345             candidates: list[str] = []
L346             for key in [base, *self._normalize_ticker(t)]:
L347                 if key and key not in candidates:
L348                     candidates.append(key)
L349             cik = next((t2cik.get(key) for key in candidates if t2cik.get(key)), None)
L350             if not cik:
L351                 out[t] = {}
L352                 miss_map.append(t)
L353                 continue
L354             try:
L355                 j = self._sec_companyfacts(cik)
L356                 facts = j or {}
L357                 rev_tags = [
L358                     "Revenues",
L359                     "RevenueFromContractWithCustomerExcludingAssessedTax",
L360                     "SalesRevenueNet",
L361                     "SalesRevenueGoodsNet",
L362                     "SalesRevenueServicesNet",
L363                     "Revenue",
L364                 ]
L365                 eps_tags = [
L366                     "EarningsPerShareDiluted",
L367                     "EarningsPerShareBasicAndDiluted",
L368                     "EarningsPerShare",
L369                     "EarningsPerShareBasic",
L370                 ]
L371                 rev_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], rev_tags)
L372                 eps_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], eps_tags)
L373                 rev_q_items = self._only_quarterly(rev_arr)
L374                 eps_q_items = self._only_quarterly(eps_arr)
L375                 # (date,value) で取得
L376                 rev_pairs = self._series_from_facts_with_dates(rev_q_items)
L377                 eps_pairs = self._series_from_facts_with_dates(eps_q_items)
L378                 rev_vals = [v for (_d, v) in rev_pairs]
L379                 eps_vals = [v for (_d, v) in eps_pairs]
L380                 rev_q = float(rev_vals[0]) if rev_vals else float("nan")
L381                 eps_q = float(eps_vals[0]) if eps_vals else float("nan")
L382                 rev_ttm = float(sum(v for v in rev_vals[:4] if v == v)) if rev_vals else float("nan")
L383                 eps_ttm = float(sum(v for v in eps_vals[:4] if v == v)) if eps_vals else float("nan")
L384                 out[t] = {
L385                     "eps_q_recent": eps_q,
L386                     "eps_ttm": eps_ttm,
L387                     "rev_q_recent": rev_q,
L388                     "rev_ttm": rev_ttm,
L389                     # 後段でDatetimeIndex化できるよう (date,value) を保持。値だけの互換キーも残す。
L390                     "eps_q_series_pairs": eps_pairs[:16],
L391                     "rev_q_series_pairs": rev_pairs[:16],
L392                     "eps_q_series": eps_vals[:16],
L393                     "rev_q_series": rev_vals[:16],
L394                 }
L395                 n_map += 1
L396                 if rev_vals:
L397                     n_rev += 1
L398                 if eps_vals:
L399                     n_eps += 1
L400             except Exception:
L401                 out[t] = {}
L402                 miss_facts.append(t)
L403             time.sleep(0.30)
L404         # 取得サマリをログ（Actionsで確認しやすいよう print）
L405         try:
L406             total = len(tickers)
L407             print(f"[SEC] map={n_map}/{total}  rev_q_hit={n_rev}  eps_q_hit={n_eps}")
L408             # デバッグ: 取得本数の分布（先頭のみ）
L409             try:
L410                 lens = [len((out.get(t, {}) or {}).get("rev_q_series", [])) for t in tickers]
L411                 print(f"[SEC] rev_q_series length: min={min(lens) if lens else 0} "
L412                       f"p25={np.percentile(lens,25) if lens else 0} median={np.median(lens) if lens else 0} "
L413                       f"p75={np.percentile(lens,75) if lens else 0} max={max(lens) if lens else 0}")
L414             except Exception:
L415                 pass
L416             if miss_map:
L417                 print(f"[SEC] no CIK map: {len(miss_map)} (サンプル例) {miss_map[:20]}")
L418             if miss_facts:
L419                 print(f"[SEC] CIKあり だが対象factなし: {len(miss_facts)} (サンプル例) {miss_facts[:20]}")
L420         except Exception:
L421             pass
L422         return out
L423
L424     def sec_dryrun_sample(self, tickers: list[str] | None = None) -> None:
L425         if not _env_true("SEC_DRYRUN_SAMPLE", False):
L426             return
L427         sample = tickers or ["BRK.B", "BF.B", "GOOGL", "META", "UBER", "PBR.A", "TSM", "NARI", "EVBN", "SWAV"]
L428         print(f"[SEC-DRYRUN] sample tickers: {sample}")
L429         try:
L430             t2cik = self._sec_ticker_map()
L431             hits = 0
L432             for sym in sample:
L433                 candidates: list[str] = []
L434
L435                 def add(key: str) -> None:
L436                     if key and key not in candidates:
L437                         candidates.append(key)
L438
L439                 add((sym or "").upper())
L440                 for alt in self._normalize_ticker(sym):
L441                     add(alt)
L442                 if any(t2cik.get(key) for key in candidates):
L443                     hits += 1
L444             sec_data = self.fetch_eps_rev_from_sec(sample)
L445             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L446             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L447             total = len(sample)
L448             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L449         except Exception as e:
L450             print(f"[SEC-DRYRUN] error: {e}")
L451     @staticmethod
L452     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L453         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L454         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L455         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L456
L457     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L458
L459     @staticmethod
L460     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L461         if df is None or df.empty: return None
L462         idx_lower={str(i).lower():i for i in df.index}
L463         for n in names:
L464             k=n.lower()
L465             if k in idx_lower: return df.loc[idx_lower[k]]
L466         return None
L467
L468     @staticmethod
L469     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L470         if s is None or s.empty: return None
L471         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L472
L473     @staticmethod
L474     def _latest(s: pd.Series|None) -> float|None:
L475         if s is None or s.empty: return None
L476         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L477
L478     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L479         from concurrent.futures import ThreadPoolExecutor, as_completed
L480         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L481
L482         def one(t: str):
L483             try:
L484                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L485                 qcf = tk.quarterly_cashflow
L486                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L487                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L488                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L489                 if any(v is None for v in (cfo, capex, fcf)):
L490                     acf = tk.cashflow
L491                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L492                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L493                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L494             except Exception as e:
L495                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L496             n=np.nan
L497             return {"ticker":t,
L498                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L499                     "capex_ttm_yf": n if capex is None else capex,
L500                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L501
L502         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L503         with ThreadPoolExecutor(max_workers=mw) as ex:
L504             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L505         return pd.DataFrame(rows).set_index("ticker")
L506
L507     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L508     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L509
L510     @staticmethod
L511     def _first_key(d: dict, keys: list[str]):
L512         for k in keys:
L513             if k in d and d[k] is not None: return d[k]
L514         return None
L515
L516     @staticmethod
L517     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L518         for i in range(retries):
L519             r = session.get(url, params=params, timeout=15)
L520             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L521             r.raise_for_status(); return r.json()
L522         r.raise_for_status()
L523
L524     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L525         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L526         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L527         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L528         for sym in tickers:
L529             cfo_ttm = capex_ttm = None
L530             try:
L531                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L532                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L533                 for item in arr[:4]:
L534                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L535                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L536                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L537             except Exception: pass
L538             if cfo_ttm is None or capex_ttm is None:
L539                 try:
L540                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L541                     arr = j.get("cashFlow") or []
L542                     if arr:
L543                         item0 = arr[0]
L544                         if cfo_ttm is None:
L545                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L546                             if v is not None: cfo_ttm = float(v)
L547                         if capex_ttm is None:
L548                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L549                             if v is not None: capex_ttm = float(v)
L550                 except Exception: pass
L551             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L552         return pd.DataFrame(rows).set_index("ticker")
L553
L554     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L555         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L556         T.log("financials (yf) done")
L557         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L558         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L559         if need:
L560             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L561             df = yf_df.join(fh_df, how="left")
L562             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L563                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L564             print("[T] financials (finnhub) done (fallback only)")
L565         else:
L566             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L567             print("[T] financials (finnhub) skipped (no missing)")
L568         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L569         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L570         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L571         fcf_calc = cfo - capex
L572         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L573         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L574         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L575         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L576         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L577         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L578         return df[cols].sort_index()
L579
L580     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L581         eps_rows=[]
L582         for t in tickers:
L583             info_t = info[t]
L584             sec_t = (sec_map or {}).get(t, {})
L585             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L586             eps_q = sec_t.get("eps_q_recent", np.nan)
L587             try:
L588                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L589                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L590                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L591                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L592                     if pd.isna(eps_q):
L593                         eps_q = qearn["Earnings"].iloc[-1]/so
L594             except Exception: pass
L595             rev_ttm = sec_t.get("rev_ttm", np.nan)
L596             rev_q = sec_t.get("rev_q_recent", np.nan)
L597             if (not sec_t) or pd.isna(rev_ttm):
L598                 try:
L599                     tk = tickers_bulk.tickers[t]
L600                     qfin = getattr(tk, "quarterly_financials", None)
L601                     if qfin is not None and not qfin.empty:
L602                         idx_lower = {str(i).lower(): i for i in qfin.index}
L603                         rev_idx = None
L604                         for name in ("Total Revenue", "TotalRevenue"):
L605                             key = name.lower()
L606                             if key in idx_lower:
L607                                 rev_idx = idx_lower[key]
L608                                 break
L609                         if rev_idx is not None:
L610                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L611                             if not rev_series.empty:
L612                                 rev_ttm_yf = float(rev_series.head(4).sum())
L613                                 if pd.isna(rev_ttm):
L614                                     rev_ttm = rev_ttm_yf
L615                                 if pd.isna(rev_q):
L616                                     rev_q = float(rev_series.iloc[0])
L617                 except Exception:
L618                     pass
L619             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q,"rev_ttm":rev_ttm,"rev_q_recent":rev_q})
L620         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L621
L622     def prepare_data(self):
L623         """Fetch price and fundamental data for all tickers."""
L624         self.sec_dryrun_sample()
L625         cand_info = yf.Tickers(" ".join(self.cand))
L626
L627         def _price(t: str) -> float:
L628             try:
L629                 return cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L630             except Exception as e:
L631                 print(f"{t}: price fetch failed ({e})")
L632                 return np.inf
L633
L634         cand_prices = {t: _price(t) for t in self.cand}
L635         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L636         T.log("price cap filter done (CAND_PRICE_MAX)")
L637         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L638         tickers = list(dict.fromkeys(self.exist + cand_f))
L639         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L640         data = yf.download(tickers + [self.bench], period="600d",
L641                            auto_adjust=True, progress=False, threads=False)
L642         T.log("yf.download done")
L643         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L644         spx = data["Close"][self.bench].reindex(px.index).ffill()
L645         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L646         if clip_days > 0:
L647             px, spx = px.tail(clip_days + 1), spx.tail(clip_days + 1)
L648             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)
L649         else:
L650             logger.info("[T] price window clip skipped; rows=%d", len(px))
L651         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L652         for t in tickers:
L653             try:
L654                 info[t] = tickers_bulk.tickers[t].info
L655             except Exception as e:
L656                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L657                 info[t] = {}
L658         try:
L659             sec_map = self.fetch_eps_rev_from_sec(tickers)
L660         except Exception as e:
L661             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L662             sec_map = {}
L663
L664         def _brief_len(s):
L665             try:
L666                 if isinstance(s, pd.Series):
L667                     return int(s.dropna().size)
L668                 if isinstance(s, (list, tuple)):
L669                     return len([v for v in s if pd.notna(v)])
L670                 if isinstance(s, np.ndarray):
L671                     return int(np.count_nonzero(~pd.isna(s)))
L672                 return int(bool(s))
L673             except Exception:
L674                 return 0
L675
L676         def _has_entries(val) -> bool:
L677             try:
L678                 if isinstance(val, pd.Series):
L679                     return not val.dropna().empty
L680                 if isinstance(val, (list, tuple)):
L681                     return any(pd.notna(v) for v in val)
L682                 return bool(val)
L683             except Exception:
L684                 return False
L685
L686         have_rev = 0
L687         have_eps = 0
L688         rev_lens: list[int] = []
L689         eps_lens: list[int] = []
L690         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L691
L692         for t in tickers:
L693             entry = info.get(t, {})
L694             m = (sec_map or {}).get(t) or {}
L695             if entry is None or not isinstance(entry, dict):
L696                 entry = {}
L697                 info[t] = entry
L698
L699             if m:
L700                 pairs_r = m.get("rev_q_series_pairs") or []
L701                 pairs_e = m.get("eps_q_series_pairs") or []
L702                 if pairs_r:
L703                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L704                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L705                     s = pd.Series(val, index=idx).sort_index()
L706                     entry["SEC_REV_Q_SERIES"] = s
L707                 else:
L708                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L709                 if pairs_e:
L710                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L711                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L712                     s = pd.Series(val, index=idx).sort_index()
L713                     entry["SEC_EPS_Q_SERIES"] = s
L714                 else:
L715                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L716
L717             r = entry.get("SEC_REV_Q_SERIES")
L718             e = entry.get("SEC_EPS_Q_SERIES")
L719             if _has_entries(r):
L720                 have_rev += 1
L721             if _has_entries(e):
L722                 have_eps += 1
L723             lr = _brief_len(r)
L724             le = _brief_len(e)
L725             rev_lens.append(lr)
L726             eps_lens.append(le)
L727             if len(samples) < 8:
L728                 try:
L729                     rd = getattr(r, "index", [])[-1] if lr > 0 else None
L730                     rv = float(r.iloc[-1]) if lr > 0 else None
L731                     ed = getattr(e, "index", [])[-1] if le > 0 else None
L732                     ev = float(e.iloc[-1]) if le > 0 else None
L733                     samples.append((t, lr, str(rd) if rd is not None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L734                 except Exception:
L735                     samples.append((t, lr, "-", None, le, "-", None))
L736
L737         logger.info("[SEC] series attach: rev_q=%d/%d, eps_q=%d/%d", have_rev, len(tickers), have_eps, len(tickers))
L738
L739         if rev_lens:
L740             rev_lens_sorted = sorted(rev_lens)
L741             eps_lens_sorted = sorted(eps_lens)
L742             _log(
L743                 "SEC_SERIES",
L744                 f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L745                 f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L746             )
L747         for (t, lr, rd, rv, le, ed, ev) in samples:
L748             _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L749         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L750         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L751         if not eps_df.index.is_unique:
L752             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L753         eps_df = eps_df.assign(
L754             EPS_TTM=eps_df["eps_ttm"],
L755             EPS_Q_LastQ=eps_df["eps_q_recent"],
L756             REV_TTM=eps_df["rev_ttm"],
L757             REV_Q_LastQ=eps_df["rev_q_recent"],
L758         )
L759         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L760         try:
L761             n = len(eps_df)
L762             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L763             c_rev = int(eps_df["REV_TTM"].notna().sum())
L764             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L765         except Exception:
L766             pass
L767         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L768         T.log("eps/fcf prep done")
L769         returns = px[tickers].pct_change()
L770         T.log("price prep/returns done")
L771         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L772
L773 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L774 class Selector:
L775     # ---- DRRS helpers（Selector専用） ----
L776     @staticmethod
L777     def _z_np(X: np.ndarray) -> np.ndarray:
L778         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L779         return (np.nan_to_num(X)-m)/s
L780
L781     @classmethod
L782     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L783         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L784         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L785         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L786         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L787         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L788
L789     @classmethod
L790     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L791         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L792         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L793         if k==0: return []
L794         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L795         for _ in range(k):
L796             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L797             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L798             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L799         return sorted(S)
L800
L801     @staticmethod
L802     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L803         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L804         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L805
L806     @classmethod
L807     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L808         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L809         while improved and passes<max_pass:
L810             improved, passes = False, passes+1
L811             for i,out in enumerate(list(S)):
L812                 for inn in range(len(score)):
L813                     if inn in S: continue
L814                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L815                     if v>best+1e-10: S, best, improved = cand, v, True; break
L816                 if improved: break
L817         return S, best
L818
L819     @staticmethod
L820     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L821         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L822         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L823         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L824         return float(s[idx].sum() - lam*within - mu*cross)
L825
L826     @classmethod
L827     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L828         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L829         while improved and passes<max_pass:
L830             improved, passes = False, passes+1
L831             for i,out in enumerate(list(S)):
L832                 for inn in range(N):
L833                     if inn in S: continue
L834                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L835                     if v>best+1e-10: S, best, improved = cand, v, True; break
L836                 if improved: break
L837         return S, best
L838
L839     @staticmethod
L840     def avg_corr(C: np.ndarray, idx) -> float:
L841         k = len(idx); P = C[np.ix_(idx, idx)]
L842         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L843
L844     @classmethod
L845     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L846         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L847         union = [t for t in pool_tickers if t in returns_df.columns]
L848         for t in g_fixed:
L849             if t not in union: union.append(t)
L850         Rdf_all = returns_df[union]; Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all)>=lookback else Rdf_all; Rdf_all = Rdf_all.dropna()
L851         pool_eff, g_eff = [t for t in pool_tickers if t in Rdf_all.columns], [t for t in g_fixed if t in Rdf_all.columns]
L852         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L853         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L854         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L855         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L856         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L857         if len(g_eff)>0 and mu>0.0:
L858             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L859         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L860         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L861         selected_tickers = [pool_eff[i] for i in S]
L862         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L863
L864     # ---- 選定（スコア Series / returns だけを受ける）----
L865 # === Output：出力整形と送信（表示・Slack） ===
L866 class Output:
L867
L868     def __init__(self, debug=None):
L869         # self.debug は使わない（互換のため引数は受けるが無視）
L870         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L871         self.g_title = self.d_title = ""
L872         self.g_formatters = self.d_formatters = {}
L873         # 低スコア（GSC+DSC）Top10 表示/送信用
L874         self.low10_table = None
L875         self.debug_text = ""   # デバッグ用本文はここに一本化
L876         self._debug_logged = False
L877
L878     # --- 表示（元 display_results のロジックそのまま） ---
L879     def display_results(self, *, exist, bench, df_z, g_score, d_score_all,
L880                         init_G, init_D, top_G, top_D, **kwargs):
L881         logger.info("📌 reached display_results")
L882         pd.set_option('display.float_format','{:.3f}'.format)
L883         print("📈 ファクター分散最適化の結果")
L884         if self.miss_df is not None and not self.miss_df.empty:
L885             print("Missing Data:")
L886             print(self.miss_df.to_string(index=False))
L887
L888         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L889         try:
L890             sc = getattr(self, "_sc", None)
L891             agg_G = getattr(sc, "_agg_G", None)
L892             agg_D = getattr(sc, "_agg_D", None)
L893         except Exception:
L894             sc = agg_G = agg_D = None
L895         class _SeriesProxy:
L896             __slots__ = ("primary", "fallback")
L897             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L898             def get(self, key, default=None):
L899                 try:
L900                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L901                 except Exception:
L902                     v = None
L903                 if v is not None and not (isinstance(v, float) and v != v):
L904                     return v
L905                 try:
L906                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L907                 except Exception:
L908                     return default
L909         g_score = _SeriesProxy(agg_G, g_score)
L910         d_score_all = _SeriesProxy(agg_D, d_score_all)
L911         near_G = getattr(sc, "_near_G", []) if sc else []
L912         near_D = getattr(sc, "_near_D", []) if sc else []
L913
L914         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L915         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L916         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L917         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L918         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L919         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L920                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L921         if near_G:
L922             add = [t for t in near_G if t not in set(G_UNI)][:10]
L923             if len(add) < 10:
L924                 try:
L925                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L926                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L927                     used = set(G_UNI + add)
L928                     def _push(lst):
L929                         nonlocal add, used
L930                         for t in lst:
L931                             if len(add) == 10: break
L932                             if t in aggG.index and t not in used:
L933                                 add.append(t); used.add(t)
L934                     _push(out_now)           # ① 今回 OUT を優先
L935                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L936                 except Exception:
L937                     pass
L938             if add:
L939                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L940                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L941         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L942
L943         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L944         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L945         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L946         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L947         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L948         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L949         import scorer
L950         dw_eff = scorer.D_WEIGHTS_EFF
L951         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L952                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L953         if near_D:
L954             add = [t for t in near_D if t not in set(D_UNI)][:10]
L955             if add:
L956                 d_disp2 = pd.DataFrame(index=add)
L957                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L958                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L959                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L960         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L961
L962         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L963         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L964         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L965
L966         self.io_table = pd.DataFrame({
L967             'IN': pd.Series(in_list),
L968             '/ OUT': pd.Series(out_list)
L969         })
L970         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L971         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L972         self.io_table['GSC'] = pd.Series(g_list)
L973         self.io_table['DSC'] = pd.Series(d_list)
L974
L975         print("Changes:")
L976         print(self.io_table.to_string(index=False))
L977
L978         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L979         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L980         for name,ticks in portfolios.items():
L981             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L982             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L983             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L984             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L985             if len(ticks)>=2:
L986                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L987                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L988                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L989             else: RAW_rho = RESID_rho = np.nan
L990             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L991         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L992         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L993         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L994         def _fmt_row(s):
L995             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L996         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L997         # === 追加: GSC+DSC が低い順 TOP10 ===
L998         try:
L999             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L1000             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L1001             all_scores = all_scores.dropna(subset=['G_plus_D'])
L1002             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L1003             print("Low Score Candidates (GSC+DSC bottom 10):")
L1004             print(self.low10_table.to_string())
L1005         except Exception as e:
L1006             print(f"[warn] low-score ranking failed: {e}")
L1007             self.low10_table = None
L1008         self.debug_text = ""
L1009         if debug_mode:
L1010             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L1011         else:
L1012             logger.debug(
L1013                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L1014                 debug_mode, True
L1015             )
L1016         self._debug_logged = True
L1017
L1018     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1019     def notify_slack(self):
L1020         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1021
L1022         if not SLACK_WEBHOOK_URL:
L1023             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1024             return
L1025
L1026         def _filter_suffix_from(spec: dict, group: str) -> str:
L1027             g = spec.get(group, {})
L1028             parts = [str(m) for m in g.get("pre_mask", [])]
L1029             for k, v in (g.get("pre_filter", {}) or {}).items():
L1030                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L1031                 name = {"beta": "β"}.get(base, base)
L1032                 try:
L1033                     val = f"{float(v):g}"
L1034                 except Exception:
L1035                     val = str(v)
L1036                 parts.append(f"{name}{op}{val}")
L1037             return "" if not parts else " / filter:" + " & ".join(parts)
L1038
L1039         def _inject_filter_suffix(title: str, group: str) -> str:
L1040             suf = _filter_suffix_from(FILTER_SPEC, group)
L1041             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1042
L1043         def _blk(title, tbl, fmt=None, drop=()):
L1044             if tbl is None or getattr(tbl, 'empty', False):
L1045                 return f"{title}\n(選定なし)\n"
L1046             if drop and hasattr(tbl, 'columns'):
L1047                 keep = [c for c in tbl.columns if c not in drop]
L1048                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1049             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1050
L1051         message = "📈 ファクター分散最適化の結果\n"
L1052         if self.miss_df is not None and not self.miss_df.empty:
L1053             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L1054         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1055         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1056         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L1057         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L1058
L1059         try:
L1060             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1061             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1062             if r is not None:
L1063                 r.raise_for_status()
L1064         except Exception as e:
L1065             print(f"[ERR] main_post_failed: {e}")
L1066
L1067 def _infer_g_universe(feature_df, selected12=None, near5=None):
L1068     try:
L1069         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1070         if out: return out
L1071     except Exception:
L1072         pass
L1073     base = set()
L1074     for lst in (selected12 or []), (near5 or []):
L1075         for x in (lst or []): base.add(x)
L1076     return list(base) if base else list(feature_df.index)
L1077
L1078 def _fmt_with_fire_mark(tickers, feature_df):
L1079     out = []
L1080     for t in tickers or []:
L1081         try:
L1082             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L1083             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L1084             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L1085         except Exception:
L1086             out.append(t)
L1087     return out
L1088
L1089 def _label_recent_event(t, feature_df):
L1090     try:
L1091         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L1092         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L1093         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L1094         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L1095         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L1096     except Exception:
L1097         pass
L1098     return t
L1099
L1100 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1101
L1102 def io_build_input_bundle() -> InputBundle:
L1103     """
L1104     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1105     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1106     """
L1107     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1108     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L1109
L1110 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1111               n_target: int) -> tuple[list, float, float, float]:
L1112     """
L1113     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1114     戻り値：(pick, avg_res_corr, sum_score, objective)
L1115     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1116     """
L1117     sc.cfg = cfg
L1118
L1119     if hasattr(sc, "score_build_features"):
L1120         feat = sc.score_build_features(inb)
L1121         if not hasattr(sc, "_feat_logged"):
L1122             T.log("features built (scorer)")
L1123             sc._feat_logged = True
L1124         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1125     else:
L1126         fb = sc.aggregate_scores(inb, cfg)
L1127         if not hasattr(sc, "_feat_logged"):
L1128             T.log("features built (scorer)")
L1129             sc._feat_logged = True
L1130         sc._feat = fb
L1131         agg = fb.g_score if group == "G" else fb.d_score_all
L1132         if group == "D" and hasattr(fb, "df"):
L1133             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L1134
L1135     if hasattr(sc, "filter_candidates"):
L1136         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1137
L1138     selector = Selector()
L1139     if hasattr(sc, "select_diversified"):
L1140         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1141             selector=selector, prev_tickers=None,
L1142             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1143             cross_mu=cfg.drrs.cross_mu_gd)
L1144     else:
L1145         if group == "G":
L1146             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1147             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1148                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1149                 lam=cfg.drrs.G.get("lam", 0.68),
L1150                 lookback=cfg.drrs.G.get("lookback", 252),
L1151                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1152         else:
L1153             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1154             g_fixed = getattr(sc, "_top_G", None)
L1155             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1156                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1157                 lam=cfg.drrs.D.get("lam", 0.85),
L1158                 lookback=cfg.drrs.D.get("lookback", 504),
L1159                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1160                 mu=cfg.drrs.cross_mu_gd)
L1161         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1162         sum_sc = res["sum_score"]; obj = res["objective"]
L1163         if group == "D":
L1164             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1165             T.log("selection finalized (G/D)")
L1166     try:
L1167         inc = [t for t in exist if t in agg.index]
L1168         pick = _sticky_keep_current(
L1169             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1170             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1171         )
L1172     except Exception as _e:
L1173         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1174     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1175     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1176     try:
L1177         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1178         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1179         setattr(sc, f"_near_{group}", near10)
L1180         setattr(sc, f"_agg_{group}", agg)
L1181     except Exception:
L1182         pass
L1183
L1184     if group == "D":
L1185         T.log("save done")
L1186     if group == "G":
L1187         sc._top_G = pick
L1188     return pick, avg_r, sum_sc, obj
L1189
L1190 def run_pipeline() -> SelectionBundle:
L1191     """
L1192     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1193     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1194     """
L1195     inb = io_build_input_bundle()
L1196     cfg = PipelineConfig(
L1197         weights=WeightsConfig(g=g_weights, d=D_weights),
L1198         drrs=DRRSParams(
L1199             corrM=corrM, shrink=DRRS_SHRINK,
L1200             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1201         ),
L1202         price_max=CAND_PRICE_MAX,
L1203         debug_mode=debug_mode
L1204     )
L1205     sc = Scorer()
L1206     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1207     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L1208     alpha = Scorer.spx_to_alpha(inb.spx)
L1209     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1210     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1211     sc._top_G = top_G
L1212     try:
L1213         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1214         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1215     except Exception:
L1216         pass
L1217     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1218     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1219     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1220     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1221     fb = getattr(sc, "_feat", None)
L1222     near_G = getattr(sc, "_near_G", [])
L1223     selected12 = list(top_G)
L1224     df = fb.df if fb is not None else pd.DataFrame()
L1225     guni = _infer_g_universe(df, selected12, near_G)
L1226     try:
L1227         fire_recent = [t for t in guni
L1228                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1229                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1230     except Exception: fire_recent = []
L1231
L1232     lines = [
L1233         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1234         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1235         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1236         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1237
L1238     if fire_recent:
L1239         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1240         lines.append(f"過去5営業日の検知: {fire_list}")
L1241     else:
L1242         lines.append("過去5営業日の検知: なし")
L1243
L1244     try:
L1245         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1246         if webhook:
L1247             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1248     except Exception:
L1249         pass
L1250
L1251     out = Output()
L1252     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1253     try: out._sc = sc
L1254     except Exception: pass
L1255     if hasattr(sc, "_feat"):
L1256         try:
L1257             fb = sc._feat
L1258             out.miss_df = fb.missing_logs
L1259             out.display_results(
L1260                 exist=exist,
L1261                 bench=bench,
L1262                 df_z=fb.df_z,
L1263                 g_score=fb.g_score,
L1264                 d_score_all=fb.d_score_all,
L1265                 init_G=top_G,
L1266                 init_D=top_D,
L1267                 top_G=top_G,
L1268                 top_D=top_D,
L1269                 df_full_z=getattr(fb, "df_full_z", None),
L1270                 prev_G=getattr(sc, "_prev_G", exist),
L1271                 prev_D=getattr(sc, "_prev_D", exist),
L1272             )
L1273         except Exception:
L1274             pass
L1275     out.notify_slack()
L1276     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1277               "sum_score": sumG, "objective": objG},
L1278         resD={"tickers": top_D, "avg_res_corr": avgD,
L1279               "sum_score": sumD, "objective": objD},
L1280         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1281
L1282     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1283     try:
L1284         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1285               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1286               .sort_values("G_plus_D")
L1287               .head(10)
L1288               .round(3))
L1289         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1290         _post_slack({"text": f"```{low_msg}```"})
L1291     except Exception as _e:
L1292         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1293
L1294     return sb
L1295
L1296 if __name__ == "__main__":
L1297     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #
L26 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L27 # =============================================================================
L28
L29 import json, logging, os, requests, sys, warnings
L30 import numpy as np
L31 import pandas as pd
L32 import yfinance as yf
L33 from typing import Any, TYPE_CHECKING
L34 from scipy.stats import zscore
L35 from datetime import datetime as _dt
L36
L37 if TYPE_CHECKING:
L38     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L39
L40 logger = logging.getLogger(__name__)
L41
L42
L43 def _log(stage, msg):
L44     try:
L45         print(f"[DBG][{_dt.utcnow().isoformat(timespec='seconds')}Z][{stage}] {msg}")
L46     except Exception:
L47         print(f"[DBG][{stage}] {msg}")
L48
L49
L50 # ---- Dividend Helpers -------------------------------------------------------
L51 def _last_close(t, price_map=None):
L52     if price_map and (c := price_map.get(t)) is not None: return float(c)
L53     try:
L54         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L55         return float(h.iloc[-1]) if len(h) else np.nan
L56     except Exception:
L57         return np.nan
L58
L59 def _ttm_div_sum(t, lookback_days=400):
L60     try:
L61         div = yf.Ticker(t).dividends
L62         if div is None or len(div) == 0: return 0.0
L63         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L64         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L65         return ttm if ttm > 0 else float(div.tail(4).sum())
L66     except Exception:
L67         return 0.0
L68
L69 def ttm_div_yield_portfolio(tickers, price_map=None):
L70     ys = [(lambda c, s: (s/c) if (np.isfinite(c) and c>0 and s>0) else 0.0)(_last_close(t, price_map), _ttm_div_sum(t)) for t in tickers]
L71     return float(np.mean(ys)) if ys else 0.0
L72
L73 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L74 def winsorize_s(s: pd.Series, p=0.02):
L75     if s is None or s.dropna().empty: return s
L76     lo, hi = np.nanpercentile(s.astype(float), [100*p, 100*(1-p)]); return s.clip(lo, hi)
L77
L78 def robust_z(s: pd.Series, p=0.02):
L79     s2 = winsorize_s(s,p); return np.nan_to_num(zscore(s2.fillna(s2.mean())))
L80
L81 def robust_z_keepnan(s: pd.Series) -> pd.Series:
L82     """robust_z variant that preserves NaNs and falls back to rank-z when needed."""
L83     if s is None:
L84         return pd.Series(dtype=float)
L85     v = pd.to_numeric(s, errors="coerce")
L86     m = np.nanmedian(v)
L87     mad = np.nanmedian(np.abs(v - m))
L88     z = (v - m) / (1.4826 * mad + 1e-9)
L89     if np.nanstd(z) < 1e-9:
L90         r = v.rank(method="average", na_option="keep")
L91         z = (r - np.nanmean(r)) / (np.nanstd(r) + 1e-9)
L92     return pd.Series(z, index=v.index, dtype=float)
L93
L94
L95 def _safe_div(a, b):
L96     try: return np.nan if (b is None or float(b)==0 or pd.isna(b)) else float(a)/float(b)
L97     except Exception: return np.nan
L98
L99 def _safe_last(series: pd.Series, default=np.nan):
L100     try: return float(series.iloc[-1])
L101     except Exception: return default
L102
L103
L104 def _ensure_series(x):
L105     if x is None:
L106         return pd.Series(dtype=float)
L107     if isinstance(x, pd.Series):
L108         return x.dropna()
L109     if isinstance(x, (list, tuple)):
L110         if len(x) and isinstance(x[0], (tuple, list)) and len(x[0]) == 2:
L111             dt = pd.to_datetime([d for d, _ in x], errors="coerce")
L112             v = pd.to_numeric([_v for _, _v in x], errors="coerce")
L113             return pd.Series(v, index=dt).dropna()
L114         return pd.Series(pd.to_numeric(list(x), errors="coerce")).dropna()
L115     try:
L116         return pd.Series(x).dropna()
L117     except Exception:
L118         return pd.Series(dtype=float)
L119
L120
L121 def _to_quarterly(s: pd.Series) -> pd.Series:
L122     if s.empty or not isinstance(s.index, pd.DatetimeIndex):
L123         return s
L124     return s.resample("Q").last().dropna()
L125
L126
L127 def _ttm_yoy_from_quarterly(qs: pd.Series) -> pd.Series:
L128     if qs is None or qs.empty:
L129         return pd.Series(dtype=float)
L130     ttm = qs.rolling(4, min_periods=2).sum()
L131     yoy = ttm.pct_change(4)
L132     return yoy
L133
L134
L135 def _nz(x) -> float:
L136     if x is None:
L137         return 0.0
L138     try:
L139         value = float(x)
L140     except Exception:
L141         return 0.0
L142     if not np.isfinite(value):
L143         return 0.0
L144     return value
L145
L146
L147 def _winsor(x, lo=-2.0, hi=2.0) -> float:
L148     v = _nz(x)
L149     if v < lo:
L150         return float(lo)
L151     if v > hi:
L152         return float(hi)
L153     return float(v)
L154
L155
L156 def _round_debug(x, ndigits: int = 4):
L157     try:
L158         value = float(x)
L159     except Exception:
L160         return None
L161     if not np.isfinite(value):
L162         return None
L163     return round(value, ndigits)
L164
L165
L166 def _calc_grw_flexible(
L167     ticker: str,
L168     info_entry: dict | None,
L169     close_series: pd.Series | None,
L170     volume_series: pd.Series | None,
L171 ):
L172     info_entry = info_entry if isinstance(info_entry, dict) else {}
L173
L174     s_rev_q = _ensure_series(info_entry.get("SEC_REV_Q_SERIES"))
L175     s_eps_q = _ensure_series(info_entry.get("SEC_EPS_Q_SERIES"))
L176     s_rev_y = _ensure_series(info_entry.get("SEC_REV_Y_SERIES"))
L177
L178     nQ = int(getattr(s_rev_q, "size", 0))
L179     nY = int(getattr(s_rev_y, "size", 0))
L180
L181     parts: dict[str, Any] = {"nQ": nQ, "nY": nY}
L182     path = "NONE"
L183     w = 0.0
L184
L185     def _valid_ratio(a, b):
L186         try:
L187             na, nb = float(a), float(b)
L188         except Exception:
L189             return None
L190         if not np.isfinite(na) or not np.isfinite(nb) or nb == 0:
L191             return None
L192         return na, nb
L193
L194     def yoy_q(series: pd.Series) -> float | None:
L195         s = _ensure_series(series)
L196         if s.empty:
L197             return None
L198         s = s.sort_index()
L199         if isinstance(s.index, pd.DatetimeIndex):
L200             last_idx = s.index[-1]
L201             window_start = last_idx - pd.DateOffset(months=15)
L202             window_end = last_idx - pd.DateOffset(months=9)
L203             candidates = s.loc[(s.index >= window_start) & (s.index <= window_end)]
L204             if candidates.empty:
L205                 candidates = s.loc[s.index <= window_end]
L206             if candidates.empty:
L207                 return None
L208             v1 = candidates.iloc[-1]
L209             v0 = s.iloc[-1]
L210         else:
L211             if s.size < 5:
L212                 return None
L213             v0 = s.iloc[-1]
L214             v1 = s.iloc[-5]
L215         pair = _valid_ratio(v0, v1)
L216         if pair is None:
L217             return None
L218         a, b = pair
L219         return float(a / b - 1.0)
L220
L221     def qoq(series: pd.Series) -> float | None:
L222         s = _ensure_series(series)
L223         if s.size < 2:
L224             return None
L225         s = s.sort_index()
L226         v0, v1 = s.iloc[-1], s.iloc[-2]
L227         pair = _valid_ratio(v0, v1)
L228         if pair is None:
L229             return None
L230         a, b = pair
L231         return float(a / b - 1.0)
L232
L233     def ttm_delta(series: pd.Series) -> float | None:
L234         s = _ensure_series(series)
L235         if s.size < 2:
L236             return None
L237         s = s.sort_index()
L238         k = int(min(4, s.size))
L239         cur_slice = s.iloc[-k:]
L240         prev_slice = s.iloc[:-k]
L241         if prev_slice.empty:
L242             return None
L243         prev_k = int(min(k, prev_slice.size))
L244         cur_sum = float(cur_slice.sum())
L245         prev_sum = float(prev_slice.iloc[-prev_k:].sum())
L246         pair = _valid_ratio(cur_sum, prev_sum)
L247         if pair is None:
L248             return None
L249         a, b = pair
L250         return float(a / b - 1.0)
L251
L252     def yoy_y(series: pd.Series) -> float | None:
L253         s = _ensure_series(series)
L254         if s.size < 2:
L255             return None
L256         s = s.sort_index()
L257         v0, v1 = s.iloc[-1], s.iloc[-2]
L258         pair = _valid_ratio(v0, v1)
L259         if pair is None:
L260             return None
L261         a, b = pair
L262         return float(a / b - 1.0)
L263
L264     def price_proxy_growth() -> float | None:
L265         if not isinstance(close_series, pd.Series):
L266             return None
L267         close = close_series.sort_index().dropna()
L268         if close.empty:
L269             return None
L270         hh_window = int(min(126, len(close)))
L271         if hh_window < 20:
L272             return None
L273         hh = close.rolling(hh_window).max().iloc[-1]
L274         prox = None
L275         if np.isfinite(hh) and hh > 0:
L276             prox = float(close.iloc[-1] / hh)
L277         rs6 = None
L278         if len(close) >= 63:
L279             rs6 = float(close.pct_change(63).iloc[-1])
L280         rs12 = None
L281         if len(close) >= 126:
L282             rs12 = float(close.pct_change(126).iloc[-1])
L283         vexp = None
L284         if isinstance(volume_series, pd.Series):
L285             vol = volume_series.reindex(close.index).dropna()
L286             if len(vol) >= 50:
L287                 v20 = vol.rolling(20).mean().iloc[-1]
L288                 v50 = vol.rolling(50).mean().iloc[-1]
L289                 if np.isfinite(v20) and np.isfinite(v50) and v50 > 0:
L290                     vexp = float(v20 / v50 - 1.0)
L291         prox = 0.0 if prox is None or not np.isfinite(prox) else prox
L292         rs6 = 0.0 if rs6 is None or not np.isfinite(rs6) else rs6
L293         rs12 = 0.0 if rs12 is None or not np.isfinite(rs12) else rs12
L294         vexp = 0.0 if vexp is None or not np.isfinite(vexp) else vexp
L295         return 0.5 * prox + 0.3 * rs6 + 0.2 * rs12 + 0.2 * vexp
L296
L297     price_alt = price_proxy_growth() or 0.0
L298     core = 0.0
L299     core_raw = 0.0
L300     price_raw = price_alt
L301
L302     if nQ >= 5:
L303         path = "P5"
L304         yq = yoy_q(s_rev_q)
L305         parts["rev_yoy_q"] = yq
L306         tmp_prev = s_rev_q.iloc[:-1] if s_rev_q.size > 1 else s_rev_q
L307         acc = None
L308         if tmp_prev.size >= 5 and yq is not None:
L309             yq_prev = yoy_q(tmp_prev)
L310             if yq_prev is not None:
L311                 acc = float(yq - yq_prev)
L312         parts["rev_acc_q"] = acc
L313         eps_yoy = yoy_q(s_eps_q) if s_eps_q.size >= 5 else None
L314         parts["eps_yoy_q"] = eps_yoy
L315         eps_acc = None
L316         if eps_yoy is not None and s_eps_q.size > 5:
L317             eps_prev = s_eps_q.iloc[:-1]
L318             if eps_prev.size >= 5:
L319                 eps_prev_yoy = yoy_q(eps_prev)
L320                 if eps_prev_yoy is not None:
L321                     eps_acc = float(eps_yoy - eps_prev_yoy)
L322         parts["eps_acc_q"] = eps_acc
L323         w = 1.0
L324         core_raw = (
L325             0.60 * _nz(yq)
L326             + 0.20 * _nz(acc)
L327             + 0.15 * _nz(eps_yoy)
L328             + 0.05 * _nz(eps_acc)
L329         )
L330         price_alt = 0.0
L331     elif 2 <= nQ <= 4:
L332         path = "P24"
L333         rev_qoq = qoq(s_rev_q)
L334         rev_ttm2 = ttm_delta(s_rev_q)
L335         parts["rev_qoq"] = rev_qoq
L336         parts["rev_ttm2"] = rev_ttm2
L337         eps_qoq = qoq(s_eps_q) if s_eps_q.size >= 2 else None
L338         parts["eps_qoq"] = eps_qoq
L339         w = min(1.0, nQ / 5.0)
L340         core_raw = 0.6 * _nz(rev_qoq) + 0.3 * _nz(rev_ttm2) + 0.1 * _nz(eps_qoq)
L341     else:
L342         path = "P1Y"
L343         rev_yoy_y = yoy_y(s_rev_y) if nY >= 2 else None
L344         parts["rev_yoy_y"] = rev_yoy_y
L345         w = 0.6 * min(1.0, nY / 3.0) if nY >= 2 else 0.4
L346         core_raw = _nz(rev_yoy_y)
L347         if nQ <= 1 and nY < 2 and price_alt == 0.0:
L348             price_alt = price_proxy_growth() or 0.0
L349
L350     core = _winsor(core_raw, lo=-1.5, hi=1.5)
L351     price_alt = _winsor(price_alt, lo=-1.5, hi=1.5)
L352     grw = _winsor(w * core + (1.0 - w) * (0.5 * _nz(price_alt)), lo=-2.0, hi=2.0)
L353
L354     parts.update(
L355         {
L356             "core_raw": core_raw,
L357             "core": core,
L358             "price_proxy_raw": price_raw,
L359             "price_proxy": price_alt,
L360             "weight": w,
L361             "score": grw,
L362         }
L363     )
L364
L365     parts_out: dict[str, Any] = {
L366         "nQ": nQ,
L367         "nY": nY,
L368     }
L369     for key, value in parts.items():
L370         if key in ("nQ", "nY"):
L371             continue
L372         rounded = _round_debug(value)
L373         parts_out[key] = rounded
L374
L375     info_entry["DEBUG_GRW_PATH"] = path
L376     info_entry["DEBUG_GRW_PARTS"] = json.dumps(parts_out, ensure_ascii=False, sort_keys=True)
L377     info_entry["GRW_SCORE"] = grw
L378     info_entry["GRW_WEIGHT"] = w
L379     info_entry["GRW_CORE"] = core
L380     info_entry["GRW_PRICE_PROXY"] = price_alt
L381
L382     return {
L383         "score": grw,
L384         "path": path,
L385         "parts": info_entry["DEBUG_GRW_PARTS"],
L386         "weight": w,
L387         "core": core,
L388         "price_proxy": price_alt,
L389     }
L390
L391
L392 D_WEIGHTS_EFF = None  # 出力表示互換のため
L393
L394
L395 def _scalar(v):
L396     """単一セル代入用に値をスカラーへ正規化する。
L397
L398     - pandas Series -> .iloc[-1]（最後を採用）
L399     - list/tuple/ndarray -> 最後の要素
L400     - それ以外          -> そのまま
L401     取得失敗時は np.nan を返す。
L402     """
L403     import numpy as _np
L404     import pandas as _pd
L405     try:
L406         if isinstance(v, _pd.Series):
L407             return v.iloc[-1] if len(v) else _np.nan
L408         if isinstance(v, (list, tuple, _np.ndarray)):
L409             return v[-1] if len(v) else _np.nan
L410         return v
L411     except Exception:
L412         return _np.nan
L413
L414
L415 # ---- Scorer 本体 -------------------------------------------------------------
L416 class Scorer:
L417     """
L418     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L419     - cfg は必須（factor.PipelineConfig を渡す）。
L420     - 旧カラム名を自動リネームして新スキーマに吸収します。
L421     """
L422
L423     # === 先頭で旧→新カラム名マップ（移行用） ===
L424     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L425     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L426
L427     # === スキーマ簡易チェック（最低限） ===
L428     @staticmethod
L429     def _validate_ib_for_scorer(ib: Any):
L430         miss = [a for a in ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"] if not hasattr(ib,a) or getattr(ib,a) is None]
L431         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L432         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L433         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L434         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L435         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L436         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L437
L438     # ----（Scorer専用）テクニカル・指標系 ----
L439     @staticmethod
L440     def trend(s: pd.Series):
L441         if len(s)<200: return np.nan
L442         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L443         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L444         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L445         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L446         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L447         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L448         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L449         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L450         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L451         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L452         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L453         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L454
L455     @staticmethod
L456     def rs(s, b):
L457         n, nb = len(s), len(b)
L458         if n<60 or nb<60: return np.nan
L459         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L460         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L461         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L462
L463     @staticmethod
L464     def tr_str(s):
L465         if s is None:
L466             return np.nan
L467         s = s.ffill(limit=2).dropna()
L468         if len(s) < 50:
L469             return np.nan
L470         ma50 = s.rolling(50, min_periods=50).mean()
L471         last_ma = ma50.iloc[-1]
L472         last_px = s.iloc[-1]
L473         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L474
L475     @staticmethod
L476     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L477         r = (s/b).dropna()
L478         if len(r) < win: return np.nan
L479         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L480         try: return float(np.polyfit(x, y, 1)[0])
L481         except Exception: return np.nan
L482
L483     @staticmethod
L484     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L485         ev = info_t.get('enterpriseValue', np.nan)
L486         if pd.notna(ev) and ev>0: return float(ev)
L487         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L488         try:
L489             bs = tk.quarterly_balance_sheet
L490             if bs is not None and not bs.empty:
L491                 c = bs.columns[0]
L492                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L493                     if k in bs.index: debt = float(bs.loc[k,c]); break
L494                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L495                     if k in bs.index: cash = float(bs.loc[k,c]); break
L496         except Exception: pass
L497         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L498         return np.nan
L499
L500     @staticmethod
L501     def dividend_status(ticker: str) -> str:
L502         t = yf.Ticker(ticker)
L503         try:
L504             if not t.dividends.empty: return "has"
L505         except Exception: return "unknown"
L506         try:
L507             a = t.actions
L508             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L509         except Exception: pass
L510         try:
L511             fi = t.fast_info
L512             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L513         except Exception: pass
L514         return "unknown"
L515
L516     @staticmethod
L517     def div_streak(t):
L518         try:
L519             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L520             years, streak = sorted(ann.index), 0
L521             for i in range(len(years)-1,0,-1):
L522                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L523                 else: break
L524             return streak
L525         except Exception: return 0
L526
L527     @staticmethod
L528     def fetch_finnhub_metrics(symbol):
L529         api_key = os.environ.get("FINNHUB_API_KEY")
L530         if not api_key: return {}
L531         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L532         try:
L533             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L534             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L535         except Exception: return {}
L536
L537     @staticmethod
L538     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L539         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L540         n = min(len(r), len(m), lookback)
L541         if n<60: return np.nan
L542         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L543         return np.nan if var==0 else cov/var
L544
L545     @staticmethod
L546     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L547                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L548         """
L549         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L550         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L551         """
L552         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L553         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L554         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L555         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L556         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L557
L558     @staticmethod
L559     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L560         """
L561         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L562         戻り値は降順ソート済み。
L563         """
L564         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L565         cnt, pen = {}, {}
L566         for t in order:
L567             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L568         return (s - pd.Series(pen)).sort_values(ascending=False)
L569
L570     @staticmethod
L571     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L572         """
L573         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L574         """
L575         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L576         if not hard:
L577             return list(eff.head(N).index)
L578         pick, used = [], {}
L579         for t in eff.index:
L580             s = sectors.get(t, "U")
L581             if used.get(s,0) < hard:
L582                 pick.append(t); used[s] = used.get(s,0) + 1
L583             if len(pick) == N: break
L584         return pick
L585
L586     @staticmethod
L587     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L588         """
L589         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L590         - px: 列=ticker（ベンチは含めない）
L591         - spx: ベンチマーク Series（px.index に整列）
L592         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L593         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L594         """
L595         import numpy as np, pandas as pd
L596         if px is None or px.empty:
L597             return pd.Series(dtype=int)
L598         px = px.dropna(how="all", axis=1)
L599         if win_days and win_days > 0:
L600             px = px.tail(win_days)
L601         if px.empty:
L602             return pd.Series(dtype=int)
L603         spx = spx.reindex(px.index).ffill()
L604
L605         ma50  = px.rolling(50).mean()
L606         ma150 = px.rolling(150).mean()
L607         ma200 = px.rolling(200).mean()
L608
L609         tt = (px > ma150)
L610         tt &= (px > ma200)
L611         tt &= (ma150 > ma200)
L612         tt &= (ma200 - ma200.shift(21) > 0)
L613         tt &= (ma50  > ma150)
L614         tt &= (ma50  > ma200)
L615         tt &= (px    > ma50)
L616
L617         lo252 = px.rolling(252).min()
L618         hi252 = px.rolling(252).max()
L619         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L620         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L621
L622         r12  = px.divide(px.shift(252)).sub(1.0)
L623         br12 = spx.divide(spx.shift(252)).sub(1.0)
L624         r1   = px.divide(px.shift(22)).sub(1.0)
L625         br1  = spx.divide(spx.shift(22)).sub(1.0)
L626         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L627         tt &= (rs >= 0.10)
L628
L629         return tt.fillna(False).sum(axis=1).astype(int)
L630
L631     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L632     def aggregate_scores(self, ib: Any, cfg):
L633         if cfg is None:
L634             raise ValueError("cfg is required; pass factor.PipelineConfig")
L635         self._validate_ib_for_scorer(ib)
L636
L637         px, spx, tickers = ib.px, ib.spx, ib.tickers
L638         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L639
L640         df, missing_logs = pd.DataFrame(index=tickers), []
L641         for t in tickers:
L642             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L643             try:
L644                 volume_series_full = ib.data['Volume'][t]
L645             except Exception:
L646                 volume_series_full = None
L647
L648             grw_result = _calc_grw_flexible(t, d, s, volume_series_full)
L649             df.loc[t,'GRW_FLEX_SCORE'] = grw_result.get('score')
L650             df.loc[t,'GRW_FLEX_WEIGHT'] = grw_result.get('weight')
L651             df.loc[t,'GRW_FLEX_CORE'] = grw_result.get('core')
L652             df.loc[t,'GRW_FLEX_PRICE'] = grw_result.get('price_proxy')
L653             df.loc[t,'DEBUG_GRW_PATH'] = grw_result.get('path')
L654             df.loc[t,'DEBUG_GRW_PARTS'] = grw_result.get('parts')
L655
L656             # --- 基本特徴 ---
L657             df.loc[t,'TR']   = self.trend(s)
L658             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L659             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L660             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L661             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L662             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L663             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L664             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L665
L666             # --- 配当（欠損補完含む） ---
L667             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L668             if div is None or pd.isna(div):
L669                 try:
L670                     divs = yf.Ticker(t).dividends
L671                     if divs is not None and not divs.empty:
L672                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L673                         if last_close and last_close>0: div = float(div_1y/last_close)
L674                 except Exception: pass
L675             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L676
L677             # --- FCF/EV ---
L678             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L679             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L680
L681             # --- モメンタム・ボラ関連 ---
L682             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L683             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L684             n = int(min(len(r), len(rm)))
L685
L686             DOWNSIDE_DEV = np.nan
L687             if n>=60:
L688                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L689                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L690             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L691
L692             MDD_1Y = np.nan
L693             try:
L694                 w = s.iloc[-min(len(s),252):].dropna()
L695                 if len(w)>=30:
L696                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L697             except Exception: pass
L698             df.loc[t,'MDD_1Y'] = MDD_1Y
L699
L700             RESID_VOL = np.nan
L701             if n>=120:
L702                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L703                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L704                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L705                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L706             df.loc[t,'RESID_VOL'] = RESID_VOL
L707
L708             DOWN_OUTPERF = np.nan
L709             if n>=60:
L710                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L711                 if mask.sum()>=10:
L712                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L713                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L714             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L715
L716             # --- 長期移動平均/位置 ---
L717             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L718             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L719
L720             # --- 配当の詳細系 ---
L721             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L722             try:
L723                 divs = yf.Ticker(t).dividends.dropna()
L724                 if not divs.empty:
L725                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L726                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L727                     ann = divs.groupby(divs.index.year).sum()
L728                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L729                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L730                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L731                 so = d.get('sharesOutstanding',None)
L732                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L733                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L734             except Exception: pass
L735             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L736
L737             # --- 財務安定性 ---
L738             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L739
L740             # --- EPS 変動 ---
L741             EPS_VAR_8Q = np.nan
L742             try:
L743                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L744                 if qe is not None and not qe.empty and so:
L745                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L746                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L747             except Exception: pass
L748             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L749
L750             # --- サイズ/流動性 ---
L751             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L752             try:
L753                 if isinstance(volume_series_full, pd.Series):
L754                     vol_series = volume_series_full.reindex(s.index).dropna()
L755                     if len(vol_series) >= 5:
L756                         aligned_px = s.reindex(vol_series.index).dropna()
L757                         if len(aligned_px) == len(vol_series):
L758                             dv = (vol_series*aligned_px).rolling(60).mean()
L759                             if not dv.dropna().empty:
L760                                 adv60 = float(dv.dropna().iloc[-1])
L761             except Exception:
L762                 pass
L763             df.loc[t,'ADV60_USD'] = adv60
L764
L765             # --- Rule of 40 や周辺 ---
L766             total_rev_ttm = d.get('totalRevenue',np.nan)
L767             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L768             df.loc[t,'FCF_MGN'] = FCF_MGN
L769             rule40 = np.nan
L770             try:
L771                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L772             except Exception: pass
L773             df.loc[t,'RULE40'] = rule40
L774
L775             # --- トレンド補助 ---
L776             sma50  = s.rolling(50).mean()
L777             sma150 = s.rolling(150).mean()
L778             sma200 = s.rolling(200).mean()
L779             p = _safe_last(s)
L780
L781             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L782                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L783             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L784                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L785
L786             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L787             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L788
L789             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L790             if len(sma200.dropna()) >= 21:
L791                 cur200 = _safe_last(sma200)
L792                 old2001 = float(sma200.iloc[-21])
L793                 if old2001:
L794                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L795
L796             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L797             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L798             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L799             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L800             if len(sma200.dropna())>=105:
L801                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L802                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L803             # NEW: 200日線が連続で上向きの「日数」
L804             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L805             try:
L806                 s200 = sma200.dropna()
L807                 if len(s200) >= 2:
L808                     diff200 = s200.diff()
L809                     up = 0
L810                     for v in diff200.iloc[::-1]:
L811                         if pd.isna(v) or v <= 0:
L812                             break
L813                         up += 1
L814                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L815             except Exception:
L816                 pass
L817             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L818             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L819             if hi52 and hi52>0 and pd.notna(p):
L820                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L821             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L822             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L823
L824             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L825
L826             # --- 欠損メモ ---
L827             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L828             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L829             if need_finnhub:
L830                 fin_data = self.fetch_finnhub_metrics(t)
L831                 for col in need_finnhub:
L832                     val = fin_data.get(col)
L833                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L834             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L835                 if pd.isna(df.loc[t,col]):
L836                     if col=='DIV':
L837                         status = self.dividend_status(t)
L838                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L839                     else:
L840                         missing_logs.append({'Ticker':t,'Column':col})
L841
L842         def _pick_series(entry: dict, keys: list[str]):
L843             for k in keys:
L844                 val = entry.get(k) if isinstance(entry, dict) else None
L845                 if val is None:
L846                     continue
L847                 try:
L848                     if hasattr(val, "empty") and getattr(val, "empty"):
L849                         continue
L850                 except Exception:
L851                     pass
L852                 if isinstance(val, (list, tuple)) and len(val) == 0:
L853                     continue
L854                 return val
L855             return None
L856
L857         def _has_sec_series(val) -> bool:
L858             try:
L859                 if isinstance(val, pd.Series):
L860                     return not val.dropna().empty
L861                 if isinstance(val, (list, tuple)):
L862                     return any(pd.notna(v) for v in val)
L863                 return bool(val)
L864             except Exception:
L865                 return False
L866
L867         def _series_len(val) -> int:
L868             try:
L869                 if isinstance(val, pd.Series):
L870                     return int(val.dropna().size)
L871                 if isinstance(val, (list, tuple)):
L872                     return len(val)
L873                 return int(bool(val))
L874             except Exception:
L875                 return 0
L876
L877         cnt_rev_series = sum(1 for _t, d in info.items() if _has_sec_series(d.get("SEC_REV_Q_SERIES")))
L878         cnt_eps_series = sum(1 for _t, d in info.items() if _has_sec_series(d.get("SEC_EPS_Q_SERIES")))
L879         logger.info(
L880             "[DERIV] SEC series presence: REV_Q=%d, EPS_Q=%d (universe=%d)",
L881             cnt_rev_series,
L882             cnt_eps_series,
L883             len(info),
L884         )
L885
L886         rev_q_ge5 = 0
L887         ttm_yoy_avail = 0
L888         wrote_growth = 0
L889
L890         for t in tickers:
L891             try:
L892                 d = info.get(t, {}) or {}
L893                 rev_series = d.get("SEC_REV_Q_SERIES")
L894                 eps_series = d.get("SEC_EPS_Q_SERIES")
L895                 fallback_qearn = False
L896                 try:
L897                     qe = tickers_bulk.tickers[t].quarterly_earnings
L898                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L899                 except Exception:
L900                     qe = None
L901                 logger.debug(
L902                     "[DERIV] %s: rev_q_len=%s eps_q_len=%s fallback_qearn=%s",
L903                     t,
L904                     _series_len(rev_series),
L905                     _series_len(eps_series),
L906                     fallback_qearn,
L907                 )
L908
L909                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L910                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L911                 r_raw = _ensure_series(r_src)
L912                 e_raw = _ensure_series(e_src)
L913                 _log("DERIV_SRC", f"{t} rev_raw_len={r_raw.size} eps_raw_len={e_raw.size}")
L914
L915                 r_q = _to_quarterly(r_raw)
L916                 e_q = _to_quarterly(e_raw)
L917                 _log("DERIV_Q", f"{t} rev_q_len={r_q.size} eps_q_len={e_q.size}")
L918                 if r_q.size >= 5:
L919                     rev_q_ge5 += 1
L920
L921                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L922                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L923                 has_ttm = int(not r_yoy_ttm.dropna().empty)
L924                 ttm_yoy_avail += has_ttm
L925                 _log("DERIV_TTM", f"{t} rev_ttm_yoy_len={r_yoy_ttm.dropna().size} eps_ttm_yoy_len={e_yoy_ttm.dropna().size}")
L926
L927                 def _q_yoy(qs):
L928                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L929
L930                 rev_q_yoy = _q_yoy(r_q)
L931                 eps_q_yoy = _q_yoy(e_q)
L932
L933                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L934                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L935                         ann = qs.groupby(qs.index.year).last().pct_change()
L936                         ann_dn = ann.dropna()
L937                         if not ann_dn.empty:
L938                             y = float(ann_dn.iloc[-1])
L939                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L940                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L941                             return y, acc, var
L942                     yoy_dn = yoy_ttm.dropna()
L943                     if yoy_dn.empty:
L944                         return np.nan, np.nan, np.nan
L945                     return (
L946                         float(yoy_dn.iloc[-1]),
L947                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L948                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L949                     )
L950
L951                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L952                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L953
L954                 def _pos_streak(s: pd.Series):
L955                     s = s.dropna()
L956                     if s.empty:
L957                         return np.nan
L958                     b = (s > 0).astype(int).to_numpy()[::-1]
L959                     k = 0
L960                     for v in b:
L961                         if v == 1:
L962                             k += 1
L963                         else:
L964                             break
L965                     return float(k)
L966
L967                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L968
L969                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L970                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L971                 df.loc[t, "REV_YOY"] = rev_yoy
L972                 df.loc[t, "EPS_YOY"] = eps_yoy
L973                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L974                 df.loc[t, "REV_YOY_VAR"] = rev_var
L975                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L976
L977                 wrote_growth += 1
L978                 _log(
L979                     "DERIV_WRITE",
L980                     f"{t} wrote: Q_YOY(rev={rev_q_yoy}, eps={eps_q_yoy}) ANN(rev_yoy={rev_yoy}, acc={rev_acc}, var={rev_var}) streak={rev_ann_streak}",
L981                 )
L982
L983             except Exception as e:
L984                 logger.warning("[DERIV_WARN] %s growth-derivatives failed: %s", t, e)
L985                 _log("DERIV_WARN", f"{t} {type(e).__name__}: {e}")
L986
L987         _log("DERIV_SUMMARY", f"rev_q_len>=5: {rev_q_ge5}/{len(tickers)}  ttm_yoy_available: {ttm_yoy_avail}  wrote_growth_for: {wrote_growth}")
L988
L989         try:
L990             cols = [
L991                 "REV_Q_YOY",
L992                 "EPS_Q_YOY",
L993                 "REV_YOY",
L994                 "EPS_YOY",
L995                 "REV_YOY_ACC",
L996                 "REV_YOY_VAR",
L997                 "REV_ANN_STREAK",
L998             ]
L999             cnt = {c: int(df[c].count()) for c in cols if c in df.columns}
L1000             _log("DERIV_NONNAN_COUNTS", str(cnt))
L1001         except Exception as e:
L1002             _log("DERIV_NONNAN_COUNTS", f"error: {e}")
L1003
L1004         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1005             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1006             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1007             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1008             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1009             c5 = (row.get('TR_str', np.nan) > 0)
L1010             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1011             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1012             c8 = (row.get('RS', np.nan) >= 0.10)
L1013             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1014
L1015         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1016         assert 'trend_template' in df.columns
L1017
L1018         # === Z化と合成 ===
L1019         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1020
L1021         df_z = pd.DataFrame(index=df.index)
L1022         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1023         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1024         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1025
L1026         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1027         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1028         for col in grw_cols:
L1029             if col in df.columns:
L1030                 raw = pd.to_numeric(df[col], errors="coerce")
L1031                 df_z[col] = robust_z_keepnan(raw)
L1032                 df_z[f'{col}_RAW'] = raw
L1033         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1034             if k in df.columns and k not in df_z.columns:
L1035                 raw = pd.to_numeric(df[k], errors="coerce")
L1036                 df_z[k] = robust_z_keepnan(raw)
L1037                 df_z[f'{k}_RAW'] = raw
L1038         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1039
L1040         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1041         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1042         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1043
L1044         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1045         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1046         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1047
L1048         # ===== トレンドスロープ算出 =====
L1049         def zpos(x):
L1050             arr = robust_z(x)
L1051             idx = getattr(x, 'index', df_z.index)
L1052             return pd.Series(arr, index=idx).fillna(0.0)
L1053
L1054         def relu(x):
L1055             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1056             return ser.clip(lower=0).fillna(0.0)
L1057
L1058         # 売上トレンドスロープ（四半期）
L1059         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1060         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1061         slope_rev_combo = slope_rev - 0.25*noise_rev
L1062         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L1063         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1064
L1065         # EPSトレンドスロープ（四半期）
L1066         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1067         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L1068         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1069
L1070         # 年次トレンド（サブ）
L1071         slope_rev_yr = zpos(df_z['REV_YOY'])
L1072         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1073         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1074         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1075         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1076         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L1077         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1078         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L1079         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1080
L1081         # ===== GRW flexible score (variable data paths) =====
L1082         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1083         df_z['GRW_FLEX_SCORE_RAW'] = grw_raw
L1084         df_z['GROWTH_F_RAW'] = grw_raw
L1085         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1086         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1087         df_z['GRW_FLEX_CORE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_CORE'), errors="coerce")
L1088         df_z['GRW_FLEX_PRICE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_PRICE'), errors="coerce")
L1089
L1090         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1091         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1092             try:
L1093                 cols = ['GROWTH_F', 'GROWTH_F_RAW', 'GRW_FLEX_WEIGHT']
L1094                 use_cols = [c for c in cols if c in df_z.columns]
L1095                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1096                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1097                 limit = max(0, min(40, len(i)))
L1098                 print("[DEBUG: GRW]")
L1099                 for t in i.index[:limit]:
L1100                     row = i.loc[t]
L1101                     parts = []
L1102                     if pd.notna(row.get('GROWTH_F')):
L1103                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1104                     raw_val = row.get('GROWTH_F_RAW')
L1105                     if pd.notna(raw_val):
L1106                         parts.append(f"GROWTH_F_RAW={raw_val:.3f}")
L1107                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1108                     if pd.notna(weight_val):
L1109                         parts.append(f"w={weight_val:.2f}")
L1110                     path_val = None
L1111                     try:
L1112                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1113                     except Exception:
L1114                         path_val = None
L1115                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1116                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1117                     if path_val:
L1118                         parts.append(f"PATH={path_val}")
L1119                     parts_json = None
L1120                     try:
L1121                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1122                     except Exception:
L1123                         parts_json = None
L1124                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1125                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1126                     if parts_json:
L1127                         parts.append(f"PARTS={parts_json}")
L1128                     if not parts:
L1129                         parts.append('no-data')
L1130                     print(f"Ticker: {t} | " + " ".join(parts))
L1131                 print()
L1132             except Exception as exc:
L1133                 print(f"[ERR] GRW debug dump failed: {exc}")
L1134
L1135         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1136             + 0.15*df_z['TR_str']
L1137             + 0.15*df_z['RS_SLOPE_6W']
L1138             + 0.15*df_z['RS_SLOPE_13W']
L1139             + 0.10*df_z['MA200_SLOPE_5M']
L1140             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1141         df_z['VOL'] = robust_z(df['BETA'])
L1142         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1143         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1144
L1145         # シンプル版（全明細）：df_zをページングでログ出力
L1146         if getattr(cfg, "debug_mode", False):
L1147             pd.set_option("display.max_columns", None)
L1148             pd.set_option("display.max_colwidth", None)
L1149             pd.set_option("display.width", None)
L1150             page = int(getattr(cfg, "debug_dfz_page", 200))  # 1ページの行数（必要に応じて調整）
L1151             n = len(df_z)
L1152             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1153             for i in range(0, n, page):
L1154                 j = min(i + page, n)
L1155                 print(f"--- df_z rows {i}..{j-1} ---")
L1156                 # print() はActionsの折り返しに強い。列数多くても素で出す
L1157                 try:
L1158                     print(df_z.iloc[i:j].to_string())
L1159                 except Exception:
L1160                     # 巨大列やdtype問題へのフォールバック
L1161                     print(df_z.iloc[i:j].astype(str).to_string())
L1162             logger.info("=== df_z FULL DUMP end ===")
L1163
L1164             # （任意）CSVにも保存：後でArtifactsからDL
L1165             try:
L1166                 import os
L1167                 os.makedirs("out", exist_ok=True)
L1168                 csv_path = "out/df_z_latest.csv"
L1169                 df_z.to_csv(csv_path)
L1170                 logger.info("df_z CSV saved: %s (rows=%d cols=%d)", csv_path, n, df_z.shape[1])
L1171             except Exception as e:
L1172                 logger.warning("df_z CSV save failed: %s", e)
L1173
L1174         # === begin: BIO LOSS PENALTY =====================================
L1175         try:
L1176             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1177         except Exception:
L1178             penalty_z = 0.8
L1179
L1180         def _is_bio_like(t: str) -> bool:
L1181             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1182             sec = str(inf.get("sector", "")).lower()
L1183             ind = str(inf.get("industry", "")).lower()
L1184             if "health" not in sec:
L1185                 return False
L1186             keys = ("biotech", "biopharma", "pharma")
L1187             return any(k in ind for k in keys)
L1188
L1189         tickers_s = pd.Index(df_z.index)
L1190         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1191         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1192         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1193
L1194         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1195             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1196             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1197         # === end: BIO LOSS PENALTY =======================================
L1198
L1199         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1200         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1201
L1202         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1203         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1204         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1205         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1206
L1207         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1208         # ① 全銘柄で G/D スコアを算出（unmasked）
L1209         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1210
L1211         d_comp = pd.concat({
L1212             'QAL': df_z['D_QAL'],
L1213             'YLD': df_z['D_YLD'],
L1214             'VOL': df_z['D_VOL_RAW'],
L1215             'TRD': df_z['D_TRD']
L1216         }, axis=1)
L1217         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1218         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1219         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1220
L1221         # ② テンプレ判定（既存ロジックそのまま）
L1222         mask = df['trend_template']
L1223         if not bool(mask.any()):
L1224             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1225                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1226                 (df.get('RS', np.nan) >= 0.08) &
L1227                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1228                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1229                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1230                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1231                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1232             df['trend_template'] = mask
L1233
L1234         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1235         g_score = g_score_all.loc[mask]
L1236         Scorer.g_score = g_score
L1237         df_z['GSC'] = g_score_all
L1238         df_z['DSC'] = d_score_all
L1239
L1240         try:
L1241             current = (pd.read_csv("current_tickers.csv")
L1242                   .iloc[:, 0]
L1243                   .str.upper()
L1244                   .tolist())
L1245         except FileNotFoundError:
L1246             warnings.warn("current_tickers.csv not found — bonus skipped")
L1247             current = []
L1248
L1249         mask_bonus = g_score.index.isin(current)
L1250         if mask_bonus.any():
L1251             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1252             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1253             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1254             sigma_g = g_score.std()
L1255             if pd.isna(sigma_g):
L1256                 sigma_g = 0.0
L1257             bonus_g = round(k * sigma_g, 3)
L1258             g_score.loc[mask_bonus] += bonus_g
L1259             Scorer.g_score = g_score
L1260             # 3) D 側も同様に σ の NaN をケア
L1261             sigma_d = d_score_all.std()
L1262             if pd.isna(sigma_d):
L1263                 sigma_d = 0.0
L1264             bonus_d = round(k * sigma_d, 3)
L1265             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1266
L1267         try:
L1268             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1269         except Exception:
L1270             pass
L1271
L1272         df_full = df.copy()
L1273         df_full_z = df_z.copy()
L1274
L1275         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1276         return FeatureBundle(df=df,
L1277             df_z=df_z,
L1278             g_score=g_score,
L1279             d_score_all=d_score_all,
L1280             missing_logs=pd.DataFrame(missing_logs),
L1281             df_full=df_full,
L1282             df_full_z=df_full_z,
L1283             scaler=None)
L1284
L1285 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1286     """
L1287     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1288     次の列を feature_df に追加する（index=ticker）。
L1289       - G_BREAKOUT_recent_5d : bool
L1290       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1291       - G_PULLBACK_recent_5d : bool
L1292       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1293       - G_PIVOT_price        : float
L1294     失敗しても例外は握り潰し、既存処理を阻害しない。
L1295     """
L1296     try:
L1297         px   = bundle.px                      # 終値 DataFrame
L1298         hi   = bundle.data['High']
L1299         lo   = bundle.data['Low']
L1300         vol  = bundle.data['Volume']
L1301         bench= bundle.spx                     # ベンチマーク Series
L1302
L1303         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1304         g_universe = getattr(self_obj, "g_universe", None)
L1305         if g_universe is None:
L1306             try:
L1307                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1308             except Exception:
L1309                 g_universe = list(feature_df.index)
L1310         if not g_universe:
L1311             return feature_df
L1312
L1313         # 指標
L1314         px = px.ffill(limit=2)
L1315         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1316         ma50  = px[g_universe].rolling(50).mean()
L1317         ma150 = px[g_universe].rolling(150).mean()
L1318         ma200 = px[g_universe].rolling(200).mean()
L1319         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1320         vol20 = vol[g_universe].rolling(20).mean()
L1321         vol50 = vol[g_universe].rolling(50).mean()
L1322
L1323         # トレンドテンプレート合格
L1324         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1325                             & (ma150 > ma200) & (ma200.diff() > 0)
L1326
L1327         # 汎用ピボット：直近65営業日の高値（当日除外）
L1328         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1329
L1330         # 相対力：年内高値更新
L1331         bench_aligned = bench.reindex(px.index).ffill()
L1332         rs = px[g_universe].div(bench_aligned, axis=0)
L1333         rs_high = rs.rolling(252).max().shift(1)
L1334
L1335         # ブレイクアウト「発生日」：条件立ち上がり
L1336         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1337                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1338         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1339
L1340         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1341         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1342         volume_dryup = (vol20 / vol50) <= 1.0
L1343         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1344         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1345         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1346
L1347         # 直近N営業日内の発火 / 最終発生日
L1348         rows = []
L1349         for t in g_universe:
L1350             def _recent_and_date(s, win):
L1351                 sw = s[t].iloc[-win:]
L1352                 if sw.any():
L1353                     d = sw[sw].index[-1]
L1354                     return True, d.strftime("%Y-%m-%d")
L1355                 return False, ""
L1356             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1357             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1358             rows.append((t, {
L1359                 "G_BREAKOUT_recent_5d": br_recent,
L1360                 "G_BREAKOUT_last_date": br_date,
L1361                 "G_PULLBACK_recent_5d": pb_recent,
L1362                 "G_PULLBACK_last_date": pb_date,
L1363                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1364             }))
L1365         flags = pd.DataFrame({k: v for k, v in rows}).T
L1366
L1367         # 列を作成・上書き
L1368         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1369         for c in cols:
L1370             if c not in feature_df.columns:
L1371                 feature_df[c] = np.nan
L1372         feature_df.loc[flags.index, flags.columns] = flags
L1373
L1374     except Exception:
L1375         pass
L1376     return feature_df
L1377
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=12）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 12本)`（= N_G）
L17   - 緊急解除: `max(q20, 18本)`（= ceil(1.5×12)）
L18   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **14%**
L24  - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（20×5%に全戻しのみ）
L25
L26 ## モード別の推奨“保有銘柄数”（MMF≒現金）
L27 *各枠=5%（20銘柄均等）。モード移行時は**Gの枠数のみ**調整し、外した枠は現金として保持。*
L28
L29 - **NORMAL:** G **12** / D **8** / 現金化枠 **0**  
L30 - **CAUTION:** G **10** / D **8** / 現金化枠 **2**（= 10%）  
L31 - **EMERG:** G **8**  / D **8** / 現金化枠 **4**（= 20%）  
L32
L33 > 実運用：⭐️低スコアのGから順に外す。解除時はfactor上位から補充。
L34
L35 ## トレーリングストップ
L36 - **基本TS (モード別):** NORMAL **15%** / CAUTION **13%** / EMERG **10%**
L37 - 含み益が **+30% / +60% / +100%** 到達で、基本から **-3pt / -6pt / -8pt** 引き上げ
L38 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L39
L40 ## 半戻し（リバランス）手順
L41 ドリフトチェックで**アラート**が出た場合（合計|drift| がモード閾値を超過、EMERG除く）、翌営業日の米国寄付きで下記を実施する。
L42
L43 1. **売却（必須）**  
L44    Slackテーブルの **Δqty がマイナスの銘柄を売却** する（寄付き成行推奨）。  
L45    これは「半戻し」計算に基づく過重量の削減を意味する。
L46
L47 2. **購入（任意・半戻し目安）**  
L48    半戻し後の合計|drift|を**シミュレーション値（Slackヘッダに表示）**に近づけることを目安に、  
L49    **任意の銘柄を買い増し**してバランスを取る（Δqtyがプラスの銘柄を優先してもよい）。
L50
L51 3. **トレーリングストップの再設定（必須）**  
L52    すべての保有銘柄について、最新の評価額に合わせてTSを**再発注／更新**する。  
L53    ルールは下記（利益到達で段階的にタイト化）：  
L54    - **基本TS:** -15%  
L55    - **+30% 到達 → TS -12%**  
L56    - **+60% 到達 → TS -9%**  
L57    - **+100% 到達 → TS -7%**  
L58    ※ストップ価格の引き上げは許可、**引き下げは不可**（利益保全の原則）。
L59
L60 4. **例外（EMERGモード）**  
L61    緊急(EMERG)では**ドリフト由来の売買は停止（∞）**。20銘柄×各5%への**全戻し**のみ許容。
L62
L63 5. **実行タイミング**
L64    - 判定：米国市場終値直後
L65    - 執行：翌営業日の米国寄付き成行
L66
L67 ## モード移行の実務手順（超シンプル）
L68 モードが変わったら、**MMF≒現金**として扱い、**Gの枠数だけ**を調整する：
L69 1. **Gを削る**（CAUTION/EMERG）  
L70    - ⭐️低スコアのGから順に外す。  
L71    - **`current_tickers.csv` から外すG銘柄の行を削除**（＝その枠は現金化）。
L72 2. **現金として保持**  
L73    - 外した枠は現金（またはMMF相当）でプール。  
L74 3. **復帰時の補充**（NORMALへ）  
L75    - **`current_tickers.csv` に銘柄を追加**（factor上位から）。  
L76    - 以降は日次ドリフト/TSルールに従う。
L77
L78 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて自動で均等比率が再計算される。
L79
L80 ## 入替銘柄選定
L81 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L82 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L83
L84 ## 再エントリー（クールダウン）
L85 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L86
L87 ## 実行タイミング
L88 - 判定：米国市場終値直後
L89 - 執行：翌営業日の米国寄付き成行
```

## <documents/factor_design.md>
```text
L1 # factor.py 詳細設計書
L2
L3 ## 概要
L4 - 既存ポートフォリオの銘柄と検討中の銘柄群を同時に扱う銘柄選定パイプライン。
L5 - 価格・財務データを取り込みスコアリングとDRRS選定を行うことで、以下のアウトプットを得る。
L6   - 採用銘柄と惜しくも漏れた銘柄のスコア一覧
L7   - IN/OUTのティッカーリストとOUT側の低スコア銘柄
L8   - 新旧ポートフォリオの比較表
L9   - 検討中銘柄の低スコアランキング（整理用）
L10
L11 ## 全体フロー
L12 1. **Input** – `current_tickers.csv`と`candidate_tickers.csv`を読み込み、yfinanceやFinnhubのAPIから価格・財務データを収集して`InputBundle`を整備。
L13 2. **Score Calculation** – Scorerが特徴量を計算し因子スコアを合成して`FeatureBundle`を生成。
L14 3. **Correlation Reduction & Selection** – SelectorがDRRSロジックで相関を抑えつつG/D銘柄を選定し`SelectionBundle`を得る。
L15 4. **Output** – 採用結果と周辺情報を表・Slack通知として出力。
L16
L17 ```mermaid
L18 flowchart LR
L19   A[Input\nAPI & 前処理] --> B[Score Calculation\n特徴量・因子合成]
L20   B --> C[Correlation Reduction\nDRRS選定]
L21   C --> D[Output\nSlack通知]
L22 ```
L23
L24 ## 定数・設定
L25 | 変数 | 内容 | 主な用途 |
L26 | --- | --- | --- |
L27 | `exist` / `cand` | 現行ポートフォリオと検討中銘柄のティッカーリスト | スコア対象ユニバースの構成、候補整理 |
L28 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L29 | `CAND_PRICE_MAX` | 候補銘柄の許容価格上限 | 高額銘柄の事前除外 |
L30 | `N_G` / `N_D` | G/D採用枠の件数（**既定: 12 / 8**） | 最終的に選ぶ銘柄数の制約 |
L31 | `g_weights` / `D_weights` | 各因子の重みdict | G/Dスコア合成 |
L32 | `D_BETA_MAX` | Dバケットの許容β上限 | 高β銘柄の除外フィルタ |
L33 | `FILTER_SPEC` | G/Dごとの前処理フィルタ | トレンドマスクやβ上限設定 |
L34 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L35 | `DRRS_G` / `DRRS_D` | DRRSパラメータdict | バケット別の相関低減設定 |
L36 | `DRRS_SHRINK` | 残差相関の対角シュリンク率 | `residual_corr`の安定化 |
L37 | `CROSS_MU_GD` | G-D間クロス相関ペナルティμ | 2バケット同時最適化で相関抑制 |
L38 | `RESULTS_DIR` | 選定結果保存ディレクトリ | `_save_sel`/`_load_prev`の入出力 |
L39
L40 選定結果は`results/`配下にJSONとして保存し、次回実行時に`_load_prev`で読み込んで選定条件に反映。
L41
L42 ## DTO/Config
L43 各ステップ間で受け渡すデータ構造と設定値。変数の意味合いと利用箇所を以下に示す。
L44
L45 ### InputBundle（Input → Scorer）
L46 | 変数 | 内容 | 主な用途 |
L47 | --- | --- | --- |
L48 | `cand` | 候補銘柄ティッカーのリスト | OUTテーブルや低スコアランキング対象の母集団 |
L49 | `tickers` | 現行+候補を合わせたティッカー一覧 | 価格・出来高ダウンロード、リターン計算 |
L50 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L51 | `data` | yfinanceのダウンロード結果（階層列） | `px`/`spx`/リターン等の基礎データ |
L52 | `px` | `data['Close']`だけを抜き出した価格系列 | 指標計算・リターン生成 |
L53 | `spx` | `data['Close'][bench]` のSeries | `rs`や`calc_beta`の基準指数 |
L54 | `tickers_bulk` | `yf.Tickers`オブジェクト | `info`等の一括取得 |
L55 | `info` | ティッカー別のyfinance情報dict | セクター判定やEPS補完 |
L56 | `eps_df` | EPS TTM/直近EPS等をまとめた表 | 成長指標の算出 |
L57 | `fcf_df` | CFO・CapEx・FCF TTMと情報源フラグ | FCF/EVや配当カバレッジ |
L58 | `returns` | `px.pct_change()`のリターン表 | 相関行列・DRRS計算 |
L59
L60 ### FeatureBundle（Scorer → Selector）
L61 | 変数 | 内容 | 主な用途 |
L62 | --- | --- | --- |
L63 | `df` | 計算済み指標の生値テーブル | デバッグ・出力表示 |
L64 | `df_z` | ウィンザー後Zスコア化した指標表 | 因子スコア合成、選定基準 |
L65 | `g_score` | Gバケット総合スコア | G選定、IN/OUT比較 |
L66 | `d_score_all` | Dバケット総合スコア（全銘柄） | D選定、低スコアランキング |
L67 | `missing_logs` | 欠損指標と補完状況のログ | データ品質チェック |
L68
L69 ### SelectionBundle（Selector → Output）
L70 | 変数 | 内容 | 主な用途 |
L71 | --- | --- | --- |
L72 | `resG` | G選定結果の詳細dict（`tickers`、目的値等） | 結果保存・平均相関などの指標表示 |
L73 | `resD` | D選定結果の詳細dict | 同上 |
L74 | `top_G` | 最終採用Gティッカー | 新ポートフォリオ構築 |
L75 | `top_D` | 最終採用Dティッカー | 同上 |
L76 | `init_G` | DRRS前のG初期候補 | 惜しくも外れた銘柄表示 |
L77 | `init_D` | DRRS前のD初期候補 | 同上 |
L78
L79 ### WeightsConfig
L80 | 変数 | 内容 | 主な用途 |
L81 | --- | --- | --- |
L82 | `g` | G因子（GRW/MOM/VOL）の重みdict | `g_score`合成 |
L83 | `d` | D因子（D_QAL/D_YLD/D_VOL_RAW/D_TRD）の重みdict | `d_score_all`合成 |
L84
L85 ### DRRSParams
L86 | 変数 | 内容 | 主な用途 |
L87 | --- | --- | --- |
L88 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L89 | `shrink` | 残差相関のシュリンク率 | `residual_corr`の対角強調 |
L90 | `G` | Gバケット用パラメータdict（`lookback`等） | `select_bucket_drrs`設定 |
L91 | `D` | Dバケット用パラメータdict | 同上 |
L92 | `cross_mu_gd` | G-Dクロス相関ペナルティ係数μ | `select_buckets`の目的関数 |
L93
L94 ### PipelineConfig
L95 | 変数 | 内容 | 主な用途 |
L96 | --- | --- | --- |
L97 | `weights` | `WeightsConfig`のインスタンス | スコア合成の重み参照 |
L98 | `drrs` | `DRRSParams`のインスタンス | 選定ステップの設定値 |
L99 | `price_max` | 候補銘柄の許容価格上限 | Input段階でのフィルタ |
L100
L101 ## 共通ユーティリティ
L102 - `winsorize_s` / `robust_z` : 外れ値処理とZスコア化。
L103 - `_safe_div` / `_safe_last` : 例外を潰した分割・末尾取得。
L104 - `_load_prev` / `_save_sel` : 選定結果の読み書き。
L105
L106 ## クラス設計
L107 ### Step1: Input
L108 `current_tickers.csv`の現行銘柄と`candidate_tickers.csv`の検討中銘柄を起点にデータを集約する。外部I/Oと前処理を担当し、`prepare_data`で`InputBundle`を生成。価格・財務データの取得は**yfinanceを優先し、欠損がある指標のみFinnhub APIで補完**する。
L109 主なメソッド:
L110 - `impute_eps_ttm` : 四半期EPS×4でTTMを推定し欠損時のみ差し替え。
L111 - `fetch_cfo_capex_ttm_yf` : yfinanceの四半期/年次キャッシュフローからCFO・CapEx・FCF TTMを算出。
L112 - `fetch_cfo_capex_ttm_finnhub` : yfinanceで欠けた銘柄のみFinnhub APIで補完。
L113 - `compute_fcf_with_fallback` : yfinance値を基準にFinnhub値で穴埋めし、CFO/CapEx/FCFと情報源フラグを返す。
L114 - `_build_eps_df` : `info`や`quarterly_earnings`からEPS TTMと直近EPSを計算し、`impute_eps_ttm`で補完。
L115 - `prepare_data` :
L116     0. CSVから現行銘柄と候補銘柄のティッカー一覧を読み込む。
L117     1. 候補銘柄の現在値を取得し価格上限でフィルタ。
L118     2. 既存+候補から対象ティッカーを決定し、価格・出来高を一括ダウンロード（yfinance）。
L119     3. yfinance値を基にEPS/FCFテーブルやベンチマーク系列、リターンを構築し、欠損セルはFinnhub呼び出しで穴埋め。
L120     4. 上記を`InputBundle`に格納して返す。
L121
L122 ### Step2: Score Calculation (Scorer)
L123 特徴量計算とスコア合成を担当し、`FeatureBundle`を返す。
L124
L125 #### 補助関数
L126 - `trend(s)` : 50/150/200日移動平均や52週レンジから-0.5〜0.5で構成されたトレンド指標。
L127 - `rs(s,b)` / `tr_str(s)` / `rs_line_slope(s,b,win)` : 相対強さや短期トレンド、RS回帰傾きを算出。
L128 - `ev_fallback` : `enterpriseValue`欠損時に負債・現金からEVを推定。
L129 - `dividend_status` / `div_streak` : 配当未設定状況の判定と増配年数カウント。
L130 - `fetch_finnhub_metrics` : Finnhub APIからEPS成長・ROE・βなど不足指標を取得。
L131 - `calc_beta` : ベンチマークとの共分散からβを算出。
L132 - `spx_to_alpha` : S&P500の位置情報からDRRSで用いるαを推定。
L133 - `soft_cap_effective_scores` / `pick_top_softcap` : セクターソフトキャップ付きスコア調整と上位抽出。
L134
L135 **補助関数と生成指標**
L136
L137 | 補助関数 | 生成指標 | 略称 |
L138 | --- | --- | --- |
L139 | `trend` | トレンド総合値 | `TR` |
L140 | `rs` | 相対強さ | `RS` |
L141 | `tr_str` | 価格と50日線の乖離 | `TR_str` |
L142 | `rs_line_slope` | RS線の回帰傾き | `RS_SLOPE_*` |
L143 | `calc_beta` | β | `BETA` |
L144 | `div_streak` | 連続増配年数 | `DIV_STREAK` |
L145
L146 #### `aggregate_scores` 詳細
L147 1. 各銘柄の価格系列や`info`を基に以下を算出。
L148    - **トレンド/モメンタム**: `TR`、`RS`、`TR_str`、多様な移動平均比、`RS_SLOPE_*`など。
L149    - **リスク**: `BETA`、`DOWNSIDE_DEV`、`MDD_1Y`、`RESID_VOL`、`DOWN_OUTPERF`、`EXT_200`等。
L150    - **配当**: `DIV`、`DIV_TTM_PS`、`DIV_VAR5`、`DIV_YOY`、`DIV_FCF_COVER`、`DIV_STREAK`。
L151    - **財務・成長**: `EPS`、`REV`、`ROE`、`FCF/EV`、`REV_Q_YOY`、`EPS_Q_YOY`、`REV_YOY_ACC`、`REV_YOY_VAR`、`REV_ANN_STREAK`、`RULE40`、`FCF_MGN` 等。
L152    - **安定性/サイズ**: `DEBT2EQ`、`CURR_RATIO`、`MARKET_CAP`、`ADV60_USD`、`EPS_VAR_8Q`など。
L153 2. 指標欠損はFinnhub API等で補完し、未取得項目を`missing_logs`に記録。
L154 3. `winsorize_s`→`robust_z`で標準化し`df_z`へ保存。サイズ・流動性は対数変換。
L155 4. 正規化済指標から因子スコアを合成。
L156    - 各因子の構成と重みは以下の通り。
L157      - **GRW**: 0.30×`REV` + 0.20×`EPS_Q_YOY` + 0.15×`REV_Q_YOY` + 0.15×`REV_YOY_ACC` + 0.10×`RULE40` + 0.10×`FCF_MGN` + 0.10×`REV_ANN_STREAK` − 0.05×`REV_YOY_VAR`。
L158      - **MOM**: 0.40×`RS` + 0.15×`TR_str` + 0.15×`RS_SLOPE_6W` + 0.15×`RS_SLOPE_13W` + 0.10×`MA200_SLOPE_5M` + 0.10×`MA200_UP_STREAK_D`。
L159      - **VOL**: `BETA`単体を使用。
L160      - **QAL**: 0.60×`FCF_W` + 0.40×`ROE_W`で作成。
L161      - **YLD**: 0.30×`DIV` + 0.70×`DIV_STREAK`。
L162      - **D_QAL**: 0.35×`QAL` + 0.20×`FCF` + 0.15×`CURR_RATIO` − 0.15×`DEBT2EQ` − 0.15×`EPS_VAR_8Q`。
L163      - **D_YLD**: 0.45×`DIV` + 0.25×`DIV_STREAK` + 0.20×`DIV_FCF_COVER` − 0.10×`DIV_VAR5`。
L164      - **D_VOL_RAW**: 0.40×`DOWNSIDE_DEV` + 0.22×`RESID_VOL` + 0.18×`MDD_1Y` − 0.10×`DOWN_OUTPERF` − 0.05×`EXT_200` − 0.08×`SIZE` − 0.10×`LIQ` + 0.10×`BETA`。
L165      - **D_TRD**: 0.40×`MA200_SLOPE_5M` − 0.30×`EXT_200` + 0.15×`NEAR_52W_HIGH` + 0.15×`TR`。
L166     - 主な指標の略称と意味:
L167
L168       | 略称 | 補助関数 | 概要 |
L169       | --- | --- | --- |
L170       | TR | `trend` | 50/150/200日移動平均と52週レンジを組み合わせたトレンド総合値 |
L171       | RS | `rs` | ベンチマークに対する相対強さ（12M/1Mリターン差） |
L172       | TR_str | `tr_str` | 価格と50日移動平均の乖離 |
L173       | RS_SLOPE_6W | `rs_line_slope` | 相対強さ線の6週回帰傾き |
L174       | RS_SLOPE_13W | `rs_line_slope` | 相対強さ線の13週回帰傾き |
L175       | MA200_SLOPE_5M | - | 200日移動平均の5か月騰落率 |
L176       | MA200_UP_STREAK_D | - | 200日線が連続で上向いた日数 |
L177       | BETA | `calc_beta` | ベンチマークに対するβ |
L178       | DOWNSIDE_DEV | - | 下方リターンのみの年率化標準偏差 |
L179       | RESID_VOL | - | βで調整した残差リターンの年率化標準偏差 |
L180       | MDD_1Y | - | 過去1年の最大ドローダウン |
L181       | DOWN_OUTPERF | - | 市場下落日に対する平均超過リターン |
L182       | EXT_200 | - | 200日移動平均からの絶対乖離率 |
L183       | NEAR_52W_HIGH | - | 52週高値までの下方距離（0=高値） |
L184       | FCF_W | - | ウィンザー処理後のFCF/EV |
L185       | ROE_W | - | ウィンザー処理後のROE |
L186       | FCF | - | FCF/EV |
L187       | QAL | - | FCF_WとROE_Wを組み合わせた品質スコア |
L188       | CURR_RATIO | - | 流動比率 |
L189       | DEBT2EQ | - | 負債資本倍率 |
L190       | EPS_VAR_8Q | - | EPSの8四半期標準偏差 |
L191       | DIV | - | 年率換算配当利回り |
L192       | DIV_STREAK | `div_streak` | 連続増配年数 |
L193       | DIV_FCF_COVER | - | 配当のFCFカバレッジ |
L194       | DIV_VAR5 | - | 5年配当変動率 |
L195       | DIV_TTM_PS | - | 1株当たりTTM配当 |
L196       | DIV_YOY | - | 前年比配当成長率 |
L197       | REV | - | 売上成長率TTM |
L198       | EPS_Q_YOY | - | 四半期EPSの前年同期比 |
L199       | REV_Q_YOY | - | 四半期売上の前年同期比 |
L200       | REV_YOY_ACC | - | 売上成長率の加速分 |
L201       | RULE40 | - | 売上成長率とFCFマージンの合計 |
L202       | FCF_MGN | - | FCFマージン |
L203       | REV_ANN_STREAK | - | 年次売上成長の連続年数 |
L204       | REV_YOY_VAR | - | 年次売上成長率の変動性 |
L205       | SIZE | - | 時価総額の対数値 |
L206       | LIQ | - | 60日平均出来高ドルの対数値 |
L207    - Gバケット: `GRW`、`MOM`、`VOL`を`cfg.weights.g`（0.40/0.45/-0.15）で加重し`g_score`を得る。
L208    - Dバケット: `D_QAL`、`D_YLD`、`D_VOL_RAW`、`D_TRD`を`cfg.weights.d`（0.15/0.15/-0.45/0.25）で加重し`d_score_all`を算出。
L209    - セクターcapによる`soft_cap_effective_scores`を適用し、G採用銘柄にはトレンドテンプレートフィルタを適用。
L210 5. `_apply_growth_entry_flags`でブレイクアウト/押し目発火状況を付加し、`FeatureBundle`を返す。
L211
L212 ### Step3: Correlation Reduction & Selection (Selector)
L213 DRRSアルゴリズムで相関を抑えた銘柄選定を行い、`SelectionBundle`を返す。`results/`に保存された前回選定（`G_selection.json` / `D_selection.json`）を`_load_prev`で読み込み、目的値が大きく悪化しない限り維持する。新しい採用集合は`_save_sel`でJSONに書き出し次回以降の入力に備える。
L214 主なメソッド:
L215 - `residual_corr` : 収益率行列をZスコア化し、上位主成分を除去した残差から相関行列を求め、平均相関に応じてシュリンク。
L216 - `rrqr_like_det` : スコアを重み付けしたQR分解風の手順で初期候補をk件抽出し、スコアの高い非相関な集合を得る。
L217 - `swap_local_det` / `swap_local_det_cross` : `sum(score) - λ*within_corr - μ*cross_corr`を目的関数として、入れ替え探索で局所的に最適化。
L218 - `select_bucket_drrs` : プール銘柄とスコアから残差相関を計算し、上記2段階(初期選択→入れ替え)でk銘柄を決定。過去採用銘柄との比較で目的値が劣化しなければ維持する。
L219 - `select_buckets` : Gバケットを選定後、その結果を除いた候補からDバケットを選ぶ。D選定時はGとの相関ペナルティμを付与し、両バケットの分散を制御する。
L220
L221 #### 相関低減ロジック詳細
L222 1. **残差相関行列の構築 (`residual_corr`)**
L223    - リターン行列`R`をZスコア化。
L224    - SVDで上位`n_pc`主成分`F`を求め、最小二乗で係数`B`を算出し残差`E = Z - F@B`を得る。
L225    - `E`の相関行列`C`を計算し、平均絶対相関に応じてシュリンク量`shrink_eff`を補正して対角を強調。
L226 2. **初期候補の抽出 (`rrqr_like_det`)**
L227    - スコアを0-1正規化した重み`w`とし、`Z*(1+γw)`で列ノルムを強調。
L228    - 残差ノルム最大の列を逐次選び、QRライクなデフレーションを行って非相関かつ高スコアな`k`銘柄集合`S0`を得る。
L229 3. **局所探索 (`swap_local_det` / `swap_local_det_cross`)**
L230    - 目的関数`Σz_score − λ·within_corr − μ·cross_corr`を最大化。
L231    - 選択集合の各銘柄を他候補と入れ替え、改善がなくなるまでまたは`max_pass`回まで探索。
L232    - `swap_local_det_cross`はGバケットとのクロス相関行列`C_cross`を使用し、ペナルティ`μ`を付与。
L233 4. **過去採用の維持とクロスペナルティ (`select_bucket_drrs` / `select_buckets`)**
L234    - 局所探索結果`S`と過去集合`P`の目的値を比較し、`S`が`P`より`η`未満の改善なら`P`を維持。
L235    - `select_buckets`ではGを先に決定し、D選定時にGとの相関ペナルティ`μ`を加えてクロス分散を抑制。
L236
L237 ### Step4: Output
L238 選定結果を可視化し共有する工程。以下の内容をテーブル化して標準出力とSlackへ送る。
L239 - 採用銘柄と惜しくも選外となった銘柄のスコア一覧
L240 - IN/OUTリストとOUT銘柄のスコア（低得点銘柄を確認しやすく）
L241 - 新旧ポートフォリオの比較表（組入れ・除外、スコア変化）
L242 - 検討中銘柄の低スコアランキング
L243
L244 主なメソッド:
L245 - `display_results` : 上記テーブルに加えパフォーマンス指標や分散化指標を表示。
L246 - `notify_slack` : Slack Webhookへ同内容を送信。
L247 - 補助:`_avg_offdiag`、`_resid_avg_rho`、`_raw_avg_rho`、`_cross_block_raw_rho`。
L248
L249 ## エントリポイント
L250 1. `PipelineConfig`を構築。
L251 2. **Step1** `Input.prepare_data`で`InputBundle`を生成。
L252 3. **Step2** `Scorer.aggregate_scores`で`FeatureBundle`を取得。
L253 4. **Step3** `Selector.select_buckets`で`SelectionBundle`を算出。
L254 5. **Step4** `Output.display_results`と`notify_slack`で結果を出力。
```
