# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: config.py, factor.py, scorer.py, .github/workflows/weekly-report.yml, documents/README.md, documents/factor_design.md
# 作成日時: 2025-09-21 10:15:43 (JST)
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <config.py>
```text
L1 # 共通設定（factor / drift から参照）
L2 TOTAL_TARGETS = 20
L3
L4 # 基準のバケット数（NORMAL）
L5 COUNTS_BASE = {"G": 12, "D": 8}
L6
L7 # モード別の推奨バケット数
L8 COUNTS_BY_MODE = {
L9     "NORMAL": {"G": 12, "D": 8},
L10     "CAUTION": {"G": 10, "D": 8},
L11     "EMERG": {"G": 8,  "D": 8},
L12 }
L13
L14 # モード別のドリフト閾値（%）
L15 DRIFT_THRESHOLD_BY_MODE = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L16
L17 # モード別のTS（基本幅, 小数=割合）
L18 TS_BASE_BY_MODE = {"NORMAL": 0.15, "CAUTION": 0.13, "EMERG": 0.10}
L19 # 利益到達(+30/+60/+100%)時の段階タイト化（ポイント差）
L20 TS_STEP_DELTAS_PT = (3, 6, 8)
L21
L22 # Breadthの校正は N_G に連動（緊急解除=ceil(1.5*N_G), 通常復帰=3*N_G）
L23 N_G = COUNTS_BASE["G"]
L24 N_D = COUNTS_BASE["D"]
L25
```

## <factor.py>
```text
L1 '''ROLE: Orchestration ONLY（外部I/O・SSOT・Slack出力）, 計算は scorer.py'''
L2 # === NOTE: 機能・入出力・ログ文言・例外挙動は不変。安全な短縮（import統合/複数代入/内包表記/メソッドチェーン/一行化/空行圧縮など）のみ適用 ===
L3 BONUS_COEFF = 0.55  # 推奨: 攻め=0.45 / 中庸=0.55 / 守り=0.65
L4 SWAP_DELTA_Z = 0.15   # 僅差判定: σの15%。(緩め=0.10 / 標準=0.15 / 固め=0.20)
L5 SWAP_KEEP_BUFFER = 3  # n_target+この順位以内の現行は保持。(粘り弱=2 / 標準=3 / 粘り強=4〜5)
L6 import logging, os, time, requests
L7 from concurrent.futures import ThreadPoolExecutor
L8 from dataclasses import dataclass
L9 from time import perf_counter
L10 from typing import Any, Dict, List, Tuple
L11
L12 import numpy as np
L13 import pandas as pd
L14 import yfinance as yf
L15 from scipy.stats import zscore  # used via scorer
L16
L17 from scorer import Scorer, ttm_div_yield_portfolio, _log
L18 import config
L19
L20 import warnings, atexit, threading
L21 from collections import Counter, defaultdict
L22
L23 # ---------- 重複警告の集約ロジック ----------
L24 _warn_lock = threading.Lock()
L25 _warn_seen = set()                     # 初回表示済みキー
L26 _warn_count = Counter()                # (category, message, module) → 件数
L27 _warn_first_ctx = {}                   # 初回の (filename, lineno)
L28
L29 def _warn_key(message, category, filename, lineno, *_args, **_kwargs):
L30     # "同じ警告" を定義: カテゴリ + 正規化メッセージ + モジュールパス(先頭数階層)
L31     mod = filename.split("/site-packages/")[-1] if "/site-packages/" in filename else filename
L32     mod = mod.rsplit("/", 3)[-1]  # 長すぎ抑制（末尾3階層まで）
L33     msg = str(message).strip()
L34     return (category.__name__, msg, mod)
L35
L36 _orig_showwarning = warnings.showwarning
L37
L38 def _compact_showwarning(message, category, filename, lineno, file=None, line=None):
L39     key = _warn_key(message, category, filename, lineno)
L40     with _warn_lock:
L41         _warn_count[key] += 1
L42         if key not in _warn_seen:
L43             # 初回だけ1行で出す（カテゴリ | モジュール | メッセージ）
L44             _warn_seen.add(key)
L45             _warn_first_ctx[key] = (filename, lineno)
L46             # 1行フォーマット（行数節約）
L47             txt = f"[WARN][{category.__name__}] {message} | {filename}:{lineno}"
L48             print(txt)
L49         # 2回目以降は出さない（集約）
L50
L51 warnings.showwarning = _compact_showwarning
L52
L53 # ベースポリシー: 通常は警告を出す（default）→ ただし同一メッセージは集約
L54 warnings.resetwarnings()
L55 warnings.simplefilter("default")
L56
L57 # 2) ピンポイント間引き: yfinance 'Ticker.earnings' は "once"（初回のみ可視化）
L58 warnings.filterwarnings(
L59     "once",
L60     message="'Ticker.earnings' is deprecated",
L61     category=DeprecationWarning,
L62     module="yfinance"
L63 )
L64
L65 # 3) 最終サマリ: 同一警告が何回出たかを最後に1行で
L66 @atexit.register
L67 def _print_warning_summary():
L68     suppressed = []
L69     for key, cnt in _warn_count.items():
L70         if cnt > 1:
L71             (cat, msg, mod) = key
L72             filename, lineno = _warn_first_ctx.get(key, ("", 0))
L73             suppressed.append((cnt, cat, msg, mod, filename, lineno))
L74     if suppressed:
L75         suppressed.sort(reverse=True)  # 件数降順
L76         # 最多上位だけ出す（必要なら上限制御：ここでは上位10件）
L77         top = suppressed[:10]
L78         print(f"[WARN-SUMMARY] duplicated warning groups: {len(suppressed)}")
L79         for cnt, cat, msg, mod, filename, lineno in top:
L80             print(f"[WARN-SUMMARY] {cnt-1} more | [{cat}] {msg} | {mod} ({filename}:{lineno})")
L81         if len(suppressed) > len(top):
L82             print(f"[WARN-SUMMARY] ... and {len(suppressed)-len(top)} more groups suppressed")
L83
L84 # 4) 追加（任意）: 1ジョブあたりの総警告上限を設定したい場合
L85 #    例: 上限1000を超えたら以降は完全サイレント
L86 _WARN_HARD_LIMIT = int(os.getenv("WARN_HARD_LIMIT", "0") or "0")  # 0なら無効
L87 if _WARN_HARD_LIMIT > 0:
L88     _orig_warn_func = warnings.warn
L89     def _limited_warn(*a, **k):
L90         total = sum(_warn_count.values())
L91         if total < _WARN_HARD_LIMIT:
L92             return _orig_warn_func(*a, **k)
L93         # 超過後は捨てる（最後にsummaryだけ残る）
L94     warnings.warn = _limited_warn
L95
L96 # ---------- ここまでで警告の“可視性は維持”しつつ“重複で行数爆発”を抑止 ----------
L97
L98 # その他
L99 debug_mode, FINNHUB_API_KEY = True, os.environ.get("FINNHUB_API_KEY")
L100
L101 logger = logging.getLogger(__name__)
L102 logging.basicConfig(level=(logging.INFO if debug_mode else logging.WARNING), force=True)
L103
L104 class T:
L105     t = perf_counter()
L106
L107     @staticmethod
L108     def log(tag):
L109         now = perf_counter()
L110         print(f"[T] {tag}: {now - T.t:.2f}s")
L111         T.t = now
L112
L113 T.log("start")
L114
L115 # === ユニバースと定数（冒頭に固定） ===
L116 exist, cand = [pd.read_csv(f, header=None)[0].tolist() for f in ("current_tickers.csv","candidate_tickers.csv")]
L117 T.log(f"csv loaded: exist={len(exist)} cand={len(cand)}")
L118 CAND_PRICE_MAX, bench = 450, '^GSPC'  # 価格上限・ベンチマーク
L119 N_G, N_D = config.N_G, config.N_D  # G/D枠サイズ（NORMAL基準: G12/D8）
L120 g_weights = {'GROWTH_F':0.35,'MOM':0.55,'VOL':-0.10}
L121 D_BETA_MAX = float(os.environ.get("D_BETA_MAX", "0.8"))
L122 FILTER_SPEC = {"G":{"pre_mask":["trend_template"]},"D":{"pre_filter":{"beta_max":D_BETA_MAX}}}
L123 D_weights = {'QAL':0.1,'YLD':0.3,'VOL':-0.5,'TRD':0.1}
L124 _fmt_w = lambda w: " ".join(f"{k}{int(v*100)}" for k, v in w.items())
L125
L126 # DRRS 初期プール・各種パラメータ
L127 corrM = 45
L128 DRRS_G, DRRS_D = dict(lookback=252,n_pc=3,gamma=1.2,lam=0.68,eta=0.8), dict(lookback=504,n_pc=4,gamma=0.8,lam=0.85,eta=0.5)
L129 DRRS_SHRINK = 0.10  # 残差相関の対角シュリンク（基礎）
L130
L131 # クロス相関ペナルティ（未定義なら設定）
L132 try: CROSS_MU_GD
L133 except NameError: CROSS_MU_GD = 0.40  # 推奨 0.35–0.45（lam=0.85想定）
L134
L135 # 出力関連
L136 RESULTS_DIR = "results"
L137 os.makedirs(RESULTS_DIR, exist_ok=True)
L138
L139 # === 共有DTO（クラス間I/O契約）＋ Config ===
L140 @dataclass(frozen=True)
L141 class InputBundle:
L142     # Input → Scorer で受け渡す素材（I/O禁止の生データ）
L143     cand: List[str]
L144     tickers: List[str]
L145     bench: str
L146     data: pd.DataFrame              # yfinance download結果（'Close','Volume'等の階層列）
L147     px: pd.DataFrame                # data['Close']
L148     spx: pd.Series                  # data['Close'][bench]
L149     tickers_bulk: object            # yfinance.Tickers
L150     info: Dict[str, dict]           # yfinance info per ticker
L151     eps_df: pd.DataFrame            # ['eps_ttm','eps_q_recent',...]
L152     fcf_df: pd.DataFrame            # ['fcf_ttm', ...]
L153     returns: pd.DataFrame           # px[tickers].pct_change()
L154
L155 @dataclass(frozen=True)
L156 class FeatureBundle:
L157     df: pd.DataFrame
L158     df_z: pd.DataFrame
L159     g_score: pd.Series
L160     d_score_all: pd.Series
L161     missing_logs: pd.DataFrame
L162     df_full: pd.DataFrame | None = None
L163     df_full_z: pd.DataFrame | None = None
L164     scaler: Any | None = None
L165
L166 @dataclass(frozen=True)
L167 class SelectionBundle:
L168     resG: dict
L169     resD: dict
L170     top_G: List[str]
L171     top_D: List[str]
L172     init_G: List[str]
L173     init_D: List[str]
L174
L175 @dataclass(frozen=True)
L176 class WeightsConfig:
L177     g: Dict[str,float]
L178     d: Dict[str,float]
L179
L180 @dataclass(frozen=True)
L181 class DRRSParams:
L182     corrM: int
L183     shrink: float
L184     G: Dict[str,float]   # lookback, n_pc, gamma, lam, eta
L185     D: Dict[str,float]
L186     cross_mu_gd: float
L187
L188 @dataclass(frozen=True)
L189 class PipelineConfig:
L190     weights: WeightsConfig
L191     drrs: DRRSParams
L192     price_max: float
L193     debug_mode: bool = False
L194
L195 # === 共通ユーティリティ（複数クラスで使用） ===
L196 # (unused local utils removed – use scorer.py versions if needed)
L197
L198 _env_true = lambda name, default=False: (os.getenv(name) or str(default)).strip().lower() == "true"
L199
L200 def _post_slack(payload: dict):
L201     url = os.getenv("SLACK_WEBHOOK_URL")
L202     if not url: print("⚠️ SLACK_WEBHOOK_URL 未設定"); return
L203     try:
L204         requests.post(url, json=payload).raise_for_status()
L205     except Exception as e:
L206         print(f"⚠️ Slack通知エラー: {e}")
L207
L208 def _slack_send_text_chunks(url: str, text: str, chunk: int = 2800) -> None:
L209     """Slackへテキストを分割送信（コードブロック形式）。"""
L210
L211     def _post_text(payload: str) -> None:
L212         try:
L213             resp = requests.post(url, json={"text": payload})
L214             print(f"[DBG] debug_post status={getattr(resp,'status_code',None)} size={len(payload)}")
L215             if resp is not None:
L216                 resp.raise_for_status()
L217         except Exception as e:
L218             print(f"[ERR] debug_post_failed: {e}")
L219
L220     body = (text or "").strip()
L221     if not body:
L222         print("[DBG] skip debug send: empty body")
L223         return
L224
L225     block, block_len = [], 0
L226
L227     def _flush():
L228         nonlocal block, block_len
L229         if block:
L230             _post_text("```" + "\n".join(block) + "```")
L231             block, block_len = [], 0
L232
L233     for raw in body.splitlines():
L234         line = raw or ""
L235         while len(line) > chunk:
L236             head, line = line[:chunk], line[chunk:]
L237             _flush()
L238             _post_text("```" + head + "```")
L239         add_len = len(line) if not block else len(line) + 1
L240         if block and block_len + add_len > chunk:
L241             _flush(); add_len = len(line)
L242         block.append(line)
L243         block_len += add_len
L244     _flush()
L245
L246 def _disjoint_keepG(top_G, top_D, poolD):
L247     """G重複をDから除去し、poolDで順次補充（枯渇時は元銘柄維持）。"""
L248     used, D, i = set(top_G), list(top_D), 0
L249     for j, t in enumerate(D):
L250         if t not in used:
L251             continue
L252         while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L253             i += 1
L254         if i < len(poolD):
L255             D[j] = poolD[i]; used.add(D[j]); i += 1
L256     return top_G, D
L257
L258
L259 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L260                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L261     import pandas as pd, numpy as np
L262     sel = list(pick)
L263     if not sel: return sel
L264     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L265     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L266     std = agg.std()
L267     sigma = float(std) if pd.notna(std) else 0.0
L268     thresh = kth - delta_z * sigma
L269     ranked_all = agg.sort_values(ascending=False)
L270     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L271     for t in cand:
L272         within_score = pd.notna(agg[t]) and agg[t] >= thresh
L273         within_rank = t in ranked_all.index and ranked_all.index.get_loc(t) < n_target + keep_buffer
L274         if not (within_score or within_rank):
L275             continue
L276         non_inc = [x for x in sel if x not in incumbents]
L277         if not non_inc:
L278             break
L279         weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L280         if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L281             sel.remove(weakest); sel.append(t)
L282     if len(sel) > n_target:
L283         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L284     return sel
L285
L286
L287 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L288 class Input:
L289     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L290         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L291         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L292
L293     # ---- （Input専用）EPS補完・FCF算出系 ----
L294     @staticmethod
L295     def _sec_headers():
L296         mail = (os.getenv("SEC_CONTACT_EMAIL") or "yasonba55@gmail.com").strip()
L297         app = (os.getenv("SEC_APP_NAME") or "FactorBot/1.0").strip()
L298         return {"User-Agent": f"{app} ({mail})", "From": mail, "Accept": "application/json"}
L299
L300     @staticmethod
L301     def _sec_get(url: str, retries: int = 3, backoff: float = 0.5):
L302         for i in range(retries):
L303             r = requests.get(url, headers=Input._sec_headers(), timeout=20)
L304             if r.status_code in (429, 503, 403):
L305                 time.sleep(min(2 ** i * backoff, 8.0))
L306                 continue
L307             r.raise_for_status(); return r.json()
L308         r.raise_for_status()
L309
L310     @staticmethod
L311     def _sec_ticker_map():
L312         import requests
L313
L314         url_primary = "https://data.sec.gov/api/xbrl/company_tickers.json"
L315         url_fallback = "https://www.sec.gov/files/company_tickers.json"
L316         mp = {}
L317         try:
L318             j = Input._sec_get(url_primary)  # 既存の堅牢GET（リトライ・バックオフ）
L319         except Exception:
L320             r = requests.get(url_fallback, headers=Input._sec_headers(), timeout=20)
L321             r.raise_for_status()
L322             j = r.json()
L323         # 形状A: {"0": {"ticker":..., "cik_str":...}, ...}
L324         if isinstance(j, dict) and "0" in j:
L325             for _, v in (j or {}).items():
L326                 try:
L327                     mp[str(v["ticker"]).upper()] = f"{int(v['cik_str']):010d}"
L328                 except Exception:
L329                     pass
L330         # 形状B: [{"ticker":..., "cik_str":...}, ...]
L331         elif isinstance(j, list):
L332             for v in j:
L333                 try:
L334                     mp[str(v.get("ticker")).upper()] = f"{int(v.get('cik_str')):010d}"
L335                 except Exception:
L336                     pass
L337         # 形状C: {"data":[[idx,ticker,title,cik_str],...]}
L338         elif isinstance(j, dict) and "data" in j:
L339             for row in j.get("data") or []:
L340                 try:
L341                     t = str(row[1]).upper()
L342                     c = int(row[3])
L343                     mp[t] = f"{c:010d}"
L344                 except Exception:
L345                     pass
L346         return mp
L347
L348     # --- 追加: ADR/OTC向けの簡易正規化（末尾Y/F, ドット等） ---
L349     @staticmethod
L350     def _normalize_ticker(sym: str) -> list[str]:
L351         s = (sym or "").upper().strip()
L352         # 追加: 先頭の$や全角の記号を除去
L353         s = s.lstrip("$").replace("＄", "").replace("．", ".").replace("－", "-")
L354         cand: list[str] = []
L355
L356         def add(x: str) -> None:
L357             if x and x not in cand:
L358                 cand.append(x)
L359
L360         # 1) 原文を最優先（SECは BRK.B, BF.B など . を正式採用）
L361         add(s)
L362         # 2) Yahoo系バリアント（. と - の揺れを相互に）
L363         if "." in s:
L364             add(s.replace(".", "-"))
L365             add(s.replace(".", ""))
L366         if "-" in s:
L367             add(s.replace("-", "."))
L368             add(s.replace("-", ""))
L369         # 3) ドット・ハイフン・ピリオド無し版（最後の保険）
L370         add(s.replace("-", "").replace(".", ""))
L371         # 4) ADR簡易：末尾Y/Fの除去（SECマップは本体ティッカーを持つことがある）
L372         if len(s) >= 2 and s[-1] in {"Y", "F"}:
L373             add(s[:-1])
L374         return cand
L375
L376     @staticmethod
L377     def _sec_companyfacts(cik: str):
L378         return Input._sec_get(f"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik}.json")
L379
L380     @staticmethod
L381     def _units_for_tags(facts: dict, namespaces: list[str], tags: list[str]) -> list[dict]:
L382         """facts から namespace/tag を横断して units 配列を収集（存在順に連結）。"""
L383         out: list[dict] = []
L384         facts = (facts or {}).get("facts", {})
L385         for ns in namespaces:
L386             node = facts.get(ns, {}) if isinstance(facts, dict) else {}
L387             for tg in tags:
L388                 try:
L389                     units = node[tg]["units"]
L390                 except Exception:
L391                     continue
L392                 picks: list[dict] = []
L393                 if "USD/shares" in units:
L394                     picks.extend(list(units["USD/shares"]))
L395                 if "USD" in units:
L396                     picks.extend(list(units["USD"]))
L397                 if not picks:
L398                     for arr in units.values():
L399                         picks.extend(list(arr))
L400                 out.extend(picks)
L401         return out
L402
L403     @staticmethod
L404     def _only_quarterly(arr: list[dict]) -> list[dict]:
L405         """companyfactsの混在配列から『四半期』だけを抽出。
L406
L407         - frame に "Q" を含む（例: CY2024Q2I）
L408         - fp が Q1/Q2/Q3/Q4
L409         - form が 10-Q/10-Q/A/6-K
L410         """
L411         if not arr:
L412             return []
L413         q_forms = {"10-Q", "10-Q/A", "6-K"}
L414         out = [
L415             x
L416             for x in arr
L417             if (
L418                 "Q" in (x.get("frame") or "").upper()
L419                 or (x.get("fp") or "").upper() in {"Q1", "Q2", "Q3", "Q4"}
L420                 or (x.get("form") or "").upper() in q_forms
L421             )
L422         ]
L423         out.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L424         return out
L425
L426     @staticmethod
L427     def _series_from_facts_with_dates(arr, key_val="val", key_dt="end", normalize=float):
L428         """companyfactsアイテム配列から (date,value) を返す。dateはYYYY-MM-DDを想定。"""
L429         out: List[Tuple[str, float]] = []
L430         for x in (arr or []):
L431             try:
L432                 d = x.get(key_dt)
L433                 if d is None:
L434                     continue
L435                 v = x.get(key_val)
L436                 out.append((str(d), normalize(v) if v is not None else float("nan")))
L437             except Exception:
L438                 continue
L439         out.sort(key=lambda t: t[0], reverse=True)
L440         return out
L441
L442     def fetch_eps_rev_from_sec(self, tickers: list[str]) -> dict:
L443         out = {}
L444         t2cik = self._sec_ticker_map()
L445         n_map = n_rev = n_eps = 0
L446         miss_map: list[str] = []
L447         miss_facts: list[str] = []
L448         for t in tickers:
L449             base = (t or "").upper()
L450             candidates: list[str] = []
L451             for key in [base, *self._normalize_ticker(t)]:
L452                 if key and key not in candidates:
L453                     candidates.append(key)
L454             cik = next((t2cik.get(key) for key in candidates if t2cik.get(key)), None)
L455             if not cik:
L456                 out[t] = {}
L457                 miss_map.append(t)
L458                 continue
L459             try:
L460                 j = self._sec_companyfacts(cik)
L461                 facts = j or {}
L462                 rev_tags = [
L463                     "Revenues",
L464                     "RevenueFromContractWithCustomerExcludingAssessedTax",
L465                     "SalesRevenueNet",
L466                     "SalesRevenueGoodsNet",
L467                     "SalesRevenueServicesNet",
L468                     "Revenue",
L469                 ]
L470                 eps_tags = [
L471                     "EarningsPerShareDiluted",
L472                     "EarningsPerShareBasicAndDiluted",
L473                     "EarningsPerShare",
L474                     "EarningsPerShareBasic",
L475                 ]
L476                 rev_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], rev_tags)
L477                 eps_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], eps_tags)
L478                 rev_q_items = self._only_quarterly(rev_arr)
L479                 eps_q_items = self._only_quarterly(eps_arr)
L480                 # (date,value) で取得
L481                 rev_pairs = self._series_from_facts_with_dates(rev_q_items)
L482                 eps_pairs = self._series_from_facts_with_dates(eps_q_items)
L483                 rev_vals = [v for (_d, v) in rev_pairs]
L484                 eps_vals = [v for (_d, v) in eps_pairs]
L485                 rev_q = float(rev_vals[0]) if rev_vals else float("nan")
L486                 eps_q = float(eps_vals[0]) if eps_vals else float("nan")
L487                 rev_ttm = float(sum(v for v in rev_vals[:4] if v == v)) if rev_vals else float("nan")
L488                 eps_ttm = float(sum(v for v in eps_vals[:4] if v == v)) if eps_vals else float("nan")
L489                 out[t] = {
L490                     "eps_q_recent": eps_q,
L491                     "eps_ttm": eps_ttm,
L492                     "rev_q_recent": rev_q,
L493                     "rev_ttm": rev_ttm,
L494                     # 後段でDatetimeIndex化できるよう (date,value) を保持。値だけの互換キーも残す。
L495                     # 3年運用に合わせて四半期は直近12本のみ保持（約3年=12Q）
L496                     "eps_q_series_pairs": eps_pairs[:12],
L497                     "rev_q_series_pairs": rev_pairs[:12],
L498                     "eps_q_series": eps_vals[:12],
L499                     "rev_q_series": rev_vals[:12],
L500                 }
L501                 n_map += 1
L502                 if rev_vals:
L503                     n_rev += 1
L504                 if eps_vals:
L505                     n_eps += 1
L506             except Exception:
L507                 out[t] = {}
L508                 miss_facts.append(t)
L509             time.sleep(0.30)
L510         # 取得サマリをログ（Actionsで確認しやすいよう print）
L511         try:
L512             total = len(tickers)
L513             print(f"[SEC] map={n_map}/{total}  rev_q_hit={n_rev}  eps_q_hit={n_eps}")
L514             # デバッグ: 取得本数の分布（先頭のみ）
L515             try:
L516                 lens = [len((out.get(t, {}) or {}).get("rev_q_series", [])) for t in tickers]
L517                 print(f"[SEC] rev_q_series length: min={min(lens) if lens else 0} "
L518                       f"p25={np.percentile(lens,25) if lens else 0} median={np.median(lens) if lens else 0} "
L519                       f"p75={np.percentile(lens,75) if lens else 0} max={max(lens) if lens else 0}")
L520             except Exception:
L521                 pass
L522             if miss_map:
L523                 print(f"[SEC] no CIK map: {len(miss_map)} (サンプル例) {miss_map[:20]}")
L524             if miss_facts:
L525                 print(f"[SEC] CIKあり だが対象factなし: {len(miss_facts)} (サンプル例) {miss_facts[:20]}")
L526         except Exception:
L527             pass
L528         return out
L529
L530     def sec_dryrun_sample(self, tickers: list[str] | None = None) -> None:
L531         if not _env_true("SEC_DRYRUN_SAMPLE", False):
L532             return
L533         sample = tickers or ["BRK.B", "BF.B", "GOOGL", "META", "UBER", "PBR.A", "TSM", "NARI", "EVBN", "SWAV"]
L534         print(f"[SEC-DRYRUN] sample tickers: {sample}")
L535         try:
L536             t2cik = self._sec_ticker_map()
L537             hits = 0
L538             for sym in sample:
L539                 candidates: list[str] = []
L540
L541                 def add(key: str) -> None:
L542                     if key and key not in candidates:
L543                         candidates.append(key)
L544
L545                 add((sym or "").upper())
L546                 for alt in self._normalize_ticker(sym):
L547                     add(alt)
L548                 if any(t2cik.get(key) for key in candidates):
L549                     hits += 1
L550             sec_data = self.fetch_eps_rev_from_sec(sample)
L551             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L552             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L553             total = len(sample)
L554             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L555         except Exception as e:
L556             print(f"[SEC-DRYRUN] error: {e}")
L557     @staticmethod
L558     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L559         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L560         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L561         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L562
L563     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L564
L565     @staticmethod
L566     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L567         if df is None or df.empty: return None
L568         idx_lower={str(i).lower():i for i in df.index}
L569         for n in names:
L570             k=n.lower()
L571             if k in idx_lower: return df.loc[idx_lower[k]]
L572         return None
L573
L574     @staticmethod
L575     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L576         if s is None or s.empty: return None
L577         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L578
L579     @staticmethod
L580     def _latest(s: pd.Series|None) -> float|None:
L581         if s is None or s.empty: return None
L582         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L583
L584     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L585         from concurrent.futures import ThreadPoolExecutor, as_completed
L586         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L587
L588         def one(t: str):
L589             try:
L590                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L591                 qcf = tk.quarterly_cashflow
L592                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L593                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L594                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L595                 if any(v is None for v in (cfo, capex, fcf)):
L596                     acf = tk.cashflow
L597                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L598                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L599                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L600             except Exception as e:
L601                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L602             n=np.nan
L603             return {"ticker":t,
L604                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L605                     "capex_ttm_yf": n if capex is None else capex,
L606                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L607
L608         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L609         with ThreadPoolExecutor(max_workers=mw) as ex:
L610             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L611         return pd.DataFrame(rows).set_index("ticker")
L612
L613     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L614     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L615
L616     @staticmethod
L617     def _first_key(d: dict, keys: list[str]):
L618         for k in keys:
L619             if k in d and d[k] is not None: return d[k]
L620         return None
L621
L622     @staticmethod
L623     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L624         for i in range(retries):
L625             r = session.get(url, params=params, timeout=15)
L626             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L627             r.raise_for_status(); return r.json()
L628         r.raise_for_status()
L629
L630     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L631         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L632         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L633         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L634         for sym in tickers:
L635             cfo_ttm = capex_ttm = None
L636             try:
L637                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L638                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L639                 for item in arr[:4]:
L640                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L641                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L642                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L643             except Exception: pass
L644             if cfo_ttm is None or capex_ttm is None:
L645                 try:
L646                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L647                     arr = j.get("cashFlow") or []
L648                     if arr:
L649                         item0 = arr[0]
L650                         if cfo_ttm is None:
L651                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L652                             if v is not None: cfo_ttm = float(v)
L653                         if capex_ttm is None:
L654                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L655                             if v is not None: capex_ttm = float(v)
L656                 except Exception: pass
L657             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L658         return pd.DataFrame(rows).set_index("ticker")
L659
L660     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L661         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L662         T.log("financials (yf) done")
L663         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L664         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L665         if need:
L666             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L667             df = yf_df.join(fh_df, how="left")
L668             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L669                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L670             print("[T] financials (finnhub) done (fallback only)")
L671         else:
L672             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L673             print("[T] financials (finnhub) skipped (no missing)")
L674         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L675         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L676         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L677         fcf_calc = cfo - capex
L678         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L679         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L680         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L681         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L682         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L683         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L684         return df[cols].sort_index()
L685
L686     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L687         eps_rows=[]
L688         for t in tickers:
L689             info_t = info[t]
L690             sec_t = (sec_map or {}).get(t, {})
L691             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L692             eps_q = sec_t.get("eps_q_recent", np.nan)
L693             try:
L694                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L695                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L696                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L697                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L698                     if pd.isna(eps_q):
L699                         eps_q = qearn["Earnings"].iloc[-1]/so
L700             except Exception: pass
L701             rev_ttm = sec_t.get("rev_ttm", np.nan)
L702             rev_q = sec_t.get("rev_q_recent", np.nan)
L703             if (not sec_t) or pd.isna(rev_ttm):
L704                 try:
L705                     tk = tickers_bulk.tickers[t]
L706                     qfin = getattr(tk, "quarterly_financials", None)
L707                     if qfin is not None and not qfin.empty:
L708                         idx_lower = {str(i).lower(): i for i in qfin.index}
L709                         rev_idx = None
L710                         for name in ("Total Revenue", "TotalRevenue"):
L711                             key = name.lower()
L712                             if key in idx_lower:
L713                                 rev_idx = idx_lower[key]
L714                                 break
L715                         if rev_idx is not None:
L716                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L717                             if not rev_series.empty:
L718                                 rev_ttm_yf = float(rev_series.head(4).sum())
L719                                 if pd.isna(rev_ttm):
L720                                     rev_ttm = rev_ttm_yf
L721                                 if pd.isna(rev_q):
L722                                     rev_q = float(rev_series.iloc[0])
L723                 except Exception:
L724                     pass
L725             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q,"rev_ttm":rev_ttm,"rev_q_recent":rev_q})
L726         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L727
L728     def prepare_data(self):
L729         """Fetch price and fundamental data for all tickers."""
L730         self.sec_dryrun_sample()
L731         cand_info = yf.Tickers(" ".join(self.cand))
L732
L733         def _price(t: str) -> float:
L734             try:
L735                 return cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L736             except Exception as e:
L737                 print(f"{t}: price fetch failed ({e})")
L738                 return np.inf
L739
L740         cand_prices = {t: _price(t) for t in self.cand}
L741         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L742         T.log("price cap filter done (CAND_PRICE_MAX)")
L743         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L744         tickers = list(dict.fromkeys(self.exist + cand_f))
L745         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L746         data = yf.download(tickers + [self.bench], period="600d",
L747                            auto_adjust=True, progress=False, threads=False)
L748         T.log("yf.download done")
L749         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L750         spx = data["Close"][self.bench].reindex(px.index).ffill()
L751         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L752         if clip_days > 0:
L753             px, spx = px.tail(clip_days + 1), spx.tail(clip_days + 1)
L754             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)
L755         else:
L756             logger.info("[T] price window clip skipped; rows=%d", len(px))
L757         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L758         for t in tickers:
L759             try:
L760                 info[t] = tickers_bulk.tickers[t].info
L761             except Exception as e:
L762                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L763                 info[t] = {}
L764         try:
L765             sec_map = self.fetch_eps_rev_from_sec(tickers)
L766         except Exception as e:
L767             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L768             sec_map = {}
L769
L770         def _brief_len(s):
L771             try:
L772                 if isinstance(s, pd.Series):
L773                     return int(s.dropna().size)
L774                 if isinstance(s, (list, tuple)):
L775                     return len([v for v in s if pd.notna(v)])
L776                 if isinstance(s, np.ndarray):
L777                     return int(np.count_nonzero(~pd.isna(s)))
L778                 return int(bool(s))
L779             except Exception:
L780                 return 0
L781
L782         def _has_entries(val) -> bool:
L783             try:
L784                 if isinstance(val, pd.Series):
L785                     return not val.dropna().empty
L786                 if isinstance(val, (list, tuple)):
L787                     return any(pd.notna(v) for v in val)
L788                 return bool(val)
L789             except Exception:
L790                 return False
L791
L792         have_rev = 0
L793         have_eps = 0
L794         rev_lens: list[int] = []
L795         eps_lens: list[int] = []
L796         rev_y_lens: list[int] = []
L797         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L798
L799         for t in tickers:
L800             entry = info.get(t, {})
L801             m = (sec_map or {}).get(t) or {}
L802             if entry is None or not isinstance(entry, dict):
L803                 entry = {}
L804                 info[t] = entry
L805
L806             if m:
L807                 pairs_r = m.get("rev_q_series_pairs") or []
L808                 pairs_e = m.get("eps_q_series_pairs") or []
L809                 if pairs_r:
L810                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L811                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L812                     s = pd.Series(val, index=idx).sort_index()
L813                     entry["SEC_REV_Q_SERIES"] = s
L814                 else:
L815                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L816                 if pairs_e:
L817                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L818                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L819                     s = pd.Series(val, index=idx).sort_index()
L820                     entry["SEC_EPS_Q_SERIES"] = s
L821                 else:
L822                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L823
L824             r = entry.get("SEC_REV_Q_SERIES")
L825             e = entry.get("SEC_EPS_Q_SERIES")
L826             # 年次は直近3件（約3年）だけ保持。重み分岐の nY 判定は従来通り。
L827             try:
L828                 if hasattr(r, "index") and isinstance(r.index, pd.DatetimeIndex):
L829                     y = r.resample("Y").sum().dropna()
L830                     entry["SEC_REV_Y_SERIES"] = y.tail(3)
L831                 else:
L832                     entry["SEC_REV_Y_SERIES"] = []
L833             except Exception:
L834                 entry["SEC_REV_Y_SERIES"] = []
L835             ry = entry.get("SEC_REV_Y_SERIES")
L836             if _has_entries(r):
L837                 have_rev += 1
L838             if _has_entries(e):
L839                 have_eps += 1
L840             lr = _brief_len(r)
L841             le = _brief_len(e)
L842             rev_lens.append(lr)
L843             eps_lens.append(le)
L844             rev_y_lens.append(_brief_len(ry))
L845             if len(samples) < 8:
L846                 try:
L847                     rd = getattr(r, "index", [])[-1] if lr > 0 else None
L848                     rv = float(r.iloc[-1]) if lr > 0 else None
L849                     ed = getattr(e, "index", [])[-1] if le > 0 else None
L850                     ev = float(e.iloc[-1]) if le > 0 else None
L851                     samples.append((t, lr, str(rd) if rd is not None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L852                 except Exception:
L853                     samples.append((t, lr, "-", None, le, "-", None))
L854
L855         logger.info("[SEC] series attach: rev_q=%d/%d, eps_q=%d/%d", have_rev, len(tickers), have_eps, len(tickers))
L856         logger.info(
L857             "[SEC_SERIES] rev_q=%d (<=12), eps_q=%d (<=12), rev_y=%d (<=3)",
L858             max(rev_lens) if rev_lens else 0,
L859             max(eps_lens) if eps_lens else 0,
L860             max(rev_y_lens) if rev_y_lens else 0,
L861         )
L862
L863         if rev_lens:
L864             rev_lens_sorted = sorted(rev_lens)
L865             eps_lens_sorted = sorted(eps_lens)
L866             _log(
L867                 "SEC_SERIES",
L868                 f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L869                 f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L870             )
L871         for (t, lr, rd, rv, le, ed, ev) in samples:
L872             _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L873         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L874         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L875         if not eps_df.index.is_unique:
L876             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L877         eps_df = eps_df.assign(
L878             EPS_TTM=eps_df["eps_ttm"],
L879             EPS_Q_LastQ=eps_df["eps_q_recent"],
L880             REV_TTM=eps_df["rev_ttm"],
L881             REV_Q_LastQ=eps_df["rev_q_recent"],
L882         )
L883         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L884         try:
L885             n = len(eps_df)
L886             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L887             c_rev = int(eps_df["REV_TTM"].notna().sum())
L888             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L889         except Exception:
L890             pass
L891         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L892         T.log("eps/fcf prep done")
L893         returns = px[tickers].pct_change()
L894         T.log("price prep/returns done")
L895         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L896
L897 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L898 class Selector:
L899     # ---- DRRS helpers（Selector専用） ----
L900     @staticmethod
L901     def _z_np(X: np.ndarray) -> np.ndarray:
L902         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L903         return (np.nan_to_num(X)-m)/s
L904
L905     @classmethod
L906     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L907         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L908         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L909         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L910         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L911         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L912
L913     @classmethod
L914     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L915         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L916         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L917         if k==0: return []
L918         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L919         for _ in range(k):
L920             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L921             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L922             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L923         return sorted(S)
L924
L925     @staticmethod
L926     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L927         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L928         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L929
L930     @classmethod
L931     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L932         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L933         while improved and passes<max_pass:
L934             improved, passes = False, passes+1
L935             for i,out in enumerate(list(S)):
L936                 for inn in range(len(score)):
L937                     if inn in S: continue
L938                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L939                     if v>best+1e-10: S, best, improved = cand, v, True; break
L940                 if improved: break
L941         return S, best
L942
L943     @staticmethod
L944     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L945         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L946         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L947         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L948         return float(s[idx].sum() - lam*within - mu*cross)
L949
L950     @classmethod
L951     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L952         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L953         while improved and passes<max_pass:
L954             improved, passes = False, passes+1
L955             for i,out in enumerate(list(S)):
L956                 for inn in range(N):
L957                     if inn in S: continue
L958                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L959                     if v>best+1e-10: S, best, improved = cand, v, True; break
L960                 if improved: break
L961         return S, best
L962
L963     @staticmethod
L964     def avg_corr(C: np.ndarray, idx) -> float:
L965         k = len(idx); P = C[np.ix_(idx, idx)]
L966         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L967
L968     @classmethod
L969     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L970         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L971         union = [t for t in pool_tickers if t in returns_df.columns]
L972         for t in g_fixed:
L973             if t not in union: union.append(t)
L974         Rdf_all = returns_df[union]; Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all)>=lookback else Rdf_all; Rdf_all = Rdf_all.dropna()
L975         pool_eff, g_eff = [t for t in pool_tickers if t in Rdf_all.columns], [t for t in g_fixed if t in Rdf_all.columns]
L976         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L977         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L978         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L979         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L980         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L981         if len(g_eff)>0 and mu>0.0:
L982             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L983         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L984         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L985         selected_tickers = [pool_eff[i] for i in S]
L986         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L987
L988     # ---- 選定（スコア Series / returns だけを受ける）----
L989 # === Output：出力整形と送信（表示・Slack） ===
L990 class Output:
L991
L992     def __init__(self, debug=None):
L993         # self.debug は使わない（互換のため引数は受けるが無視）
L994         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L995         self.g_title = self.d_title = ""
L996         self.g_formatters = self.d_formatters = {}
L997         # 低スコア（GSC+DSC）Top10 表示/送信用
L998         self.low10_table = None
L999         self.debug_text = ""   # デバッグ用本文はここに一本化
L1000         self._debug_logged = False
L1001
L1002     # --- 表示（元 display_results のロジックそのまま） ---
L1003     def display_results(self, *, exist, bench, df_z, g_score, d_score_all,
L1004                         init_G, init_D, top_G, top_D, **kwargs):
L1005         logger.info("📌 reached display_results")
L1006         pd.set_option('display.float_format','{:.3f}'.format)
L1007         print("📈 ファクター分散最適化の結果")
L1008         if self.miss_df is not None and not self.miss_df.empty:
L1009             print("Missing Data:")
L1010             print(self.miss_df.to_string(index=False))
L1011
L1012         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L1013         try:
L1014             sc = getattr(self, "_sc", None)
L1015             agg_G = getattr(sc, "_agg_G", None)
L1016             agg_D = getattr(sc, "_agg_D", None)
L1017         except Exception:
L1018             sc = agg_G = agg_D = None
L1019         class _SeriesProxy:
L1020             __slots__ = ("primary", "fallback")
L1021             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L1022             def get(self, key, default=None):
L1023                 try:
L1024                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L1025                 except Exception:
L1026                     v = None
L1027                 if v is not None and not (isinstance(v, float) and v != v):
L1028                     return v
L1029                 try:
L1030                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L1031                 except Exception:
L1032                     return default
L1033         g_score = _SeriesProxy(agg_G, g_score)
L1034         d_score_all = _SeriesProxy(agg_D, d_score_all)
L1035         near_G = getattr(sc, "_near_G", []) if sc else []
L1036         near_D = getattr(sc, "_near_D", []) if sc else []
L1037
L1038         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L1039         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L1040         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L1041         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L1042         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L1043         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L1044                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L1045         if near_G:
L1046             add = [t for t in near_G if t not in set(G_UNI)][:10]
L1047             if len(add) < 10:
L1048                 try:
L1049                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1050                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L1051                     used = set(G_UNI + add)
L1052                     def _push(lst):
L1053                         nonlocal add, used
L1054                         for t in lst:
L1055                             if len(add) == 10: break
L1056                             if t in aggG.index and t not in used:
L1057                                 add.append(t); used.add(t)
L1058                     _push(out_now)           # ① 今回 OUT を優先
L1059                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L1060                 except Exception:
L1061                     pass
L1062             if add:
L1063                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L1064                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L1065         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L1066
L1067         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L1068         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L1069         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L1070         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L1071         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L1072         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L1073         import scorer
L1074         dw_eff = scorer.D_WEIGHTS_EFF
L1075         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L1076                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L1077         if near_D:
L1078             add = [t for t in near_D if t not in set(D_UNI)][:10]
L1079             if add:
L1080                 d_disp2 = pd.DataFrame(index=add)
L1081                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L1082                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L1083                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L1084         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L1085
L1086         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L1087         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L1088         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L1089
L1090         self.io_table = pd.DataFrame({
L1091             'IN': pd.Series(in_list),
L1092             '/ OUT': pd.Series(out_list)
L1093         })
L1094         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L1095         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L1096         self.io_table['GSC'] = pd.Series(g_list)
L1097         self.io_table['DSC'] = pd.Series(d_list)
L1098
L1099         print("Changes:")
L1100         print(self.io_table.to_string(index=False))
L1101
L1102         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L1103         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L1104         for name,ticks in portfolios.items():
L1105             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L1106             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L1107             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L1108             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L1109             if len(ticks)>=2:
L1110                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L1111                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L1112                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L1113             else: RAW_rho = RESID_rho = np.nan
L1114             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L1115         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L1116         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L1117         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L1118         def _fmt_row(s):
L1119             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L1120         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L1121         # === 追加: GSC+DSC が低い順 TOP10 ===
L1122         try:
L1123             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L1124             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L1125             all_scores = all_scores.dropna(subset=['G_plus_D'])
L1126             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L1127             print("Low Score Candidates (GSC+DSC bottom 10):")
L1128             print(self.low10_table.to_string())
L1129         except Exception as e:
L1130             print(f"[warn] low-score ranking failed: {e}")
L1131             self.low10_table = None
L1132         self.debug_text = ""
L1133         if debug_mode:
L1134             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L1135         else:
L1136             logger.debug(
L1137                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L1138                 debug_mode, True
L1139             )
L1140         self._debug_logged = True
L1141
L1142     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1143     def notify_slack(self):
L1144         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1145
L1146         if not SLACK_WEBHOOK_URL:
L1147             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1148             return
L1149
L1150         def _filter_suffix_from(spec: dict, group: str) -> str:
L1151             g = spec.get(group, {})
L1152             parts = [str(m) for m in g.get("pre_mask", [])]
L1153             for k, v in (g.get("pre_filter", {}) or {}).items():
L1154                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L1155                 name = {"beta": "β"}.get(base, base)
L1156                 try:
L1157                     val = f"{float(v):g}"
L1158                 except Exception:
L1159                     val = str(v)
L1160                 parts.append(f"{name}{op}{val}")
L1161             return "" if not parts else " / filter:" + " & ".join(parts)
L1162
L1163         def _inject_filter_suffix(title: str, group: str) -> str:
L1164             suf = _filter_suffix_from(FILTER_SPEC, group)
L1165             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1166
L1167         def _blk(title, tbl, fmt=None, drop=()):
L1168             if tbl is None or getattr(tbl, 'empty', False):
L1169                 return f"{title}\n(選定なし)\n"
L1170             if drop and hasattr(tbl, 'columns'):
L1171                 keep = [c for c in tbl.columns if c not in drop]
L1172                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1173             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1174
L1175         message = "📈 ファクター分散最適化の結果\n"
L1176         if self.miss_df is not None and not self.miss_df.empty:
L1177             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L1178         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1179         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1180         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L1181         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L1182
L1183         try:
L1184             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1185             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1186             if r is not None:
L1187                 r.raise_for_status()
L1188         except Exception as e:
L1189             print(f"[ERR] main_post_failed: {e}")
L1190
L1191 def _infer_g_universe(feature_df, selected12=None, near5=None):
L1192     try:
L1193         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1194         if out: return out
L1195     except Exception:
L1196         pass
L1197     base = set()
L1198     for lst in (selected12 or []), (near5 or []):
L1199         for x in (lst or []): base.add(x)
L1200     return list(base) if base else list(feature_df.index)
L1201
L1202 def _fmt_with_fire_mark(tickers, feature_df):
L1203     out = []
L1204     for t in tickers or []:
L1205         try:
L1206             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L1207             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L1208             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L1209         except Exception:
L1210             out.append(t)
L1211     return out
L1212
L1213 def _label_recent_event(t, feature_df):
L1214     try:
L1215         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L1216         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L1217         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L1218         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L1219         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L1220     except Exception:
L1221         pass
L1222     return t
L1223
L1224 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1225
L1226 def io_build_input_bundle() -> InputBundle:
L1227     """
L1228     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1229     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1230     """
L1231     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1232     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L1233
L1234 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1235               n_target: int) -> tuple[list, float, float, float]:
L1236     """
L1237     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1238     戻り値：(pick, avg_res_corr, sum_score, objective)
L1239     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1240     """
L1241     sc.cfg = cfg
L1242
L1243     if hasattr(sc, "score_build_features"):
L1244         feat = sc.score_build_features(inb)
L1245         if not hasattr(sc, "_feat_logged"):
L1246             T.log("features built (scorer)")
L1247             sc._feat_logged = True
L1248         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1249     else:
L1250         fb = sc.aggregate_scores(inb, cfg)
L1251         if not hasattr(sc, "_feat_logged"):
L1252             T.log("features built (scorer)")
L1253             sc._feat_logged = True
L1254         sc._feat = fb
L1255         agg = fb.g_score if group == "G" else fb.d_score_all
L1256         if group == "D" and hasattr(fb, "df"):
L1257             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L1258
L1259     if hasattr(sc, "filter_candidates"):
L1260         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1261
L1262     selector = Selector()
L1263     if hasattr(sc, "select_diversified"):
L1264         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1265             selector=selector, prev_tickers=None,
L1266             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1267             cross_mu=cfg.drrs.cross_mu_gd)
L1268     else:
L1269         if group == "G":
L1270             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1271             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1272                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1273                 lam=cfg.drrs.G.get("lam", 0.68),
L1274                 lookback=cfg.drrs.G.get("lookback", 252),
L1275                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1276         else:
L1277             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1278             g_fixed = getattr(sc, "_top_G", None)
L1279             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1280                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1281                 lam=cfg.drrs.D.get("lam", 0.85),
L1282                 lookback=cfg.drrs.D.get("lookback", 504),
L1283                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1284                 mu=cfg.drrs.cross_mu_gd)
L1285         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1286         sum_sc = res["sum_score"]; obj = res["objective"]
L1287         if group == "D":
L1288             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1289             T.log("selection finalized (G/D)")
L1290     try:
L1291         inc = [t for t in exist if t in agg.index]
L1292         pick = _sticky_keep_current(
L1293             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1294             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1295         )
L1296     except Exception as _e:
L1297         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1298     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1299     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1300     try:
L1301         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1302         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1303         setattr(sc, f"_near_{group}", near10)
L1304         setattr(sc, f"_agg_{group}", agg)
L1305     except Exception:
L1306         pass
L1307
L1308     if group == "D":
L1309         T.log("save done")
L1310     if group == "G":
L1311         sc._top_G = pick
L1312     return pick, avg_r, sum_sc, obj
L1313
L1314 def run_pipeline() -> SelectionBundle:
L1315     """
L1316     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1317     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1318     """
L1319     inb = io_build_input_bundle()
L1320     cfg = PipelineConfig(
L1321         weights=WeightsConfig(g=g_weights, d=D_weights),
L1322         drrs=DRRSParams(
L1323             corrM=corrM, shrink=DRRS_SHRINK,
L1324             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1325         ),
L1326         price_max=CAND_PRICE_MAX,
L1327         debug_mode=debug_mode
L1328     )
L1329     sc = Scorer()
L1330     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1331     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L1332     alpha = Scorer.spx_to_alpha(inb.spx)
L1333     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1334     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1335     sc._top_G = top_G
L1336     try:
L1337         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1338         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1339     except Exception:
L1340         pass
L1341     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1342     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1343     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1344     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1345     fb = getattr(sc, "_feat", None)
L1346     near_G = getattr(sc, "_near_G", [])
L1347     selected12 = list(top_G)
L1348     df = fb.df if fb is not None else pd.DataFrame()
L1349     guni = _infer_g_universe(df, selected12, near_G)
L1350     try:
L1351         fire_recent = [t for t in guni
L1352                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1353                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1354     except Exception: fire_recent = []
L1355
L1356     lines = [
L1357         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1358         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1359         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1360         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1361
L1362     if fire_recent:
L1363         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1364         lines.append(f"過去5営業日の検知: {fire_list}")
L1365     else:
L1366         lines.append("過去5営業日の検知: なし")
L1367
L1368     try:
L1369         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1370         if webhook:
L1371             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1372     except Exception:
L1373         pass
L1374
L1375     out = Output()
L1376     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1377     try: out._sc = sc
L1378     except Exception: pass
L1379     if hasattr(sc, "_feat"):
L1380         try:
L1381             fb = sc._feat
L1382             out.miss_df = fb.missing_logs
L1383             out.display_results(
L1384                 exist=exist,
L1385                 bench=bench,
L1386                 df_z=fb.df_z,
L1387                 g_score=fb.g_score,
L1388                 d_score_all=fb.d_score_all,
L1389                 init_G=top_G,
L1390                 init_D=top_D,
L1391                 top_G=top_G,
L1392                 top_D=top_D,
L1393                 df_full_z=getattr(fb, "df_full_z", None),
L1394                 prev_G=getattr(sc, "_prev_G", exist),
L1395                 prev_D=getattr(sc, "_prev_D", exist),
L1396             )
L1397         except Exception:
L1398             pass
L1399     out.notify_slack()
L1400     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1401               "sum_score": sumG, "objective": objG},
L1402         resD={"tickers": top_D, "avg_res_corr": avgD,
L1403               "sum_score": sumD, "objective": objD},
L1404         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1405
L1406     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1407     try:
L1408         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1409               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1410               .sort_values("G_plus_D")
L1411               .head(10)
L1412               .round(3))
L1413         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1414         _post_slack({"text": f"```{low_msg}```"})
L1415     except Exception as _e:
L1416         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1417
L1418     return sb
L1419
L1420 if __name__ == "__main__":
L1421     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #
L26 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L27 # =============================================================================
L28
L29 import json, logging, os, requests, sys, warnings
L30 import numpy as np
L31 import pandas as pd
L32 import yfinance as yf
L33 from typing import Any, TYPE_CHECKING
L34 from scipy.stats import zscore
L35 from datetime import datetime as _dt
L36
L37 if TYPE_CHECKING:
L38     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L39
L40 logger = logging.getLogger(__name__)
L41
L42
L43 def _log(stage, msg):
L44     try:
L45         print(f"[DBG][{_dt.utcnow().isoformat(timespec='seconds')}Z][{stage}] {msg}")
L46     except Exception:
L47         print(f"[DBG][{stage}] {msg}")
L48
L49
L50 # ---- Debug helpers ----------------------------------------------------------
L51 def _flatten_for_debug(d, prefix="DBG_GRW"):
L52     """
L53     ネストしたdict/list/tupleを、df_z列に入れやすい一次元dictへ。
L54     例: {"w":0.68,"path":"P5","core":{"rev_yoy_mean":1.73,"eps_yoy_mean":0.72,"accel":0.45}}
L55       -> {"DBG_GRW.w":0.68,"DBG_GRW.path":"P5","DBG_GRW.core.rev_yoy_mean":1.73,...}
L56     """
L57     out = {}
L58     if d is None:
L59         return out
L60
L61     def rec(k, v):
L62         if isinstance(v, dict):
L63             for kk, vv in v.items():
L64                 rec(f"{k}.{str(kk)}", vv)
L65         elif isinstance(v, (list, tuple, np.ndarray)):
L66             try:
L67                 out[k] = list(v[:6])
L68             except Exception:
L69                 out[k] = list(v)
L70         else:
L71             out[k] = v
L72
L73     if isinstance(d, dict):
L74         for k, v in d.items():
L75             rec(f"{prefix}.{str(k)}", v)
L76     return out
L77
L78
L79 # ---- Dividend Helpers -------------------------------------------------------
L80 def _last_close(t, price_map=None):
L81     if price_map and (c := price_map.get(t)) is not None: return float(c)
L82     try:
L83         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L84         return float(h.iloc[-1]) if len(h) else np.nan
L85     except Exception:
L86         return np.nan
L87
L88 def _ttm_div_sum(t, lookback_days=400):
L89     try:
L90         div = yf.Ticker(t).dividends
L91         if div is None or len(div) == 0: return 0.0
L92         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L93         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L94         return ttm if ttm > 0 else float(div.tail(4).sum())
L95     except Exception:
L96         return 0.0
L97
L98 def ttm_div_yield_portfolio(tickers, price_map=None):
L99     ys = [(lambda c, s: (s/c) if (np.isfinite(c) and c>0 and s>0) else 0.0)(_last_close(t, price_map), _ttm_div_sum(t)) for t in tickers]
L100     return float(np.mean(ys)) if ys else 0.0
L101
L102 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L103 def winsorize_s(s: pd.Series, p=0.02):
L104     if s is None or s.dropna().empty: return s
L105     lo, hi = np.nanpercentile(s.astype(float), [100*p, 100*(1-p)]); return s.clip(lo, hi)
L106
L107 def robust_z(s: pd.Series, p=0.02):
L108     s2 = winsorize_s(s,p); return np.nan_to_num(zscore(s2.fillna(s2.mean())))
L109
L110 def robust_z_keepnan(s: pd.Series) -> pd.Series:
L111     """robust_z variant that preserves NaNs and falls back to rank-z when needed."""
L112     if s is None:
L113         return pd.Series(dtype=float)
L114     v = pd.to_numeric(s, errors="coerce")
L115     m = np.nanmedian(v)
L116     mad = np.nanmedian(np.abs(v - m))
L117     z = (v - m) / (1.4826 * mad + 1e-9)
L118     if np.nanstd(z) < 1e-9:
L119         r = v.rank(method="average", na_option="keep")
L120         z = (r - np.nanmean(r)) / (np.nanstd(r) + 1e-9)
L121     return pd.Series(z, index=v.index, dtype=float)
L122
L123
L124 def _safe_div(a, b):
L125     try: return np.nan if (b is None or float(b)==0 or pd.isna(b)) else float(a)/float(b)
L126     except Exception: return np.nan
L127
L128 def _safe_last(series: pd.Series, default=np.nan):
L129     try: return float(series.iloc[-1])
L130     except Exception: return default
L131
L132
L133 def _ensure_series(x):
L134     if x is None:
L135         return pd.Series(dtype=float)
L136     if isinstance(x, pd.Series):
L137         return x.dropna()
L138     if isinstance(x, (list, tuple)):
L139         if len(x) and isinstance(x[0], (tuple, list)) and len(x[0]) == 2:
L140             dt = pd.to_datetime([d for d, _ in x], errors="coerce")
L141             v = pd.to_numeric([_v for _, _v in x], errors="coerce")
L142             return pd.Series(v, index=dt).dropna()
L143         return pd.Series(pd.to_numeric(list(x), errors="coerce")).dropna()
L144     try:
L145         return pd.Series(x).dropna()
L146     except Exception:
L147         return pd.Series(dtype=float)
L148
L149
L150 def _to_quarterly(s: pd.Series) -> pd.Series:
L151     if s.empty or not isinstance(s.index, pd.DatetimeIndex):
L152         return s
L153     return s.resample("Q").last().dropna()
L154
L155
L156 def _ttm_yoy_from_quarterly(qs: pd.Series) -> pd.Series:
L157     if qs is None or qs.empty:
L158         return pd.Series(dtype=float)
L159     ttm = qs.rolling(4, min_periods=2).sum()
L160     yoy = ttm.pct_change(4)
L161     return yoy
L162
L163
L164 def _nz(x) -> float:
L165     if x is None:
L166         return 0.0
L167     try:
L168         value = float(x)
L169     except Exception:
L170         return 0.0
L171     if not np.isfinite(value):
L172         return 0.0
L173     return value
L174
L175
L176 def _winsor(x, lo=-2.0, hi=2.0) -> float:
L177     v = _nz(x)
L178     if v < lo:
L179         return float(lo)
L180     if v > hi:
L181         return float(hi)
L182     return float(v)
L183
L184
L185 def _round_debug(x, ndigits: int = 4):
L186     try:
L187         value = float(x)
L188     except Exception:
L189         return None
L190     if not np.isfinite(value):
L191         return None
L192     return round(value, ndigits)
L193
L194
L195 def _calc_grw_flexible(
L196     ticker: str,
L197     info_entry: dict | None,
L198     close_series: pd.Series | None,
L199     volume_series: pd.Series | None,
L200 ):
L201     info_entry = info_entry if isinstance(info_entry, dict) else {}
L202
L203     s_rev_q = _ensure_series(info_entry.get("SEC_REV_Q_SERIES"))
L204     s_eps_q = _ensure_series(info_entry.get("SEC_EPS_Q_SERIES"))
L205     s_rev_y = _ensure_series(info_entry.get("SEC_REV_Y_SERIES"))
L206
L207     nQ = int(getattr(s_rev_q, "size", 0))
L208     nY = int(getattr(s_rev_y, "size", 0))
L209
L210     parts: dict[str, Any] = {"nQ": nQ, "nY": nY}
L211     path = "NONE"
L212     w = 0.0
L213
L214     def _valid_ratio(a, b):
L215         try:
L216             na, nb = float(a), float(b)
L217         except Exception:
L218             return None
L219         if not np.isfinite(na) or not np.isfinite(nb) or nb == 0:
L220             return None
L221         return na, nb
L222
L223     def yoy_q(series: pd.Series) -> float | None:
L224         s = _ensure_series(series)
L225         if s.empty:
L226             return None
L227         s = s.sort_index()
L228         if isinstance(s.index, pd.DatetimeIndex):
L229             last_idx = s.index[-1]
L230             window_start = last_idx - pd.DateOffset(months=15)
L231             window_end = last_idx - pd.DateOffset(months=9)
L232             candidates = s.loc[(s.index >= window_start) & (s.index <= window_end)]
L233             if candidates.empty:
L234                 candidates = s.loc[s.index <= window_end]
L235             if candidates.empty:
L236                 return None
L237             v1 = candidates.iloc[-1]
L238             v0 = s.iloc[-1]
L239         else:
L240             if s.size < 5:
L241                 return None
L242             v0 = s.iloc[-1]
L243             v1 = s.iloc[-5]
L244         pair = _valid_ratio(v0, v1)
L245         if pair is None:
L246             return None
L247         a, b = pair
L248         return float(a / b - 1.0)
L249
L250     def qoq(series: pd.Series) -> float | None:
L251         s = _ensure_series(series)
L252         if s.size < 2:
L253             return None
L254         s = s.sort_index()
L255         v0, v1 = s.iloc[-1], s.iloc[-2]
L256         pair = _valid_ratio(v0, v1)
L257         if pair is None:
L258             return None
L259         a, b = pair
L260         return float(a / b - 1.0)
L261
L262     def ttm_delta(series: pd.Series) -> float | None:
L263         s = _ensure_series(series)
L264         if s.size < 2:
L265             return None
L266         s = s.sort_index()
L267         k = int(min(4, s.size))
L268         cur_slice = s.iloc[-k:]
L269         prev_slice = s.iloc[:-k]
L270         if prev_slice.empty:
L271             return None
L272         prev_k = int(min(k, prev_slice.size))
L273         cur_sum = float(cur_slice.sum())
L274         prev_sum = float(prev_slice.iloc[-prev_k:].sum())
L275         pair = _valid_ratio(cur_sum, prev_sum)
L276         if pair is None:
L277             return None
L278         a, b = pair
L279         return float(a / b - 1.0)
L280
L281     def yoy_y(series: pd.Series) -> float | None:
L282         s = _ensure_series(series)
L283         if s.size < 2:
L284             return None
L285         s = s.sort_index()
L286         v0, v1 = s.iloc[-1], s.iloc[-2]
L287         pair = _valid_ratio(v0, v1)
L288         if pair is None:
L289             return None
L290         a, b = pair
L291         return float(a / b - 1.0)
L292
L293     def price_proxy_growth() -> float | None:
L294         if not isinstance(close_series, pd.Series):
L295             return None
L296         close = close_series.sort_index().dropna()
L297         if close.empty:
L298             return None
L299         hh_window = int(min(126, len(close)))
L300         if hh_window < 20:
L301             return None
L302         hh = close.rolling(hh_window).max().iloc[-1]
L303         prox = None
L304         if np.isfinite(hh) and hh > 0:
L305             prox = float(close.iloc[-1] / hh)
L306         rs6 = None
L307         if len(close) >= 63:
L308             rs6 = float(close.pct_change(63).iloc[-1])
L309         rs12 = None
L310         if len(close) >= 126:
L311             rs12 = float(close.pct_change(126).iloc[-1])
L312         vexp = None
L313         if isinstance(volume_series, pd.Series):
L314             vol = volume_series.reindex(close.index).dropna()
L315             if len(vol) >= 50:
L316                 v20 = vol.rolling(20).mean().iloc[-1]
L317                 v50 = vol.rolling(50).mean().iloc[-1]
L318                 if np.isfinite(v20) and np.isfinite(v50) and v50 > 0:
L319                     vexp = float(v20 / v50 - 1.0)
L320         prox = 0.0 if prox is None or not np.isfinite(prox) else prox
L321         rs6 = 0.0 if rs6 is None or not np.isfinite(rs6) else rs6
L322         rs12 = 0.0 if rs12 is None or not np.isfinite(rs12) else rs12
L323         vexp = 0.0 if vexp is None or not np.isfinite(vexp) else vexp
L324         return 0.5 * prox + 0.3 * rs6 + 0.2 * rs12 + 0.2 * vexp
L325
L326     price_alt = price_proxy_growth() or 0.0
L327     core = 0.0
L328     core_raw = 0.0
L329     price_raw = price_alt
L330
L331     if nQ >= 5:
L332         path = "P5"
L333         yq = yoy_q(s_rev_q)
L334         parts["rev_yoy_q"] = yq
L335         tmp_prev = s_rev_q.iloc[:-1] if s_rev_q.size > 1 else s_rev_q
L336         acc = None
L337         if tmp_prev.size >= 5 and yq is not None:
L338             yq_prev = yoy_q(tmp_prev)
L339             if yq_prev is not None:
L340                 acc = float(yq - yq_prev)
L341         parts["rev_acc_q"] = acc
L342         eps_yoy = yoy_q(s_eps_q) if s_eps_q.size >= 5 else None
L343         parts["eps_yoy_q"] = eps_yoy
L344         eps_acc = None
L345         if eps_yoy is not None and s_eps_q.size > 5:
L346             eps_prev = s_eps_q.iloc[:-1]
L347             if eps_prev.size >= 5:
L348                 eps_prev_yoy = yoy_q(eps_prev)
L349                 if eps_prev_yoy is not None:
L350                     eps_acc = float(eps_yoy - eps_prev_yoy)
L351         parts["eps_acc_q"] = eps_acc
L352         w = 1.0
L353         core_raw = (
L354             0.60 * _nz(yq)
L355             + 0.20 * _nz(acc)
L356             + 0.15 * _nz(eps_yoy)
L357             + 0.05 * _nz(eps_acc)
L358         )
L359         price_alt = 0.0
L360     elif 2 <= nQ <= 4:
L361         path = "P24"
L362         rev_qoq = qoq(s_rev_q)
L363         rev_ttm2 = ttm_delta(s_rev_q)
L364         parts["rev_qoq"] = rev_qoq
L365         parts["rev_ttm2"] = rev_ttm2
L366         eps_qoq = qoq(s_eps_q) if s_eps_q.size >= 2 else None
L367         parts["eps_qoq"] = eps_qoq
L368         w = min(1.0, nQ / 5.0)
L369         core_raw = 0.6 * _nz(rev_qoq) + 0.3 * _nz(rev_ttm2) + 0.1 * _nz(eps_qoq)
L370     else:
L371         path = "P1Y"
L372         rev_yoy_y = yoy_y(s_rev_y) if nY >= 2 else None
L373         parts["rev_yoy_y"] = rev_yoy_y
L374         w = 0.6 * min(1.0, nY / 3.0) if nY >= 2 else 0.4
L375         core_raw = _nz(rev_yoy_y)
L376         if nQ <= 1 and nY < 2 and price_alt == 0.0:
L377             price_alt = price_proxy_growth() or 0.0
L378
L379     core = _winsor(core_raw, lo=-1.5, hi=1.5)
L380     price_alt = _winsor(price_alt, lo=-1.5, hi=1.5)
L381     grw = _winsor(w * core + (1.0 - w) * (0.5 * _nz(price_alt)), lo=-2.0, hi=2.0)
L382
L383     parts.update(
L384         {
L385             "core_raw": core_raw,
L386             "core": core,
L387             "price_proxy_raw": price_raw,
L388             "price_proxy": price_alt,
L389             "weight": w,
L390             "score": grw,
L391         }
L392     )
L393
L394     parts_out: dict[str, Any] = {
L395         "nQ": nQ,
L396         "nY": nY,
L397     }
L398     for key, value in parts.items():
L399         if key in ("nQ", "nY"):
L400             continue
L401         rounded = _round_debug(value)
L402         parts_out[key] = rounded
L403
L404     parts_out["path"] = path
L405     parts_out["w"] = _round_debug(w)
L406
L407     info_entry["DEBUG_GRW_PATH"] = path
L408     info_entry["DEBUG_GRW_PARTS"] = json.dumps(parts_out, ensure_ascii=False, sort_keys=True)
L409     info_entry["DEBUG_GRW_PARTS_DICT"] = dict(parts_out)
L410     info_entry["GRW_SCORE"] = grw
L411     info_entry["GRW_WEIGHT"] = w
L412     info_entry["GRW_CORE"] = core
L413     info_entry["GRW_PRICE_PROXY"] = price_alt
L414
L415     return {
L416         "score": grw,
L417         "path": path,
L418         "parts": info_entry["DEBUG_GRW_PARTS"],
L419         "parts_dict": dict(parts_out),
L420         "weight": w,
L421         "core": core,
L422         "price_proxy": price_alt,
L423     }
L424
L425
L426 D_WEIGHTS_EFF = None  # 出力表示互換のため
L427
L428
L429 def _scalar(v):
L430     """単一セル代入用に値をスカラーへ正規化する。
L431
L432     - pandas Series -> .iloc[-1]（最後を採用）
L433     - list/tuple/ndarray -> 最後の要素
L434     - それ以外          -> そのまま
L435     取得失敗時は np.nan を返す。
L436     """
L437     import numpy as _np
L438     import pandas as _pd
L439     try:
L440         if isinstance(v, _pd.Series):
L441             return v.iloc[-1] if len(v) else _np.nan
L442         if isinstance(v, (list, tuple, _np.ndarray)):
L443             return v[-1] if len(v) else _np.nan
L444         return v
L445     except Exception:
L446         return _np.nan
L447
L448
L449 # ---- Scorer 本体 -------------------------------------------------------------
L450 class Scorer:
L451     """
L452     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L453     - cfg は必須（factor.PipelineConfig を渡す）。
L454     - 旧カラム名を自動リネームして新スキーマに吸収します。
L455     """
L456
L457     # === 先頭で旧→新カラム名マップ（移行用） ===
L458     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L459     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L460
L461     # === スキーマ簡易チェック（最低限） ===
L462     @staticmethod
L463     def _validate_ib_for_scorer(ib: Any):
L464         miss = [a for a in ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"] if not hasattr(ib,a) or getattr(ib,a) is None]
L465         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L466         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L467         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L468         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L469         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L470         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L471
L472     # ----（Scorer専用）テクニカル・指標系 ----
L473     @staticmethod
L474     def trend(s: pd.Series):
L475         if len(s)<200: return np.nan
L476         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L477         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L478         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L479         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L480         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L481         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L482         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L483         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L484         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L485         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L486         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L487         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L488
L489     @staticmethod
L490     def rs(s, b):
L491         n, nb = len(s), len(b)
L492         if n<60 or nb<60: return np.nan
L493         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L494         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L495         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L496
L497     @staticmethod
L498     def tr_str(s):
L499         if s is None:
L500             return np.nan
L501         s = s.ffill(limit=2).dropna()
L502         if len(s) < 50:
L503             return np.nan
L504         ma50 = s.rolling(50, min_periods=50).mean()
L505         last_ma = ma50.iloc[-1]
L506         last_px = s.iloc[-1]
L507         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L508
L509     @staticmethod
L510     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L511         r = (s/b).dropna()
L512         if len(r) < win: return np.nan
L513         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L514         try: return float(np.polyfit(x, y, 1)[0])
L515         except Exception: return np.nan
L516
L517     @staticmethod
L518     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L519         ev = info_t.get('enterpriseValue', np.nan)
L520         if pd.notna(ev) and ev>0: return float(ev)
L521         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L522         try:
L523             bs = tk.quarterly_balance_sheet
L524             if bs is not None and not bs.empty:
L525                 c = bs.columns[0]
L526                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L527                     if k in bs.index: debt = float(bs.loc[k,c]); break
L528                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L529                     if k in bs.index: cash = float(bs.loc[k,c]); break
L530         except Exception: pass
L531         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L532         return np.nan
L533
L534     @staticmethod
L535     def dividend_status(ticker: str) -> str:
L536         t = yf.Ticker(ticker)
L537         try:
L538             if not t.dividends.empty: return "has"
L539         except Exception: return "unknown"
L540         try:
L541             a = t.actions
L542             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L543         except Exception: pass
L544         try:
L545             fi = t.fast_info
L546             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L547         except Exception: pass
L548         return "unknown"
L549
L550     @staticmethod
L551     def div_streak(t):
L552         try:
L553             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L554             years, streak = sorted(ann.index), 0
L555             for i in range(len(years)-1,0,-1):
L556                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L557                 else: break
L558             return streak
L559         except Exception: return 0
L560
L561     @staticmethod
L562     def fetch_finnhub_metrics(symbol):
L563         api_key = os.environ.get("FINNHUB_API_KEY")
L564         if not api_key: return {}
L565         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L566         try:
L567             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L568             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L569         except Exception: return {}
L570
L571     @staticmethod
L572     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L573         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L574         n = min(len(r), len(m), lookback)
L575         if n<60: return np.nan
L576         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L577         return np.nan if var==0 else cov/var
L578
L579     @staticmethod
L580     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L581                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L582         """
L583         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L584         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L585         """
L586         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L587         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L588         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L589         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L590         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L591
L592     @staticmethod
L593     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L594         """
L595         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L596         戻り値は降順ソート済み。
L597         """
L598         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L599         cnt, pen = {}, {}
L600         for t in order:
L601             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L602         return (s - pd.Series(pen)).sort_values(ascending=False)
L603
L604     @staticmethod
L605     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L606         """
L607         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L608         """
L609         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L610         if not hard:
L611             return list(eff.head(N).index)
L612         pick, used = [], {}
L613         for t in eff.index:
L614             s = sectors.get(t, "U")
L615             if used.get(s,0) < hard:
L616                 pick.append(t); used[s] = used.get(s,0) + 1
L617             if len(pick) == N: break
L618         return pick
L619
L620     @staticmethod
L621     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L622         """
L623         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L624         - px: 列=ticker（ベンチは含めない）
L625         - spx: ベンチマーク Series（px.index に整列）
L626         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L627         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L628         """
L629         import numpy as np, pandas as pd
L630         if px is None or px.empty:
L631             return pd.Series(dtype=int)
L632         px = px.dropna(how="all", axis=1)
L633         if win_days and win_days > 0:
L634             px = px.tail(win_days)
L635         if px.empty:
L636             return pd.Series(dtype=int)
L637         spx = spx.reindex(px.index).ffill()
L638
L639         ma50  = px.rolling(50).mean()
L640         ma150 = px.rolling(150).mean()
L641         ma200 = px.rolling(200).mean()
L642
L643         tt = (px > ma150)
L644         tt &= (px > ma200)
L645         tt &= (ma150 > ma200)
L646         tt &= (ma200 - ma200.shift(21) > 0)
L647         tt &= (ma50  > ma150)
L648         tt &= (ma50  > ma200)
L649         tt &= (px    > ma50)
L650
L651         lo252 = px.rolling(252).min()
L652         hi252 = px.rolling(252).max()
L653         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L654         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L655
L656         r12  = px.divide(px.shift(252)).sub(1.0)
L657         br12 = spx.divide(spx.shift(252)).sub(1.0)
L658         r1   = px.divide(px.shift(22)).sub(1.0)
L659         br1  = spx.divide(spx.shift(22)).sub(1.0)
L660         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L661         tt &= (rs >= 0.10)
L662
L663         return tt.fillna(False).sum(axis=1).astype(int)
L664
L665     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L666     def aggregate_scores(self, ib: Any, cfg):
L667         if cfg is None:
L668             raise ValueError("cfg is required; pass factor.PipelineConfig")
L669         self._validate_ib_for_scorer(ib)
L670
L671         px, spx, tickers = ib.px, ib.spx, ib.tickers
L672         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L673
L674         df, missing_logs = pd.DataFrame(index=tickers), []
L675         debug_mode = bool(getattr(cfg, "debug_mode", False))
L676         for t in tickers:
L677             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L678             try:
L679                 volume_series_full = ib.data['Volume'][t]
L680             except Exception:
L681                 volume_series_full = None
L682
L683             grw_result = _calc_grw_flexible(t, d, s, volume_series_full)
L684             grw_score = grw_result.get('score')
L685             try:
L686                 grw_score_val = float(grw_score)
L687             except Exception:
L688                 grw_score_val = np.nan
L689             df.loc[t,'GRW_FLEX_SCORE'] = grw_score
L690             df.loc[t,'GRW_FLEX_WEIGHT'] = grw_result.get('weight')
L691             df.loc[t,'GRW_FLEX_CORE'] = grw_result.get('core')
L692             df.loc[t,'GRW_FLEX_PRICE'] = grw_result.get('price_proxy')
L693             df.loc[t,'DEBUG_GRW_PATH'] = grw_result.get('path')
L694             df.loc[t,'DEBUG_GRW_PARTS'] = grw_result.get('parts')
L695
L696             if debug_mode:
L697                 try:
L698                     parts_dict = grw_result.get('parts_dict')
L699                     flat = _flatten_for_debug(parts_dict, "DBG_GRW") if parts_dict else {}
L700                     if grw_result.get('path') is not None:
L701                         flat.setdefault("DBG_GRW.path", grw_result.get('path'))
L702                     if grw_result.get('weight') is not None:
L703                         flat.setdefault("DBG_GRW.w", grw_result.get('weight'))
L704                     for key, value in flat.items():
L705                         df.loc[t, key] = value
L706
L707                     series_rev_q = _ensure_series(d.get("SEC_REV_Q_SERIES"))
L708                     series_eps_q = _ensure_series(d.get("SEC_EPS_Q_SERIES"))
L709                     if isinstance(series_rev_q, pd.Series) and series_rev_q.size >= 8:
L710                         rev_yoy = (series_rev_q / series_rev_q.shift(4) - 1).dropna()
L711                         if not rev_yoy.empty:
L712                             df.loc[t, "DBG_GRW.rev_yoy_last4"] = list(rev_yoy.tail(4).round(4))
L713                             df.loc[t, "DBG_GRW.rev_yoy_mean"] = float(np.nanmean(rev_yoy)) if len(rev_yoy) > 0 else None
L714                             df.loc[t, "DBG_GRW.rev_yoy_med"] = float(np.nanmedian(rev_yoy)) if len(rev_yoy) > 0 else None
L715                     if isinstance(series_eps_q, pd.Series) and series_eps_q.size >= 8:
L716                         eps_yoy = (series_eps_q / series_eps_q.shift(4) - 1).dropna()
L717                         if not eps_yoy.empty:
L718                             df.loc[t, "DBG_GRW.eps_yoy_last4"] = list(eps_yoy.tail(4).round(4))
L719                             df.loc[t, "DBG_GRW.eps_yoy_mean"] = float(np.nanmean(eps_yoy)) if len(eps_yoy) > 0 else None
L720                             df.loc[t, "DBG_GRW.eps_yoy_med"] = float(np.nanmedian(eps_yoy)) if len(eps_yoy) > 0 else None
L721
L722                     base_pos = []
L723                     for key in ("DBG_GRW.rev_yoy_mean", "DBG_GRW.eps_yoy_mean", "DBG_GRW.core.ttm_yoy"):
L724                         if key in df.columns:
L725                             val = df.at[t, key]
L726                             if val is not None and not pd.isna(val):
L727                                 try:
L728                                     base_pos.append(float(val))
L729                                 except Exception:
L730                                     continue
L731                     if base_pos:
L732                         median_base = float(np.nanmedian(base_pos))
L733                         if (
L734                             np.isfinite(median_base)
L735                             and median_base > 0.30
L736                             and np.isfinite(grw_score_val)
L737                             and grw_score_val < 0
L738                         ):
L739                             row_dbg = df.loc[t] if t in df.index else {}
L740                             path_dbg = row_dbg.get('DBG_GRW.path') if hasattr(row_dbg, 'get') else None
L741                             weight_dbg = row_dbg.get('DBG_GRW.w') if hasattr(row_dbg, 'get') else None
L742                             logger.warning(
L743                                 "[GRW-SANITY] %s: median_base=%.3f but GROWTH_F=%.3f  path=%s w=%s",
L744                                 t,
L745                                 median_base,
L746                                 grw_score_val,
L747                                 path_dbg,
L748                                 weight_dbg,
L749                             )
L750                 except Exception:
L751                     pass
L752
L753             # --- 基本特徴 ---
L754             df.loc[t,'TR']   = self.trend(s)
L755             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L756             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L757             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L758             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L759             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L760             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L761             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L762
L763             # --- 配当（欠損補完含む） ---
L764             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L765             if div is None or pd.isna(div):
L766                 try:
L767                     divs = yf.Ticker(t).dividends
L768                     if divs is not None and not divs.empty:
L769                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L770                         if last_close and last_close>0: div = float(div_1y/last_close)
L771                 except Exception: pass
L772             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L773
L774             # --- FCF/EV ---
L775             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L776             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L777
L778             # --- モメンタム・ボラ関連 ---
L779             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L780             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L781             n = int(min(len(r), len(rm)))
L782
L783             DOWNSIDE_DEV = np.nan
L784             if n>=60:
L785                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L786                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L787             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L788
L789             MDD_1Y = np.nan
L790             try:
L791                 w = s.iloc[-min(len(s),252):].dropna()
L792                 if len(w)>=30:
L793                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L794             except Exception: pass
L795             df.loc[t,'MDD_1Y'] = MDD_1Y
L796
L797             RESID_VOL = np.nan
L798             if n>=120:
L799                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L800                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L801                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L802                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L803             df.loc[t,'RESID_VOL'] = RESID_VOL
L804
L805             DOWN_OUTPERF = np.nan
L806             if n>=60:
L807                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L808                 if mask.sum()>=10:
L809                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L810                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L811             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L812
L813             # --- 長期移動平均/位置 ---
L814             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L815             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L816
L817             # --- 配当の詳細系 ---
L818             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L819             try:
L820                 divs = yf.Ticker(t).dividends.dropna()
L821                 if not divs.empty:
L822                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L823                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L824                     ann = divs.groupby(divs.index.year).sum()
L825                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L826                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L827                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L828                 so = d.get('sharesOutstanding',None)
L829                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L830                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L831             except Exception: pass
L832             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L833
L834             # --- 財務安定性 ---
L835             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L836
L837             # --- EPS 変動 ---
L838             EPS_VAR_8Q = np.nan
L839             try:
L840                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L841                 if qe is not None and not qe.empty and so:
L842                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L843                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L844             except Exception: pass
L845             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L846
L847             # --- サイズ/流動性 ---
L848             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L849             try:
L850                 if isinstance(volume_series_full, pd.Series):
L851                     vol_series = volume_series_full.reindex(s.index).dropna()
L852                     if len(vol_series) >= 5:
L853                         aligned_px = s.reindex(vol_series.index).dropna()
L854                         if len(aligned_px) == len(vol_series):
L855                             dv = (vol_series*aligned_px).rolling(60).mean()
L856                             if not dv.dropna().empty:
L857                                 adv60 = float(dv.dropna().iloc[-1])
L858             except Exception:
L859                 pass
L860             df.loc[t,'ADV60_USD'] = adv60
L861
L862             # --- Rule of 40 や周辺 ---
L863             total_rev_ttm = d.get('totalRevenue',np.nan)
L864             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L865             df.loc[t,'FCF_MGN'] = FCF_MGN
L866             rule40 = np.nan
L867             try:
L868                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L869             except Exception: pass
L870             df.loc[t,'RULE40'] = rule40
L871
L872             # --- トレンド補助 ---
L873             sma50  = s.rolling(50).mean()
L874             sma150 = s.rolling(150).mean()
L875             sma200 = s.rolling(200).mean()
L876             p = _safe_last(s)
L877
L878             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L879                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L880             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L881                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L882
L883             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L884             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L885
L886             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L887             if len(sma200.dropna()) >= 21:
L888                 cur200 = _safe_last(sma200)
L889                 old2001 = float(sma200.iloc[-21])
L890                 if old2001:
L891                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L892
L893             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L894             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L895             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L896             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L897             if len(sma200.dropna())>=105:
L898                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L899                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L900             # NEW: 200日線が連続で上向きの「日数」
L901             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L902             try:
L903                 s200 = sma200.dropna()
L904                 if len(s200) >= 2:
L905                     diff200 = s200.diff()
L906                     up = 0
L907                     for v in diff200.iloc[::-1]:
L908                         if pd.isna(v) or v <= 0:
L909                             break
L910                         up += 1
L911                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L912             except Exception:
L913                 pass
L914             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L915             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L916             if hi52 and hi52>0 and pd.notna(p):
L917                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L918             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L919             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L920
L921             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L922
L923             # --- 欠損メモ ---
L924             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L925             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L926             if need_finnhub:
L927                 fin_data = self.fetch_finnhub_metrics(t)
L928                 for col in need_finnhub:
L929                     val = fin_data.get(col)
L930                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L931             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L932                 if pd.isna(df.loc[t,col]):
L933                     if col=='DIV':
L934                         status = self.dividend_status(t)
L935                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L936                     else:
L937                         missing_logs.append({'Ticker':t,'Column':col})
L938
L939         def _pick_series(entry: dict, keys: list[str]):
L940             for k in keys:
L941                 val = entry.get(k) if isinstance(entry, dict) else None
L942                 if val is None:
L943                     continue
L944                 try:
L945                     if hasattr(val, "empty") and getattr(val, "empty"):
L946                         continue
L947                 except Exception:
L948                     pass
L949                 if isinstance(val, (list, tuple)) and len(val) == 0:
L950                     continue
L951                 return val
L952             return None
L953
L954         def _has_sec_series(val) -> bool:
L955             try:
L956                 if isinstance(val, pd.Series):
L957                     return not val.dropna().empty
L958                 if isinstance(val, (list, tuple)):
L959                     return any(pd.notna(v) for v in val)
L960                 return bool(val)
L961             except Exception:
L962                 return False
L963
L964         def _series_len(val) -> int:
L965             try:
L966                 if isinstance(val, pd.Series):
L967                     return int(val.dropna().size)
L968                 if isinstance(val, (list, tuple)):
L969                     return len(val)
L970                 return int(bool(val))
L971             except Exception:
L972                 return 0
L973
L974         for t in tickers:
L975             try:
L976                 d = info.get(t, {}) or {}
L977                 rev_series = d.get("SEC_REV_Q_SERIES")
L978                 eps_series = d.get("SEC_EPS_Q_SERIES")
L979                 fallback_qearn = False
L980                 try:
L981                     qe = tickers_bulk.tickers[t].quarterly_earnings
L982                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L983                 except Exception:
L984                     qe = None
L985
L986                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L987                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L988                 r_raw = _ensure_series(r_src)
L989                 e_raw = _ensure_series(e_src)
L990
L991                 r_q = _to_quarterly(r_raw)
L992                 e_q = _to_quarterly(e_raw)
L993
L994                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L995                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L996
L997                 def _q_yoy(qs):
L998                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L999
L1000                 rev_q_yoy = _q_yoy(r_q)
L1001                 eps_q_yoy = _q_yoy(e_q)
L1002
L1003                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L1004                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L1005                         ann = qs.groupby(qs.index.year).last().pct_change()
L1006                         ann_dn = ann.dropna()
L1007                         if not ann_dn.empty:
L1008                             y = float(ann_dn.iloc[-1])
L1009                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L1010                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L1011                             return y, acc, var
L1012                     yoy_dn = yoy_ttm.dropna()
L1013                     if yoy_dn.empty:
L1014                         return np.nan, np.nan, np.nan
L1015                     return (
L1016                         float(yoy_dn.iloc[-1]),
L1017                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L1018                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L1019                     )
L1020
L1021                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L1022                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L1023
L1024                 def _pos_streak(s: pd.Series):
L1025                     s = s.dropna()
L1026                     if s.empty:
L1027                         return np.nan
L1028                     b = (s > 0).astype(int).to_numpy()[::-1]
L1029                     k = 0
L1030                     for v in b:
L1031                         if v == 1:
L1032                             k += 1
L1033                         else:
L1034                             break
L1035                     return float(k)
L1036
L1037                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L1038
L1039                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L1040                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L1041                 df.loc[t, "REV_YOY"] = rev_yoy
L1042                 df.loc[t, "EPS_YOY"] = eps_yoy
L1043                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L1044                 df.loc[t, "REV_YOY_VAR"] = rev_var
L1045                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L1046
L1047             except Exception as e:
L1048                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L1049
L1050         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1051             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1052             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1053             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1054             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1055             c5 = (row.get('TR_str', np.nan) > 0)
L1056             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1057             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1058             c8 = (row.get('RS', np.nan) >= 0.10)
L1059             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1060
L1061         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1062         assert 'trend_template' in df.columns
L1063
L1064         # === Z化と合成 ===
L1065         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1066
L1067         df_z = pd.DataFrame(index=df.index)
L1068         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1069         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1070         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1071
L1072         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1073         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1074         for col in grw_cols:
L1075             if col in df.columns:
L1076                 raw = pd.to_numeric(df[col], errors="coerce")
L1077                 df_z[col] = robust_z_keepnan(raw)
L1078         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1079             if k in df.columns and k not in df_z.columns:
L1080                 raw = pd.to_numeric(df[k], errors="coerce")
L1081                 df_z[k] = robust_z_keepnan(raw)
L1082         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1083
L1084         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1085         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1086         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1087
L1088         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1089         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1090         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1091
L1092         # ===== トレンドスロープ算出 =====
L1093         def zpos(x):
L1094             arr = robust_z(x)
L1095             idx = getattr(x, 'index', df_z.index)
L1096             return pd.Series(arr, index=idx).fillna(0.0)
L1097
L1098         def relu(x):
L1099             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1100             return ser.clip(lower=0).fillna(0.0)
L1101
L1102         # 売上トレンドスロープ（四半期）
L1103         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1104         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1105         slope_rev_combo = slope_rev - 0.25*noise_rev
L1106         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1107
L1108         # EPSトレンドスロープ（四半期）
L1109         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1110         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1111
L1112         # 年次トレンド（サブ）
L1113         slope_rev_yr = zpos(df_z['REV_YOY'])
L1114         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1115         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1116         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1117         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1118         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1119         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1120
L1121         # ===== GRW flexible score (variable data paths) =====
L1122         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1123         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1124         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1125         if debug_mode:
L1126             dbg_cols = [c for c in df.columns if isinstance(c, str) and c.startswith("DBG_GRW.")]
L1127             for col in dbg_cols:
L1128                 df_z[col] = df[col]
L1129
L1130         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1131         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1132             try:
L1133                 cols = ['GROWTH_F', 'GRW_FLEX_WEIGHT']
L1134                 use_cols = [c for c in cols if c in df_z.columns]
L1135                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1136                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1137                 limit = max(0, min(40, len(i)))
L1138                 print("[DEBUG: GRW]")
L1139                 for t in i.index[:limit]:
L1140                     row = i.loc[t]
L1141                     parts = []
L1142                     if pd.notna(row.get('GROWTH_F')):
L1143                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1144                     raw_val = grw_raw.get(t) if isinstance(grw_raw, pd.Series) else np.nan
L1145                     if pd.notna(raw_val):
L1146                         parts.append(f"GRW_FLEX_SCORE={raw_val:.3f}")
L1147                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1148                     if pd.notna(weight_val):
L1149                         parts.append(f"w={weight_val:.2f}")
L1150                     path_val = None
L1151                     try:
L1152                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1153                     except Exception:
L1154                         path_val = None
L1155                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1156                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1157                     if path_val:
L1158                         parts.append(f"PATH={path_val}")
L1159                     parts_json = None
L1160                     try:
L1161                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1162                     except Exception:
L1163                         parts_json = None
L1164                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1165                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1166                     if parts_json:
L1167                         parts.append(f"PARTS={parts_json}")
L1168                     if not parts:
L1169                         parts.append('no-data')
L1170                     print(f"Ticker: {t} | " + " ".join(parts))
L1171                 print()
L1172             except Exception as exc:
L1173                 print(f"[ERR] GRW debug dump failed: {exc}")
L1174
L1175         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1176             + 0.15*df_z['TR_str']
L1177             + 0.15*df_z['RS_SLOPE_6W']
L1178             + 0.15*df_z['RS_SLOPE_13W']
L1179             + 0.10*df_z['MA200_SLOPE_5M']
L1180             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1181         df_z['VOL'] = robust_z(df['BETA'])
L1182         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1183         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1184
L1185         # df_z 全明細をページングしてログ出力（最小版）
L1186         if getattr(cfg, "debug_mode", False):
L1187             pd.set_option("display.max_columns", None)
L1188             pd.set_option("display.max_colwidth", None)
L1189             pd.set_option("display.width", None)
L1190             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L1191             n = len(df_z)
L1192             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1193             for i in range(0, n, page):
L1194                 j = min(i + page, n)
L1195                 try:
L1196                     chunk_str = df_z.iloc[i:j].to_string()
L1197                 except Exception:
L1198                     chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1199                 logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1200             logger.info("=== df_z FULL DUMP end ===")
L1201
L1202         # === begin: BIO LOSS PENALTY =====================================
L1203         try:
L1204             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1205         except Exception:
L1206             penalty_z = 0.8
L1207
L1208         def _is_bio_like(t: str) -> bool:
L1209             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1210             sec = str(inf.get("sector", "")).lower()
L1211             ind = str(inf.get("industry", "")).lower()
L1212             if "health" not in sec:
L1213                 return False
L1214             keys = ("biotech", "biopharma", "pharma")
L1215             return any(k in ind for k in keys)
L1216
L1217         tickers_s = pd.Index(df_z.index)
L1218         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1219         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1220         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1221
L1222         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1223             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1224             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1225         # === end: BIO LOSS PENALTY =======================================
L1226
L1227         assert not any(c.endswith("_RAW") for c in df_z.columns)
L1228         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L1229             assert c not in df_z.columns
L1230
L1231         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1232         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1233
L1234         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1235         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1236         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1237         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1238
L1239         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1240         # ① 全銘柄で G/D スコアを算出（unmasked）
L1241         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1242
L1243         d_comp = pd.concat({
L1244             'QAL': df_z['D_QAL'],
L1245             'YLD': df_z['D_YLD'],
L1246             'VOL': df_z['D_VOL_RAW'],
L1247             'TRD': df_z['D_TRD']
L1248         }, axis=1)
L1249         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1250         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1251         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1252
L1253         # ② テンプレ判定（既存ロジックそのまま）
L1254         mask = df['trend_template']
L1255         if not bool(mask.any()):
L1256             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1257                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1258                 (df.get('RS', np.nan) >= 0.08) &
L1259                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1260                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1261                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1262                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1263                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1264             df['trend_template'] = mask
L1265
L1266         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1267         g_score = g_score_all.loc[mask]
L1268         Scorer.g_score = g_score
L1269         df_z['GSC'] = g_score_all
L1270         df_z['DSC'] = d_score_all
L1271
L1272         try:
L1273             current = (pd.read_csv("current_tickers.csv")
L1274                   .iloc[:, 0]
L1275                   .str.upper()
L1276                   .tolist())
L1277         except FileNotFoundError:
L1278             warnings.warn("current_tickers.csv not found — bonus skipped")
L1279             current = []
L1280
L1281         mask_bonus = g_score.index.isin(current)
L1282         if mask_bonus.any():
L1283             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1284             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1285             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1286             sigma_g = g_score.std()
L1287             if pd.isna(sigma_g):
L1288                 sigma_g = 0.0
L1289             bonus_g = round(k * sigma_g, 3)
L1290             g_score.loc[mask_bonus] += bonus_g
L1291             Scorer.g_score = g_score
L1292             # 3) D 側も同様に σ の NaN をケア
L1293             sigma_d = d_score_all.std()
L1294             if pd.isna(sigma_d):
L1295                 sigma_d = 0.0
L1296             bonus_d = round(k * sigma_d, 3)
L1297             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1298
L1299         try:
L1300             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1301         except Exception:
L1302             pass
L1303
L1304         df_full = df.copy()
L1305         df_full_z = df_z.copy()
L1306
L1307         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1308         return FeatureBundle(df=df,
L1309             df_z=df_z,
L1310             g_score=g_score,
L1311             d_score_all=d_score_all,
L1312             missing_logs=pd.DataFrame(missing_logs),
L1313             df_full=df_full,
L1314             df_full_z=df_full_z,
L1315             scaler=None)
L1316
L1317 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1318     """
L1319     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1320     次の列を feature_df に追加する（index=ticker）。
L1321       - G_BREAKOUT_recent_5d : bool
L1322       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1323       - G_PULLBACK_recent_5d : bool
L1324       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1325       - G_PIVOT_price        : float
L1326     失敗しても例外は握り潰し、既存処理を阻害しない。
L1327     """
L1328     try:
L1329         px   = bundle.px                      # 終値 DataFrame
L1330         hi   = bundle.data['High']
L1331         lo   = bundle.data['Low']
L1332         vol  = bundle.data['Volume']
L1333         bench= bundle.spx                     # ベンチマーク Series
L1334
L1335         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1336         g_universe = getattr(self_obj, "g_universe", None)
L1337         if g_universe is None:
L1338             try:
L1339                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1340             except Exception:
L1341                 g_universe = list(feature_df.index)
L1342         if not g_universe:
L1343             return feature_df
L1344
L1345         # 指標
L1346         px = px.ffill(limit=2)
L1347         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1348         ma50  = px[g_universe].rolling(50).mean()
L1349         ma150 = px[g_universe].rolling(150).mean()
L1350         ma200 = px[g_universe].rolling(200).mean()
L1351         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1352         vol20 = vol[g_universe].rolling(20).mean()
L1353         vol50 = vol[g_universe].rolling(50).mean()
L1354
L1355         # トレンドテンプレート合格
L1356         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1357                             & (ma150 > ma200) & (ma200.diff() > 0)
L1358
L1359         # 汎用ピボット：直近65営業日の高値（当日除外）
L1360         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1361
L1362         # 相対力：年内高値更新
L1363         bench_aligned = bench.reindex(px.index).ffill()
L1364         rs = px[g_universe].div(bench_aligned, axis=0)
L1365         rs_high = rs.rolling(252).max().shift(1)
L1366
L1367         # ブレイクアウト「発生日」：条件立ち上がり
L1368         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1369                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1370         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1371
L1372         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1373         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1374         volume_dryup = (vol20 / vol50) <= 1.0
L1375         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1376         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1377         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1378
L1379         # 直近N営業日内の発火 / 最終発生日
L1380         rows = []
L1381         for t in g_universe:
L1382             def _recent_and_date(s, win):
L1383                 sw = s[t].iloc[-win:]
L1384                 if sw.any():
L1385                     d = sw[sw].index[-1]
L1386                     return True, d.strftime("%Y-%m-%d")
L1387                 return False, ""
L1388             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1389             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1390             rows.append((t, {
L1391                 "G_BREAKOUT_recent_5d": br_recent,
L1392                 "G_BREAKOUT_last_date": br_date,
L1393                 "G_PULLBACK_recent_5d": pb_recent,
L1394                 "G_PULLBACK_last_date": pb_date,
L1395                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1396             }))
L1397         flags = pd.DataFrame({k: v for k, v in rows}).T
L1398
L1399         # 列を作成・上書き
L1400         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1401         for c in cols:
L1402             if c not in feature_df.columns:
L1403                 feature_df[c] = np.nan
L1404         feature_df.loc[flags.index, flags.columns] = flags
L1405
L1406     except Exception:
L1407         pass
L1408     return feature_df
L1409
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=12）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 12本)`（= N_G）
L17   - 緊急解除: `max(q20, 18本)`（= ceil(1.5×12)）
L18   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **14%**
L24  - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（20×5%に全戻しのみ）
L25
L26 ## モード別の推奨“保有銘柄数”（MMF≒現金）
L27 *各枠=5%（20銘柄均等）。モード移行時は**Gの枠数のみ**調整し、外した枠は現金として保持。*
L28
L29 - **NORMAL:** G **12** / D **8** / 現金化枠 **0**  
L30 - **CAUTION:** G **10** / D **8** / 現金化枠 **2**（= 10%）  
L31 - **EMERG:** G **8**  / D **8** / 現金化枠 **4**（= 20%）  
L32
L33 > 実運用：⭐️低スコアのGから順に外す。解除時はfactor上位から補充。
L34
L35 ## トレーリングストップ
L36 - **基本TS (モード別):** NORMAL **15%** / CAUTION **13%** / EMERG **10%**
L37 - 含み益が **+30% / +60% / +100%** 到達で、基本から **-3pt / -6pt / -8pt** 引き上げ
L38 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L39
L40 ## 半戻し（リバランス）手順
L41 ドリフトチェックで**アラート**が出た場合（合計|drift| がモード閾値を超過、EMERG除く）、翌営業日の米国寄付きで下記を実施する。
L42
L43 1. **売却（必須）**  
L44    Slackテーブルの **Δqty がマイナスの銘柄を売却** する（寄付き成行推奨）。  
L45    これは「半戻し」計算に基づく過重量の削減を意味する。
L46
L47 2. **購入（任意・半戻し目安）**  
L48    半戻し後の合計|drift|を**シミュレーション値（Slackヘッダに表示）**に近づけることを目安に、  
L49    **任意の銘柄を買い増し**してバランスを取る（Δqtyがプラスの銘柄を優先してもよい）。
L50
L51 3. **トレーリングストップの再設定（必須）**  
L52    すべての保有銘柄について、最新の評価額に合わせてTSを**再発注／更新**する。  
L53    ルールは下記（利益到達で段階的にタイト化）：  
L54    - **基本TS:** -15%  
L55    - **+30% 到達 → TS -12%**  
L56    - **+60% 到達 → TS -9%**  
L57    - **+100% 到達 → TS -7%**  
L58    ※ストップ価格の引き上げは許可、**引き下げは不可**（利益保全の原則）。
L59
L60 4. **例外（EMERGモード）**  
L61    緊急(EMERG)では**ドリフト由来の売買は停止（∞）**。20銘柄×各5%への**全戻し**のみ許容。
L62
L63 5. **実行タイミング**
L64    - 判定：米国市場終値直後
L65    - 執行：翌営業日の米国寄付き成行
L66
L67 ## モード移行の実務手順（超シンプル）
L68 モードが変わったら、**MMF≒現金**として扱い、**Gの枠数だけ**を調整する：
L69 1. **Gを削る**（CAUTION/EMERG）  
L70    - ⭐️低スコアのGから順に外す。  
L71    - **`current_tickers.csv` から外すG銘柄の行を削除**（＝その枠は現金化）。
L72 2. **現金として保持**  
L73    - 外した枠は現金（またはMMF相当）でプール。  
L74 3. **復帰時の補充**（NORMALへ）  
L75    - **`current_tickers.csv` に銘柄を追加**（factor上位から）。  
L76    - 以降は日次ドリフト/TSルールに従う。
L77
L78 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて自動で均等比率が再計算される。
L79
L80 ## 入替銘柄選定
L81 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L82 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L83
L84 ## 再エントリー（クールダウン）
L85 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L86
L87 ## 実行タイミング
L88 - 判定：米国市場終値直後
L89 - 執行：翌営業日の米国寄付き成行
```

## <documents/factor_design.md>
```text
L1 # factor.py 詳細設計書
L2
L3 ## 概要
L4 - 既存ポートフォリオの銘柄と検討中の銘柄群を同時に扱う銘柄選定パイプライン。
L5 - 価格・財務データを取り込みスコアリングとDRRS選定を行うことで、以下のアウトプットを得る。
L6   - 採用銘柄と惜しくも漏れた銘柄のスコア一覧
L7   - IN/OUTのティッカーリストとOUT側の低スコア銘柄
L8   - 新旧ポートフォリオの比較表
L9   - 検討中銘柄の低スコアランキング（整理用）
L10
L11 ## 全体フロー
L12 1. **Input** – `current_tickers.csv`と`candidate_tickers.csv`を読み込み、yfinanceやFinnhubのAPIから価格・財務データを収集して`InputBundle`を整備。
L13 2. **Score Calculation** – Scorerが特徴量を計算し因子スコアを合成して`FeatureBundle`を生成。
L14 3. **Correlation Reduction & Selection** – SelectorがDRRSロジックで相関を抑えつつG/D銘柄を選定し`SelectionBundle`を得る。
L15 4. **Output** – 採用結果と周辺情報を表・Slack通知として出力。
L16
L17 ```mermaid
L18 flowchart LR
L19   A[Input\nAPI & 前処理] --> B[Score Calculation\n特徴量・因子合成]
L20   B --> C[Correlation Reduction\nDRRS選定]
L21   C --> D[Output\nSlack通知]
L22 ```
L23
L24 ## 定数・設定
L25 | 変数 | 内容 | 主な用途 |
L26 | --- | --- | --- |
L27 | `exist` / `cand` | 現行ポートフォリオと検討中銘柄のティッカーリスト | スコア対象ユニバースの構成、候補整理 |
L28 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L29 | `CAND_PRICE_MAX` | 候補銘柄の許容価格上限 | 高額銘柄の事前除外 |
L30 | `N_G` / `N_D` | G/D採用枠の件数（**既定: 12 / 8**） | 最終的に選ぶ銘柄数の制約 |
L31 | `g_weights` / `D_weights` | 各因子の重みdict | G/Dスコア合成 |
L32 | `D_BETA_MAX` | Dバケットの許容β上限 | 高β銘柄の除外フィルタ |
L33 | `FILTER_SPEC` | G/Dごとの前処理フィルタ | トレンドマスクやβ上限設定 |
L34 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L35 | `DRRS_G` / `DRRS_D` | DRRSパラメータdict | バケット別の相関低減設定 |
L36 | `DRRS_SHRINK` | 残差相関の対角シュリンク率 | `residual_corr`の安定化 |
L37 | `CROSS_MU_GD` | G-D間クロス相関ペナルティμ | 2バケット同時最適化で相関抑制 |
L38 | `RESULTS_DIR` | 選定結果保存ディレクトリ | `_save_sel`/`_load_prev`の入出力 |
L39
L40 選定結果は`results/`配下にJSONとして保存し、次回実行時に`_load_prev`で読み込んで選定条件に反映。
L41
L42 ## DTO/Config
L43 各ステップ間で受け渡すデータ構造と設定値。変数の意味合いと利用箇所を以下に示す。
L44
L45 ### InputBundle（Input → Scorer）
L46 | 変数 | 内容 | 主な用途 |
L47 | --- | --- | --- |
L48 | `cand` | 候補銘柄ティッカーのリスト | OUTテーブルや低スコアランキング対象の母集団 |
L49 | `tickers` | 現行+候補を合わせたティッカー一覧 | 価格・出来高ダウンロード、リターン計算 |
L50 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L51 | `data` | yfinanceのダウンロード結果（階層列） | `px`/`spx`/リターン等の基礎データ |
L52 | `px` | `data['Close']`だけを抜き出した価格系列 | 指標計算・リターン生成 |
L53 | `spx` | `data['Close'][bench]` のSeries | `rs`や`calc_beta`の基準指数 |
L54 | `tickers_bulk` | `yf.Tickers`オブジェクト | `info`等の一括取得 |
L55 | `info` | ティッカー別のyfinance情報dict | セクター判定やEPS補完 |
L56 | `eps_df` | EPS TTM/直近EPS等をまとめた表 | 成長指標の算出 |
L57 | `fcf_df` | CFO・CapEx・FCF TTMと情報源フラグ | FCF/EVや配当カバレッジ |
L58 | `returns` | `px.pct_change()`のリターン表 | 相関行列・DRRS計算 |
L59
L60 ### FeatureBundle（Scorer → Selector）
L61 | 変数 | 内容 | 主な用途 |
L62 | --- | --- | --- |
L63 | `df` | 計算済み指標の生値テーブル | デバッグ・出力表示 |
L64 | `df_z` | ウィンザー後Zスコア化した指標表 | 因子スコア合成、選定基準 |
L65 | `g_score` | Gバケット総合スコア | G選定、IN/OUT比較 |
L66 | `d_score_all` | Dバケット総合スコア（全銘柄） | D選定、低スコアランキング |
L67 | `missing_logs` | 欠損指標と補完状況のログ | データ品質チェック |
L68
L69 ### SelectionBundle（Selector → Output）
L70 | 変数 | 内容 | 主な用途 |
L71 | --- | --- | --- |
L72 | `resG` | G選定結果の詳細dict（`tickers`、目的値等） | 結果保存・平均相関などの指標表示 |
L73 | `resD` | D選定結果の詳細dict | 同上 |
L74 | `top_G` | 最終採用Gティッカー | 新ポートフォリオ構築 |
L75 | `top_D` | 最終採用Dティッカー | 同上 |
L76 | `init_G` | DRRS前のG初期候補 | 惜しくも外れた銘柄表示 |
L77 | `init_D` | DRRS前のD初期候補 | 同上 |
L78
L79 ### WeightsConfig
L80 | 変数 | 内容 | 主な用途 |
L81 | --- | --- | --- |
L82 | `g` | G因子（GRW/MOM/VOL）の重みdict | `g_score`合成 |
L83 | `d` | D因子（D_QAL/D_YLD/D_VOL_RAW/D_TRD）の重みdict | `d_score_all`合成 |
L84
L85 ### DRRSParams
L86 | 変数 | 内容 | 主な用途 |
L87 | --- | --- | --- |
L88 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L89 | `shrink` | 残差相関のシュリンク率 | `residual_corr`の対角強調 |
L90 | `G` | Gバケット用パラメータdict（`lookback`等） | `select_bucket_drrs`設定 |
L91 | `D` | Dバケット用パラメータdict | 同上 |
L92 | `cross_mu_gd` | G-Dクロス相関ペナルティ係数μ | `select_buckets`の目的関数 |
L93
L94 ### PipelineConfig
L95 | 変数 | 内容 | 主な用途 |
L96 | --- | --- | --- |
L97 | `weights` | `WeightsConfig`のインスタンス | スコア合成の重み参照 |
L98 | `drrs` | `DRRSParams`のインスタンス | 選定ステップの設定値 |
L99 | `price_max` | 候補銘柄の許容価格上限 | Input段階でのフィルタ |
L100
L101 ## 共通ユーティリティ
L102 - `winsorize_s` / `robust_z` : 外れ値処理とZスコア化。
L103 - `_safe_div` / `_safe_last` : 例外を潰した分割・末尾取得。
L104 - `_load_prev` / `_save_sel` : 選定結果の読み書き。
L105
L106 ## クラス設計
L107 ### Step1: Input
L108 `current_tickers.csv`の現行銘柄と`candidate_tickers.csv`の検討中銘柄を起点にデータを集約する。外部I/Oと前処理を担当し、`prepare_data`で`InputBundle`を生成。価格・財務データの取得は**yfinanceを優先し、欠損がある指標のみFinnhub APIで補完**する。
L109 主なメソッド:
L110 - `impute_eps_ttm` : 四半期EPS×4でTTMを推定し欠損時のみ差し替え。
L111 - `fetch_cfo_capex_ttm_yf` : yfinanceの四半期/年次キャッシュフローからCFO・CapEx・FCF TTMを算出。
L112 - `fetch_cfo_capex_ttm_finnhub` : yfinanceで欠けた銘柄のみFinnhub APIで補完。
L113 - `compute_fcf_with_fallback` : yfinance値を基準にFinnhub値で穴埋めし、CFO/CapEx/FCFと情報源フラグを返す。
L114 - `_build_eps_df` : `info`や`quarterly_earnings`からEPS TTMと直近EPSを計算し、`impute_eps_ttm`で補完。
L115 - `prepare_data` :
L116     0. CSVから現行銘柄と候補銘柄のティッカー一覧を読み込む。
L117     1. 候補銘柄の現在値を取得し価格上限でフィルタ。
L118     2. 既存+候補から対象ティッカーを決定し、価格・出来高を一括ダウンロード（yfinance）。
L119     3. yfinance値を基にEPS/FCFテーブルやベンチマーク系列、リターンを構築し、欠損セルはFinnhub呼び出しで穴埋め。
L120     4. 上記を`InputBundle`に格納して返す。
L121
L122 ### Step2: Score Calculation (Scorer)
L123 特徴量計算とスコア合成を担当し、`FeatureBundle`を返す。
L124
L125 #### 補助関数
L126 - `trend(s)` : 50/150/200日移動平均や52週レンジから-0.5〜0.5で構成されたトレンド指標。
L127 - `rs(s,b)` / `tr_str(s)` / `rs_line_slope(s,b,win)` : 相対強さや短期トレンド、RS回帰傾きを算出。
L128 - `ev_fallback` : `enterpriseValue`欠損時に負債・現金からEVを推定。
L129 - `dividend_status` / `div_streak` : 配当未設定状況の判定と増配年数カウント。
L130 - `fetch_finnhub_metrics` : Finnhub APIからEPS成長・ROE・βなど不足指標を取得。
L131 - `calc_beta` : ベンチマークとの共分散からβを算出。
L132 - `spx_to_alpha` : S&P500の位置情報からDRRSで用いるαを推定。
L133 - `soft_cap_effective_scores` / `pick_top_softcap` : セクターソフトキャップ付きスコア調整と上位抽出。
L134
L135 **補助関数と生成指標**
L136
L137 | 補助関数 | 生成指標 | 略称 |
L138 | --- | --- | --- |
L139 | `trend` | トレンド総合値 | `TR` |
L140 | `rs` | 相対強さ | `RS` |
L141 | `tr_str` | 価格と50日線の乖離 | `TR_str` |
L142 | `rs_line_slope` | RS線の回帰傾き | `RS_SLOPE_*` |
L143 | `calc_beta` | β | `BETA` |
L144 | `div_streak` | 連続増配年数 | `DIV_STREAK` |
L145
L146 #### `aggregate_scores` 詳細
L147 1. 各銘柄の価格系列や`info`を基に以下を算出。
L148    - **トレンド/モメンタム**: `TR`、`RS`、`TR_str`、多様な移動平均比、`RS_SLOPE_*`など。
L149    - **リスク**: `BETA`、`DOWNSIDE_DEV`、`MDD_1Y`、`RESID_VOL`、`DOWN_OUTPERF`、`EXT_200`等。
L150    - **配当**: `DIV`、`DIV_TTM_PS`、`DIV_VAR5`、`DIV_YOY`、`DIV_FCF_COVER`、`DIV_STREAK`。
L151    - **財務・成長**: `EPS`、`REV`、`ROE`、`FCF/EV`、`REV_Q_YOY`、`EPS_Q_YOY`、`REV_YOY_ACC`、`REV_YOY_VAR`、`REV_ANN_STREAK`、`RULE40`、`FCF_MGN` 等。
L152    - **安定性/サイズ**: `DEBT2EQ`、`CURR_RATIO`、`MARKET_CAP`、`ADV60_USD`、`EPS_VAR_8Q`など。
L153 2. 指標欠損はFinnhub API等で補完し、未取得項目を`missing_logs`に記録。
L154 3. `winsorize_s`→`robust_z`で標準化し`df_z`へ保存。サイズ・流動性は対数変換。
L155 4. 正規化済指標から因子スコアを合成。
L156    - 各因子の構成と重みは以下の通り。
L157      - **GRW**: 0.30×`REV` + 0.20×`EPS_Q_YOY` + 0.15×`REV_Q_YOY` + 0.15×`REV_YOY_ACC` + 0.10×`RULE40` + 0.10×`FCF_MGN` + 0.10×`REV_ANN_STREAK` − 0.05×`REV_YOY_VAR`。
L158      - **MOM**: 0.40×`RS` + 0.15×`TR_str` + 0.15×`RS_SLOPE_6W` + 0.15×`RS_SLOPE_13W` + 0.10×`MA200_SLOPE_5M` + 0.10×`MA200_UP_STREAK_D`。
L159      - **VOL**: `BETA`単体を使用。
L160      - **QAL**: 0.60×`FCF_W` + 0.40×`ROE_W`で作成。
L161      - **YLD**: 0.30×`DIV` + 0.70×`DIV_STREAK`。
L162      - **D_QAL**: 0.35×`QAL` + 0.20×`FCF` + 0.15×`CURR_RATIO` − 0.15×`DEBT2EQ` − 0.15×`EPS_VAR_8Q`。
L163      - **D_YLD**: 0.45×`DIV` + 0.25×`DIV_STREAK` + 0.20×`DIV_FCF_COVER` − 0.10×`DIV_VAR5`。
L164      - **D_VOL_RAW**: 0.40×`DOWNSIDE_DEV` + 0.22×`RESID_VOL` + 0.18×`MDD_1Y` − 0.10×`DOWN_OUTPERF` − 0.05×`EXT_200` − 0.08×`SIZE` − 0.10×`LIQ` + 0.10×`BETA`。
L165      - **D_TRD**: 0.40×`MA200_SLOPE_5M` − 0.30×`EXT_200` + 0.15×`NEAR_52W_HIGH` + 0.15×`TR`。
L166     - 主な指標の略称と意味:
L167
L168       | 略称 | 補助関数 | 概要 |
L169       | --- | --- | --- |
L170       | TR | `trend` | 50/150/200日移動平均と52週レンジを組み合わせたトレンド総合値 |
L171       | RS | `rs` | ベンチマークに対する相対強さ（12M/1Mリターン差） |
L172       | TR_str | `tr_str` | 価格と50日移動平均の乖離 |
L173       | RS_SLOPE_6W | `rs_line_slope` | 相対強さ線の6週回帰傾き |
L174       | RS_SLOPE_13W | `rs_line_slope` | 相対強さ線の13週回帰傾き |
L175       | MA200_SLOPE_5M | - | 200日移動平均の5か月騰落率 |
L176       | MA200_UP_STREAK_D | - | 200日線が連続で上向いた日数 |
L177       | BETA | `calc_beta` | ベンチマークに対するβ |
L178       | DOWNSIDE_DEV | - | 下方リターンのみの年率化標準偏差 |
L179       | RESID_VOL | - | βで調整した残差リターンの年率化標準偏差 |
L180       | MDD_1Y | - | 過去1年の最大ドローダウン |
L181       | DOWN_OUTPERF | - | 市場下落日に対する平均超過リターン |
L182       | EXT_200 | - | 200日移動平均からの絶対乖離率 |
L183       | NEAR_52W_HIGH | - | 52週高値までの下方距離（0=高値） |
L184       | FCF_W | - | ウィンザー処理後のFCF/EV |
L185       | ROE_W | - | ウィンザー処理後のROE |
L186       | FCF | - | FCF/EV |
L187       | QAL | - | FCF_WとROE_Wを組み合わせた品質スコア |
L188       | CURR_RATIO | - | 流動比率 |
L189       | DEBT2EQ | - | 負債資本倍率 |
L190       | EPS_VAR_8Q | - | EPSの8四半期標準偏差 |
L191       | DIV | - | 年率換算配当利回り |
L192       | DIV_STREAK | `div_streak` | 連続増配年数 |
L193       | DIV_FCF_COVER | - | 配当のFCFカバレッジ |
L194       | DIV_VAR5 | - | 5年配当変動率 |
L195       | DIV_TTM_PS | - | 1株当たりTTM配当 |
L196       | DIV_YOY | - | 前年比配当成長率 |
L197       | REV | - | 売上成長率TTM |
L198       | EPS_Q_YOY | - | 四半期EPSの前年同期比 |
L199       | REV_Q_YOY | - | 四半期売上の前年同期比 |
L200       | REV_YOY_ACC | - | 売上成長率の加速分 |
L201       | RULE40 | - | 売上成長率とFCFマージンの合計 |
L202       | FCF_MGN | - | FCFマージン |
L203       | REV_ANN_STREAK | - | 年次売上成長の連続年数 |
L204       | REV_YOY_VAR | - | 年次売上成長率の変動性 |
L205       | SIZE | - | 時価総額の対数値 |
L206       | LIQ | - | 60日平均出来高ドルの対数値 |
L207    - Gバケット: `GRW`、`MOM`、`VOL`を`cfg.weights.g`（0.40/0.45/-0.15）で加重し`g_score`を得る。
L208    - Dバケット: `D_QAL`、`D_YLD`、`D_VOL_RAW`、`D_TRD`を`cfg.weights.d`（0.15/0.15/-0.45/0.25）で加重し`d_score_all`を算出。
L209    - セクターcapによる`soft_cap_effective_scores`を適用し、G採用銘柄にはトレンドテンプレートフィルタを適用。
L210 5. `_apply_growth_entry_flags`でブレイクアウト/押し目発火状況を付加し、`FeatureBundle`を返す。
L211
L212 ### Step3: Correlation Reduction & Selection (Selector)
L213 DRRSアルゴリズムで相関を抑えた銘柄選定を行い、`SelectionBundle`を返す。`results/`に保存された前回選定（`G_selection.json` / `D_selection.json`）を`_load_prev`で読み込み、目的値が大きく悪化しない限り維持する。新しい採用集合は`_save_sel`でJSONに書き出し次回以降の入力に備える。
L214 主なメソッド:
L215 - `residual_corr` : 収益率行列をZスコア化し、上位主成分を除去した残差から相関行列を求め、平均相関に応じてシュリンク。
L216 - `rrqr_like_det` : スコアを重み付けしたQR分解風の手順で初期候補をk件抽出し、スコアの高い非相関な集合を得る。
L217 - `swap_local_det` / `swap_local_det_cross` : `sum(score) - λ*within_corr - μ*cross_corr`を目的関数として、入れ替え探索で局所的に最適化。
L218 - `select_bucket_drrs` : プール銘柄とスコアから残差相関を計算し、上記2段階(初期選択→入れ替え)でk銘柄を決定。過去採用銘柄との比較で目的値が劣化しなければ維持する。
L219 - `select_buckets` : Gバケットを選定後、その結果を除いた候補からDバケットを選ぶ。D選定時はGとの相関ペナルティμを付与し、両バケットの分散を制御する。
L220
L221 #### 相関低減ロジック詳細
L222 1. **残差相関行列の構築 (`residual_corr`)**
L223    - リターン行列`R`をZスコア化。
L224    - SVDで上位`n_pc`主成分`F`を求め、最小二乗で係数`B`を算出し残差`E = Z - F@B`を得る。
L225    - `E`の相関行列`C`を計算し、平均絶対相関に応じてシュリンク量`shrink_eff`を補正して対角を強調。
L226 2. **初期候補の抽出 (`rrqr_like_det`)**
L227    - スコアを0-1正規化した重み`w`とし、`Z*(1+γw)`で列ノルムを強調。
L228    - 残差ノルム最大の列を逐次選び、QRライクなデフレーションを行って非相関かつ高スコアな`k`銘柄集合`S0`を得る。
L229 3. **局所探索 (`swap_local_det` / `swap_local_det_cross`)**
L230    - 目的関数`Σz_score − λ·within_corr − μ·cross_corr`を最大化。
L231    - 選択集合の各銘柄を他候補と入れ替え、改善がなくなるまでまたは`max_pass`回まで探索。
L232    - `swap_local_det_cross`はGバケットとのクロス相関行列`C_cross`を使用し、ペナルティ`μ`を付与。
L233 4. **過去採用の維持とクロスペナルティ (`select_bucket_drrs` / `select_buckets`)**
L234    - 局所探索結果`S`と過去集合`P`の目的値を比較し、`S`が`P`より`η`未満の改善なら`P`を維持。
L235    - `select_buckets`ではGを先に決定し、D選定時にGとの相関ペナルティ`μ`を加えてクロス分散を抑制。
L236
L237 ### Step4: Output
L238 選定結果を可視化し共有する工程。以下の内容をテーブル化して標準出力とSlackへ送る。
L239 - 採用銘柄と惜しくも選外となった銘柄のスコア一覧
L240 - IN/OUTリストとOUT銘柄のスコア（低得点銘柄を確認しやすく）
L241 - 新旧ポートフォリオの比較表（組入れ・除外、スコア変化）
L242 - 検討中銘柄の低スコアランキング
L243
L244 主なメソッド:
L245 - `display_results` : 上記テーブルに加えパフォーマンス指標や分散化指標を表示。
L246 - `notify_slack` : Slack Webhookへ同内容を送信。
L247 - 補助:`_avg_offdiag`、`_resid_avg_rho`、`_raw_avg_rho`、`_cross_block_raw_rho`。
L248
L249 ## エントリポイント
L250 1. `PipelineConfig`を構築。
L251 2. **Step1** `Input.prepare_data`で`InputBundle`を生成。
L252 3. **Step2** `Scorer.aggregate_scores`で`FeatureBundle`を取得。
L253 4. **Step3** `Selector.select_buckets`で`SelectionBundle`を算出。
L254 5. **Step4** `Output.display_results`と`notify_slack`で結果を出力。
```
