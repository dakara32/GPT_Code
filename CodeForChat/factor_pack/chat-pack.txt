# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: config.py, factor.py, scorer.py, .github/workflows/weekly-report.yml, documents/README.md, documents/factor_design.md
# 作成日時: 2025-09-24 20:31:36 (JST)
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <config.py>
```text
L1 # 共通設定（factor / drift から参照）
L2 TOTAL_TARGETS = 20
L3
L4 # 基準のバケット数（NORMAL）
L5 COUNTS_BASE = {"G": 12, "D": 8}
L6
L7 # モード別の推奨バケット数
L8 COUNTS_BY_MODE = {
L9     "NORMAL": {"G": 12, "D": 8},
L10     "CAUTION": {"G": 10, "D": 8},
L11     "EMERG": {"G": 8,  "D": 8},
L12 }
L13
L14 # モード別のドリフト閾値（%）
L15 DRIFT_THRESHOLD_BY_MODE = {"NORMAL": 12, "CAUTION": 14, "EMERG": float("inf")}
L16
L17 # モード別のTS（基本幅, 小数=割合）
L18 TS_BASE_BY_MODE = {"NORMAL": 0.15, "CAUTION": 0.13, "EMERG": 0.10}
L19 # 利益到達(+30/+60/+100%)時の段階タイト化（ポイント差）
L20 TS_STEP_DELTAS_PT = (3, 6, 8)
L21
L22 # Breadthの校正は N_G に連動（緊急解除=ceil(1.5*N_G), 通常復帰=3*N_G）
L23 N_G = COUNTS_BASE["G"]
L24 N_D = COUNTS_BASE["D"]
L25
```

## <factor.py>
```text
L1 '''ROLE: Orchestration ONLY（外部I/O・SSOT・Slack出力）, 計算は scorer.py'''
L2 # === NOTE: 機能・入出力・ログ文言・例外挙動は不変。安全な短縮（import統合/複数代入/内包表記/メソッドチェーン/一行化/空行圧縮など）のみ適用 ===
L3 import logging, os, time, requests
L4 from concurrent.futures import ThreadPoolExecutor
L5 from dataclasses import dataclass
L6 from time import perf_counter
L7 from typing import Any, Dict, List, Tuple
L8
L9 import numpy as np
L10 import pandas as pd
L11 import yfinance as yf
L12 from scipy.stats import zscore  # used via scorer
L13
L14 from scorer import Scorer, ttm_div_yield_portfolio, _log, _as_numeric_series
L15 import config
L16
L17 import warnings, atexit, threading
L18 from collections import Counter, defaultdict
L19
L20 # === 定数・設定・DTO（import直後に集約） ===
L21 BONUS_COEFF = 0.55  # 推奨: 攻め=0.45 / 中庸=0.55 / 守り=0.65
L22 SWAP_DELTA_Z = 0.15   # 僅差判定: σの15%。(緩め=0.10 / 標準=0.15 / 固め=0.20)
L23 SWAP_KEEP_BUFFER = 3  # n_target+この順位以内の現行は保持。(粘り弱=2 / 標準=3 / 粘り強=4〜5)
L24
L25 debug_mode, FINNHUB_API_KEY = True, os.environ.get("FINNHUB_API_KEY")
L26
L27 _CSV_LOAD_START = perf_counter()
L28 exist, cand = [pd.read_csv(f, header=None)[0].tolist() for f in ("current_tickers.csv","candidate_tickers.csv")]
L29 CAND_PRICE_MAX, bench = 450, '^GSPC'  # 価格上限・ベンチマーク
L30 N_G, N_D = config.N_G, config.N_D  # G/D枠サイズ（NORMAL基準: G12/D8）
L31 g_weights = {'GROWTH_F':0.30,'MOM':0.60,'VOL':-0.10}
L32 D_BETA_MODE = os.environ.get("D_BETA_MODE", "z").lower()   # "raw" or "z"
L33 D_BETA_CUTOFF = float(os.environ.get("D_BETA_CUTOFF", "-0.8"))
L34 FILTER_SPEC = {"G":{"pre_mask":["trend_template"]},"D":{"pre_filter":{"beta_max":D_BETA_CUTOFF}}}
L35 D_weights = {'QAL':0.15,'YLD':0.25,'VOL':-0.40,'TRD':0.20}
L36 _fmt_w = lambda w: " ".join(f"{k}{int(v*100)}" for k, v in w.items())
L37
L38 def _zscore_series(s: pd.Series) -> pd.Series:
L39     # NaNはそのまま、標準偏差0なら全NaNにする（暴走防止）
L40     v = s.astype(float)
L41     m, std = v.mean(skipna=True), v.std(skipna=True, ddof=0)
L42     if not np.isfinite(std) or std == 0:
L43         return pd.Series(index=v.index, dtype=float)
L44     return (v - m) / std
L45
L46 # DRRS 初期プール・各種パラメータ
L47 corrM = 45
L48 DRRS_G, DRRS_D = dict(lookback=252,n_pc=3,gamma=1.2,lam=0.68,eta=0.8), dict(lookback=504,n_pc=4,gamma=0.8,lam=0.85,eta=0.5)
L49 DRRS_SHRINK = 0.10  # 残差相関の対角シュリンク（基礎）
L50
L51 # クロス相関ペナルティ（未定義なら設定）
L52 try: CROSS_MU_GD
L53 except NameError: CROSS_MU_GD = 0.40  # 推奨 0.35–0.45（lam=0.85想定）
L54
L55 # 出力関連
L56 RESULTS_DIR = "results"
L57 os.makedirs(RESULTS_DIR, exist_ok=True)
L58
L59 # === 共有DTO（クラス間I/O契約）＋ Config ===
L60 @dataclass(frozen=True)
L61 class InputBundle:
L62     # Input → Scorer で受け渡す素材（I/O禁止の生データ）
L63     cand: List[str]
L64     tickers: List[str]
L65     bench: str
L66     data: pd.DataFrame              # yfinance download結果（'Close','Volume'等の階層列）
L67     px: pd.DataFrame                # data['Close']
L68     spx: pd.Series                  # data['Close'][bench]
L69     tickers_bulk: object            # yfinance.Tickers
L70     info: Dict[str, dict]           # yfinance info per ticker
L71     eps_df: pd.DataFrame            # ['eps_ttm','eps_q_recent',...]
L72     fcf_df: pd.DataFrame            # ['fcf_ttm', ...]
L73     returns: pd.DataFrame           # px[tickers].pct_change()
L74     missing_logs: pd.DataFrame
L75
L76 @dataclass(frozen=True)
L77 class FeatureBundle:
L78     df: pd.DataFrame
L79     df_z: pd.DataFrame
L80     g_score: pd.Series
L81     d_score_all: pd.Series
L82     missing_logs: pd.DataFrame
L83     df_full: pd.DataFrame | None = None
L84     df_full_z: pd.DataFrame | None = None
L85     scaler: Any | None = None
L86
L87 @dataclass(frozen=True)
L88 class SelectionBundle:
L89     resG: dict
L90     resD: dict
L91     top_G: List[str]
L92     top_D: List[str]
L93     init_G: List[str]
L94     init_D: List[str]
L95
L96 @dataclass(frozen=True)
L97 class WeightsConfig:
L98     g: Dict[str,float]
L99     d: Dict[str,float]
L100
L101 @dataclass(frozen=True)
L102 class DRRSParams:
L103     corrM: int
L104     shrink: float
L105     G: Dict[str,float]   # lookback, n_pc, gamma, lam, eta
L106     D: Dict[str,float]
L107     cross_mu_gd: float
L108
L109 @dataclass(frozen=True)
L110 class PipelineConfig:
L111     weights: WeightsConfig
L112     drrs: DRRSParams
L113     price_max: float
L114     debug_mode: bool = False
L115
L116 # ---------- 重複警告の集約ロジック ----------
L117 _warn_lock = threading.Lock()
L118 _warn_seen = set()                     # 初回表示済みキー
L119 _warn_count = Counter()                # (category, message, module) → 件数
L120 _warn_first_ctx = {}                   # 初回の (filename, lineno)
L121
L122 def _warn_key(message, category, filename, lineno, *_args, **_kwargs):
L123     # "同じ警告" を定義: カテゴリ + 正規化メッセージ + モジュールパス(先頭数階層)
L124     mod = filename.split("/site-packages/")[-1] if "/site-packages/" in filename else filename
L125     mod = mod.rsplit("/", 3)[-1]  # 長すぎ抑制（末尾3階層まで）
L126     msg = str(message).strip()
L127     return (category.__name__, msg, mod)
L128
L129 _orig_showwarning = warnings.showwarning
L130
L131 def _compact_showwarning(message, category, filename, lineno, file=None, line=None):
L132     key = _warn_key(message, category, filename, lineno)
L133     with _warn_lock:
L134         _warn_count[key] += 1
L135         if key not in _warn_seen:
L136             # 初回だけ1行で出す（カテゴリ | モジュール | メッセージ）
L137             _warn_seen.add(key)
L138             _warn_first_ctx[key] = (filename, lineno)
L139             # 1行フォーマット（行数節約）
L140             txt = f"[WARN][{category.__name__}] {message} | {filename}:{lineno}"
L141             print(txt)
L142         # 2回目以降は出さない（集約）
L143
L144 warnings.showwarning = _compact_showwarning
L145
L146 # ベースポリシー: 通常は警告を出す（default）→ ただし同一メッセージは集約
L147 warnings.resetwarnings()
L148 warnings.simplefilter("default")
L149
L150 # 2) ピンポイント間引き: yfinance 'Ticker.earnings' は "once"（初回のみ可視化）
L151 warnings.filterwarnings(
L152     "once",
L153     message="'Ticker.earnings' is deprecated",
L154     category=DeprecationWarning,
L155     module="yfinance"
L156 )
L157
L158 # 3) 最終サマリ: 同一警告が何回出たかを最後に1行で
L159 @atexit.register
L160 def _print_warning_summary():
L161     suppressed = []
L162     for key, cnt in _warn_count.items():
L163         if cnt > 1:
L164             (cat, msg, mod) = key
L165             filename, lineno = _warn_first_ctx.get(key, ("", 0))
L166             suppressed.append((cnt, cat, msg, mod, filename, lineno))
L167     if suppressed:
L168         suppressed.sort(reverse=True)  # 件数降順
L169         # 最多上位だけ出す（必要なら上限制御：ここでは上位10件）
L170         top = suppressed[:10]
L171         print(f"[WARN-SUMMARY] duplicated warning groups: {len(suppressed)}")
L172         for cnt, cat, msg, mod, filename, lineno in top:
L173             print(f"[WARN-SUMMARY] {cnt-1} more | [{cat}] {msg} | {mod} ({filename}:{lineno})")
L174         if len(suppressed) > len(top):
L175             print(f"[WARN-SUMMARY] ... and {len(suppressed)-len(top)} more groups suppressed")
L176
L177 # 4) 追加（任意）: 1ジョブあたりの総警告上限を設定したい場合
L178 #    例: 上限1000を超えたら以降は完全サイレント
L179 _WARN_HARD_LIMIT = int(os.getenv("WARN_HARD_LIMIT", "0") or "0")  # 0なら無効
L180 if _WARN_HARD_LIMIT > 0:
L181     _orig_warn_func = warnings.warn
L182     def _limited_warn(*a, **k):
L183         total = sum(_warn_count.values())
L184         if total < _WARN_HARD_LIMIT:
L185             return _orig_warn_func(*a, **k)
L186         # 超過後は捨てる（最後にsummaryだけ残る）
L187     warnings.warn = _limited_warn
L188
L189 # ---------- ここまでで警告の“可視性は維持”しつつ“重複で行数爆発”を抑止 ----------
L190
L191 # その他
L192 logger = logging.getLogger(__name__)
L193 logging.basicConfig(level=(logging.INFO if debug_mode else logging.WARNING), force=True)
L194
L195 class T:
L196     t = perf_counter()
L197
L198     @staticmethod
L199     def log(tag):
L200         now = perf_counter()
L201         print(f"[T] {tag}: {now - T.t:.2f}s")
L202         T.t = now
L203
L204 T.log("start")
L205 try:
L206     T.t = _CSV_LOAD_START
L207 except NameError:
L208     pass
L209 T.log(f"csv loaded: exist={len(exist)} cand={len(cand)}")
L210
L211 # === Utilities ===
L212 def aggregate_warnings(rows, key="message", max_items=10):
L213     """
L214     同一内容の警告を '×N' 表記でまとめる。機能変更なし（位置のみ移動）。
L215     rows: List[Dict] または List[str]
L216     """
L217     from collections import Counter
L218
L219     if not rows:
L220         return []
L221
L222     if isinstance(rows[0], dict):
L223         msgs = [str(r.get(key, "")) for r in rows if r.get(key)]
L224     else:
L225         msgs = [str(r) for r in rows if r]
L226
L227     cnt = Counter(msgs)
L228     out = [f"{m} ×{n}" if n > 1 else m for m, n in cnt.most_common()]
L229     return out[:max_items]
L230
L231
L232 _env_true = lambda name, default=False: (os.getenv(name) or str(default)).strip().lower() == "true"
L233
L234 def _post_slack(payload: dict):
L235     url = os.getenv("SLACK_WEBHOOK_URL")
L236     if not url: print("⚠️ SLACK_WEBHOOK_URL 未設定"); return
L237     try:
L238         requests.post(url, json=payload).raise_for_status()
L239     except Exception as e:
L240         print(f"⚠️ Slack通知エラー: {e}")
L241
L242 def _slack_send_text_chunks(url: str, text: str, chunk: int = 2800) -> None:
L243     """Slackへテキストを分割送信（コードブロック形式）。"""
L244
L245     def _post_text(payload: str) -> None:
L246         try:
L247             resp = requests.post(url, json={"text": payload})
L248             print(f"[DBG] debug_post status={getattr(resp,'status_code',None)} size={len(payload)}")
L249             if resp is not None:
L250                 resp.raise_for_status()
L251         except Exception as e:
L252             print(f"[ERR] debug_post_failed: {e}")
L253
L254     body = (text or "").strip()
L255     if not body:
L256         print("[DBG] skip debug send: empty body")
L257         return
L258
L259     block, block_len = [], 0
L260
L261     def _flush():
L262         nonlocal block, block_len
L263         if block:
L264             _post_text("```" + "\n".join(block) + "```")
L265             block, block_len = [], 0
L266
L267     for raw in body.splitlines():
L268         line = raw or ""
L269         while len(line) > chunk:
L270             head, line = line[:chunk], line[chunk:]
L271             _flush()
L272             _post_text("```" + head + "```")
L273         add_len = len(line) if not block else len(line) + 1
L274         if block and block_len + add_len > chunk:
L275             _flush(); add_len = len(line)
L276         block.append(line)
L277         block_len += add_len
L278     _flush()
L279
L280 def _disjoint_keepG(top_G, top_D, poolD):
L281     """G重複をDから除去し、poolDで順次補充（枯渇時は元銘柄維持）。"""
L282     used, D, i = set(top_G), list(top_D), 0
L283     for j, t in enumerate(D):
L284         if t not in used:
L285             continue
L286         while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L287             i += 1
L288         if i < len(poolD):
L289             D[j] = poolD[i]; used.add(D[j]); i += 1
L290     return top_G, D
L291
L292
L293 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L294                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L295     import pandas as pd, numpy as np
L296     sel = list(pick)
L297     if not sel: return sel
L298     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L299     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L300     std = agg.std()
L301     sigma = float(std) if pd.notna(std) else 0.0
L302     thresh = kth - delta_z * sigma
L303     ranked_all = agg.sort_values(ascending=False)
L304     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L305     for t in cand:
L306         within_score = pd.notna(agg[t]) and agg[t] >= thresh
L307         within_rank = t in ranked_all.index and ranked_all.index.get_loc(t) < n_target + keep_buffer
L308         if not (within_score or within_rank):
L309             continue
L310         non_inc = [x for x in sel if x not in incumbents]
L311         if not non_inc:
L312             break
L313         weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L314         if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L315             sel.remove(weakest); sel.append(t)
L316     if len(sel) > n_target:
L317         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L318     return sel
L319
L320
L321 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L322 class Input:
L323     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L324         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L325         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L326
L327     # ---- （Input専用）EPS補完・FCF算出系 ----
L328     @staticmethod
L329     def _sec_headers():
L330         mail = (os.getenv("SEC_CONTACT_EMAIL") or os.getenv("SEC_EMAIL") or "").strip()
L331         ua = f"factor-selection/1 (+mailto:{mail})" if mail else "factor-selection/1"
L332         headers = {"User-Agent": ua[:200], "Accept": "application/json"}
L333         if mail:
L334             headers["From"] = mail[:200]
L335         return headers
L336
L337     @staticmethod
L338     def _sec_get(url: str, retries: int = 3, backoff: float = 0.5):
L339         for i in range(retries):
L340             r = requests.get(url, headers=Input._sec_headers(), timeout=20)
L341             if r.status_code in (429, 503, 403):
L342                 time.sleep(min(2 ** i * backoff, 8.0))
L343                 continue
L344             r.raise_for_status(); return r.json()
L345         r.raise_for_status()
L346
L347     @staticmethod
L348     def _sec_ticker_map():
L349         import requests
L350
L351         url_primary = "https://data.sec.gov/api/xbrl/company_tickers.json"
L352         url_fallback = "https://www.sec.gov/files/company_tickers.json"
L353         mp = {}
L354         try:
L355             j = Input._sec_get(url_primary)  # 既存の堅牢GET（リトライ・バックオフ）
L356         except Exception:
L357             r = requests.get(url_fallback, headers=Input._sec_headers(), timeout=20)
L358             r.raise_for_status()
L359             j = r.json()
L360         # 形状A: {"0": {"ticker":..., "cik_str":...}, ...}
L361         if isinstance(j, dict) and "0" in j:
L362             for _, v in (j or {}).items():
L363                 try:
L364                     mp[str(v["ticker"]).upper()] = f"{int(v['cik_str']):010d}"
L365                 except Exception:
L366                     pass
L367         # 形状B: [{"ticker":..., "cik_str":...}, ...]
L368         elif isinstance(j, list):
L369             for v in j:
L370                 try:
L371                     mp[str(v.get("ticker")).upper()] = f"{int(v.get('cik_str')):010d}"
L372                 except Exception:
L373                     pass
L374         # 形状C: {"data":[[idx,ticker,title,cik_str],...]}
L375         elif isinstance(j, dict) and "data" in j:
L376             for row in j.get("data") or []:
L377                 try:
L378                     t = str(row[1]).upper()
L379                     c = int(row[3])
L380                     mp[t] = f"{c:010d}"
L381                 except Exception:
L382                     pass
L383         return mp
L384
L385     # --- 追加: ADR/OTC向けの簡易正規化（末尾Y/F, ドット等） ---
L386     @staticmethod
L387     def _normalize_ticker(sym: str) -> list[str]:
L388         s = (sym or "").upper().strip()
L389         # 追加: 先頭の$や全角の記号を除去
L390         s = s.lstrip("$").replace("＄", "").replace("．", ".").replace("－", "-")
L391         cand: list[str] = []
L392
L393         def add(x: str) -> None:
L394             if x and x not in cand:
L395                 cand.append(x)
L396
L397         # 1) 原文を最優先（SECは BRK.B, BF.B など . を正式採用）
L398         add(s)
L399         # 2) Yahoo系バリアント（. と - の揺れを相互に）
L400         if "." in s:
L401             add(s.replace(".", "-"))
L402             add(s.replace(".", ""))
L403         if "-" in s:
L404             add(s.replace("-", "."))
L405             add(s.replace("-", ""))
L406         # 3) ドット・ハイフン・ピリオド無し版（最後の保険）
L407         add(s.replace("-", "").replace(".", ""))
L408         # 4) ADR簡易：末尾Y/Fの除去（SECマップは本体ティッカーを持つことがある）
L409         if len(s) >= 2 and s[-1] in {"Y", "F"}:
L410             add(s[:-1])
L411         return cand
L412
L413     @staticmethod
L414     def _sec_companyfacts(cik: str):
L415         return Input._sec_get(f"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik}.json")
L416
L417     @staticmethod
L418     def _units_for_tags(facts: dict, namespaces: list[str], tags: list[str]) -> list[dict]:
L419         """facts から namespace/tag を横断して units 配列を収集（存在順に連結）。"""
L420         out: list[dict] = []
L421         facts = (facts or {}).get("facts", {})
L422         for ns in namespaces:
L423             node = facts.get(ns, {}) if isinstance(facts, dict) else {}
L424             for tg in tags:
L425                 try:
L426                     units = node[tg]["units"]
L427                 except Exception:
L428                     continue
L429                 picks: list[dict] = []
L430                 if "USD/shares" in units:
L431                     picks.extend(list(units["USD/shares"]))
L432                 if "USD" in units:
L433                     picks.extend(list(units["USD"]))
L434                 if not picks:
L435                     for arr in units.values():
L436                         picks.extend(list(arr))
L437                 out.extend(picks)
L438         return out
L439
L440     @staticmethod
L441     def _only_quarterly(arr: list[dict]) -> list[dict]:
L442         """companyfactsの混在配列から『四半期』だけを抽出。
L443
L444         - frame に "Q" を含む（例: CY2024Q2I）
L445         - fp が Q1/Q2/Q3/Q4
L446         - form が 10-Q/10-Q/A/6-K
L447         """
L448         if not arr:
L449             return []
L450         q_forms = {"10-Q", "10-Q/A", "6-K"}
L451         out = [
L452             x
L453             for x in arr
L454             if (
L455                 "Q" in (x.get("frame") or "").upper()
L456                 or (x.get("fp") or "").upper() in {"Q1", "Q2", "Q3", "Q4"}
L457                 or (x.get("form") or "").upper() in q_forms
L458             )
L459         ]
L460         out.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L461         return out
L462
L463     @staticmethod
L464     def _series_from_facts_with_dates(arr, key_val="val", key_dt="end", normalize=float):
L465         """companyfactsアイテム配列から (date,value) を返す。dateはYYYY-MM-DDを想定。"""
L466         out: List[Tuple[str, float]] = []
L467         for x in (arr or []):
L468             try:
L469                 d = x.get(key_dt)
L470                 if d is None:
L471                     continue
L472                 v = x.get(key_val)
L473                 out.append((str(d), normalize(v) if v is not None else float("nan")))
L474             except Exception:
L475                 continue
L476         out.sort(key=lambda t: t[0], reverse=True)
L477         return out
L478
L479     def _series_q_and_a(self, facts: list[dict]) -> tuple[list[Tuple[str, float]], list[Tuple[str, float]]]:
L480         """四半期・年次の両seriesを抽出して返す（formで簡易判定）。"""
L481         if not facts:
L482             return [], []
L483         q_items = self._only_quarterly(list(facts))
L484         annual_forms = {"10-K", "10-K/A", "20-F", "20-F/A"}
L485         a_items = [x for x in facts if str((x or {}).get("form", "")).upper() in annual_forms]
L486         a_items.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L487         return self._series_from_facts_with_dates(q_items), self._series_from_facts_with_dates(a_items)
L488
L489     @staticmethod
L490     def _ttm_from_q_or_a(q_vals: list[float], a_vals: list[float]) -> float:
L491         """四半期TTM（4本合算）を優先し、欠損時は年次値で補完。"""
L492         import math
L493
L494         def _clean(vals: list[float]) -> list[float]:
L495             out: list[float] = []
L496             for v in vals:
L497                 try:
L498                     f = float(v)
L499                 except Exception:
L500                     continue
L501                 if math.isfinite(f):
L502                     out.append(f)
L503                 else:
L504                     out.append(float("nan"))
L505             return out
L506
L507         def _sum4(vs: list[float]) -> float:
L508             filtered = [v for v in vs[:4] if v == v]
L509             if len(filtered) >= 2:
L510                 return float(sum(filtered))
L511             if len(filtered) == 1:
L512                 return float(filtered[0])
L513             return float("nan")
L514
L515         q_clean = _clean(q_vals or [])
L516         ttm_q = _sum4(q_clean)
L517         if ttm_q == ttm_q:
L518             return ttm_q
L519         for v in _clean(a_vals or []):
L520             if v == v:
L521                 return float(v)
L522         return float("nan")
L523
L524     def fetch_eps_rev_from_sec(self, tickers: list[str]) -> dict:
L525         out = {}
L526         t2cik = self._sec_ticker_map()
L527         n_map = n_rev = n_eps = 0
L528         miss_map: list[str] = []
L529         miss_facts: list[str] = []
L530         for t in tickers:
L531             base = (t or "").upper()
L532             candidates: list[str] = []
L533             for key in [base, *self._normalize_ticker(t)]:
L534                 if key and key not in candidates:
L535                     candidates.append(key)
L536             cik = next((t2cik.get(key) for key in candidates if t2cik.get(key)), None)
L537             if not cik:
L538                 out[t] = {}
L539                 miss_map.append(t)
L540                 continue
L541             try:
L542                 j = self._sec_companyfacts(cik)
L543                 facts = j or {}
L544                 rev_tags = [
L545                     "Revenues",
L546                     "RevenueFromContractWithCustomerExcludingAssessedTax",
L547                     "SalesRevenueNet",
L548                     "SalesRevenueGoodsNet",
L549                     "SalesRevenueServicesNet",
L550                     "Revenue",
L551                 ]
L552                 eps_tags = [
L553                     "EarningsPerShareDiluted",
L554                     "EarningsPerShareBasicAndDiluted",
L555                     "EarningsPerShare",
L556                     "EarningsPerShareBasic",
L557                 ]
L558                 rev_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], rev_tags)
L559                 eps_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], eps_tags)
L560                 rev_q_pairs, rev_a_pairs = self._series_q_and_a(rev_arr)
L561                 eps_q_pairs, eps_a_pairs = self._series_q_and_a(eps_arr)
L562
L563                 rev_q_pairs = rev_q_pairs[:12]
L564                 eps_q_pairs = eps_q_pairs[:12]
L565                 rev_a_pairs = rev_a_pairs[:6]
L566                 eps_a_pairs = eps_a_pairs[:6]
L567
L568                 def _vals(pairs: list[tuple[str, float]]) -> list[float]:
L569                     vals: list[float] = []
L570                     for _d, v in pairs:
L571                         try:
L572                             vals.append(float(v))
L573                         except Exception:
L574                             vals.append(float("nan"))
L575                     return vals
L576
L577                 rev_q_vals = _vals(rev_q_pairs)
L578                 eps_q_vals = _vals(eps_q_pairs)
L579                 rev_a_vals = _vals(rev_a_pairs)
L580                 eps_a_vals = _vals(eps_a_pairs)
L581
L582                 def _first_valid(vals: list[float]) -> float:
L583                     for v in vals:
L584                         if v == v:
L585                             return float(v)
L586                     return float("nan")
L587
L588                 def _nth_valid(vals: list[float], n: int) -> float:
L589                     idx = 0
L590                     for v in vals:
L591                         if v == v:
L592                             if idx == n:
L593                                 return float(v)
L594                             idx += 1
L595                     return float("nan")
L596
L597                 def _quarter_from_annual(vals: list[float]) -> float:
L598                     v = _first_valid(vals)
L599                     return float(v / 4.0) if v == v else float("nan")
L600
L601                 def _quarter_from_annual_prev(vals: list[float]) -> float:
L602                     v = _nth_valid(vals, 1)
L603                     return float(v / 4.0) if v == v else float("nan")
L604
L605                 rev_lastq = _first_valid(rev_q_vals)
L606                 if rev_lastq != rev_lastq:
L607                     rev_lastq = _quarter_from_annual(rev_a_vals)
L608                 eps_lastq = _first_valid(eps_q_vals)
L609                 if eps_lastq != eps_lastq:
L610                     eps_lastq = _quarter_from_annual(eps_a_vals)
L611
L612                 rev_lastq_prev = _nth_valid(rev_q_vals, 4)
L613                 if rev_lastq_prev != rev_lastq_prev:
L614                     rev_lastq_prev = _quarter_from_annual_prev(rev_a_vals)
L615                 eps_lastq_prev = _nth_valid(eps_q_vals, 4)
L616                 if eps_lastq_prev != eps_lastq_prev:
L617                     eps_lastq_prev = _quarter_from_annual_prev(eps_a_vals)
L618
L619                 rev_ttm = self._ttm_from_q_or_a(rev_q_vals, rev_a_vals)
L620                 eps_ttm = self._ttm_from_q_or_a(eps_q_vals, eps_a_vals)
L621                 rev_ttm_prev = self._ttm_from_q_or_a(rev_q_vals[4:], rev_a_vals[1:])
L622                 eps_ttm_prev = self._ttm_from_q_or_a(eps_q_vals[4:], eps_a_vals[1:])
L623
L624                 rev_annual_latest = _first_valid(rev_a_vals)
L625                 rev_annual_prev = _nth_valid(rev_a_vals, 1)
L626                 eps_annual_latest = _first_valid(eps_a_vals)
L627                 eps_annual_prev = _nth_valid(eps_a_vals, 1)
L628
L629                 def _cagr3(vals: list[float]) -> float:
L630                     vals_valid = [v for v in vals if v == v]
L631                     if len(vals_valid) >= 3:
L632                         latest, base = float(vals_valid[0]), float(vals_valid[2])
L633                         if latest > 0 and base > 0:
L634                             try:
L635                                 return float((latest / base) ** (1 / 2) - 1.0)
L636                             except Exception:
L637                                 return float("nan")
L638                     return float("nan")
L639
L640                 rev_cagr3 = _cagr3(rev_a_vals)
L641                 eps_cagr3 = _cagr3(eps_a_vals)
L642
L643                 out[t] = {
L644                     "eps_q_recent": eps_lastq,
L645                     "eps_ttm": eps_ttm,
L646                     "eps_ttm_prev": eps_ttm_prev,
L647                     "eps_lastq_prev": eps_lastq_prev,
L648                     "rev_q_recent": rev_lastq,
L649                     "rev_ttm": rev_ttm,
L650                     "rev_ttm_prev": rev_ttm_prev,
L651                     "rev_lastq_prev": rev_lastq_prev,
L652                     # 後段でDatetimeIndex化できるよう (date,value) を保持。値だけの互換キーも残す。
L653                     # 3年運用に合わせて四半期は直近12本のみ保持（約3年=12Q）
L654                     "eps_q_series_pairs": eps_q_pairs,
L655                     "rev_q_series_pairs": rev_q_pairs,
L656                     "eps_q_series": eps_q_vals,
L657                     "rev_q_series": rev_q_vals,
L658                     "eps_a_series_pairs": eps_a_pairs,
L659                     "rev_a_series_pairs": rev_a_pairs,
L660                     "eps_a_series": eps_a_vals,
L661                     "rev_a_series": rev_a_vals,
L662                     "eps_annual_latest": eps_annual_latest,
L663                     "eps_annual_prev": eps_annual_prev,
L664                     "rev_annual_latest": rev_annual_latest,
L665                     "rev_annual_prev": rev_annual_prev,
L666                     "eps_cagr3": eps_cagr3,
L667                     "rev_cagr3": rev_cagr3,
L668                 }
L669                 n_map += 1
L670                 if any(v == v for v in rev_q_vals) or any(v == v for v in rev_a_vals):
L671                     n_rev += 1
L672                 if any(v == v for v in eps_q_vals) or any(v == v for v in eps_a_vals):
L673                     n_eps += 1
L674             except Exception:
L675                 out[t] = {}
L676                 miss_facts.append(t)
L677             time.sleep(0.30)
L678         # 取得サマリをログ（Actionsで確認しやすいよう print）
L679         try:
L680             total = len(tickers)
L681             print(f"[SEC] map={n_map}/{total}  rev_q_hit={n_rev}  eps_q_hit={n_eps}")
L682             # デバッグ: 取得本数の分布（先頭のみ）
L683             try:
L684                 lens = [len((out.get(t, {}) or {}).get("rev_q_series", [])) for t in tickers]
L685                 print(f"[SEC] rev_q_series length: min={min(lens) if lens else 0} "
L686                       f"p25={np.percentile(lens,25) if lens else 0} median={np.median(lens) if lens else 0} "
L687                       f"p75={np.percentile(lens,75) if lens else 0} max={max(lens) if lens else 0}")
L688             except Exception:
L689                 pass
L690             if miss_map:
L691                 print(f"[SEC] no CIK map: {len(miss_map)} (サンプル例) {miss_map[:20]}")
L692             if miss_facts:
L693                 print(f"[SEC] CIKあり だが対象factなし: {len(miss_facts)} (サンプル例) {miss_facts[:20]}")
L694         except Exception:
L695             pass
L696         return out
L697
L698     def sec_dryrun_sample(self, tickers: list[str] | None = None) -> None:
L699         if not _env_true("SEC_DRYRUN_SAMPLE", False):
L700             return
L701         sample = tickers or ["BRK.B", "BF.B", "GOOGL", "META", "UBER", "PBR.A", "TSM", "NARI", "EVBN", "SWAV"]
L702         print(f"[SEC-DRYRUN] sample tickers: {sample}")
L703         try:
L704             t2cik = self._sec_ticker_map()
L705             hits = 0
L706             for sym in sample:
L707                 candidates: list[str] = []
L708
L709                 def add(key: str) -> None:
L710                     if key and key not in candidates:
L711                         candidates.append(key)
L712
L713                 add((sym or "").upper())
L714                 for alt in self._normalize_ticker(sym):
L715                     add(alt)
L716                 if any(t2cik.get(key) for key in candidates):
L717                     hits += 1
L718             sec_data = self.fetch_eps_rev_from_sec(sample)
L719             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L720             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L721             total = len(sample)
L722             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L723         except Exception as e:
L724             print(f"[SEC-DRYRUN] error: {e}")
L725     @staticmethod
L726     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L727         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L728         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L729         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L730
L731     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L732
L733     @staticmethod
L734     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L735         if df is None or df.empty: return None
L736         idx_lower={str(i).lower():i for i in df.index}
L737         for n in names:
L738             k=n.lower()
L739             if k in idx_lower: return df.loc[idx_lower[k]]
L740         return None
L741
L742     @staticmethod
L743     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L744         if s is None or s.empty: return None
L745         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L746
L747     @staticmethod
L748     def _latest(s: pd.Series|None) -> float|None:
L749         if s is None or s.empty: return None
L750         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L751
L752     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L753         from concurrent.futures import ThreadPoolExecutor, as_completed
L754         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L755
L756         def one(t: str):
L757             try:
L758                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L759                 qcf = tk.quarterly_cashflow
L760                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L761                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L762                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L763                 if any(v is None for v in (cfo, capex, fcf)):
L764                     acf = tk.cashflow
L765                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L766                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L767                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L768             except Exception as e:
L769                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L770             n=np.nan
L771             return {"ticker":t,
L772                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L773                     "capex_ttm_yf": n if capex is None else capex,
L774                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L775
L776         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L777         with ThreadPoolExecutor(max_workers=mw) as ex:
L778             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L779         return pd.DataFrame(rows).set_index("ticker")
L780
L781     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L782     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L783
L784     @staticmethod
L785     def _first_key(d: dict, keys: list[str]):
L786         for k in keys:
L787             if k in d and d[k] is not None: return d[k]
L788         return None
L789
L790     @staticmethod
L791     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L792         for i in range(retries):
L793             r = session.get(url, params=params, timeout=15)
L794             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L795             r.raise_for_status(); return r.json()
L796         r.raise_for_status()
L797
L798     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L799         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L800         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L801         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L802         for sym in tickers:
L803             cfo_ttm = capex_ttm = None
L804             try:
L805                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L806                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L807                 for item in arr[:4]:
L808                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L809                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L810                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L811             except Exception: pass
L812             if cfo_ttm is None or capex_ttm is None:
L813                 try:
L814                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L815                     arr = j.get("cashFlow") or []
L816                     if arr:
L817                         item0 = arr[0]
L818                         if cfo_ttm is None:
L819                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L820                             if v is not None: cfo_ttm = float(v)
L821                         if capex_ttm is None:
L822                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L823                             if v is not None: capex_ttm = float(v)
L824                 except Exception: pass
L825             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L826         return pd.DataFrame(rows).set_index("ticker")
L827
L828     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L829         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L830         T.log("financials (yf) done")
L831         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L832         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L833         if need:
L834             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L835             df = yf_df.join(fh_df, how="left")
L836             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L837                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L838             print("[T] financials (finnhub) done (fallback only)")
L839         else:
L840             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L841             print("[T] financials (finnhub) skipped (no missing)")
L842         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L843         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L844         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L845         fcf_calc = cfo - capex
L846         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L847         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L848         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L849         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L850         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L851         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L852         return df[cols].sort_index()
L853
L854     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L855         eps_rows=[]
L856         for t in tickers:
L857             info_t = info[t]
L858             sec_t = (sec_map or {}).get(t, {})
L859             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L860             eps_q = sec_t.get("eps_q_recent", np.nan)
L861             try:
L862                 tk = tickers_bulk.tickers.get(t)
L863                 if tk is None:
L864                     sym = info_t.get("_yf_symbol") if isinstance(info_t, dict) else None
L865                     if sym:
L866                         tk = tickers_bulk.tickers.get(sym)
L867                 qearn = tk.quarterly_earnings if tk is not None else None
L868                 so = info_t.get("sharesOutstanding")
L869                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L870                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L871                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L872                     if pd.isna(eps_q):
L873                         eps_q = qearn["Earnings"].iloc[-1]/so
L874             except Exception: pass
L875             rev_ttm = sec_t.get("rev_ttm", np.nan)
L876             rev_q = sec_t.get("rev_q_recent", np.nan)
L877             if (not sec_t) or pd.isna(rev_ttm):
L878                 try:
L879                     tk = tickers_bulk.tickers.get(t)
L880                     if tk is None and isinstance(info_t, dict):
L881                         sym = info_t.get("_yf_symbol")
L882                         if sym:
L883                             tk = tickers_bulk.tickers.get(sym)
L884                     qfin = getattr(tk, "quarterly_financials", None)
L885                     if qfin is not None and not qfin.empty:
L886                         idx_lower = {str(i).lower(): i for i in qfin.index}
L887                         rev_idx = None
L888                         for name in ("Total Revenue", "TotalRevenue"):
L889                             key = name.lower()
L890                             if key in idx_lower:
L891                                 rev_idx = idx_lower[key]
L892                                 break
L893                         if rev_idx is not None:
L894                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L895                             if not rev_series.empty:
L896                                 rev_ttm_yf = float(rev_series.head(4).sum())
L897                                 if pd.isna(rev_ttm):
L898                                     rev_ttm = rev_ttm_yf
L899                                 if pd.isna(rev_q):
L900                                     rev_q = float(rev_series.iloc[0])
L901                 except Exception:
L902                     pass
L903             eps_rows.append({
L904                 "ticker": t,
L905                 "eps_ttm": eps_ttm,
L906                 "eps_ttm_prev": sec_t.get("eps_ttm_prev", np.nan),
L907                 "eps_q_recent": eps_q,
L908                 "eps_q_prev": sec_t.get("eps_lastq_prev", np.nan),
L909                 "rev_ttm": rev_ttm,
L910                 "rev_ttm_prev": sec_t.get("rev_ttm_prev", np.nan),
L911                 "rev_q_recent": rev_q,
L912                 "rev_q_prev": sec_t.get("rev_lastq_prev", np.nan),
L913                 "eps_annual_latest": sec_t.get("eps_annual_latest", np.nan),
L914                 "eps_annual_prev": sec_t.get("eps_annual_prev", np.nan),
L915                 "rev_annual_latest": sec_t.get("rev_annual_latest", np.nan),
L916                 "rev_annual_prev": sec_t.get("rev_annual_prev", np.nan),
L917                 "eps_cagr3": sec_t.get("eps_cagr3", np.nan),
L918                 "rev_cagr3": sec_t.get("rev_cagr3", np.nan),
L919             })
L920         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L921
L922     def prepare_data(self):
L923         """Fetch price and fundamental data for all tickers."""
L924         self.sec_dryrun_sample()
L925         # --- yfinance 用にティッカーを正規化（"$"剥がし、"."→"-"） ---
L926         def _to_yf(sym: str) -> str:
L927             s = (sym or "").strip().lstrip("$").replace("＄", "")
L928             # BRK.B / PBR.A などは Yahoo では '-' を使用
L929             yf_sym = s.replace("．", ".").replace(".", "-")
L930             return yf_sym or (sym or "")
L931
L932         cand_y = [_to_yf(t) for t in self.cand]
L933         cand_info = yf.Tickers(" ".join(cand_y))
L934
L935         def _price(orig: str, ysym: str) -> float:
L936             try:
L937                 return cand_info.tickers[ysym].fast_info.get("lastPrice", np.inf)
L938             except Exception as e:
L939                 print(f"{orig}: price fetch failed ({e})")
L940                 return np.inf
L941
L942         cand_prices = {orig: _price(orig, ysym) for orig, ysym in zip(self.cand, cand_y)}
L943         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L944         T.log("price cap filter done (CAND_PRICE_MAX)")
L945         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L946         # ユニバース確定（元ティッカー保持）。yfinance には後で変換して渡す
L947         tickers = list(dict.fromkeys(self.exist + cand_f))
L948         yf_map = {t: _to_yf(t) for t in tickers}
L949         yf_list = list(dict.fromkeys([yf_map[t] for t in tickers]))
L950         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L951         data = yf.download(yf_list + [self.bench], period="600d",
L952                            auto_adjust=True, progress=False, threads=False)
L953         T.log("yf.download done")
L954         inv = {v: k for k, v in yf_map.items()}
L955         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L956         px = px.rename(columns=inv)
L957         try:
L958             if isinstance(data.columns, pd.MultiIndex):
L959                 data = data.rename(columns=inv, level=1)
L960             else:
L961                 data = data.rename(columns=inv)
L962         except Exception:
L963             pass
L964         spx = data["Close"][self.bench].reindex(px.index).ffill()
L965         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L966         if clip_days > 0:
L967             px, spx = px.tail(clip_days + 1), spx.tail(clip_days + 1)
L968             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)
L969         else:
L970             logger.info("[T] price window clip skipped; rows=%d", len(px))
L971         tickers_bulk, info = yf.Tickers(" ".join(yf_list)), {}
L972         for orig, ysym in yf_map.items():
L973             if ysym in tickers_bulk.tickers:
L974                 tickers_bulk.tickers[orig] = tickers_bulk.tickers[ysym]
L975         for t in tickers:
L976             try:
L977                 tk = tickers_bulk.tickers.get(t) or tickers_bulk.tickers.get(yf_map[t])
L978                 info_entry = tk.info if tk is not None else {}
L979                 if not isinstance(info_entry, dict):
L980                     info_entry = {}
L981                 info_entry.setdefault("_yf_symbol", getattr(tk, "ticker", yf_map.get(t)))
L982                 info[t] = info_entry
L983             except Exception as e:
L984                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L985                 info[t] = {}
L986         try:
L987             sec_map = self.fetch_eps_rev_from_sec(tickers)
L988         except Exception as e:
L989             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L990             sec_map = {}
L991
L992         def _brief_len(s):
L993             try:
L994                 if isinstance(s, pd.Series):
L995                     return int(s.dropna().size)
L996                 if isinstance(s, (list, tuple)):
L997                     return len([v for v in s if pd.notna(v)])
L998                 if isinstance(s, np.ndarray):
L999                     return int(np.count_nonzero(~pd.isna(s)))
L1000                 return int(bool(s))
L1001             except Exception:
L1002                 return 0
L1003
L1004         def _has_entries(val) -> bool:
L1005             try:
L1006                 if isinstance(val, pd.Series):
L1007                     return not val.dropna().empty
L1008                 if isinstance(val, (list, tuple)):
L1009                     return any(pd.notna(v) for v in val)
L1010                 return bool(val)
L1011             except Exception:
L1012                 return False
L1013
L1014         have_rev = 0
L1015         have_eps = 0
L1016         rev_lens: list[int] = []
L1017         eps_lens: list[int] = []
L1018         rev_y_lens: list[int] = []
L1019         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L1020
L1021         for t in tickers:
L1022             entry = info.get(t, {})
L1023             m = (sec_map or {}).get(t) or {}
L1024             if entry is None or not isinstance(entry, dict):
L1025                 entry = {}
L1026                 info[t] = entry
L1027
L1028             if m:
L1029                 pairs_r = m.get("rev_q_series_pairs") or []
L1030                 pairs_e = m.get("eps_q_series_pairs") or []
L1031                 if pairs_r:
L1032                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L1033                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L1034                     s = pd.Series(val, index=idx).sort_index()
L1035                     entry["SEC_REV_Q_SERIES"] = s
L1036                 else:
L1037                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L1038                 if pairs_e:
L1039                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L1040                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L1041                     s = pd.Series(val, index=idx).sort_index()
L1042                     entry["SEC_EPS_Q_SERIES"] = s
L1043                 else:
L1044                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L1045
L1046             r = entry.get("SEC_REV_Q_SERIES")
L1047             e = entry.get("SEC_EPS_Q_SERIES")
L1048             # 年次は直近3件（約3年）だけ保持。重み分岐の nY 判定は従来通り。
L1049             try:
L1050                 if hasattr(r, "index") and isinstance(r.index, pd.DatetimeIndex):
L1051                     y = r.resample("Y").sum().dropna()
L1052                     entry["SEC_REV_Y_SERIES"] = y.tail(3)
L1053                 else:
L1054                     entry["SEC_REV_Y_SERIES"] = []
L1055             except Exception:
L1056                 entry["SEC_REV_Y_SERIES"] = []
L1057             ry = entry.get("SEC_REV_Y_SERIES")
L1058             if _has_entries(r):
L1059                 have_rev += 1
L1060             if _has_entries(e):
L1061                 have_eps += 1
L1062             lr = _brief_len(r)
L1063             le = _brief_len(e)
L1064             rev_lens.append(lr)
L1065             eps_lens.append(le)
L1066             rev_y_lens.append(_brief_len(ry))
L1067             if len(samples) < 8:
L1068                 try:
L1069                     rd = getattr(r, "index", [])[-1] if lr > 0 else None
L1070                     rv = float(r.iloc[-1]) if lr > 0 else None
L1071                     ed = getattr(e, "index", [])[-1] if le > 0 else None
L1072                     ev = float(e.iloc[-1]) if le > 0 else None
L1073                     samples.append((t, lr, str(rd) if rd is not None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L1074                 except Exception:
L1075                     samples.append((t, lr, "-", None, le, "-", None))
L1076
L1077         logger.info("[SEC] series attach: rev_q=%d/%d, eps_q=%d/%d", have_rev, len(tickers), have_eps, len(tickers))
L1078         logger.info(
L1079             "[SEC_SERIES] rev_q=%d (<=12), eps_q=%d (<=12), rev_y=%d (<=3)",
L1080             max(rev_lens) if rev_lens else 0,
L1081             max(eps_lens) if eps_lens else 0,
L1082             max(rev_y_lens) if rev_y_lens else 0,
L1083         )
L1084
L1085         if rev_lens:
L1086             rev_lens_sorted = sorted(rev_lens)
L1087             eps_lens_sorted = sorted(eps_lens)
L1088             _log(
L1089                 "SEC_SERIES",
L1090                 f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L1091                 f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L1092             )
L1093         for (t, lr, rd, rv, le, ed, ev) in samples:
L1094             _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L1095         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L1096         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L1097         if not eps_df.index.is_unique:
L1098             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L1099         eps_df = eps_df.assign(
L1100             EPS_TTM=eps_df["eps_ttm"],
L1101             EPS_TTM_PREV=eps_df.get("eps_ttm_prev", np.nan),
L1102             EPS_Q_LastQ=eps_df["eps_q_recent"],
L1103             EPS_Q_Prev=eps_df.get("eps_q_prev", np.nan),
L1104             REV_TTM=eps_df["rev_ttm"],
L1105             REV_TTM_PREV=eps_df.get("rev_ttm_prev", np.nan),
L1106             REV_Q_LastQ=eps_df["rev_q_recent"],
L1107             REV_Q_Prev=eps_df.get("rev_q_prev", np.nan),
L1108             EPS_A_LATEST=eps_df.get("eps_annual_latest", np.nan),
L1109             EPS_A_PREV=eps_df.get("eps_annual_prev", np.nan),
L1110             REV_A_LATEST=eps_df.get("rev_annual_latest", np.nan),
L1111             REV_A_PREV=eps_df.get("rev_annual_prev", np.nan),
L1112             EPS_A_CAGR3=eps_df.get("eps_cagr3", np.nan),
L1113             REV_A_CAGR3=eps_df.get("rev_cagr3", np.nan),
L1114         )
L1115         missing_logs = pd.DataFrame()
L1116         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L1117         try:
L1118             n = len(eps_df)
L1119             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L1120             c_rev = int(eps_df["REV_TTM"].notna().sum())
L1121             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L1122         except Exception:
L1123             pass
L1124         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L1125         T.log("eps/fcf prep done")
L1126         returns = px[tickers].pct_change()
L1127         T.log("price prep/returns done")
L1128         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns, missing_logs=missing_logs)
L1129
L1130 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L1131 class Selector:
L1132     # ---- DRRS helpers（Selector専用） ----
L1133     @staticmethod
L1134     def _z_np(X: np.ndarray) -> np.ndarray:
L1135         X = np.asarray(X, dtype=np.float32)
L1136         m = np.nanmean(X, axis=0, keepdims=True)
L1137         s = np.nanstd(X, axis=0, keepdims=True)
L1138         # 分母0/全NaN列の安全化：std==0 を 1 に置換（z=0に収束）
L1139         s = np.where(np.isfinite(s) & (s > 0), s, 1.0).astype(np.float32)
L1140         with np.errstate(invalid="ignore", divide="ignore"):
L1141             Z = (np.nan_to_num(X) - np.nan_to_num(m)) / s
L1142         return np.nan_to_num(Z)
L1143
L1144     @classmethod
L1145     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L1146         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L1147         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L1148         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L1149         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L1150         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L1151
L1152     @classmethod
L1153     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L1154         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L1155         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L1156         if k==0: return []
L1157         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L1158         for _ in range(k):
L1159             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L1160             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L1161             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L1162         return sorted(S)
L1163
L1164     @staticmethod
L1165     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L1166         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1167         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L1168
L1169     @classmethod
L1170     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L1171         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L1172         while improved and passes<max_pass:
L1173             improved, passes = False, passes+1
L1174             for i,out in enumerate(list(S)):
L1175                 for inn in range(len(score)):
L1176                     if inn in S: continue
L1177                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L1178                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1179                 if improved: break
L1180         return S, best
L1181
L1182     @staticmethod
L1183     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L1184         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1185         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L1186         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L1187         return float(s[idx].sum() - lam*within - mu*cross)
L1188
L1189     @classmethod
L1190     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L1191         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L1192         while improved and passes<max_pass:
L1193             improved, passes = False, passes+1
L1194             for i,out in enumerate(list(S)):
L1195                 for inn in range(N):
L1196                     if inn in S: continue
L1197                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L1198                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1199                 if improved: break
L1200         return S, best
L1201
L1202     @staticmethod
L1203     def avg_corr(C: np.ndarray, idx) -> float:
L1204         k = len(idx); P = C[np.ix_(idx, idx)]
L1205         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L1206
L1207     @classmethod
L1208     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L1209         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L1210         union = [t for t in pool_tickers if t in returns_df.columns]
L1211         for t in g_fixed:
L1212             if t not in union: union.append(t)
L1213         Rdf_all = returns_df[union]
L1214         Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all) >= lookback else Rdf_all
L1215         _thresh = max(1, int(0.8 * len(Rdf_all)))
L1216         Rdf_all = Rdf_all.dropna(axis=1, thresh=_thresh)
L1217         Rdf_all = Rdf_all.dropna()
L1218         pool_eff, g_eff = (
L1219             [t for t in pool_tickers if t in Rdf_all.columns],
L1220             [t for t in g_fixed if t in Rdf_all.columns],
L1221         )
L1222         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L1223         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L1224         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L1225         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L1226         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L1227         if len(g_eff)>0 and mu>0.0:
L1228             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L1229         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L1230         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L1231         selected_tickers = [pool_eff[i] for i in S]
L1232         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L1233
L1234     # ---- 選定（スコア Series / returns だけを受ける）----
L1235 # === Output：出力整形と送信（表示・Slack） ===
L1236 class Output:
L1237
L1238     def __init__(self, debug=None):
L1239         # self.debug は使わない（互換のため引数は受けるが無視）
L1240         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L1241         self.g_title = self.d_title = ""
L1242         self.g_formatters = self.d_formatters = {}
L1243         # 低スコア（GSC+DSC）Top10 表示/送信用
L1244         self.low10_table = None
L1245         self.debug_text = ""   # デバッグ用本文はここに一本化
L1246         self._debug_logged = False
L1247         self._miss_disp_info: Tuple[pd.DataFrame, bool, int] | None = None
L1248
L1249     @staticmethod
L1250     def _prepare_missing_display(df: pd.DataFrame | None) -> Tuple[pd.DataFrame, bool, int]:
L1251         if df is None or df.empty:
L1252             return pd.DataFrame(), False, 0
L1253         work = df.copy()
L1254         if 'ticker' not in work.columns:
L1255             work = work.reset_index()
L1256             if 'ticker' not in work.columns and 'index' in work.columns:
L1257                 work = work.rename(columns={'index': 'ticker'})
L1258         bool_cols = [c for c in ['EPS_missing', 'REV_missing'] if c in work.columns]
L1259         if bool_cols:
L1260             work = work.loc[work[bool_cols].any(axis=1)]
L1261         if work.empty:
L1262             return pd.DataFrame(columns=work.columns), False, 0
L1263         cols_order = [
L1264             col for col in [
L1265                 'ticker',
L1266                 'EPS_missing',
L1267                 'REV_missing',
L1268                 'eps_imputed',
L1269                 'EPS_TTM',
L1270                 'EPS_Q_LastQ',
L1271                 'EPS_A_LATEST',
L1272                 'REV_TTM',
L1273                 'REV_Q_LastQ',
L1274                 'REV_A_LATEST',
L1275             ]
L1276             if col in work.columns
L1277         ]
L1278         if cols_order:
L1279             work = work.loc[:, cols_order]
L1280         total = len(work)
L1281         truncated = False
L1282         if total > 50:
L1283             work = work.head(20)
L1284             truncated = True
L1285         return work, truncated, total
L1286
L1287     # --- 表示（元 display_results のロジックそのまま） ---
L1288     def display_results(self, *, exist, bench, df_raw=None, df_z, g_score, d_score_all,
L1289                         init_G, init_D, top_G, top_D, **kwargs):
L1290         logger.info("📌 reached display_results")
L1291         pd.set_option('display.float_format','{:.3f}'.format)
L1292         print("📈 ファクター分散最適化の結果")
L1293         miss_df, truncated, total = self._prepare_missing_display(self.miss_df)
L1294         self._miss_disp_info = (miss_df, truncated, total)
L1295
L1296         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L1297         try:
L1298             sc = getattr(self, "_sc", None)
L1299             agg_G = getattr(sc, "_agg_G", None)
L1300             agg_D = getattr(sc, "_agg_D", None)
L1301         except Exception:
L1302             sc = agg_G = agg_D = None
L1303         class _SeriesProxy:
L1304             __slots__ = ("primary", "fallback")
L1305             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L1306             def get(self, key, default=None):
L1307                 try:
L1308                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L1309                 except Exception:
L1310                     v = None
L1311                 if v is not None and not (isinstance(v, float) and v != v):
L1312                     return v
L1313                 try:
L1314                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L1315                 except Exception:
L1316                     return default
L1317         g_score = _SeriesProxy(agg_G, g_score)
L1318         d_score_all = _SeriesProxy(agg_D, d_score_all)
L1319         near_G = getattr(sc, "_near_G", []) if sc else []
L1320         near_D = getattr(sc, "_near_D", []) if sc else []
L1321
L1322         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L1323         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L1324         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L1325         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L1326         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L1327         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L1328                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L1329         if near_G:
L1330             add = [t for t in near_G if t not in set(G_UNI)][:10]
L1331             if len(add) < 10:
L1332                 try:
L1333                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1334                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L1335                     used = set(G_UNI + add)
L1336                     def _push(lst):
L1337                         nonlocal add, used
L1338                         for t in lst:
L1339                             if len(add) == 10: break
L1340                             if t in aggG.index and t not in used:
L1341                                 add.append(t); used.add(t)
L1342                     _push(out_now)           # ① 今回 OUT を優先
L1343                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L1344                 except Exception:
L1345                     pass
L1346             if add:
L1347                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L1348                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L1349         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L1350
L1351         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L1352         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L1353         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L1354         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L1355         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L1356         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L1357         import scorer
L1358         dw_eff = scorer.D_WEIGHTS_EFF
L1359         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L1360                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L1361         if near_D:
L1362             add = [t for t in near_D if t not in set(D_UNI)][:10]
L1363             if add:
L1364                 d_disp2 = pd.DataFrame(index=add)
L1365                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L1366                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L1367                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L1368         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L1369
L1370         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L1371         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L1372         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L1373
L1374         self.io_table = pd.DataFrame({
L1375             'IN': pd.Series(in_list),
L1376             '/ OUT': pd.Series(out_list)
L1377         })
L1378         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L1379         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L1380         self.io_table['GSC'] = pd.Series(g_list)
L1381         self.io_table['DSC'] = pd.Series(d_list)
L1382
L1383         print("Changes:")
L1384         print(self.io_table.to_string(index=False))
L1385
L1386         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L1387         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L1388         for name,ticks in portfolios.items():
L1389             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L1390             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L1391             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L1392             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L1393             if len(ticks)>=2:
L1394                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L1395                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L1396                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L1397             else: RAW_rho = RESID_rho = np.nan
L1398             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L1399         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L1400         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L1401         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L1402         def _fmt_row(s):
L1403             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L1404         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L1405         # === 追加: GSC+DSC が低い順 TOP10 ===
L1406         try:
L1407             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L1408             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L1409             all_scores = all_scores.dropna(subset=['G_plus_D'])
L1410             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L1411             print("Low Score Candidates (GSC+DSC bottom 10):")
L1412             print(self.low10_table.to_string())
L1413         except Exception as e:
L1414             print(f"[warn] low-score ranking failed: {e}")
L1415             self.low10_table = None
L1416         self.debug_text = ""
L1417         if debug_mode:
L1418             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L1419         else:
L1420             logger.debug(
L1421                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L1422                 debug_mode, True
L1423             )
L1424         self._debug_logged = True
L1425
L1426     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1427     def notify_slack(self):
L1428         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1429
L1430         if not SLACK_WEBHOOK_URL:
L1431             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1432             return
L1433
L1434         def _filter_suffix_from(spec: dict, group: str) -> str:
L1435             g = spec.get(group, {})
L1436             parts = [str(m) for m in g.get("pre_mask", [])]
L1437             for k, v in (g.get("pre_filter", {}) or {}).items():
L1438                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L1439                 name = {"beta": "β"}.get(base, base)
L1440                 try:
L1441                     val = f"{float(v):g}"
L1442                 except Exception:
L1443                     val = str(v)
L1444                 parts.append(f"{name}{op}{val}")
L1445             return "" if not parts else " / filter:" + " & ".join(parts)
L1446
L1447         def _inject_filter_suffix(title: str, group: str) -> str:
L1448             suf = _filter_suffix_from(FILTER_SPEC, group)
L1449             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1450
L1451         def _blk(title, tbl, fmt=None, drop=()):
L1452             if tbl is None or getattr(tbl, 'empty', False):
L1453                 return f"{title}\n(選定なし)\n"
L1454             if drop and hasattr(tbl, 'columns'):
L1455                 keep = [c for c in tbl.columns if c not in drop]
L1456                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1457             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1458
L1459         message = "📈 ファクター分散最適化の結果\n"
L1460         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1461         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1462         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L1463         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L1464
L1465         try:
L1466             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1467             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1468             if r is not None:
L1469                 r.raise_for_status()
L1470         except Exception as e:
L1471             print(f"[ERR] main_post_failed: {e}")
L1472
L1473 def _infer_g_universe(feature_df, selected12=None, near5=None):
L1474     try:
L1475         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1476         if out: return out
L1477     except Exception:
L1478         pass
L1479     base = set()
L1480     for lst in (selected12 or []), (near5 or []):
L1481         for x in (lst or []): base.add(x)
L1482     return list(base) if base else list(feature_df.index)
L1483
L1484 def _fmt_with_fire_mark(tickers, feature_df):
L1485     # breakout/pullback 補助は廃止 → no-op（安全のため列参照なし）
L1486     return [str(t) for t in (tickers or [])]
L1487
L1488 def _label_recent_event(t, feature_df):
L1489     # ラベル付けは廃止 → no-op
L1490     return t
L1491
L1492 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1493
L1494 def io_build_input_bundle() -> InputBundle:
L1495     """
L1496     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1497     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1498     """
L1499     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1500     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"], missing_logs=state["missing_logs"])
L1501
L1502 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1503               n_target: int) -> tuple[list, float, float, float]:
L1504     """
L1505     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1506     戻り値：(pick, avg_res_corr, sum_score, objective)
L1507     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1508     """
L1509     sc.cfg = cfg
L1510
L1511     if hasattr(sc, "score_build_features"):
L1512         feat = sc.score_build_features(inb)
L1513         if not hasattr(sc, "_feat_logged"):
L1514             T.log("features built (scorer)")
L1515             sc._feat_logged = True
L1516         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1517     else:
L1518         if not hasattr(sc, "_feat"):
L1519             fb = sc.aggregate_scores(inb, cfg)
L1520             sc._feat = fb
L1521         else:
L1522             fb = sc._feat
L1523         if not hasattr(sc, "_feat_logged"):
L1524             T.log("features built (scorer)")
L1525             sc._feat_logged = True
L1526         agg = fb.g_score if group == "G" else fb.d_score_all
L1527         if group == "D" and hasattr(fb, "df"):
L1528             beta_raw = fb.df['BETA'].astype(float)
L1529             if D_BETA_MODE == "z":
L1530                 beta_for_filter = _zscore_series(beta_raw)
L1531             else:
L1532                 beta_for_filter = beta_raw
L1533
L1534             beta_mask = (beta_for_filter <= D_BETA_CUTOFF).reindex(agg.index, fill_value=False)
L1535             agg = agg[beta_mask]
L1536
L1537             if isinstance(agg, pd.Series):
L1538                 _min = agg.min(skipna=True)
L1539                 floor = (0.0 if not np.isfinite(_min) else float(_min)) - 1e6
L1540                 agg = agg.fillna(floor)
L1541
L1542             try:
L1543                 logger.info(
L1544                     "D-filter mode=%s cutoff=%s | pass=%d raw[mean=%.3f std=%.3f] z[mean≈0 std≈1]",
L1545                     D_BETA_MODE,
L1546                     D_BETA_CUTOFF,
L1547                     int(beta_mask.sum()),
L1548                     float(beta_raw.mean(skipna=True)),
L1549                     float(beta_raw.std(skipna=True, ddof=0)),
L1550                 )
L1551             except Exception:
L1552                 pass
L1553
L1554     if hasattr(sc, "filter_candidates"):
L1555         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1556
L1557     if isinstance(agg, pd.Series):
L1558         agg = _as_numeric_series(agg)
L1559
L1560     selector = Selector()
L1561     if hasattr(sc, "select_diversified"):
L1562         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1563             selector=selector, prev_tickers=None,
L1564             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1565             cross_mu=cfg.drrs.cross_mu_gd)
L1566     else:
L1567         if group == "G":
L1568             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1569             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1570                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1571                 lam=cfg.drrs.G.get("lam", 0.68),
L1572                 lookback=cfg.drrs.G.get("lookback", 252),
L1573                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1574         else:
L1575             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1576             g_fixed = getattr(sc, "_top_G", None)
L1577             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1578                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1579                 lam=cfg.drrs.D.get("lam", 0.85),
L1580                 lookback=cfg.drrs.D.get("lookback", 504),
L1581                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1582                 mu=cfg.drrs.cross_mu_gd)
L1583         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1584         sum_sc = res["sum_score"]; obj = res["objective"]
L1585         if group == "D":
L1586             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1587             T.log("selection finalized (G/D)")
L1588     try:
L1589         inc = [t for t in exist if t in agg.index]
L1590         pick = _sticky_keep_current(
L1591             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1592             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1593         )
L1594     except Exception as _e:
L1595         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1596     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1597     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1598     try:
L1599         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1600         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1601         setattr(sc, f"_near_{group}", near10)
L1602         setattr(sc, f"_agg_{group}", agg)
L1603     except Exception:
L1604         pass
L1605
L1606     if group == "D":
L1607         T.log("save done")
L1608     if group == "G":
L1609         sc._top_G = pick
L1610     return pick, avg_r, sum_sc, obj
L1611
L1612 def run_pipeline() -> SelectionBundle:
L1613     """
L1614     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1615     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1616     """
L1617     inb = io_build_input_bundle()
L1618     cfg = PipelineConfig(
L1619         weights=WeightsConfig(g=g_weights, d=D_weights),
L1620         drrs=DRRSParams(
L1621             corrM=corrM, shrink=DRRS_SHRINK,
L1622             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1623         ),
L1624         price_max=CAND_PRICE_MAX,
L1625         debug_mode=debug_mode
L1626     )
L1627     sc = Scorer()
L1628     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1629     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1630     alpha = Scorer.spx_to_alpha(inb.spx)
L1631     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1632     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1633     sc._top_G = top_G
L1634     try:
L1635         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1636         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1637     except Exception:
L1638         pass
L1639     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1640     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1641     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1642     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1643     fb = getattr(sc, "_feat", None)
L1644     out = Output()
L1645     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1646     try:
L1647         out._sc = sc
L1648     except Exception:
L1649         pass
L1650     if hasattr(sc, "_feat"):
L1651         try:
L1652             fb = sc._feat
L1653             out.miss_df = fb.missing_logs
L1654             out.display_results(
L1655                 exist=exist,
L1656                 bench=bench,
L1657                 df_raw=fb.df,
L1658                 df_z=fb.df_z,
L1659                 g_score=fb.g_score,
L1660                 d_score_all=fb.d_score_all,
L1661                 init_G=top_G,
L1662                 init_D=top_D,
L1663                 top_G=top_G,
L1664                 top_D=top_D,
L1665                 df_full_z=getattr(fb, "df_full_z", None),
L1666                 prev_G=getattr(sc, "_prev_G", exist),
L1667                 prev_D=getattr(sc, "_prev_D", exist),
L1668             )
L1669             try:
L1670                 DBG_COLS = ["GSC", "GROWTH_F", "MOM", "VOL", "DBGRW.GROWTH_F", "DBGRW.MOM", "DBGRW.VOL"]
L1671                 cols = [c for c in DBG_COLS if c in fb.df_z.columns]
L1672                 idx = [t for t in top_G if t in fb.df_z.index]
L1673                 out.debug_table = fb.df_z.loc[idx, cols].round(2) if idx and cols else None
L1674             except Exception:
L1675                 out.debug_table = None
L1676         except Exception:
L1677             pass
L1678     out.notify_slack()
L1679     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1680               "sum_score": sumG, "objective": objG},
L1681         resD={"tickers": top_D, "avg_res_corr": avgD,
L1682               "sum_score": sumD, "objective": objD},
L1683         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1684
L1685     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1686     try:
L1687         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1688               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1689               .sort_values("G_plus_D")
L1690               .head(10)
L1691               .round(3))
L1692         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1693         _post_slack({"text": f"```{low_msg}```"})
L1694     except Exception as _e:
L1695         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1696
L1697     return sb
L1698
L1699 if __name__ == "__main__":
L1700     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #   - missing_logs: pd.DataFrame   … 補完後の欠損ログ
L26 #
L27 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L28 # =============================================================================
L29
L30 import json, logging, os, requests, sys, warnings
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36 from datetime import datetime as _dt
L37
L38 if TYPE_CHECKING:
L39     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L40
L41 logger = logging.getLogger(__name__)
L42
L43
L44 def _log(stage, msg):
L45     try:
L46         print(f"[DBG][{_dt.utcnow().isoformat(timespec='seconds')}Z][{stage}] {msg}")
L47     except Exception:
L48         print(f"[DBG][{stage}] {msg}")
L49
L50
L51 # ---- Dividend Helpers -------------------------------------------------------
L52 def _last_close(t, price_map=None):
L53     if price_map and (c := price_map.get(t)) is not None: return float(c)
L54     try:
L55         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L56         return float(h.iloc[-1]) if len(h) else np.nan
L57     except Exception:
L58         return np.nan
L59
L60 def _ttm_div_sum(t, lookback_days=400):
L61     try:
L62         div = yf.Ticker(t).dividends
L63         if div is None or len(div) == 0: return 0.0
L64         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L65         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L66         return ttm if ttm > 0 else float(div.tail(4).sum())
L67     except Exception:
L68         return 0.0
L69
L70 def ttm_div_yield_portfolio(tickers, price_map=None):
L71     ys = [(lambda c, s: (s/c) if (np.isfinite(c) and c>0 and s>0) else 0.0)(_last_close(t, price_map), _ttm_div_sum(t)) for t in tickers]
L72     return float(np.mean(ys)) if ys else 0.0
L73
L74 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L75 def _as_numeric_series(s: pd.Series) -> pd.Series:
L76     """Series を float dtype に強制変換し、index を保持する。"""
L77     if s is None:
L78         return pd.Series(dtype=float)
L79     v = pd.to_numeric(s, errors="coerce")
L80     return pd.Series(v.values, index=getattr(s, "index", None), dtype=float, name=getattr(s, "name", None))
L81
L82
L83 def _plain_zscore_series(s: pd.Series) -> pd.Series:
L84     v = pd.to_numeric(s, errors="coerce")
L85     mean = v.mean(skipna=True)
L86     std = v.std(skipna=True, ddof=0)
L87     if not np.isfinite(std) or std == 0:
L88         return pd.Series(index=v.index, dtype=float)
L89     out = (v - mean) / std
L90     return pd.Series(out.values, index=v.index, dtype=float)
L91
L92
L93 def _scalar(x):
L94     """
L95     入力を安全に float スカラへ変換する。
L96
L97     許容する入力パターン:
L98       - pandas.Series: 非NaNの最後の値を採用
L99       - numpy スカラ/配列: 最後の要素を採用
L100       - その他の数値っぽい値: float へ変換
L101
L102     変換できない場合は np.nan を返す。
L103     """
L104
L105     if x is None:
L106         return np.nan
L107
L108     # pandas.Series の場合は非NaNの最後の値を採用
L109     if isinstance(x, pd.Series):
L110         s = pd.to_numeric(x, errors="coerce").dropna()
L111         return float(s.iloc[-1]) if not s.empty else np.nan
L112
L113     # numpy スカラ (item() を持つ) ※文字列は除外
L114     if hasattr(x, "item") and not isinstance(x, (str, bytes)):
L115         try:
L116             return float(x.item())
L117         except Exception:
L118             pass
L119
L120     # 配列様のオブジェクト
L121     try:
L122         arr = np.asarray(x, dtype=float).ravel()
L123         return float(arr[-1]) if arr.size else np.nan
L124     except Exception:
L125         pass
L126
L127     # 最後に素直に float 変換を試す
L128     try:
L129         return float(x)
L130     except Exception:
L131         return np.nan
L132
L133
L134 def winsorize_s(s: pd.Series, p=0.02):
L135     if s is None or s.dropna().empty: return s
L136     lo, hi = np.nanpercentile(s.astype(float), [100*p, 100*(1-p)]); return s.clip(lo, hi)
L137
L138 def robust_z(s: pd.Series, p=0.02):
L139     s2 = winsorize_s(s,p); return np.nan_to_num(zscore(s2.fillna(s2.mean())))
L140
L141 def robust_z_keepnan(s: pd.Series) -> pd.Series:
L142     """robust_z variant that preserves NaNs and falls back to rank-z when needed."""
L143     if s is None:
L144         return pd.Series(dtype=float)
L145     v = pd.to_numeric(s, errors="coerce")
L146     m = np.nanmedian(v)
L147     mad = np.nanmedian(np.abs(v - m))
L148     z = (v - m) / (1.4826 * mad + 1e-9)
L149     if np.nanstd(z) < 1e-9:
L150         r = v.rank(method="average", na_option="keep")
L151         z = (r - np.nanmean(r)) / (np.nanstd(r) + 1e-9)
L152     return pd.Series(z, index=v.index, dtype=float)
L153
L154
L155 def _safe_div(a, b):
L156     try: return np.nan if (b is None or float(b)==0 or pd.isna(b)) else float(a)/float(b)
L157     except Exception: return np.nan
L158
L159 def _safe_last(series: pd.Series, default=np.nan):
L160     try: return float(series.iloc[-1])
L161     except Exception: return default
L162
L163
L164 def _ensure_series(x):
L165     if x is None:
L166         return pd.Series(dtype=float)
L167     if isinstance(x, pd.Series):
L168         return x.dropna()
L169     if isinstance(x, (list, tuple)):
L170         if len(x) and isinstance(x[0], (tuple, list)) and len(x[0]) == 2:
L171             dt = pd.to_datetime([d for d, _ in x], errors="coerce")
L172             v = pd.to_numeric([_v for _, _v in x], errors="coerce")
L173             return pd.Series(v, index=dt).dropna()
L174         return pd.Series(pd.to_numeric(list(x), errors="coerce")).dropna()
L175     try:
L176         return pd.Series(x).dropna()
L177     except Exception:
L178         return pd.Series(dtype=float)
L179
L180
L181 def _to_quarterly(s: pd.Series) -> pd.Series:
L182     if s.empty or not isinstance(s.index, pd.DatetimeIndex):
L183         return s
L184     return s.resample("Q").last().dropna()
L185
L186
L187 def _ttm_yoy_from_quarterly(qs: pd.Series) -> pd.Series:
L188     if qs is None or qs.empty:
L189         return pd.Series(dtype=float)
L190     ttm = qs.rolling(4, min_periods=2).sum()
L191     yoy = ttm.pct_change(4)
L192     return yoy
L193
L194
L195
L196
L197 class Scorer:
L198     """
L199     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L200     - cfg は必須（factor.PipelineConfig を渡す）。
L201     - 旧カラム名を自動リネームして新スキーマに吸収します。
L202     """
L203
L204     # === 先頭で旧→新カラム名マップ（移行用） ===
L205     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L206     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L207
L208     # === スキーマ簡易チェック（最低限） ===
L209     @staticmethod
L210     def _validate_ib_for_scorer(ib: Any):
L211         miss = [a for a in ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"] if not hasattr(ib,a) or getattr(ib,a) is None]
L212         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L213         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L214         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L215         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L216         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L217         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L218
L219     # ----（Scorer専用）テクニカル・指標系 ----
L220     @staticmethod
L221     def trend(s: pd.Series):
L222         if len(s)<200: return np.nan
L223         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L224         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L225         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L226         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L227         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L228         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L229         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L230         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L231         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L232         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L233         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L234         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L235
L236     @staticmethod
L237     def rs(s, b):
L238         n, nb = len(s), len(b)
L239         if n<60 or nb<60: return np.nan
L240         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L241         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L242         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L243
L244     @staticmethod
L245     def tr_str(s):
L246         if s is None:
L247             return np.nan
L248         s = s.ffill(limit=2).dropna()
L249         if len(s) < 50:
L250             return np.nan
L251         ma50 = s.rolling(50, min_periods=50).mean()
L252         last_ma = ma50.iloc[-1]
L253         last_px = s.iloc[-1]
L254         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L255
L256     @staticmethod
L257     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L258         r = (s/b).dropna()
L259         if len(r) < win: return np.nan
L260         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L261         try: return float(np.polyfit(x, y, 1)[0])
L262         except Exception: return np.nan
L263
L264     @staticmethod
L265     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L266         ev = info_t.get('enterpriseValue', np.nan)
L267         if pd.notna(ev) and ev>0: return float(ev)
L268         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L269         try:
L270             bs = tk.quarterly_balance_sheet
L271             if bs is not None and not bs.empty:
L272                 c = bs.columns[0]
L273                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L274                     if k in bs.index: debt = float(bs.loc[k,c]); break
L275                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L276                     if k in bs.index: cash = float(bs.loc[k,c]); break
L277         except Exception: pass
L278         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L279         return np.nan
L280
L281     @staticmethod
L282     def dividend_status(ticker: str) -> str:
L283         t = yf.Ticker(ticker)
L284         try:
L285             if not t.dividends.empty: return "has"
L286         except Exception: return "unknown"
L287         try:
L288             a = t.actions
L289             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L290         except Exception: pass
L291         try:
L292             fi = t.fast_info
L293             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L294         except Exception: pass
L295         return "unknown"
L296
L297     @staticmethod
L298     def div_streak(t):
L299         try:
L300             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L301             years, streak = sorted(ann.index), 0
L302             for i in range(len(years)-1,0,-1):
L303                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L304                 else: break
L305             return streak
L306         except Exception: return 0
L307
L308     @staticmethod
L309     def fetch_finnhub_metrics(symbol):
L310         api_key = os.environ.get("FINNHUB_API_KEY")
L311         if not api_key: return {}
L312         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L313         try:
L314             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L315             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L316         except Exception: return {}
L317
L318     @staticmethod
L319     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L320         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L321         n = min(len(r), len(m), lookback)
L322         if n<60: return np.nan
L323         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L324         return np.nan if var==0 else cov/var
L325
L326     @staticmethod
L327     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L328                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L329         """
L330         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L331         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L332         """
L333         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L334         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L335         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L336         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L337         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L338
L339     @staticmethod
L340     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L341         """
L342         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L343         戻り値は降順ソート済み。
L344         """
L345         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L346         cnt, pen = {}, {}
L347         for t in order:
L348             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L349         return (s - pd.Series(pen)).sort_values(ascending=False)
L350
L351     @staticmethod
L352     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L353         """
L354         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L355         """
L356         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L357         eff = eff.dropna()
L358         if not hard:
L359             return list(eff.head(N).index)
L360         pick, used = [], {}
L361         for t in eff.index:
L362             s = sectors.get(t, "U")
L363             if used.get(s,0) < hard:
L364                 pick.append(t); used[s] = used.get(s,0) + 1
L365             if len(pick) == N: break
L366         return pick
L367
L368     @staticmethod
L369     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L370         """
L371         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L372         - px: 列=ticker（ベンチは含めない）
L373         - spx: ベンチマーク Series（px.index に整列）
L374         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L375         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L376         """
L377         import numpy as np, pandas as pd
L378         if px is None or px.empty:
L379             return pd.Series(dtype=int)
L380         px = px.dropna(how="all", axis=1)
L381         if win_days and win_days > 0:
L382             px = px.tail(win_days)
L383         if px.empty:
L384             return pd.Series(dtype=int)
L385         spx = spx.reindex(px.index).ffill()
L386
L387         ma50  = px.rolling(50).mean()
L388         ma150 = px.rolling(150).mean()
L389         ma200 = px.rolling(200).mean()
L390
L391         tt = (px > ma150)
L392         tt &= (px > ma200)
L393         tt &= (ma150 > ma200)
L394         tt &= (ma200 - ma200.shift(21) > 0)
L395         tt &= (ma50  > ma150)
L396         tt &= (ma50  > ma200)
L397         tt &= (px    > ma50)
L398
L399         lo252 = px.rolling(252).min()
L400         hi252 = px.rolling(252).max()
L401         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L402         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L403
L404         r12  = px.divide(px.shift(252)).sub(1.0)
L405         br12 = spx.divide(spx.shift(252)).sub(1.0)
L406         r1   = px.divide(px.shift(22)).sub(1.0)
L407         br1  = spx.divide(spx.shift(22)).sub(1.0)
L408         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L409         tt &= (rs >= 0.10)
L410
L411         return tt.fillna(False).sum(axis=1).astype(int)
L412
L413     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L414     def aggregate_scores(self, ib: Any, cfg):
L415         if cfg is None:
L416             raise ValueError("cfg is required; pass factor.PipelineConfig")
L417         self._validate_ib_for_scorer(ib)
L418
L419         px, spx, tickers = ib.px, ib.spx, ib.tickers
L420         try:
L421             vol = ib.data['Volume']
L422         except Exception:
L423             vol = getattr(ib, 'vol', None)
L424         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L425
L426         df = pd.DataFrame(index=tickers)
L427         df['EPS_SERIES'] = pd.Series([None] * len(df), index=df.index, dtype=object)
L428         debug_mode = bool(getattr(cfg, "debug_mode", False))
L429         eps_cols = set(getattr(eps_df, "columns", []))
L430         for t in tickers:
L431             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L432             try:
L433                 volume_series_full = ib.data['Volume'][t]
L434             except Exception:
L435                 volume_series_full = None
L436
L437             # --- 基本特徴 ---
L438             df.loc[t,'TR']   = self.trend(s)
L439
L440             def _eps_value(col: str) -> float:
L441                 if col not in eps_cols:
L442                     return np.nan
L443                 try:
L444                     return _scalar(eps_df[col].get(t, np.nan))
L445                 except Exception:
L446                     return np.nan
L447
L448             df.loc[t,'EPS']  = _eps_value('EPS_TTM')
L449             df.loc[t,'EPS_Q'] = _eps_value('EPS_Q_LastQ')
L450             df.loc[t,'REV_TTM'] = _eps_value('REV_TTM')
L451             df.loc[t,'REV_Q']   = _eps_value('REV_Q_LastQ')
L452             df.loc[t,'EPS_TTM_PREV'] = _eps_value('EPS_TTM_PREV')
L453             df.loc[t,'REV_TTM_PREV'] = _eps_value('REV_TTM_PREV')
L454             df.loc[t,'EPS_Q_PREV'] = _eps_value('EPS_Q_Prev')
L455             df.loc[t,'REV_Q_PREV'] = _eps_value('REV_Q_Prev')
L456             df.loc[t,'EPS_A_LATEST'] = _eps_value('EPS_A_LATEST')
L457             df.loc[t,'EPS_A_PREV'] = _eps_value('EPS_A_PREV')
L458             df.loc[t,'REV_A_LATEST'] = _eps_value('REV_A_LATEST')
L459             df.loc[t,'REV_A_PREV'] = _eps_value('REV_A_PREV')
L460             df.loc[t,'EPS_A_CAGR3'] = _eps_value('EPS_A_CAGR3')
L461             df.loc[t,'REV_A_CAGR3'] = _eps_value('REV_A_CAGR3')
L462             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L463             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L464             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L465
L466             # --- 配当（欠損補完含む） ---
L467             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L468             if div is None or pd.isna(div):
L469                 try:
L470                     divs = yf.Ticker(t).dividends
L471                     if divs is not None and not divs.empty:
L472                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L473                         if last_close and last_close>0: div = float(div_1y/last_close)
L474                 except Exception: pass
L475             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L476
L477             # --- FCF/EV ---
L478             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L479             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L480
L481             # --- モメンタム・ボラ関連 ---
L482             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L483             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L484             n = int(min(len(r), len(rm)))
L485
L486             DOWNSIDE_DEV = np.nan
L487             if n>=60:
L488                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L489                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L490             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L491
L492             MDD_1Y = np.nan
L493             try:
L494                 w = s.iloc[-min(len(s),252):].dropna()
L495                 if len(w)>=30:
L496                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L497             except Exception: pass
L498             df.loc[t,'MDD_1Y'] = MDD_1Y
L499
L500             RESID_VOL = np.nan
L501             if n>=120:
L502                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L503                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L504                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L505                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L506             df.loc[t,'RESID_VOL'] = RESID_VOL
L507
L508             DOWN_OUTPERF = np.nan
L509             if n>=60:
L510                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L511                 if mask.sum()>=10:
L512                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L513                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L514             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L515
L516             # --- 長期移動平均/位置 ---
L517             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L518             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L519
L520             # --- 配当の詳細系 ---
L521             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L522             try:
L523                 divs = yf.Ticker(t).dividends.dropna()
L524                 if not divs.empty:
L525                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L526                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L527                     ann = divs.groupby(divs.index.year).sum()
L528                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L529                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L530                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L531                 so = d.get('sharesOutstanding',None)
L532                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L533                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L534             except Exception: pass
L535             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L536
L537             # --- 財務安定性 ---
L538             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L539
L540             # --- EPS 変動 ---
L541             EPS_VAR_8Q = np.nan
L542             try:
L543                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L544                 if qe is not None and not qe.empty and so:
L545                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L546                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L547             except Exception: pass
L548             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L549
L550             # --- サイズ/流動性 ---
L551             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L552             try:
L553                 if isinstance(volume_series_full, pd.Series):
L554                     vol_series = volume_series_full.reindex(s.index).dropna()
L555                     if len(vol_series) >= 5:
L556                         aligned_px = s.reindex(vol_series.index).dropna()
L557                         if len(aligned_px) == len(vol_series):
L558                             dv = (vol_series*aligned_px).rolling(60).mean()
L559                             if not dv.dropna().empty:
L560                                 adv60 = float(dv.dropna().iloc[-1])
L561             except Exception:
L562                 pass
L563             df.loc[t,'ADV60_USD'] = adv60
L564
L565             # --- Rule of 40 や周辺 ---
L566             total_rev_ttm = d.get('totalRevenue',np.nan)
L567             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L568             df.loc[t,'FCF_MGN'] = FCF_MGN
L569             rule40 = np.nan
L570             try:
L571                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L572             except Exception: pass
L573             df.loc[t,'RULE40'] = rule40
L574
L575             # --- トレンド補助 ---
L576             sma50  = s.rolling(50).mean()
L577             sma150 = s.rolling(150).mean()
L578             sma200 = s.rolling(200).mean()
L579             p = _safe_last(s)
L580
L581             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L582                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L583             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L584                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L585
L586             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L587             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L588
L589             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L590             if len(sma200.dropna()) >= 21:
L591                 cur200 = _safe_last(sma200)
L592                 old2001 = float(sma200.iloc[-21])
L593                 if old2001:
L594                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L595
L596             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L597             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L598             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L599             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L600             if len(sma200.dropna())>=105:
L601                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L602                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L603             # NEW: 200日線が連続で上向きの「日数」
L604             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L605             try:
L606                 s200 = sma200.dropna()
L607                 if len(s200) >= 2:
L608                     diff200 = s200.diff()
L609                     up = 0
L610                     for v in diff200.iloc[::-1]:
L611                         if pd.isna(v) or v <= 0:
L612                             break
L613                         up += 1
L614                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L615             except Exception:
L616                 pass
L617             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L618             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L619             if hi52 and hi52>0 and pd.notna(p):
L620                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L621             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L622             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L623
L624             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L625
L626             # --- 欠損メモ ---
L627             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L628             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L629             if need_finnhub:
L630                 fin_data = self.fetch_finnhub_metrics(t)
L631                 for col in need_finnhub:
L632                     val = fin_data.get(col)
L633                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L634             # 欠損ログは factor 側で補完後に集約する（ここでは検知のみ）
L635
L636         def _pick_series(entry: dict, keys: list[str]):
L637             for k in keys:
L638                 val = entry.get(k) if isinstance(entry, dict) else None
L639                 if val is None:
L640                     continue
L641                 try:
L642                     if hasattr(val, "empty") and getattr(val, "empty"):
L643                         continue
L644                 except Exception:
L645                     pass
L646                 if isinstance(val, (list, tuple)) and len(val) == 0:
L647                     continue
L648                 return val
L649             return None
L650
L651         def _has_sec_series(val) -> bool:
L652             try:
L653                 if isinstance(val, pd.Series):
L654                     return not val.dropna().empty
L655                 if isinstance(val, (list, tuple)):
L656                     return any(pd.notna(v) for v in val)
L657                 return bool(val)
L658             except Exception:
L659                 return False
L660
L661         def _series_len(val) -> int:
L662             try:
L663                 if isinstance(val, pd.Series):
L664                     return int(val.dropna().size)
L665                 if isinstance(val, (list, tuple)):
L666                     return len(val)
L667                 return int(bool(val))
L668             except Exception:
L669                 return 0
L670
L671         for t in tickers:
L672             try:
L673                 d = info.get(t, {}) or {}
L674                 rev_series = d.get("SEC_REV_Q_SERIES")
L675                 eps_series = d.get("SEC_EPS_Q_SERIES")
L676                 fallback_qearn = False
L677                 try:
L678                     qe = tickers_bulk.tickers[t].quarterly_earnings
L679                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L680                 except Exception:
L681                     qe = None
L682
L683                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L684                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L685                 r_raw = _ensure_series(r_src)
L686                 e_raw = _ensure_series(e_src)
L687
L688                 r_q = _to_quarterly(r_raw)
L689                 e_q = _to_quarterly(e_raw)
L690
L691                 df.at[t, "EPS_SERIES"] = e_q
L692
L693                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L694                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L695
L696                 def _q_yoy(qs):
L697                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L698
L699                 rev_q_yoy = _q_yoy(r_q)
L700                 eps_q_yoy = _q_yoy(e_q)
L701
L702                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L703                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L704                         ann = qs.groupby(qs.index.year).last().pct_change()
L705                         ann_dn = ann.dropna()
L706                         if not ann_dn.empty:
L707                             y = float(ann_dn.iloc[-1])
L708                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L709                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L710                             return y, acc, var
L711                     yoy_dn = yoy_ttm.dropna()
L712                     if yoy_dn.empty:
L713                         return np.nan, np.nan, np.nan
L714                     return (
L715                         float(yoy_dn.iloc[-1]),
L716                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L717                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L718                     )
L719
L720                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L721                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L722
L723                 def _pos_streak(s: pd.Series):
L724                     s = s.dropna()
L725                     if s.empty:
L726                         return np.nan
L727                     b = (s > 0).astype(int).to_numpy()[::-1]
L728                     k = 0
L729                     for v in b:
L730                         if v == 1:
L731                             k += 1
L732                         else:
L733                             break
L734                     return float(k)
L735
L736                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L737
L738                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L739                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L740                 df.loc[t, "REV_YOY"] = rev_yoy
L741                 df.loc[t, "EPS_YOY"] = eps_yoy
L742                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L743                 df.loc[t, "REV_YOY_VAR"] = rev_var
L744                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L745
L746             except Exception as e:
L747                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L748
L749         def _pct_change(new, old):
L750             try:
L751                 if np.isfinite(new) and np.isfinite(old) and float(old) != 0:
L752                     return float((new - old) / abs(old))
L753             except Exception:
L754                 pass
L755             return np.nan
L756
L757         def _pct_series(a: pd.Series, b: pd.Series) -> list[float]:
L758             a_vals = pd.to_numeric(a, errors="coerce") if a is not None else pd.Series(np.nan, index=df.index)
L759             b_vals = pd.to_numeric(b, errors="coerce") if b is not None else pd.Series(np.nan, index=df.index)
L760             return [_pct_change(x, y) for x, y in zip(a_vals.reindex(df.index), b_vals.reindex(df.index))]
L761
L762         def _mean_valid(vals: list[float]) -> float:
L763             arr = [float(v) for v in vals if np.isfinite(v)]
L764             return float(np.mean(arr)) if arr else np.nan
L765
L766         grw_q_eps_last = _pct_series(df['EPS_Q'], df.get('EPS_Q_PREV', pd.Series(np.nan, index=df.index)))
L767         grw_q_rev_last = _pct_series(df['REV_Q'], df.get('REV_Q_PREV', pd.Series(np.nan, index=df.index)))
L768         grw_q_eps_ttm = _pct_series(df['EPS'], df.get('EPS_TTM_PREV', pd.Series(np.nan, index=df.index)))
L769         grw_q_rev_ttm = _pct_series(df['REV_TTM'], df.get('REV_TTM_PREV', pd.Series(np.nan, index=df.index)))
L770
L771         grw_a_eps_yoy = _pct_series(df.get('EPS_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('EPS_A_PREV', pd.Series(np.nan, index=df.index)))
L772         grw_a_rev_yoy = _pct_series(df.get('REV_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('REV_A_PREV', pd.Series(np.nan, index=df.index)))
L773         grw_a_eps_cagr = pd.to_numeric(df.get('EPS_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L774         grw_a_rev_cagr = pd.to_numeric(df.get('REV_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L775
L776         grw_q_combined = [
L777             _mean_valid([a, b, c, d])
L778             for a, b, c, d in zip(grw_q_eps_last, grw_q_rev_last, grw_q_eps_ttm, grw_q_rev_ttm)
L779         ]
L780         grw_a_combined = [
L781             _mean_valid([a, b, c, d])
L782             for a, b, c, d in zip(grw_a_eps_yoy, grw_a_rev_yoy, grw_a_eps_cagr, grw_a_rev_cagr)
L783         ]
L784
L785         df['GRW_Q_RAW'] = pd.Series(grw_q_combined, index=df.index, dtype=float)
L786         df['GRW_A_RAW'] = pd.Series(grw_a_combined, index=df.index, dtype=float)
L787
L788         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L789             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L790             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L791             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L792             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L793             c5 = (row.get('TR_str', np.nan) > 0)
L794             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L795             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L796             c8 = (row.get('RS', np.nan) >= 0.10)
L797             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L798
L799         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L800         assert 'trend_template' in df.columns
L801
L802         def _calc_eps_abs_slope(eps_series, n=12):
L803             try:
L804                 if isinstance(eps_series, pd.Series):
L805                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L806                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L807                     series = pd.Series(eps_series, dtype=float).dropna()
L808                 else:
L809                     return 0.0
L810             except Exception:
L811                 return 0.0
L812
L813             if series.empty:
L814                 return 0.0
L815
L816             tail = series.tail(n).to_numpy(dtype=float)
L817             if tail.size < 2:
L818                 return 0.0
L819
L820             x = np.arange(tail.size, dtype=float)
L821             x = x - x.mean()
L822             y = tail - tail.mean()
L823             denom = np.dot(x, x)
L824             if denom == 0:
L825                 return 0.0
L826             slope = float(np.dot(x, y) / denom)
L827             return slope
L828
L829         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L830         df.drop(columns=['EPS_SERIES'], inplace=True)
L831
L832         # === Z化と合成 ===
L833         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L834
L835         df_z = pd.DataFrame(index=df.index)
L836         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L837         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L838         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L839
L840         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L841
L842         # === Growth深掘り系（欠損保持z + RAW併載） ===
L843         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L844         for col in grw_cols:
L845             if col in df.columns:
L846                 raw = pd.to_numeric(df[col], errors="coerce")
L847                 df_z[col] = robust_z_keepnan(raw)
L848         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L849             if k in df.columns and k not in df_z.columns:
L850                 raw = pd.to_numeric(df[k], errors="coerce")
L851                 df_z[k] = robust_z_keepnan(raw)
L852         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L853
L854         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L855         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L856         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L857
L858         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L859         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L860         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L861
L862         # ===== トレンドスロープ算出 =====
L863         def zpos(x):
L864             arr = robust_z(x)
L865             idx = getattr(x, 'index', df_z.index)
L866             return pd.Series(arr, index=idx).fillna(0.0)
L867
L868         def relu(x):
L869             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L870             return ser.clip(lower=0).fillna(0.0)
L871
L872         # 売上トレンドスロープ（四半期）
L873         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L874         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L875         slope_rev_combo = slope_rev - 0.25*noise_rev
L876         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L877
L878         # EPSトレンドスロープ（四半期）
L879         slope_eps = (
L880             0.40*zpos(df_z['EPS_Q_YOY']) +
L881             0.20*zpos(df_z['EPS_POS']) +
L882             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L883         )
L884         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L885
L886         # 年次トレンド（サブ）
L887         slope_rev_yr = zpos(df_z['REV_YOY'])
L888         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L889         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L890         streak_yr = streak_base / (streak_base.abs() + 1.0)
L891         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L892         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L893         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L894
L895         grw_q_z = robust_z_keepnan(df['GRW_Q_RAW']).clip(-3.0, 3.0)
L896         grw_a_z = robust_z_keepnan(df['GRW_A_RAW']).clip(-3.0, 3.0)
L897         df_z['GRW_Q'] = grw_q_z
L898         df_z['GRW_A'] = grw_a_z
L899
L900         try:
L901             mix = float(os.environ.get("GRW_Q_ANNUAL_MIX", "0.7"))
L902         except Exception:
L903             mix = 0.7
L904         if not np.isfinite(mix):
L905             mix = 0.7
L906         mix = float(np.clip(mix, 0.0, 1.0))
L907
L908         weights_q: list[float] = []
L909         weights_a: list[float] = []
L910         grw_mix: list[float] = []
L911         for idx in df.index:
L912             q_val = grw_q_z.get(idx, np.nan)
L913             a_val = grw_a_z.get(idx, np.nan)
L914             q_ok = np.isfinite(q_val)
L915             a_ok = np.isfinite(a_val)
L916             if q_ok and a_ok:
L917                 wq, wa = mix, 1.0 - mix
L918             elif q_ok:
L919                 wq, wa = 1.0, 0.0
L920             elif a_ok:
L921                 wq, wa = 0.0, 1.0
L922             else:
L923                 wq = wa = np.nan
L924                 grw_mix.append(np.nan)
L925                 weights_q.append(wq)
L926                 weights_a.append(wa)
L927                 continue
L928             weights_q.append(wq)
L929             weights_a.append(wa)
L930             grw_mix.append(q_val * wq + a_val * wa)
L931
L932         wq_series = pd.Series(weights_q, index=df.index, dtype=float)
L933         wa_series = pd.Series(weights_a, index=df.index, dtype=float)
L934         grw_series = pd.Series(grw_mix, index=df.index, dtype=float).clip(-3.0, 3.0)
L935
L936         df_z['GROWTH_F'] = grw_series
L937         df_z['GRW_FLEX_WEIGHT'] = 1.0  # 現状は固定（SECの可用性に依らず）
L938
L939         if 'GRW_Q_RAW' in df.columns:
L940             df_z['GRW_Q_DBG'] = pd.Series(df['GRW_Q_RAW'], index=df.index, dtype=float)
L941         if 'GRW_A_RAW' in df.columns:
L942             df_z['GRW_A_DBG'] = pd.Series(df['GRW_A_RAW'], index=df.index, dtype=float)
L943         df_z['GRW_WQ_DBG'] = wq_series
L944         df_z['GRW_WA_DBG'] = wa_series
L945
L946         # --- breakout features (常時寄与) ---
L947         # NEW_HIGH_20D: (終値 / 直近20日終値の最高値) - 1 → 0未満は0
L948         # VOL_RATIO_20D: 出来高(直近5日平均) / 出来高(直近20日平均)
L949         try:
L950             _px = px.copy()
L951             _vol = vol.copy() if vol is not None else None
L952             if _vol is None:
L953                 raise ValueError('volume data missing')
L954             _hi20 = _px.rolling(20, min_periods=10).max()
L955             _br = (_px / _hi20) - 1.0
L956             _new_high_20d = _br.iloc[-1].clip(lower=0)
L957             _vol5 = _vol.rolling(5, min_periods=3).mean()
L958             _vol20 = _vol.rolling(20, min_periods=10).mean()
L959             _vol_ratio_20d = (_vol5 / _vol20).iloc[-1]
L960             # Z化（NaNは保持系）→ df_z に整列
L961             df_z['NEW_HIGH_20D'] = robust_z_keepnan(pd.to_numeric(_new_high_20d, errors='coerce').reindex(df_z.index))
L962             df_z['VOL_RATIO_20D'] = robust_z_keepnan(pd.to_numeric(_vol_ratio_20d, errors='coerce').reindex(df_z.index))
L963         except Exception:
L964             # フォールバック（計算不能時は0寄与とする）
L965             df_z['NEW_HIGH_20D'] = 0.0
L966             df_z['VOL_RATIO_20D'] = 0.0
L967
L968         df_z['MOM_F'] = robust_z(
L969               0.30*df_z['RS']
L970             + 0.10*df_z['TR_str']
L971             + 0.15*df_z['RS_SLOPE_6W']
L972             + 0.15*df_z['RS_SLOPE_13W']
L973             + 0.10*df_z['MA200_SLOPE_5M']
L974             + 0.05*df_z['MA200_UP_STREAK_D']
L975             + 0.10*df_z['NEW_HIGH_20D']
L976             + 0.05*df_z['VOL_RATIO_20D']
L977         ).clip(-3.0, 3.0)
L978         df_z['VOL'] = robust_z(df['BETA'])
L979         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L980         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L981
L982         # df_z 全明細をページングしてログ出力（最小版）
L983         if getattr(cfg, "debug_mode", False):
L984             beta_debug_cols = []
L985             if isinstance(df, pd.DataFrame):
L986                 try:
L987                     beta_raw = df.get('BETA') if 'BETA' in df.columns else None
L988                     if beta_raw is not None:
L989                         beta_raw = pd.to_numeric(beta_raw, errors="coerce")
L990                         df_z['BETA_RAW'] = beta_raw.reindex(df_z.index)
L991                         df_z['BETA_Z'] = _plain_zscore_series(df_z['BETA_RAW'])
L992                         beta_debug_cols.extend(['BETA_RAW', 'BETA_Z'])
L993                 except Exception:
L994                     beta_debug_cols.clear()
L995             pd.set_option("display.max_columns", None)
L996             pd.set_option("display.max_colwidth", None)
L997             pd.set_option("display.width", None)
L998             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L999             n = len(df_z)
L1000             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1001             try:
L1002                 for i in range(0, n, page):
L1003                     j = min(i + page, n)
L1004                     try:
L1005                         chunk_str = df_z.iloc[i:j].to_string()
L1006                     except Exception:
L1007                         chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1008                     logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1009             finally:
L1010                 if beta_debug_cols:
L1011                     df_z.drop(columns=[c for c in beta_debug_cols if c in df_z.columns], inplace=True)
L1012             logger.info("=== df_z FULL DUMP end ===")
L1013
L1014         # === begin: BIO LOSS PENALTY =====================================
L1015         try:
L1016             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1017         except Exception:
L1018             penalty_z = 0.8
L1019
L1020         def _is_bio_like(t: str) -> bool:
L1021             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1022             sec = str(inf.get("sector", "")).lower()
L1023             ind = str(inf.get("industry", "")).lower()
L1024             if "health" not in sec:
L1025                 return False
L1026             keys = ("biotech", "biopharma", "pharma")
L1027             return any(k in ind for k in keys)
L1028
L1029         tickers_s = pd.Index(df_z.index)
L1030         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1031         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1032         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1033
L1034         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1035             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1036             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1037         # === end: BIO LOSS PENALTY =======================================
L1038
L1039         _debug_only_cols = [c for c in df_z.columns if c.endswith("_RAW")]
L1040         _no_score_cols = ["DIV_TTM_PS", "DIV_YOY", "LOW52PCT25_EXCESS", "MA50_OVER_200"]
L1041         _drop_cols = [c for c in (_debug_only_cols + _no_score_cols) if c in df_z.columns]
L1042         if _drop_cols:
L1043             df_z = df_z.drop(columns=_drop_cols, errors="ignore")
L1044
L1045         assert not any(c.endswith("_RAW") for c in df_z.columns)
L1046         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L1047             assert c not in df_z.columns
L1048
L1049         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1050         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1051
L1052         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1053         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1054         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1055         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1056
L1057         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1058         # ① 全銘柄で G/D スコアを算出（unmasked）
L1059         g_weights = pd.Series(cfg.weights.g, dtype=float)
L1060         need_g = ["GROWTH_F", "MOM"]
L1061         dbg_cols = ["GROWTH_F", "MOM", "VOL"]
L1062         if all(c in df_z.columns for c in need_g):
L1063             mask_g = df_z[need_g].notna().all(axis=1)
L1064         else:
L1065             mask_g = pd.Series(False, index=df_z.index, dtype=bool)
L1066         for c in dbg_cols:
L1067             if c in df_z.columns:
L1068                 df_z[f"DBGRW.{c}"] = df_z[c]
L1069         df_fill_g = df_z.reindex(columns=g_weights.index, fill_value=np.nan).copy()
L1070         for c in df_fill_g.columns:
L1071             if c not in need_g:
L1072                 df_fill_g[c] = df_fill_g[c].fillna(0)
L1073         g_score_all = _as_numeric_series(
L1074             df_fill_g.mul(g_weights.reindex(df_fill_g.columns)).sum(axis=1, skipna=False)
L1075         )
L1076         g_score_all = g_score_all.where(mask_g)
L1077
L1078         d_comp = pd.concat({
L1079             'QAL': df_z['D_QAL'],
L1080             'YLD': df_z['D_YLD'],
L1081             'VOL': df_z['D_VOL_RAW'],
L1082             'TRD': df_z['D_TRD']
L1083         }, axis=1)
L1084         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1085         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1086         need_d_candidates = ["VOL", "QAL"]
L1087         mask_d = pd.Series(True, index=d_comp.index, dtype=bool)
L1088         for c in need_d_candidates:
L1089             if c in d_comp.columns:
L1090                 mask_d &= d_comp[c].notna()
L1091             else:
L1092                 mask_d &= False
L1093         df_fill_d = d_comp.copy()
L1094         for c in df_fill_d.columns:
L1095             if c not in need_d_candidates:
L1096                 df_fill_d[c] = df_fill_d[c].fillna(0)
L1097         d_score_all = _as_numeric_series(
L1098             df_fill_d.mul(dw, axis=1).sum(axis=1, skipna=False)
L1099         )
L1100         d_score_all = d_score_all.where(mask_d)
L1101
L1102         # ② テンプレ判定（既存ロジックそのまま）
L1103         mask = df['trend_template']
L1104         if not bool(mask.any()):
L1105             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1106                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1107                 (df.get('RS', np.nan) >= 0.08) &
L1108                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1109                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1110                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1111                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1112                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1113             df['trend_template'] = mask
L1114
L1115         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1116         g_score = _as_numeric_series(g_score_all.loc[mask])
L1117         Scorer.g_score = g_score
L1118         df_z['GSC'] = g_score_all
L1119         df_z['DSC'] = d_score_all
L1120
L1121         try:
L1122             current = (pd.read_csv("current_tickers.csv")
L1123                   .iloc[:, 0]
L1124                   .str.upper()
L1125                   .tolist())
L1126         except FileNotFoundError:
L1127             warnings.warn("current_tickers.csv not found — bonus skipped")
L1128             current = []
L1129
L1130         mask_bonus = g_score.index.isin(current)
L1131         if mask_bonus.any():
L1132             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1133             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1134             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1135             sigma_g = g_score.std()
L1136             if pd.isna(sigma_g):
L1137                 sigma_g = 0.0
L1138             bonus_g = round(k * sigma_g, 3)
L1139             g_score.loc[mask_bonus] += bonus_g
L1140             Scorer.g_score = g_score
L1141             # 3) D 側も同様に σ の NaN をケア
L1142             sigma_d = d_score_all.std()
L1143             if pd.isna(sigma_d):
L1144                 sigma_d = 0.0
L1145             bonus_d = round(k * sigma_d, 3)
L1146             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1147
L1148         try:
L1149             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1150         except Exception:
L1151             pass
L1152
L1153         df_full = df.copy()
L1154         df_full_z = df_z.copy()
L1155
L1156         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1157         missing_logs_df = getattr(ib, "missing_logs", pd.DataFrame())
L1158         if not isinstance(missing_logs_df, pd.DataFrame):
L1159             try:
L1160                 missing_logs_df = pd.DataFrame(missing_logs_df)
L1161             except Exception:
L1162                 missing_logs_df = pd.DataFrame()
L1163
L1164         return FeatureBundle(df=df,
L1165             df_z=df_z,
L1166             g_score=g_score,
L1167             d_score_all=d_score_all,
L1168             missing_logs=missing_logs_df,
L1169             df_full=df_full,
L1170             df_full_z=df_full_z,
L1171             scaler=None)
L1172
L1173 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1174     """以前はブレイクアウト/押し目反発フラグを付与していたが、現在は無効化。"""
L1175     return feature_df
L1176
L1177
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43           SEC_CONTACT_EMAIL: ${{ secrets.SEC_CONTACT_EMAIL }}
L44         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=12）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 12本)`（= N_G）
L17   - 緊急解除: `max(q20, 18本)`（= ceil(1.5×12)）
L18   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **14%**
L24  - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（20×5%に全戻しのみ）
L25
L26 ## モード別の推奨“保有銘柄数”（MMF≒現金）
L27 *各枠=5%（20銘柄均等）。モード移行時は**Gの枠数のみ**調整し、外した枠は現金として保持。*
L28
L29 - **NORMAL:** G **12** / D **8** / 現金化枠 **0**  
L30 - **CAUTION:** G **10** / D **8** / 現金化枠 **2**（= 10%）  
L31 - **EMERG:** G **8**  / D **8** / 現金化枠 **4**（= 20%）  
L32
L33 > 実運用：⭐️低スコアのGから順に外す。解除時はfactor上位から補充。
L34
L35 ## トレーリングストップ
L36 - **基本TS (モード別):** NORMAL **15%** / CAUTION **13%** / EMERG **10%**
L37 - 含み益が **+30% / +60% / +100%** 到達で、基本から **-3pt / -6pt / -8pt** 引き上げ
L38 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L39
L40 ## 半戻し（リバランス）手順
L41 ドリフトチェックで**アラート**が出た場合（合計|drift| がモード閾値を超過、EMERG除く）、翌営業日の米国寄付きで下記を実施する。
L42
L43 1. **売却（必須）**  
L44    Slackテーブルの **Δqty がマイナスの銘柄を売却** する（寄付き成行推奨）。  
L45    これは「半戻し」計算に基づく過重量の削減を意味する。
L46
L47 2. **購入（任意・半戻し目安）**  
L48    半戻し後の合計|drift|を**シミュレーション値（Slackヘッダに表示）**に近づけることを目安に、  
L49    **任意の銘柄を買い増し**してバランスを取る（Δqtyがプラスの銘柄を優先してもよい）。
L50
L51 3. **トレーリングストップの再設定（必須）**  
L52    すべての保有銘柄について、最新の評価額に合わせてTSを**再発注／更新**する。  
L53    ルールは下記（利益到達で段階的にタイト化）：  
L54    - **基本TS:** -15%  
L55    - **+30% 到達 → TS -12%**  
L56    - **+60% 到達 → TS -9%**  
L57    - **+100% 到達 → TS -7%**  
L58    ※ストップ価格の引き上げは許可、**引き下げは不可**（利益保全の原則）。
L59
L60 4. **例外（EMERGモード）**  
L61    緊急(EMERG)では**ドリフト由来の売買は停止（∞）**。20銘柄×各5%への**全戻し**のみ許容。
L62
L63 5. **実行タイミング**
L64    - 判定：米国市場終値直後
L65    - 執行：翌営業日の米国寄付き成行
L66
L67 ## モード移行の実務手順（超シンプル）
L68 モードが変わったら、**MMF≒現金**として扱い、**Gの枠数だけ**を調整する：
L69 1. **Gを削る**（CAUTION/EMERG）  
L70    - ⭐️低スコアのGから順に外す。  
L71    - **`current_tickers.csv` から外すG銘柄の行を削除**（＝その枠は現金化）。
L72 2. **現金として保持**  
L73    - 外した枠は現金（またはMMF相当）でプール。  
L74 3. **復帰時の補充**（NORMALへ）  
L75    - **`current_tickers.csv` に銘柄を追加**（factor上位から）。  
L76    - 以降は日次ドリフト/TSルールに従う。
L77
L78 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて自動で均等比率が再計算される。
L79
L80 ## 入替銘柄選定
L81 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L82 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L83
L84 ## 再エントリー（クールダウン）
L85 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L86
L87 ## 実行タイミング
L88 - 判定：米国市場終値直後
L89 - 執行：翌営業日の米国寄付き成行
```

## <documents/factor_design.md>
```text
L1 # factor.py 詳細設計書
L2
L3 ## 概要
L4 - 既存ポートフォリオの銘柄と検討中の銘柄群を同時に扱う銘柄選定パイプライン。
L5 - 価格・財務データを取り込みスコアリングとDRRS選定を行うことで、以下のアウトプットを得る。
L6   - 採用銘柄と惜しくも漏れた銘柄のスコア一覧
L7   - IN/OUTのティッカーリストとOUT側の低スコア銘柄
L8   - 新旧ポートフォリオの比較表
L9   - 検討中銘柄の低スコアランキング（整理用）
L10
L11 ## 全体フロー
L12 1. **Input** – `current_tickers.csv`と`candidate_tickers.csv`を読み込み、yfinanceやFinnhubのAPIから価格・財務データを収集して`InputBundle`を整備。
L13 2. **Score Calculation** – Scorerが特徴量を計算し因子スコアを合成して`FeatureBundle`を生成。
L14 3. **Correlation Reduction & Selection** – SelectorがDRRSロジックで相関を抑えつつG/D銘柄を選定し`SelectionBundle`を得る。
L15 4. **Output** – 採用結果と周辺情報を表・Slack通知として出力。
L16
L17 ```mermaid
L18 flowchart LR
L19   A[Input\nAPI & 前処理] --> B[Score Calculation\n特徴量・因子合成]
L20   B --> C[Correlation Reduction\nDRRS選定]
L21   C --> D[Output\nSlack通知]
L22 ```
L23
L24 ## 定数・設定
L25 | 変数 | 内容 | 主な用途 |
L26 | --- | --- | --- |
L27 | `exist` / `cand` | 現行ポートフォリオと検討中銘柄のティッカーリスト | スコア対象ユニバースの構成、候補整理 |
L28 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L29 | `CAND_PRICE_MAX` | 候補銘柄の許容価格上限 | 高額銘柄の事前除外 |
L30 | `N_G` / `N_D` | G/D採用枠の件数（**既定: 12 / 8**） | 最終的に選ぶ銘柄数の制約 |
L31 | `g_weights` / `D_weights` | 各因子の重みdict | G/Dスコア合成 |
L32 | `D_BETA_MAX` | Dバケットの許容β上限 | 高β銘柄の除外フィルタ |
L33 | `FILTER_SPEC` | G/Dごとの前処理フィルタ | トレンドマスクやβ上限設定 |
L34 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L35 | `DRRS_G` / `DRRS_D` | DRRSパラメータdict | バケット別の相関低減設定 |
L36 | `DRRS_SHRINK` | 残差相関の対角シュリンク率 | `residual_corr`の安定化 |
L37 | `CROSS_MU_GD` | G-D間クロス相関ペナルティμ | 2バケット同時最適化で相関抑制 |
L38 | `RESULTS_DIR` | 選定結果保存ディレクトリ | `_save_sel`/`_load_prev`の入出力 |
L39
L40 選定結果は`results/`配下にJSONとして保存し、次回実行時に`_load_prev`で読み込んで選定条件に反映。
L41
L42 ## DTO/Config
L43 各ステップ間で受け渡すデータ構造と設定値。変数の意味合いと利用箇所を以下に示す。
L44
L45 ### InputBundle（Input → Scorer）
L46 | 変数 | 内容 | 主な用途 |
L47 | --- | --- | --- |
L48 | `cand` | 候補銘柄ティッカーのリスト | OUTテーブルや低スコアランキング対象の母集団 |
L49 | `tickers` | 現行+候補を合わせたティッカー一覧 | 価格・出来高ダウンロード、リターン計算 |
L50 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L51 | `data` | yfinanceのダウンロード結果（階層列） | `px`/`spx`/リターン等の基礎データ |
L52 | `px` | `data['Close']`だけを抜き出した価格系列 | 指標計算・リターン生成 |
L53 | `spx` | `data['Close'][bench]` のSeries | `rs`や`calc_beta`の基準指数 |
L54 | `tickers_bulk` | `yf.Tickers`オブジェクト | `info`等の一括取得 |
L55 | `info` | ティッカー別のyfinance情報dict | セクター判定やEPS補完 |
L56 | `eps_df` | EPS TTM/直近EPS等をまとめた表 | 成長指標の算出 |
L57 | `fcf_df` | CFO・CapEx・FCF TTMと情報源フラグ | FCF/EVや配当カバレッジ |
L58 | `returns` | `px.pct_change()`のリターン表 | 相関行列・DRRS計算 |
L59
L60 ### FeatureBundle（Scorer → Selector）
L61 | 変数 | 内容 | 主な用途 |
L62 | --- | --- | --- |
L63 | `df` | 計算済み指標の生値テーブル | デバッグ・出力表示 |
L64 | `df_z` | ウィンザー後Zスコア化した指標表 | 因子スコア合成、選定基準 |
L65 | `g_score` | Gバケット総合スコア | G選定、IN/OUT比較 |
L66 | `d_score_all` | Dバケット総合スコア（全銘柄） | D選定、低スコアランキング |
L67 | `missing_logs` | 欠損指標と補完状況のログ | データ品質チェック |
L68
L69 ### SelectionBundle（Selector → Output）
L70 | 変数 | 内容 | 主な用途 |
L71 | --- | --- | --- |
L72 | `resG` | G選定結果の詳細dict（`tickers`、目的値等） | 結果保存・平均相関などの指標表示 |
L73 | `resD` | D選定結果の詳細dict | 同上 |
L74 | `top_G` | 最終採用Gティッカー | 新ポートフォリオ構築 |
L75 | `top_D` | 最終採用Dティッカー | 同上 |
L76 | `init_G` | DRRS前のG初期候補 | 惜しくも外れた銘柄表示 |
L77 | `init_D` | DRRS前のD初期候補 | 同上 |
L78
L79 ### WeightsConfig
L80 | 変数 | 内容 | 主な用途 |
L81 | --- | --- | --- |
L82 | `g` | G因子（GRW/MOM/VOL）の重みdict | `g_score`合成 |
L83 | `d` | D因子（D_QAL/D_YLD/D_VOL_RAW/D_TRD）の重みdict | `d_score_all`合成 |
L84
L85 ### DRRSParams
L86 | 変数 | 内容 | 主な用途 |
L87 | --- | --- | --- |
L88 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L89 | `shrink` | 残差相関のシュリンク率 | `residual_corr`の対角強調 |
L90 | `G` | Gバケット用パラメータdict（`lookback`等） | `select_bucket_drrs`設定 |
L91 | `D` | Dバケット用パラメータdict | 同上 |
L92 | `cross_mu_gd` | G-Dクロス相関ペナルティ係数μ | `select_buckets`の目的関数 |
L93
L94 ### PipelineConfig
L95 | 変数 | 内容 | 主な用途 |
L96 | --- | --- | --- |
L97 | `weights` | `WeightsConfig`のインスタンス | スコア合成の重み参照 |
L98 | `drrs` | `DRRSParams`のインスタンス | 選定ステップの設定値 |
L99 | `price_max` | 候補銘柄の許容価格上限 | Input段階でのフィルタ |
L100
L101 ## 共通ユーティリティ
L102 - `winsorize_s` / `robust_z` : 外れ値処理とZスコア化。
L103 - `_safe_div` / `_safe_last` : 例外を潰した分割・末尾取得。
L104 - `_load_prev` / `_save_sel` : 選定結果の読み書き。
L105
L106 ## クラス設計
L107 ### Step1: Input
L108 `current_tickers.csv`の現行銘柄と`candidate_tickers.csv`の検討中銘柄を起点にデータを集約する。外部I/Oと前処理を担当し、`prepare_data`で`InputBundle`を生成。価格・財務データの取得は**yfinanceを優先し、欠損がある指標のみFinnhub APIで補完**する。
L109 主なメソッド:
L110 - `impute_eps_ttm` : 四半期EPS×4でTTMを推定し欠損時のみ差し替え。
L111 - `fetch_cfo_capex_ttm_yf` : yfinanceの四半期/年次キャッシュフローからCFO・CapEx・FCF TTMを算出。
L112 - `fetch_cfo_capex_ttm_finnhub` : yfinanceで欠けた銘柄のみFinnhub APIで補完。
L113 - `compute_fcf_with_fallback` : yfinance値を基準にFinnhub値で穴埋めし、CFO/CapEx/FCFと情報源フラグを返す。
L114 - `_build_eps_df` : `info`や`quarterly_earnings`からEPS TTMと直近EPSを計算し、`impute_eps_ttm`で補完。
L115 - `prepare_data` :
L116     0. CSVから現行銘柄と候補銘柄のティッカー一覧を読み込む。
L117     1. 候補銘柄の現在値を取得し価格上限でフィルタ。
L118     2. 既存+候補から対象ティッカーを決定し、価格・出来高を一括ダウンロード（yfinance）。
L119     3. yfinance値を基にEPS/FCFテーブルやベンチマーク系列、リターンを構築し、欠損セルはFinnhub呼び出しで穴埋め。
L120     4. 上記を`InputBundle`に格納して返す。
L121
L122 ### Step2: Score Calculation (Scorer)
L123 特徴量計算とスコア合成を担当し、`FeatureBundle`を返す。
L124
L125 #### 補助関数
L126 - `trend(s)` : 50/150/200日移動平均や52週レンジから-0.5〜0.5で構成されたトレンド指標。
L127 - `rs(s,b)` / `tr_str(s)` / `rs_line_slope(s,b,win)` : 相対強さや短期トレンド、RS回帰傾きを算出。
L128 - `ev_fallback` : `enterpriseValue`欠損時に負債・現金からEVを推定。
L129 - `dividend_status` / `div_streak` : 配当未設定状況の判定と増配年数カウント。
L130 - `fetch_finnhub_metrics` : Finnhub APIからEPS成長・ROE・βなど不足指標を取得。
L131 - `calc_beta` : ベンチマークとの共分散からβを算出。
L132 - `spx_to_alpha` : S&P500の位置情報からDRRSで用いるαを推定。
L133 - `soft_cap_effective_scores` / `pick_top_softcap` : セクターソフトキャップ付きスコア調整と上位抽出。
L134
L135 **補助関数と生成指標**
L136
L137 | 補助関数 | 生成指標 | 略称 |
L138 | --- | --- | --- |
L139 | `trend` | トレンド総合値 | `TR` |
L140 | `rs` | 相対強さ | `RS` |
L141 | `tr_str` | 価格と50日線の乖離 | `TR_str` |
L142 | `rs_line_slope` | RS線の回帰傾き | `RS_SLOPE_*` |
L143 | `calc_beta` | β | `BETA` |
L144 | `div_streak` | 連続増配年数 | `DIV_STREAK` |
L145
L146 #### `aggregate_scores` 詳細
L147 1. 各銘柄の価格系列や`info`を基に以下を算出。
L148    - **トレンド/モメンタム**: `TR`、`RS`、`TR_str`、多様な移動平均比、`RS_SLOPE_*`など。
L149    - **リスク**: `BETA`、`DOWNSIDE_DEV`、`MDD_1Y`、`RESID_VOL`、`DOWN_OUTPERF`、`EXT_200`等。
L150    - **配当**: `DIV`、`DIV_TTM_PS`、`DIV_VAR5`、`DIV_YOY`、`DIV_FCF_COVER`、`DIV_STREAK`。
L151    - **財務・成長**: `EPS`、`REV`、`ROE`、`FCF/EV`、`REV_Q_YOY`、`EPS_Q_YOY`、`REV_YOY_ACC`、`REV_YOY_VAR`、`REV_ANN_STREAK`、`RULE40`、`FCF_MGN` 等。
L152    - **安定性/サイズ**: `DEBT2EQ`、`CURR_RATIO`、`MARKET_CAP`、`ADV60_USD`、`EPS_VAR_8Q`など。
L153 2. 指標欠損はFinnhub API等で補完し、未取得項目を`missing_logs`に記録。
L154 3. `winsorize_s`→`robust_z`で標準化し`df_z`へ保存。サイズ・流動性は対数変換。
L155 4. 正規化済指標から因子スコアを合成。
L156    - 各因子の構成と重みは以下の通り。
L157      - **GRW**: 0.30×`REV` + 0.20×`EPS_Q_YOY` + 0.15×`REV_Q_YOY` + 0.15×`REV_YOY_ACC` + 0.10×`RULE40` + 0.10×`FCF_MGN` + 0.10×`REV_ANN_STREAK` − 0.05×`REV_YOY_VAR`。
L158      - **MOM**: 0.40×`RS` + 0.15×`TR_str` + 0.15×`RS_SLOPE_6W` + 0.15×`RS_SLOPE_13W` + 0.10×`MA200_SLOPE_5M` + 0.10×`MA200_UP_STREAK_D`。
L159      - **VOL**: `BETA`単体を使用。
L160      - **QAL**: 0.60×`FCF_W` + 0.40×`ROE_W`で作成。
L161      - **YLD**: 0.30×`DIV` + 0.70×`DIV_STREAK`。
L162      - **D_QAL**: 0.35×`QAL` + 0.20×`FCF` + 0.15×`CURR_RATIO` − 0.15×`DEBT2EQ` − 0.15×`EPS_VAR_8Q`。
L163      - **D_YLD**: 0.45×`DIV` + 0.25×`DIV_STREAK` + 0.20×`DIV_FCF_COVER` − 0.10×`DIV_VAR5`。
L164      - **D_VOL_RAW**: 0.40×`DOWNSIDE_DEV` + 0.22×`RESID_VOL` + 0.18×`MDD_1Y` − 0.10×`DOWN_OUTPERF` − 0.05×`EXT_200` − 0.08×`SIZE` − 0.10×`LIQ` + 0.10×`BETA`。
L165      - **D_TRD**: 0.40×`MA200_SLOPE_5M` − 0.30×`EXT_200` + 0.15×`NEAR_52W_HIGH` + 0.15×`TR`。
L166     - 主な指標の略称と意味:
L167
L168       | 略称 | 補助関数 | 概要 |
L169       | --- | --- | --- |
L170       | TR | `trend` | 50/150/200日移動平均と52週レンジを組み合わせたトレンド総合値 |
L171       | RS | `rs` | ベンチマークに対する相対強さ（12M/1Mリターン差） |
L172       | TR_str | `tr_str` | 価格と50日移動平均の乖離 |
L173       | RS_SLOPE_6W | `rs_line_slope` | 相対強さ線の6週回帰傾き |
L174       | RS_SLOPE_13W | `rs_line_slope` | 相対強さ線の13週回帰傾き |
L175       | MA200_SLOPE_5M | - | 200日移動平均の5か月騰落率 |
L176       | MA200_UP_STREAK_D | - | 200日線が連続で上向いた日数 |
L177       | BETA | `calc_beta` | ベンチマークに対するβ |
L178       | DOWNSIDE_DEV | - | 下方リターンのみの年率化標準偏差 |
L179       | RESID_VOL | - | βで調整した残差リターンの年率化標準偏差 |
L180       | MDD_1Y | - | 過去1年の最大ドローダウン |
L181       | DOWN_OUTPERF | - | 市場下落日に対する平均超過リターン |
L182       | EXT_200 | - | 200日移動平均からの絶対乖離率 |
L183       | NEAR_52W_HIGH | - | 52週高値までの下方距離（0=高値） |
L184       | FCF_W | - | ウィンザー処理後のFCF/EV |
L185       | ROE_W | - | ウィンザー処理後のROE |
L186       | FCF | - | FCF/EV |
L187       | QAL | - | FCF_WとROE_Wを組み合わせた品質スコア |
L188       | CURR_RATIO | - | 流動比率 |
L189       | DEBT2EQ | - | 負債資本倍率 |
L190       | EPS_VAR_8Q | - | EPSの8四半期標準偏差 |
L191       | DIV | - | 年率換算配当利回り |
L192       | DIV_STREAK | `div_streak` | 連続増配年数 |
L193       | DIV_FCF_COVER | - | 配当のFCFカバレッジ |
L194       | DIV_VAR5 | - | 5年配当変動率 |
L195       | DIV_TTM_PS | - | 1株当たりTTM配当 |
L196       | DIV_YOY | - | 前年比配当成長率 |
L197       | REV | - | 売上成長率TTM |
L198       | EPS_Q_YOY | - | 四半期EPSの前年同期比 |
L199       | REV_Q_YOY | - | 四半期売上の前年同期比 |
L200       | REV_YOY_ACC | - | 売上成長率の加速分 |
L201       | RULE40 | - | 売上成長率とFCFマージンの合計 |
L202       | FCF_MGN | - | FCFマージン |
L203       | REV_ANN_STREAK | - | 年次売上成長の連続年数 |
L204       | REV_YOY_VAR | - | 年次売上成長率の変動性 |
L205       | SIZE | - | 時価総額の対数値 |
L206       | LIQ | - | 60日平均出来高ドルの対数値 |
L207    - Gバケット: `GRW`、`MOM`、`VOL`を`cfg.weights.g`（0.40/0.45/-0.15）で加重し`g_score`を得る。
L208    - Dバケット: `D_QAL`、`D_YLD`、`D_VOL_RAW`、`D_TRD`を`cfg.weights.d`（0.15/0.15/-0.45/0.25）で加重し`d_score_all`を算出。
L209    - セクターcapによる`soft_cap_effective_scores`を適用し、G採用銘柄にはトレンドテンプレートフィルタを適用。
L210 5. `_apply_growth_entry_flags`でブレイクアウト/押し目発火状況を付加し、`FeatureBundle`を返す。
L211
L212 ### Step3: Correlation Reduction & Selection (Selector)
L213 DRRSアルゴリズムで相関を抑えた銘柄選定を行い、`SelectionBundle`を返す。`results/`に保存された前回選定（`G_selection.json` / `D_selection.json`）を`_load_prev`で読み込み、目的値が大きく悪化しない限り維持する。新しい採用集合は`_save_sel`でJSONに書き出し次回以降の入力に備える。
L214 主なメソッド:
L215 - `residual_corr` : 収益率行列をZスコア化し、上位主成分を除去した残差から相関行列を求め、平均相関に応じてシュリンク。
L216 - `rrqr_like_det` : スコアを重み付けしたQR分解風の手順で初期候補をk件抽出し、スコアの高い非相関な集合を得る。
L217 - `swap_local_det` / `swap_local_det_cross` : `sum(score) - λ*within_corr - μ*cross_corr`を目的関数として、入れ替え探索で局所的に最適化。
L218 - `select_bucket_drrs` : プール銘柄とスコアから残差相関を計算し、上記2段階(初期選択→入れ替え)でk銘柄を決定。過去採用銘柄との比較で目的値が劣化しなければ維持する。
L219 - `select_buckets` : Gバケットを選定後、その結果を除いた候補からDバケットを選ぶ。D選定時はGとの相関ペナルティμを付与し、両バケットの分散を制御する。
L220
L221 #### 相関低減ロジック詳細
L222 1. **残差相関行列の構築 (`residual_corr`)**
L223    - リターン行列`R`をZスコア化。
L224    - SVDで上位`n_pc`主成分`F`を求め、最小二乗で係数`B`を算出し残差`E = Z - F@B`を得る。
L225    - `E`の相関行列`C`を計算し、平均絶対相関に応じてシュリンク量`shrink_eff`を補正して対角を強調。
L226 2. **初期候補の抽出 (`rrqr_like_det`)**
L227    - スコアを0-1正規化した重み`w`とし、`Z*(1+γw)`で列ノルムを強調。
L228    - 残差ノルム最大の列を逐次選び、QRライクなデフレーションを行って非相関かつ高スコアな`k`銘柄集合`S0`を得る。
L229 3. **局所探索 (`swap_local_det` / `swap_local_det_cross`)**
L230    - 目的関数`Σz_score − λ·within_corr − μ·cross_corr`を最大化。
L231    - 選択集合の各銘柄を他候補と入れ替え、改善がなくなるまでまたは`max_pass`回まで探索。
L232    - `swap_local_det_cross`はGバケットとのクロス相関行列`C_cross`を使用し、ペナルティ`μ`を付与。
L233 4. **過去採用の維持とクロスペナルティ (`select_bucket_drrs` / `select_buckets`)**
L234    - 局所探索結果`S`と過去集合`P`の目的値を比較し、`S`が`P`より`η`未満の改善なら`P`を維持。
L235    - `select_buckets`ではGを先に決定し、D選定時にGとの相関ペナルティ`μ`を加えてクロス分散を抑制。
L236
L237 ### Step4: Output
L238 選定結果を可視化し共有する工程。以下の内容をテーブル化して標準出力とSlackへ送る。
L239 - 採用銘柄と惜しくも選外となった銘柄のスコア一覧
L240 - IN/OUTリストとOUT銘柄のスコア（低得点銘柄を確認しやすく）
L241 - 新旧ポートフォリオの比較表（組入れ・除外、スコア変化）
L242 - 検討中銘柄の低スコアランキング
L243
L244 主なメソッド:
L245 - `display_results` : 上記テーブルに加えパフォーマンス指標や分散化指標を表示。
L246 - `notify_slack` : Slack Webhookへ同内容を送信。
L247 - 補助:`_avg_offdiag`、`_resid_avg_rho`、`_raw_avg_rho`、`_cross_block_raw_rho`。
L248
L249 ## エントリポイント
L250 1. `PipelineConfig`を構築。
L251 2. **Step1** `Input.prepare_data`で`InputBundle`を生成。
L252 3. **Step2** `Scorer.aggregate_scores`で`FeatureBundle`を取得。
L253 4. **Step3** `Selector.select_buckets`で`SelectionBundle`を算出。
L254 5. **Step4** `Output.display_results`と`notify_slack`で結果を出力。
```
