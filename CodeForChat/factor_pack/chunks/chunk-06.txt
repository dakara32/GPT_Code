```text
1125                 keep = [c for c in tbl.columns if c not in drop]
L1126                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1127             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1128
L1129         message = "📈 ファクター分散最適化の結果\n"
L1130         if self.miss_df is not None and not self.miss_df.empty:
L1131             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L1132         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1133         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1134         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L1135         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L1136
L1137         try:
L1138             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1139             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1140             if r is not None:
L1141                 r.raise_for_status()
L1142         except Exception as e:
L1143             print(f"[ERR] main_post_failed: {e}")
L1144
L1145 def _infer_g_universe(feature_df, selected12=None, near5=None):
L1146     try:
L1147         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1148         if out: return out
L1149     except Exception:
L1150         pass
L1151     base = set()
L1152     for lst in (selected12 or []), (near5 or []):
L1153         for x in (lst or []): base.add(x)
L1154     return list(base) if base else list(feature_df.index)
L1155
L1156 def _fmt_with_fire_mark(tickers, feature_df):
L1157     out = []
L1158     for t in tickers or []:
L1159         try:
L1160             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L1161             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L1162             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L1163         except Exception:
L1164             out.append(t)
L1165     return out
L1166
L1167 def _label_recent_event(t, feature_df):
L1168     try:
L1169         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L1170         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L1171         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L1172         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L1173         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L1174     except Exception:
L1175         pass
L1176     return t
L1177
L1178 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1179
L1180 def io_build_input_bundle() -> InputBundle:
L1181     """
L1182     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1183     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1184     """
L1185     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1186     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L1187
L1188 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1189               n_target: int) -> tuple[list, float, float, float]:
L1190     """
L1191     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1192     戻り値：(pick, avg_res_corr, sum_score, objective)
L1193     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1194     """
L1195     sc.cfg = cfg
L1196
L1197     if hasattr(sc, "score_build_features"):
L1198         feat = sc.score_build_features(inb)
L1199         if not hasattr(sc, "_feat_logged"):
L1200             T.log("features built (scorer)")
L1201             sc._feat_logged = True
L1202         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1203     else:
L1204         fb = sc.aggregate_scores(inb, cfg)
L1205         if not hasattr(sc, "_feat_logged"):
L1206             T.log("features built (scorer)")
L1207             sc._feat_logged = True
L1208         sc._feat = fb
L1209         agg = fb.g_score if group == "G" else fb.d_score_all
L1210         if group == "D" and hasattr(fb, "df"):
L1211             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L1212
L1213     if hasattr(sc, "filter_candidates"):
L1214         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1215
L1216     selector = Selector()
L1217     if hasattr(sc, "select_diversified"):
L1218         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1219             selector=selector, prev_tickers=None,
L1220             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1221             cross_mu=cfg.drrs.cross_mu_gd)
L1222     else:
L1223         if group == "G":
L1224             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1225             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1226                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1227                 lam=cfg.drrs.G.get("lam", 0.68),
L1228                 lookback=cfg.drrs.G.get("lookback", 252),
L1229                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1230         else:
L1231             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1232             g_fixed = getattr(sc, "_top_G", None)
L1233             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1234                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1235                 lam=cfg.drrs.D.get("lam", 0.85),
L1236                 lookback=cfg.drrs.D.get("lookback", 504),
L1237                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1238                 mu=cfg.drrs.cross_mu_gd)
L1239         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1240         sum_sc = res["sum_score"]; obj = res["objective"]
L1241         if group == "D":
L1242             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1243             T.log("selection finalized (G/D)")
L1244     try:
L1245         inc = [t for t in exist if t in agg.index]
L1246         pick = _sticky_keep_current(
L1247             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1248             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1249         )
L1250     except Exception as _e:
L1251         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1252     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1253     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1254     try:
L1255         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1256         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1257         setattr(sc, f"_near_{group}", near10)
L1258         setattr(sc, f"_agg_{group}", agg)
L1259     except Exception:
L1260         pass
L1261
L1262     if group == "D":
L1263         T.log("save done")
L1264     if group == "G":
L1265         sc._top_G = pick
L1266     return pick, avg_r, sum_sc, obj
L1267
L1268 def run_pipeline() -> SelectionBundle:
L1269     """
L1270     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1271     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1272     """
L1273     inb = io_build_input_bundle()
L1274     cfg = PipelineConfig(
L1275         weights=WeightsConfig(g=g_weights, d=D_weights),
L1276         drrs=DRRSParams(
L1277             corrM=corrM, shrink=DRRS_SHRINK,
L1278             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1279         ),
L1280         price_max=CAND_PRICE_MAX,
L1281         debug_mode=debug_mode
L1282     )
L1283     sc = Scorer()
L1284     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1285     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L1286     alpha = Scorer.spx_to_alpha(inb.spx)
L1287     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1288     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1289     sc._top_G = top_G
L1290     try:
L1291         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1292         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1293     except Exception:
L1294         pass
L1295     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1296     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1297     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1298     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1299     fb = getattr(sc, "_feat", None)
L1300     near_G = getattr(sc, "_near_G", [])
L1301     selected12 = list(top_G)
L1302     df = fb.df if fb is not None else pd.DataFrame()
L1303     guni = _infer_g_universe(df, selected12, near_G)
L1304     try:
L1305         fire_recent = [t for t in guni
L1306                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1307                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1308     except Exception: fire_recent = []
L1309
L1310     lines = [
L1311         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1312         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1313         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1314         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1315
L1316     if fire_recent:
L1317         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1318         lines.append(f"過去5営業日の検知: {fire_list}")
L1319     else:
L1320         lines.append("過去5営業日の検知: なし")
L1321
L1322     try:
L1323         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1324         if webhook:
L1325             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1326     except Exception:
L1327         pass
L1328
L1329     out = Output()
L1330     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1331     try: out._sc = sc
L1332     except Exception: pass
L1333     if hasattr(sc, "_feat"):
L1334         try:
L1335             fb = sc._feat
L1336             out.miss_df = fb.missing_logs
L1337             out.display_results(
L1338                 exist=exist,
L1339                 bench=bench,
L1340                 df_z=fb.df_z,
L1341                 g_score=fb.g_score,
L1342                 d_score_all=fb.d_score_all,
L1343                 init_G=top_G,
L1344                 init_D=top_D,
L1345                 top_G=top_G,
L1346                 top_D=top_D,
L1347                 df_full_z=getattr(fb, "df_full_z", None),
L1348                 prev_G=getattr(sc, "_prev_G", exist),
L1349                 prev_D=getattr(sc, "_prev_D", exist),
L1350             )
L1351         except Exception:
L1352             pass
L1353     out.notify_slack()
L1354     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1355               "sum_score": sumG, "objective": objG},
L1356         resD={"tickers": top_D, "avg_res_corr": avgD,
L1357               "sum_score": sumD, "objective": objD},
L1358         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1359
L1360     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1361     try:
L1362         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1363               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1364               .sort_values("G_plus_D")
L1365               .head(10)
L
```