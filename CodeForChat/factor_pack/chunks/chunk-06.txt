```text
loc[-win:]), np.arange(win, dtype=float)
L143         try: return float(np.polyfit(x, y, 1)[0])
L144         except Exception: return np.nan
L145
L146     @staticmethod
L147     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L148         ev = info_t.get('enterpriseValue', np.nan)
L149         if pd.notna(ev) and ev>0: return float(ev)
L150         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L151         try:
L152             bs = tk.quarterly_balance_sheet
L153             if bs is not None and not bs.empty:
L154                 c = bs.columns[0]
L155                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L156                     if k in bs.index: debt = float(bs.loc[k,c]); break
L157                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L158                     if k in bs.index: cash = float(bs.loc[k,c]); break
L159         except Exception: pass
L160         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L161         return np.nan
L162
L163     @staticmethod
L164     def dividend_status(ticker: str) -> str:
L165         t = yf.Ticker(ticker)
L166         try:
L167             if not t.dividends.empty: return "has"
L168         except Exception: return "unknown"
L169         try:
L170             a = t.actions
L171             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L172         except Exception: pass
L173         try:
L174             fi = t.fast_info
L175             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L176         except Exception: pass
L177         return "unknown"
L178
L179     @staticmethod
L180     def div_streak(t):
L181         try:
L182             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L183             years, streak = sorted(ann.index), 0
L184             for i in range(len(years)-1,0,-1):
L185                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L186                 else: break
L187             return streak
L188         except Exception: return 0
L189
L190     @staticmethod
L191     def fetch_finnhub_metrics(symbol):
L192         api_key = os.environ.get("FINNHUB_API_KEY")
L193         if not api_key: return {}
L194         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L195         try:
L196             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L197             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L198         except Exception: return {}
L199
L200     @staticmethod
L201     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L202         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L203         n = min(len(r), len(m), lookback)
L204         if n<60: return np.nan
L205         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L206         return np.nan if var==0 else cov/var
L207
L208     @staticmethod
L209     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L210                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L211         """
L212         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L213         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L214         """
L215         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L216         b50  = ((spx/ma50 - 1) + bands[0])/(2*bands[0])
L217         b200 = ((spx/ma200 - 1) + bands[1])/(2*bands[1])
L218         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L219         b = float(hist.iloc[-1])
L220         lo, mid = float(hist.quantile(q[0])), float(hist.quantile(q[1]))
L221         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L222
L223     @staticmethod
L224     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L225         """
L226         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L227         戻り値は降順ソート済み。
L228         """
L229         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L230         cnt, pen = {}, {}
L231         for t in order:
L232             sec = sectors.get(t, "U")
L233             k = cnt.get(sec, 0) + 1
L234             pen[t] = alpha * max(0, k - cap)
L235             cnt[sec] = k
L236         return (s - pd.Series(pen)).sort_values(ascending=False)
L237
L238     @staticmethod
L239     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L240         """
L241         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L242         """
L243         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L244         if not hard:
L245             return list(eff.head(N).index)
L246         pick, used = [], {}
L247         for t in eff.index:
L248             s = sectors.get(t, "U")
L249             if used.get(s, 0) < hard:
L250                 pick.append(t)
L251                 used[s] = used.get(s, 0) + 1
L252             if len(pick) == N:
L253                 break
L254         return pick
L255
L256     @staticmethod
L257     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L258         """
L259         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L260         - px: 列=ticker（ベンチは含めない）
L261         - spx: ベンチマーク Series（px.index に整列）
L262         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L263         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L264         """
L265         import numpy as np, pandas as pd
L266         if px is None or px.empty:
L267             return pd.Series(dtype=int)
L268         px = px.dropna(how="all", axis=1)
L269         if win_days and win_days > 0:
L270             px = px.tail(win_days)
L271         if px.empty:
L272             return pd.Series(dtype=int)
L273         spx = spx.reindex(px.index).ffill()
L274
L275         ma50  = px.rolling(50).mean()
L276         ma150 = px.rolling(150).mean()
L277         ma200 = px.rolling(200).mean()
L278
L279         tt = (px > ma150)
L280         tt &= (px > ma200)
L281         tt &= (ma150 > ma200)
L282         tt &= (ma200 - ma200.shift(21) > 0)
L283         tt &= (ma50  > ma150)
L284         tt &= (ma50  > ma200)
L285         tt &= (px    > ma50)
L286
L287         lo252 = px.rolling(252).min()
L288         hi252 = px.rolling(252).max()
L289         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L290         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L291
L292         r12  = px.divide(px.shift(252)).sub(1.0)
L293         br12 = spx.divide(spx.shift(252)).sub(1.0)
L294         r1   = px.divide(px.shift(22)).sub(1.0)
L295         br1  = spx.divide(spx.shift(22)).sub(1.0)
L296         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L297         tt &= (rs >= 0.10)
L298
L299         return tt.fillna(False).sum(axis=1).astype(int)
L300
L301     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L302     def aggregate_scores(self, ib: Any, cfg):
L303         if cfg is None:
L304             raise ValueError("cfg is required; pass factor.PipelineConfig")
L305         self._validate_ib_for_scorer(ib)
L306
L307         px, spx, tickers = ib.px, ib.spx, ib.tickers
L308         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L309
L310         df, missing_logs = pd.DataFrame(index=tickers), []
L311         for t in tickers:
L312             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L313             # --- 基本特徴 ---
L314             df.loc[t,'TR']   = self.trend(s)
L315             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L316             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L317             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L318             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L319
L320             # --- 配当（欠損補完含む） ---
L321             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L322             if div is None or pd.isna(div):
L323                 try:
L324                     divs = yf.Ticker(t).dividends
L325                     if divs is not None and not divs.empty:
L326                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L327                         if last_close and last_close>0: div = float(div_1y/last_close)
L328                 except Exception: pass
L329             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L330
L331             # --- FCF/EV ---
L332             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L333             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L334
L335             # --- モメンタム・ボラ関連 ---
L336             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L337             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L338             n = int(min(len(r), len(rm)))
L339
L340             DOWNSIDE_DEV = np.nan
L341             if n>=60:
L342                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L343                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L344             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L345
L346             MDD_1Y = np.nan
L347             try:
L348                 w = s.iloc[-min(len(s),252):].dropna()
L349                 if len(w)>=30:
L350                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L351             except Exception: pass
L352             df.loc[t,'MDD_1Y'] = MDD_1Y
L353
L354             RESID_VOL = np.nan
L355             if n>=120:
L356                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L357                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L358                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L359                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L360             df.loc[t,'RESID_VOL'] = RESID_VOL
L361
L362             DOWN_OUTPERF = np.nan
L363             if n>=60:
L364                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L365                 if mask.sum()>=10:
L366                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L367                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L368             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L369
L370             # --- 長期移動平均/位置 ---
L371             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L372             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L373
L374             # --- 配当の詳細系 ---
L375             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L376             try:
L377                 divs = yf.Ticker(t).dividends.dropna()
L378                 if not divs.empty:
L379                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L380                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L381                     ann = divs.groupby(divs.index.year).sum()
L382                  
```