```text
_yield")): return "maybe_missing"
L172         except Exception: pass
L173         return "unknown"
L174
L175     @staticmethod
L176     def div_streak(t):
L177         try:
L178             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L179             years, streak = sorted(ann.index), 0
L180             for i in range(len(years)-1,0,-1):
L181                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L182                 else: break
L183             return streak
L184         except Exception: return 0
L185
L186     @staticmethod
L187     def fetch_finnhub_metrics(symbol):
L188         api_key = os.environ.get("FINNHUB_API_KEY")
L189         if not api_key: return {}
L190         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L191         try:
L192             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L193             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L194         except Exception: return {}
L195
L196     @staticmethod
L197     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L198         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L199         n = min(len(r), len(m), lookback)
L200         if n<60: return np.nan
L201         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L202         return np.nan if var==0 else cov/var
L203
L204     @staticmethod
L205     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L206                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L207         """
L208         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L209         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L210         """
L211         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L212         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L213         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L214         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L215         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L216
L217     @staticmethod
L218     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L219         """
L220         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L221         戻り値は降順ソート済み。
L222         """
L223         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L224         cnt, pen = {}, {}
L225         for t in order:
L226             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L227         return (s - pd.Series(pen)).sort_values(ascending=False)
L228
L229     @staticmethod
L230     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L231         """
L232         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L233         """
L234         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L235         if not hard:
L236             return list(eff.head(N).index)
L237         pick, used = [], {}
L238         for t in eff.index:
L239             s = sectors.get(t, "U")
L240             if used.get(s,0) < hard:
L241                 pick.append(t); used[s] = used.get(s,0) + 1
L242             if len(pick) == N: break
L243         return pick
L244
L245     @staticmethod
L246     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L247         """
L248         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L249         - px: 列=ticker（ベンチは含めない）
L250         - spx: ベンチマーク Series（px.index に整列）
L251         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L252         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L253         """
L254         import numpy as np, pandas as pd
L255         if px is None or px.empty:
L256             return pd.Series(dtype=int)
L257         px = px.dropna(how="all", axis=1)
L258         if win_days and win_days > 0:
L259             px = px.tail(win_days)
L260         if px.empty:
L261             return pd.Series(dtype=int)
L262         spx = spx.reindex(px.index).ffill()
L263
L264         ma50  = px.rolling(50).mean()
L265         ma150 = px.rolling(150).mean()
L266         ma200 = px.rolling(200).mean()
L267
L268         tt = (px > ma150)
L269         tt &= (px > ma200)
L270         tt &= (ma150 > ma200)
L271         tt &= (ma200 - ma200.shift(21) > 0)
L272         tt &= (ma50  > ma150)
L273         tt &= (ma50  > ma200)
L274         tt &= (px    > ma50)
L275
L276         lo252 = px.rolling(252).min()
L277         hi252 = px.rolling(252).max()
L278         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L279         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L280
L281         r12  = px.divide(px.shift(252)).sub(1.0)
L282         br12 = spx.divide(spx.shift(252)).sub(1.0)
L283         r1   = px.divide(px.shift(22)).sub(1.0)
L284         br1  = spx.divide(spx.shift(22)).sub(1.0)
L285         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L286         tt &= (rs >= 0.10)
L287
L288         return tt.fillna(False).sum(axis=1).astype(int)
L289
L290     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L291     def aggregate_scores(self, ib: Any, cfg):
L292         if cfg is None:
L293             raise ValueError("cfg is required; pass factor.PipelineConfig")
L294         self._validate_ib_for_scorer(ib)
L295
L296         px, spx, tickers = ib.px, ib.spx, ib.tickers
L297         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L298
L299         df, missing_logs = pd.DataFrame(index=tickers), []
L300         for t in tickers:
L301             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L302             # --- 基本特徴 ---
L303             df.loc[t,'TR']   = self.trend(s)
L304             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L305             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L306             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L307             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L308
L309             # --- 配当（直近1年無配は DIV=0 扱い） ---
L310             div = 0.0
L311             try:
L312                 divs = yf.Ticker(t).dividends
L313                 if divs is not None and not divs.empty:
L314                     last_close = s.iloc[-1]
L315                     cutoff = divs.index.max() - pd.Timedelta(days=365)
L316                     ttm_sum = float(divs[divs.index >= cutoff].sum())
L317                     # 直近1年の現金配当合計が正ならのみ採用（特別配の過去分は無視）
L318                     if last_close and last_close > 0 and ttm_sum > 0:
L319                         div = ttm_sum / float(last_close)
L320             except Exception:
L321                 pass
L322
L323             # dividends 時系列が取れなかったときだけ、info側にフォールバック
L324             if div == 0.0:
L325                 yi = d.get('dividendYield', None)
L326                 if yi is None:
L327                     yi = d.get('trailingAnnualDividendYield', None)
L328                 try:
L329                     if yi is not None and not pd.isna(yi):
L330                         div = float(yi)
L331                 except Exception:
L332                     pass
L333
L334             df.loc[t, 'DIV'] = float(div)  # 最終確定。直近1年ゼロなら必ず 0.0
L335
L336             # --- FCF/EV ---
L337             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L338             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L339
L340             # --- モメンタム・ボラ関連 ---
L341             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L342             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L343             n = int(min(len(r), len(rm)))
L344
L345             DOWNSIDE_DEV = np.nan
L346             if n>=60:
L347                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L348                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L349             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L350
L351             MDD_1Y = np.nan
L352             try:
L353                 w = s.iloc[-min(len(s),252):].dropna()
L354                 if len(w)>=30:
L355                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L356             except Exception: pass
L357             df.loc[t,'MDD_1Y'] = MDD_1Y
L358
L359             RESID_VOL = np.nan
L360             if n>=120:
L361                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L362                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L363                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L364                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L365             df.loc[t,'RESID_VOL'] = RESID_VOL
L366
L367             DOWN_OUTPERF = np.nan
L368             if n>=60:
L369                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L370                 if mask.sum()>=10:
L371                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L372                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L373             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L374
L375             # --- 長期移動平均/位置 ---
L376             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L377             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L378
L379             # --- 配当の詳細系 ---
L380             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L381             try:
L382                 divs = yf.Ticker(t).dividends.dropna()
L383                 if not divs.empty:
L384                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L385                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L386                     ann = divs.groupby(divs.index.year).sum()
L387                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L388                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L389                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L390                 so = d.get('sharesOutstanding',None)
L391                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L392                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L393             except Exception: pass
L394             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L395
L396             # --- 財務安定性 ---
L397             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L398
L399             # --- EPS 変動 ---
L400             EPS_VAR_8Q = np.nan
L401             try:
L402                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L403                 if qe is not None and not qe.empty and so:
L404                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L405                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L406             except
```