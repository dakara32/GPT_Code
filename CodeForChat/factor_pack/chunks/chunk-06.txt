```text
bulk","info","eps_df","fcf_df","returns"] if not hasattr(ib,a) or getattr(ib,a) is None]
L110         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L111         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L112         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L113         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L114         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L115         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L116
L117     # ----（Scorer専用）テクニカル・指標系 ----
L118     @staticmethod
L119     def trend(s: pd.Series):
L120         if len(s)<200: return np.nan
L121         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L122         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L123         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L124         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L125         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L126         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L127         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L128         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L129         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L130         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L131         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L132         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L133
L134     @staticmethod
L135     def rs(s, b):
L136         n, nb = len(s), len(b)
L137         if n<60 or nb<60: return np.nan
L138         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L139         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L140         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L141
L142     @staticmethod
L143     def tr_str(s):
L144         if s is None:
L145             return np.nan
L146         s = s.ffill(limit=2).dropna()
L147         if len(s) < 50:
L148             return np.nan
L149         ma50 = s.rolling(50, min_periods=50).mean()
L150         last_ma = ma50.iloc[-1]
L151         last_px = s.iloc[-1]
L152         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L153
L154     @staticmethod
L155     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L156         r = (s/b).dropna()
L157         if len(r) < win: return np.nan
L158         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L159         try: return float(np.polyfit(x, y, 1)[0])
L160         except Exception: return np.nan
L161
L162     @staticmethod
L163     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L164         ev = info_t.get('enterpriseValue', np.nan)
L165         if pd.notna(ev) and ev>0: return float(ev)
L166         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L167         try:
L168             bs = tk.quarterly_balance_sheet
L169             if bs is not None and not bs.empty:
L170                 c = bs.columns[0]
L171                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L172                     if k in bs.index: debt = float(bs.loc[k,c]); break
L173                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L174                     if k in bs.index: cash = float(bs.loc[k,c]); break
L175         except Exception: pass
L176         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L177         return np.nan
L178
L179     @staticmethod
L180     def dividend_status(ticker: str) -> str:
L181         t = yf.Ticker(ticker)
L182         try:
L183             if not t.dividends.empty: return "has"
L184         except Exception: return "unknown"
L185         try:
L186             a = t.actions
L187             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L188         except Exception: pass
L189         try:
L190             fi = t.fast_info
L191             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L192         except Exception: pass
L193         return "unknown"
L194
L195     @staticmethod
L196     def div_streak(t):
L197         try:
L198             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L199             years, streak = sorted(ann.index), 0
L200             for i in range(len(years)-1,0,-1):
L201                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L202                 else: break
L203             return streak
L204         except Exception: return 0
L205
L206     @staticmethod
L207     def fetch_finnhub_metrics(symbol):
L208         api_key = os.environ.get("FINNHUB_API_KEY")
L209         if not api_key: return {}
L210         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L211         try:
L212             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L213             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L214         except Exception: return {}
L215
L216     @staticmethod
L217     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L218         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L219         n = min(len(r), len(m), lookback)
L220         if n<60: return np.nan
L221         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L222         return np.nan if var==0 else cov/var
L223
L224     @staticmethod
L225     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L226                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L227         """
L228         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L229         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L230         """
L231         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L232         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L233         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L234         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L235         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L236
L237     @staticmethod
L238     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L239         """
L240         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L241         戻り値は降順ソート済み。
L242         """
L243         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L244         cnt, pen = {}, {}
L245         for t in order:
L246             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L247         return (s - pd.Series(pen)).sort_values(ascending=False)
L248
L249     @staticmethod
L250     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L251         """
L252         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L253         """
L254         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L255         if not hard:
L256             return list(eff.head(N).index)
L257         pick, used = [], {}
L258         for t in eff.index:
L259             s = sectors.get(t, "U")
L260             if used.get(s,0) < hard:
L261                 pick.append(t); used[s] = used.get(s,0) + 1
L262             if len(pick) == N: break
L263         return pick
L264
L265     @staticmethod
L266     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L267         """
L268         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L269         - px: 列=ticker（ベンチは含めない）
L270         - spx: ベンチマーク Series（px.index に整列）
L271         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L272         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L273         """
L274         import numpy as np, pandas as pd
L275         if px is None or px.empty:
L276             return pd.Series(dtype=int)
L277         px = px.dropna(how="all", axis=1)
L278         if win_days and win_days > 0:
L279             px = px.tail(win_days)
L280         if px.empty:
L281             return pd.Series(dtype=int)
L282         spx = spx.reindex(px.index).ffill()
L283
L284         ma50  = px.rolling(50).mean()
L285         ma150 = px.rolling(150).mean()
L286         ma200 = px.rolling(200).mean()
L287
L288         tt = (px > ma150)
L289         tt &= (px > ma200)
L290         tt &= (ma150 > ma200)
L291         tt &= (ma200 - ma200.shift(21) > 0)
L292         tt &= (ma50  > ma150)
L293         tt &= (ma50  > ma200)
L294         tt &= (px    > ma50)
L295
L296         lo252 = px.rolling(252).min()
L297         hi252 = px.rolling(252).max()
L298         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L299         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L300
L301         r12  = px.divide(px.shift(252)).sub(1.0)
L302         br12 = spx.divide(spx.shift(252)).sub(1.0)
L303         r1   = px.divide(px.shift(22)).sub(1.0)
L304         br1  = spx.divide(spx.shift(22)).sub(1.0)
L305         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L306         tt &= (rs >= 0.10)
L307
L308         return tt.fillna(False).sum(axis=1).astype(int)
L309
L310     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L311     def aggregate_scores(self, ib: Any, cfg):
L312         if cfg is None:
L313             raise ValueError("cfg is required; pass factor.PipelineConfig")
L314         self._validate_ib_for_scorer(ib)
L315
L316         px, spx, tickers = ib.px, ib.spx, ib.tickers
L317         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L318
L319         df, missing_logs = pd.DataFrame(index=tickers), []
L320         for t in tickers:
L321             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L322             # --- 基本特徴 ---
L323             df.loc[t,'TR']   = self.trend(s)
L324             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L325             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L326             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L327             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L328
L329             # --- 配当（欠損補完含む） ---
L330             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L331             if div is None or pd.isna(div):
L332                 try:
L333                     divs = yf.Ticker(t).dividends
L334                     if divs is not None and not divs.empty:
L335                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.
```