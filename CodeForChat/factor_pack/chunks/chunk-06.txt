```text
79         self.g_formatters = self.d_formatters = {}
L1180         # 低スコア（GSC+DSC）Top10 表示/送信用
L1181         self.low10_table = None
L1182         self._changes_empty = True
L1183         self._changes_text = None
L1184         self._performance_text = ""
L1185
L1186     # --- 表示（元 display_results のロジックそのまま） ---
L1187     def display_results(self, *, exist, bench, df_raw=None, df_z, g_score, d_score_all,
L1188                         init_G, init_D, top_G, top_D, **kwargs):
L1189         logger.info("📌 reached display_results")
L1190         pd.set_option('display.float_format','{:.3f}'.format)
L1191         print("📈 ファクター分散最適化の結果")
L1192         # 欠損アラート関連処理は削除（Slack送信・ログに未使用のため）
L1193
L1194         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L1195         try:
L1196             sc = getattr(self, "_sc", None)
L1197             agg_G = getattr(sc, "_agg_G", None)
L1198             agg_D = getattr(sc, "_agg_D", None)
L1199         except Exception:
L1200             sc = agg_G = agg_D = None
L1201         class _SeriesProxy:
L1202             __slots__ = ("primary", "fallback")
L1203             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L1204             def get(self, key, default=None):
L1205                 try:
L1206                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L1207                 except Exception:
L1208                     v = None
L1209                 if v is not None and not (isinstance(v, float) and v != v):
L1210                     return v
L1211                 try:
L1212                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L1213                 except Exception:
L1214                     return default
L1215         g_score = _SeriesProxy(agg_G, g_score)
L1216         d_score_all = _SeriesProxy(agg_D, d_score_all)
L1217         near_G = getattr(sc, "_near_G", []) if sc else []
L1218         near_D = getattr(sc, "_near_D", []) if sc else []
L1219
L1220         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L1221         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L1222         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L1223         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L1224         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L1225         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L1226                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L1227         if near_G:
L1228             add = [t for t in near_G if t not in set(G_UNI)][:10]
L1229             if len(add) < 10:
L1230                 try:
L1231                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1232                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L1233                     used = set(G_UNI + add)
L1234                     def _push(lst):
L1235                         nonlocal add, used
L1236                         for t in lst:
L1237                             if len(add) == 10: break
L1238                             if t in aggG.index and t not in used:
L1239                                 add.append(t); used.add(t)
L1240                     _push(out_now)           # ① 今回 OUT を優先
L1241                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L1242                 except Exception:
L1243                     pass
L1244             if add:
L1245                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L1246                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L1247         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L1248
L1249         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L1250         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L1251         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L1252         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L1253         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L1254         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L1255         import scorer
L1256         dw_eff = scorer.D_WEIGHTS_EFF
L1257         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L1258                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L1259         if near_D:
L1260             add = [t for t in near_D if t not in set(D_UNI)][:10]
L1261             if add:
L1262                 d_disp2 = pd.DataFrame(index=add)
L1263                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L1264                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L1265                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L1266         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L1267
L1268         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L1269         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L1270         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L1271
L1272         io_table = pd.DataFrame({
L1273             'IN': pd.Series(in_list),
L1274             '/ OUT': pd.Series(out_list)
L1275         })
L1276         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L1277         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L1278         io_table['GSC'] = pd.Series(g_list)
L1279         io_table['DSC'] = pd.Series(d_list)
L1280
L1281         print("Changes:")
L1282         changes_str = io_table.to_string(index=False)
L1283         print(changes_str)
L1284         self._changes_empty = io_table.empty
L1285         self._changes_text = None if self._changes_empty else changes_str
L1286
L1287         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L1288         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L1289         for name,ticks in portfolios.items():
L1290             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L1291             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L1292             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L1293             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L1294             if len(ticks)>=2:
L1295                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L1296                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L1297                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L1298             else: RAW_rho = RESID_rho = np.nan
L1299             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L1300         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L1301         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L1302         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L1303         def _fmt_row(s):
L1304             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L1305         df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1)
L1306         metrics_str = df_metrics_fmt.to_string()
L1307         print("Performance Comparison:")
L1308         print(metrics_str)
L1309         self._performance_text = metrics_str
L1310         # === 追加: GSC+DSC が低い順 TOP10 ===
L1311         try:
L1312             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L1313             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L1314             all_scores = all_scores.dropna(subset=['G_plus_D'])
L1315             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L1316             print("Low Score Candidates (GSC+DSC bottom 10):")
L1317             print(self.low10_table.to_string())
L1318         except Exception as e:
L1319             print(f"[warn] low-score ranking failed: {e}")
L1320             self.low10_table = None
L1321         if debug_mode:
L1322             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L1323         else:
L1324             logger.debug(
L1325                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L1326                 debug_mode, True
L1327             )
L1328
L1329     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1330     def notify_slack(self):
L1331         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1332
L1333         if not SLACK_WEBHOOK_URL:
L1334             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1335             return
L1336
L1337         def _filter_suffix_from(spec: dict, group: str) -> str:
L1338             g = spec.get(group, {})
L1339             parts = [str(m) for m in g.get("pre_mask", [])]
L1340             for k, v in (g.get("pre_filter", {}) or {}).items():
L1341                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L1342                 name = {"beta": "β"}.get(base, base)
L1343                 try:
L1344                     val = f"{float(v):g}"
L1345                 except Exception:
L1346                     val = str(v)
L1347                 parts.append(f"{name}{op}{val}")
L1348             return "" if not parts else " / filter:" + " & ".join(parts)
L1349
L1350         def _inject_filter_suffix(title: str, group: str) -> str:
L1351             suf = _filter_suffix_from(FILTER_SPEC, group)
L1352             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1353
L1354         def _blk(title, tbl, fmt=None, drop=()):
L1355             if tbl is None or getattr(tbl, 'empty', False):
L1356                 return f"{title}\n(選定なし)\n"
L1357             if drop and hasattr(tbl, 'columns'):
L1358                 keep = [c for c in tbl.columns if c not in drop]
L1359                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1360             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1361
L1362         message = "📈 ファクター分散最適化の結果\n"
L1363         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1364         message += _blk(_
```