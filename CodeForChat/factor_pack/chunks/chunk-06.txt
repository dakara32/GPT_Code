```text
bt","Short Long Term Debt"):
L154                     if k in bs.index: debt = float(bs.loc[k,c]); break
L155                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L156                     if k in bs.index: cash = float(bs.loc[k,c]); break
L157         except Exception: pass
L158         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L159         return np.nan
L160
L161     @staticmethod
L162     def dividend_status(ticker: str) -> str:
L163         t = yf.Ticker(ticker)
L164         try:
L165             if not t.dividends.empty: return "has"
L166         except Exception: return "unknown"
L167         try:
L168             a = t.actions
L169             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L170         except Exception: pass
L171         try:
L172             fi = t.fast_info
L173             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L174         except Exception: pass
L175         return "unknown"
L176
L177     @staticmethod
L178     def div_streak(t):
L179         try:
L180             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L181             years, streak = sorted(ann.index), 0
L182             for i in range(len(years)-1,0,-1):
L183                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L184                 else: break
L185             return streak
L186         except Exception: return 0
L187
L188     @staticmethod
L189     def fetch_finnhub_metrics(symbol):
L190         api_key = os.environ.get("FINNHUB_API_KEY")
L191         if not api_key: return {}
L192         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L193         try:
L194             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L195             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L196         except Exception: return {}
L197
L198     @staticmethod
L199     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L200         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L201         n = min(len(r), len(m), lookback)
L202         if n<60: return np.nan
L203         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L204         return np.nan if var==0 else cov/var
L205
L206     @staticmethod
L207     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L208                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L209         """
L210         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L211         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L212         """
L213         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L214         b50  = ((spx/ma50 - 1) + bands[0])/(2*bands[0])
L215         b200 = ((spx/ma200 - 1) + bands[1])/(2*bands[1])
L216         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L217         b = float(hist.iloc[-1])
L218         lo, mid = float(hist.quantile(q[0])), float(hist.quantile(q[1]))
L219         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L220
L221     @staticmethod
L222     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L223         """
L224         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L225         戻り値は降順ソート済み。
L226         """
L227         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L228         cnt, pen = {}, {}
L229         for t in order:
L230             sec = sectors.get(t, "U")
L231             k = cnt.get(sec, 0) + 1
L232             pen[t] = alpha * max(0, k - cap)
L233             cnt[sec] = k
L234         return (s - pd.Series(pen)).sort_values(ascending=False)
L235
L236     @staticmethod
L237     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L238         """
L239         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L240         """
L241         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L242         if not hard:
L243             return list(eff.head(N).index)
L244         pick, used = [], {}
L245         for t in eff.index:
L246             s = sectors.get(t, "U")
L247             if used.get(s, 0) < hard:
L248                 pick.append(t)
L249                 used[s] = used.get(s, 0) + 1
L250             if len(pick) == N:
L251                 break
L252         return pick
L253
L254     @staticmethod
L255     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L256         """
L257         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L258         - px: 列=ticker（ベンチは含めない）
L259         - spx: ベンチマーク Series（px.index に整列）
L260         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L261         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L262         """
L263         import numpy as np, pandas as pd
L264         if px is None or px.empty:
L265             return pd.Series(dtype=int)
L266         px = px.dropna(how="all", axis=1)
L267         if win_days and win_days > 0:
L268             px = px.tail(win_days)
L269         if px.empty:
L270             return pd.Series(dtype=int)
L271         spx = spx.reindex(px.index).ffill()
L272
L273         ma50  = px.rolling(50).mean()
L274         ma150 = px.rolling(150).mean()
L275         ma200 = px.rolling(200).mean()
L276
L277         tt = (px > ma150)
L278         tt &= (px > ma200)
L279         tt &= (ma150 > ma200)
L280         tt &= (ma200 - ma200.shift(21) > 0)
L281         tt &= (ma50  > ma150)
L282         tt &= (ma50  > ma200)
L283         tt &= (px    > ma50)
L284
L285         lo252 = px.rolling(252).min()
L286         hi252 = px.rolling(252).max()
L287         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L288         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L289
L290         r12  = px.divide(px.shift(252)).sub(1.0)
L291         br12 = spx.divide(spx.shift(252)).sub(1.0)
L292         r1   = px.divide(px.shift(22)).sub(1.0)
L293         br1  = spx.divide(spx.shift(22)).sub(1.0)
L294         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L295         tt &= (rs >= 0.10)
L296
L297         return tt.fillna(False).sum(axis=1).astype(int)
L298
L299     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L300     def aggregate_scores(self, ib: Any, cfg):
L301         if cfg is None:
L302             raise ValueError("cfg is required; pass factor.PipelineConfig")
L303         self._validate_ib_for_scorer(ib)
L304
L305         px, spx, tickers = ib.px, ib.spx, ib.tickers
L306         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L307
L308         df, missing_logs = pd.DataFrame(index=tickers), []
L309         for t in tickers:
L310             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L311             # --- 基本特徴 ---
L312             df.loc[t,'TR']   = self.trend(s)
L313             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L314             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L315             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L316             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L317
L318             # --- 配当（欠損補完含む） ---
L319             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L320             if div is None or pd.isna(div):
L321                 try:
L322                     divs = yf.Ticker(t).dividends
L323                     if divs is not None and not divs.empty:
L324                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L325                         if last_close and last_close>0: div = float(div_1y/last_close)
L326                 except Exception: pass
L327             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L328
L329             # --- FCF/EV ---
L330             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L331             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L332
L333             # --- モメンタム・ボラ関連 ---
L334             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L335             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L336             n = int(min(len(r), len(rm)))
L337
L338             DOWNSIDE_DEV = np.nan
L339             if n>=60:
L340                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L341                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L342             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L343
L344             MDD_1Y = np.nan
L345             try:
L346                 w = s.iloc[-min(len(s),252):].dropna()
L347                 if len(w)>=30:
L348                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L349             except Exception: pass
L350             df.loc[t,'MDD_1Y'] = MDD_1Y
L351
L352             RESID_VOL = np.nan
L353             if n>=120:
L354                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L355                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L356                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L357                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L358             df.loc[t,'RESID_VOL'] = RESID_VOL
L359
L360             DOWN_OUTPERF = np.nan
L361             if n>=60:
L362                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L363                 if mask.sum()>=10:
L364                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L365                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L366             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L367
L368             # --- 長期移動平均/位置 ---
L369             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L370             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L371
L372             # --- 配当の詳細系 ---
L373             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L374             try:
L375                 divs = yf.Ticker(t).dividends.dropna()
L376                 if not divs.empty:
L377                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L378                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L379                     ann = divs.groupby(divs.index.year).sum()
L380                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L381                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L382                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L383                 so = d.get('sharesOutstanding',None)
L384                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L385                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L386             except Exception: pass
L387             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF
```