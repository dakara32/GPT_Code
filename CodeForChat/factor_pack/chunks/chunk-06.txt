```text
taticmethod
L190     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L191         r = (s/b).dropna()
L192         if len(r) < win: return np.nan
L193         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L194         try: return float(np.polyfit(x, y, 1)[0])
L195         except Exception: return np.nan
L196
L197     @staticmethod
L198     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L199         ev = info_t.get('enterpriseValue', np.nan)
L200         if pd.notna(ev) and ev>0: return float(ev)
L201         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L202         try:
L203             bs = tk.quarterly_balance_sheet
L204             if bs is not None and not bs.empty:
L205                 c = bs.columns[0]
L206                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L207                     if k in bs.index: debt = float(bs.loc[k,c]); break
L208                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L209                     if k in bs.index: cash = float(bs.loc[k,c]); break
L210         except Exception: pass
L211         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L212         return np.nan
L213
L214     @staticmethod
L215     def dividend_status(ticker: str) -> str:
L216         t = yf.Ticker(ticker)
L217         try:
L218             if not t.dividends.empty: return "has"
L219         except Exception: return "unknown"
L220         try:
L221             a = t.actions
L222             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L223         except Exception: pass
L224         try:
L225             fi = t.fast_info
L226             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L227         except Exception: pass
L228         return "unknown"
L229
L230     @staticmethod
L231     def div_streak(t):
L232         try:
L233             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L234             years, streak = sorted(ann.index), 0
L235             for i in range(len(years)-1,0,-1):
L236                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L237                 else: break
L238             return streak
L239         except Exception: return 0
L240
L241     @staticmethod
L242     def fetch_finnhub_metrics(symbol):
L243         api_key = os.environ.get("FINNHUB_API_KEY")
L244         if not api_key: return {}
L245         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L246         try:
L247             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L248             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L249         except Exception: return {}
L250
L251     @staticmethod
L252     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L253         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L254         n = min(len(r), len(m), lookback)
L255         if n<60: return np.nan
L256         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L257         return np.nan if var==0 else cov/var
L258
L259     @staticmethod
L260     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L261                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L262         """
L263         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L264         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L265         """
L266         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L267         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L268         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L269         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L270         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L271
L272     @staticmethod
L273     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L274         """
L275         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L276         戻り値は降順ソート済み。
L277         """
L278         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L279         cnt, pen = {}, {}
L280         for t in order:
L281             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L282         return (s - pd.Series(pen)).sort_values(ascending=False)
L283
L284     @staticmethod
L285     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L286         """
L287         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L288         """
L289         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L290         if not hard:
L291             return list(eff.head(N).index)
L292         pick, used = [], {}
L293         for t in eff.index:
L294             s = sectors.get(t, "U")
L295             if used.get(s,0) < hard:
L296                 pick.append(t); used[s] = used.get(s,0) + 1
L297             if len(pick) == N: break
L298         return pick
L299
L300     @staticmethod
L301     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L302         """
L303         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L304         - px: 列=ticker（ベンチは含めない）
L305         - spx: ベンチマーク Series（px.index に整列）
L306         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L307         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L308         """
L309         import numpy as np, pandas as pd
L310         if px is None or px.empty:
L311             return pd.Series(dtype=int)
L312         px = px.dropna(how="all", axis=1)
L313         if win_days and win_days > 0:
L314             px = px.tail(win_days)
L315         if px.empty:
L316             return pd.Series(dtype=int)
L317         spx = spx.reindex(px.index).ffill()
L318
L319         ma50  = px.rolling(50).mean()
L320         ma150 = px.rolling(150).mean()
L321         ma200 = px.rolling(200).mean()
L322
L323         tt = (px > ma150)
L324         tt &= (px > ma200)
L325         tt &= (ma150 > ma200)
L326         tt &= (ma200 - ma200.shift(21) > 0)
L327         tt &= (ma50  > ma150)
L328         tt &= (ma50  > ma200)
L329         tt &= (px    > ma50)
L330
L331         lo252 = px.rolling(252).min()
L332         hi252 = px.rolling(252).max()
L333         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L334         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L335
L336         r12  = px.divide(px.shift(252)).sub(1.0)
L337         br12 = spx.divide(spx.shift(252)).sub(1.0)
L338         r1   = px.divide(px.shift(22)).sub(1.0)
L339         br1  = spx.divide(spx.shift(22)).sub(1.0)
L340         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L341         tt &= (rs >= 0.10)
L342
L343         return tt.fillna(False).sum(axis=1).astype(int)
L344
L345     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L346     def aggregate_scores(self, ib: Any, cfg):
L347         if cfg is None:
L348             raise ValueError("cfg is required; pass factor.PipelineConfig")
L349         self._validate_ib_for_scorer(ib)
L350
L351         px, spx, tickers = ib.px, ib.spx, ib.tickers
L352         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L353
L354         df, missing_logs = pd.DataFrame(index=tickers), []
L355         for t in tickers:
L356             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L357             # --- 基本特徴 ---
L358             df.loc[t,'TR']   = self.trend(s)
L359             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L360             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L361             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L362             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L363
L364             # --- 配当（欠損補完含む） ---
L365             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L366             if div is None or pd.isna(div):
L367                 try:
L368                     divs = yf.Ticker(t).dividends
L369                     if divs is not None and not divs.empty:
L370                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L371                         if last_close and last_close>0: div = float(div_1y/last_close)
L372                 except Exception: pass
L373             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L374
L375             # --- FCF/EV ---
L376             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L377             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L378
L379             # --- モメンタム・ボラ関連 ---
L380             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L381             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L382             n = int(min(len(r), len(rm)))
L383
L384             DOWNSIDE_DEV = np.nan
L385             if n>=60:
L386                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L387                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L388             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L389
L390             MDD_1Y = np.nan
L391             try:
L392                 w = s.iloc[-min(len(s),252):].dropna()
L393                 if len(w)>=30:
L394                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L395             except Exception: pass
L396             df.loc[t,'MDD_1Y'] = MDD_1Y
L397
L398             RESID_VOL = np.nan
L399             if n>=120:
L400                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L401                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L402                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L403                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L404             df.loc[t,'RESID_VOL'] = RESID_VOL
L405
L406             DOWN_OUTPERF = np.nan
L407             if n>=60:
L408                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L409                 if mask.sum()>=10:
L410                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L411                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L412             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L413
L414             # --- 長期移動平均/位置 ---
L415             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L416             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L417
L418             # --- 配当の詳細系 ---
L419             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L420             try:
L421                 divs = yf.Ticker(t).dividends.dropna()
L422                 if not divs.empty:
L423                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L424                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L425               
```