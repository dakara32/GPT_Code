```text
lf.debug_table = None
L1178         self.g_title = self.d_title = ""
L1179         self.g_formatters = self.d_formatters = {}
L1180         # 低スコア（GSC+DSC）Top10 表示/送信用
L1181         self.low10_table = None
L1182         self.debug_text = ""   # デバッグ用本文はここに一本化
L1183         self._debug_logged = False
L1184         self._miss_disp_info: Tuple[pd.DataFrame, bool, int] | None = None
L1185
L1186     @staticmethod
L1187     def _prepare_missing_display(df: pd.DataFrame | None) -> Tuple[pd.DataFrame, bool, int]:
L1188         if df is None or df.empty:
L1189             return pd.DataFrame(), False, 0
L1190         work = df.copy()
L1191         if 'ticker' not in work.columns:
L1192             work = work.reset_index()
L1193             if 'ticker' not in work.columns and 'index' in work.columns:
L1194                 work = work.rename(columns={'index': 'ticker'})
L1195         bool_cols = [c for c in ['EPS_missing', 'REV_missing'] if c in work.columns]
L1196         if bool_cols:
L1197             work = work.loc[work[bool_cols].any(axis=1)]
L1198         if work.empty:
L1199             return pd.DataFrame(columns=work.columns), False, 0
L1200         cols_order = [
L1201             col for col in [
L1202                 'ticker',
L1203                 'EPS_missing',
L1204                 'REV_missing',
L1205                 'eps_imputed',
L1206                 'EPS_TTM',
L1207                 'EPS_Q_LastQ',
L1208                 'EPS_A_LATEST',
L1209                 'REV_TTM',
L1210                 'REV_Q_LastQ',
L1211                 'REV_A_LATEST',
L1212             ]
L1213             if col in work.columns
L1214         ]
L1215         if cols_order:
L1216             work = work.loc[:, cols_order]
L1217         total = len(work)
L1218         truncated = False
L1219         if total > 50:
L1220             work = work.head(20)
L1221             truncated = True
L1222         return work, truncated, total
L1223
L1224     # --- 表示（元 display_results のロジックそのまま） ---
L1225     def display_results(self, *, exist, bench, df_raw=None, df_z, g_score, d_score_all,
L1226                         init_G, init_D, top_G, top_D, **kwargs):
L1227         logger.info("📌 reached display_results")
L1228         pd.set_option('display.float_format','{:.3f}'.format)
L1229         print("📈 ファクター分散最適化の結果")
L1230         miss_df, truncated, total = self._prepare_missing_display(self.miss_df)
L1231         self._miss_disp_info = (miss_df, truncated, total)
L1232
L1233         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L1234         try:
L1235             sc = getattr(self, "_sc", None)
L1236             agg_G = getattr(sc, "_agg_G", None)
L1237             agg_D = getattr(sc, "_agg_D", None)
L1238         except Exception:
L1239             sc = agg_G = agg_D = None
L1240         class _SeriesProxy:
L1241             __slots__ = ("primary", "fallback")
L1242             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L1243             def get(self, key, default=None):
L1244                 try:
L1245                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L1246                 except Exception:
L1247                     v = None
L1248                 if v is not None and not (isinstance(v, float) and v != v):
L1249                     return v
L1250                 try:
L1251                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L1252                 except Exception:
L1253                     return default
L1254         g_score = _SeriesProxy(agg_G, g_score)
L1255         d_score_all = _SeriesProxy(agg_D, d_score_all)
L1256         near_G = getattr(sc, "_near_G", []) if sc else []
L1257         near_D = getattr(sc, "_near_D", []) if sc else []
L1258
L1259         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L1260         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L1261         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L1262         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L1263         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L1264         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L1265                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L1266         if near_G:
L1267             add = [t for t in near_G if t not in set(G_UNI)][:10]
L1268             if len(add) < 10:
L1269                 try:
L1270                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1271                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L1272                     used = set(G_UNI + add)
L1273                     def _push(lst):
L1274                         nonlocal add, used
L1275                         for t in lst:
L1276                             if len(add) == 10: break
L1277                             if t in aggG.index and t not in used:
L1278                                 add.append(t); used.add(t)
L1279                     _push(out_now)           # ① 今回 OUT を優先
L1280                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L1281                 except Exception:
L1282                     pass
L1283             if add:
L1284                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L1285                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L1286         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L1287
L1288         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L1289         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L1290         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L1291         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L1292         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L1293         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L1294         import scorer
L1295         dw_eff = scorer.D_WEIGHTS_EFF
L1296         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L1297                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L1298         if near_D:
L1299             add = [t for t in near_D if t not in set(D_UNI)][:10]
L1300             if add:
L1301                 d_disp2 = pd.DataFrame(index=add)
L1302                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L1303                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L1304                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L1305         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L1306
L1307         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L1308         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L1309         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L1310
L1311         self.io_table = pd.DataFrame({
L1312             'IN': pd.Series(in_list),
L1313             '/ OUT': pd.Series(out_list)
L1314         })
L1315         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L1316         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L1317         self.io_table['GSC'] = pd.Series(g_list)
L1318         self.io_table['DSC'] = pd.Series(d_list)
L1319
L1320         print("Changes:")
L1321         print(self.io_table.to_string(index=False))
L1322
L1323         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L1324         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L1325         for name,ticks in portfolios.items():
L1326             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L1327             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L1328             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L1329             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L1330             if len(ticks)>=2:
L1331                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L1332                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L1333                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L1334             else: RAW_rho = RESID_rho = np.nan
L1335             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L1336         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L1337         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L1338         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L1339         def _fmt_row(s):
L1340             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L1341         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L1342         # === 追加: GSC+DSC が低い順 TOP10 ===
L1343         try:
L1344             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L1345             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L1346             all_scores = all_scores.dropna(subset=['G_plus_D'])
L1347             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L1348             print("Low Score Candidates (GSC+DSC bottom 10):")
L1349             print(self.low10_table.to_string())
L1350         except Exception as e:
L1351             print(f"[warn] low-score ranking failed: {e}")
L1352             self.low10_table = None
L1353         self.debug_text = ""
L1354         if debug_mode:
L1355             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L1356         else:
L1357             logger.debug(
L1358                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L1359                 debug_mode, True
L1360             )
L1361         self._debug_logged = True
L1362
L1363     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1364     def notify_slack(self):
L1365         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1366
L1367         if not SLACK_WEBHOOK_URL:
L1368             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1369             return
L1370
L1371         def _filter_suffix_
```