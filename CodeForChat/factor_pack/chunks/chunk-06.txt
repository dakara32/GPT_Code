```text
key = os.environ.get("FINNHUB_API_KEY")
L210         if not api_key: return {}
L211         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L212         try:
L213             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L214             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L215         except Exception: return {}
L216
L217     @staticmethod
L218     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L219         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L220         n = min(len(r), len(m), lookback)
L221         if n<60: return np.nan
L222         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L223         return np.nan if var==0 else cov/var
L224
L225     @staticmethod
L226     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L227                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L228         """
L229         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L230         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L231         """
L232         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L233         b50  = ((spx/ma50 - 1) + bands[0])/(2*bands[0])
L234         b200 = ((spx/ma200 - 1) + bands[1])/(2*bands[1])
L235         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L236         b = float(hist.iloc[-1])
L237         lo, mid = float(hist.quantile(q[0])), float(hist.quantile(q[1]))
L238         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L239
L240     @staticmethod
L241     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L242         """
L243         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L244         戻り値は降順ソート済み。
L245         """
L246         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L247         cnt, pen = {}, {}
L248         for t in order:
L249             sec = sectors.get(t, "U")
L250             k = cnt.get(sec, 0) + 1
L251             pen[t] = alpha * max(0, k - cap)
L252             cnt[sec] = k
L253         return (s - pd.Series(pen)).sort_values(ascending=False)
L254
L255     @staticmethod
L256     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L257         """
L258         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L259         """
L260         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L261         if not hard:
L262             return list(eff.head(N).index)
L263         pick, used = [], {}
L264         for t in eff.index:
L265             s = sectors.get(t, "U")
L266             if used.get(s, 0) < hard:
L267                 pick.append(t)
L268                 used[s] = used.get(s, 0) + 1
L269             if len(pick) == N:
L270                 break
L271         return pick
L272
L273     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L274     def aggregate_scores(self, ib: Any, cfg):
L275         if cfg is None:
L276             raise ValueError("cfg is required; pass factor.PipelineConfig")
L277         self._validate_ib_for_scorer(ib)
L278
L279         px, spx, tickers = ib.px, ib.spx, ib.tickers
L280         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L281
L282         df, missing_logs = pd.DataFrame(index=tickers), []
L283         for t in tickers:
L284             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L285             # --- 基本特徴 ---
L286             df.loc[t,'TR']   = self.trend(s)
L287             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L288             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L289             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L290             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L291
L292             # --- 配当（欠損補完含む） ---
L293             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L294             if div is None or pd.isna(div):
L295                 try:
L296                     divs = yf.Ticker(t).dividends
L297                     if divs is not None and not divs.empty:
L298                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L299                         if last_close and last_close>0: div = float(div_1y/last_close)
L300                 except Exception: pass
L301             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L302
L303             # --- FCF/EV ---
L304             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L305             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L306
L307             # --- モメンタム・ボラ関連 ---
L308             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L309             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L310             n = int(min(len(r), len(rm)))
L311
L312             DOWNSIDE_DEV = np.nan
L313             if n>=60:
L314                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L315                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L316             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L317
L318             MDD_1Y = np.nan
L319             try:
L320                 w = s.iloc[-min(len(s),252):].dropna()
L321                 if len(w)>=30:
L322                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L323             except Exception: pass
L324             df.loc[t,'MDD_1Y'] = MDD_1Y
L325
L326             RESID_VOL = np.nan
L327             if n>=120:
L328                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L329                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L330                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L331                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L332             df.loc[t,'RESID_VOL'] = RESID_VOL
L333
L334             DOWN_OUTPERF = np.nan
L335             if n>=60:
L336                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L337                 if mask.sum()>=10:
L338                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L339                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L340             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L341
L342             # --- 長期移動平均/位置 ---
L343             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L344             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L345
L346             # --- 配当の詳細系 ---
L347             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L348             try:
L349                 divs = yf.Ticker(t).dividends.dropna()
L350                 if not divs.empty:
L351                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L352                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L353                     ann = divs.groupby(divs.index.year).sum()
L354                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L355                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L356                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L357                 so = d.get('sharesOutstanding',None)
L358                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L359                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L360             except Exception: pass
L361             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L362
L363             # --- 財務安定性 ---
L364             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L365
L366             # --- EPS 変動 ---
L367             EPS_VAR_8Q = np.nan
L368             try:
L369                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L370                 if qe is not None and not qe.empty and so:
L371                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L372                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L373             except Exception: pass
L374             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L375
L376             # --- サイズ/流動性 ---
L377             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L378             try:
L379                 vol_series = ib.data['Volume'][t].dropna()
L380                 if len(vol_series)>=5 and len(s)==len(vol_series):
L381                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L382             except Exception: pass
L383             df.loc[t,'ADV60_USD'] = adv60
L384
L385             # --- 売上/利益の加速度等 ---
L386             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L387             REV_ANNUAL_STREAK = np.nan
L388             try:
L389                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L390                 if qe is not None and not qe.empty:
L391                     if 'Revenue' in qe.columns:
L392                         rev = qe['Revenue'].dropna().astype(float)
L393                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L394                         if len(rev)>=6:
L395                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L396                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L397                         yoy_list=[]
L398                         for k in range(1,5):
L399                             if len(rev)>=4+k:
L400                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L401                                 if pd.notna(y): yoy_list.append(y)
L402                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L403                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L404                         try:
L405                             g = rev.groupby(rev.index.year)
L406                             ann_sum, cnt = g.sum(), g.count()
L407                             ann_sum = ann_sum[cnt >= 4]
L408                             if len(ann_sum) >= 3:
L409                                 yoy = ann_sum.pct_change().dropna()
L410                                 streak = 0
L411                                 for v in yoy.iloc[::-1]:
L412                                     if pd.isna(v) or v <= 0:
L413                                         break
L414                                     streak += 1
L415                                 REV_ANNUAL_STREAK = float(streak)
L416                         except Exception:
L417                             pass
L418                     if 'Earnings' in qe.columns and so:
L419                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L420                    
```