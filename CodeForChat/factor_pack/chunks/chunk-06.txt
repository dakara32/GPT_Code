```text
     try:
L191             bs = tk.quarterly_balance_sheet
L192             if bs is not None and not bs.empty:
L193                 c = bs.columns[0]
L194                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L195                     if k in bs.index: debt = float(bs.loc[k,c]); break
L196                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L197                     if k in bs.index: cash = float(bs.loc[k,c]); break
L198         except Exception: pass
L199         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L200         return np.nan
L201
L202     @staticmethod
L203     def dividend_status(ticker: str) -> str:
L204         t = yf.Ticker(ticker)
L205         try:
L206             if not t.dividends.empty: return "has"
L207         except Exception: return "unknown"
L208         try:
L209             a = t.actions
L210             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L211         except Exception: pass
L212         try:
L213             fi = t.fast_info
L214             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L215         except Exception: pass
L216         return "unknown"
L217
L218     @staticmethod
L219     def div_streak(t):
L220         try:
L221             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L222             years, streak = sorted(ann.index), 0
L223             for i in range(len(years)-1,0,-1):
L224                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L225                 else: break
L226             return streak
L227         except Exception: return 0
L228
L229     @staticmethod
L230     def fetch_finnhub_metrics(symbol):
L231         api_key = os.environ.get("FINNHUB_API_KEY")
L232         if not api_key: return {}
L233         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L234         try:
L235             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L236             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L237         except Exception: return {}
L238
L239     @staticmethod
L240     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L241         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L242         n = min(len(r), len(m), lookback)
L243         if n<60: return np.nan
L244         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L245         return np.nan if var==0 else cov/var
L246
L247     @staticmethod
L248     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L249                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L250         """
L251         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L252         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L253         """
L254         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L255         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L256         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L257         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L258         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L259
L260     @staticmethod
L261     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L262         """
L263         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L264         戻り値は降順ソート済み。
L265         """
L266         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L267         cnt, pen = {}, {}
L268         for t in order:
L269             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L270         return (s - pd.Series(pen)).sort_values(ascending=False)
L271
L272     @staticmethod
L273     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L274         """
L275         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L276         """
L277         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L278         if not hard:
L279             return list(eff.head(N).index)
L280         pick, used = [], {}
L281         for t in eff.index:
L282             s = sectors.get(t, "U")
L283             if used.get(s,0) < hard:
L284                 pick.append(t); used[s] = used.get(s,0) + 1
L285             if len(pick) == N: break
L286         return pick
L287
L288     @staticmethod
L289     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L290         """
L291         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L292         - px: 列=ticker（ベンチは含めない）
L293         - spx: ベンチマーク Series（px.index に整列）
L294         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L295         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L296         """
L297         import numpy as np, pandas as pd
L298         if px is None or px.empty:
L299             return pd.Series(dtype=int)
L300         px = px.dropna(how="all", axis=1)
L301         if win_days and win_days > 0:
L302             px = px.tail(win_days)
L303         if px.empty:
L304             return pd.Series(dtype=int)
L305         spx = spx.reindex(px.index).ffill()
L306
L307         ma50  = px.rolling(50).mean()
L308         ma150 = px.rolling(150).mean()
L309         ma200 = px.rolling(200).mean()
L310
L311         tt = (px > ma150)
L312         tt &= (px > ma200)
L313         tt &= (ma150 > ma200)
L314         tt &= (ma200 - ma200.shift(21) > 0)
L315         tt &= (ma50  > ma150)
L316         tt &= (ma50  > ma200)
L317         tt &= (px    > ma50)
L318
L319         lo252 = px.rolling(252).min()
L320         hi252 = px.rolling(252).max()
L321         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L322         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L323
L324         r12  = px.divide(px.shift(252)).sub(1.0)
L325         br12 = spx.divide(spx.shift(252)).sub(1.0)
L326         r1   = px.divide(px.shift(22)).sub(1.0)
L327         br1  = spx.divide(spx.shift(22)).sub(1.0)
L328         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L329         tt &= (rs >= 0.10)
L330
L331         return tt.fillna(False).sum(axis=1).astype(int)
L332
L333     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L334     def aggregate_scores(self, ib: Any, cfg):
L335         if cfg is None:
L336             raise ValueError("cfg is required; pass factor.PipelineConfig")
L337         self._validate_ib_for_scorer(ib)
L338
L339         px, spx, tickers = ib.px, ib.spx, ib.tickers
L340         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L341
L342         df, missing_logs = pd.DataFrame(index=tickers), []
L343         for t in tickers:
L344             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L345             # --- 基本特徴 ---
L346             df.loc[t,'TR']   = self.trend(s)
L347             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L348             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L349             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L350             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L351
L352             # --- 配当（欠損補完含む） ---
L353             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L354             if div is None or pd.isna(div):
L355                 try:
L356                     divs = yf.Ticker(t).dividends
L357                     if divs is not None and not divs.empty:
L358                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L359                         if last_close and last_close>0: div = float(div_1y/last_close)
L360                 except Exception: pass
L361             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L362
L363             # --- FCF/EV ---
L364             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L365             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L366
L367             # --- モメンタム・ボラ関連 ---
L368             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L369             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L370             n = int(min(len(r), len(rm)))
L371
L372             DOWNSIDE_DEV = np.nan
L373             if n>=60:
L374                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L375                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L376             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L377
L378             MDD_1Y = np.nan
L379             try:
L380                 w = s.iloc[-min(len(s),252):].dropna()
L381                 if len(w)>=30:
L382                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L383             except Exception: pass
L384             df.loc[t,'MDD_1Y'] = MDD_1Y
L385
L386             RESID_VOL = np.nan
L387             if n>=120:
L388                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L389                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L390                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L391                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L392             df.loc[t,'RESID_VOL'] = RESID_VOL
L393
L394             DOWN_OUTPERF = np.nan
L395             if n>=60:
L396                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L397                 if mask.sum()>=10:
L398                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L399                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L400             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L401
L402             # --- 長期移動平均/位置 ---
L403             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L404             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L405
L406             # --- 配当の詳細系 ---
L407             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L408             try:
L409                 divs = yf.Ticker(t).dividends.dropna()
L410                 if not divs.empty:
L411                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L412                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L413                     ann = divs.groupby(divs.index.year).sum()
L414                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L415                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L416                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L417                 so = d.get('sharesOutstanding',None)
L418                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L419                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L420             except Exception: pass
L421            
```