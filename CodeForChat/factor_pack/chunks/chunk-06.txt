```text
.nan
L189         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L190         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L191         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L192
L193     @staticmethod
L194     def tr_str(s):
L195         if s is None:
L196             return np.nan
L197         s = s.ffill(limit=2).dropna()
L198         if len(s) < 50:
L199             return np.nan
L200         ma50 = s.rolling(50, min_periods=50).mean()
L201         last_ma = ma50.iloc[-1]
L202         last_px = s.iloc[-1]
L203         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L204
L205     @staticmethod
L206     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L207         r = (s/b).dropna()
L208         if len(r) < win: return np.nan
L209         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L210         try: return float(np.polyfit(x, y, 1)[0])
L211         except Exception: return np.nan
L212
L213     @staticmethod
L214     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L215         ev = info_t.get('enterpriseValue', np.nan)
L216         if pd.notna(ev) and ev>0: return float(ev)
L217         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L218         try:
L219             bs = tk.quarterly_balance_sheet
L220             if bs is not None and not bs.empty:
L221                 c = bs.columns[0]
L222                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L223                     if k in bs.index: debt = float(bs.loc[k,c]); break
L224                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L225                     if k in bs.index: cash = float(bs.loc[k,c]); break
L226         except Exception: pass
L227         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L228         return np.nan
L229
L230     @staticmethod
L231     def dividend_status(ticker: str) -> str:
L232         t = yf.Ticker(ticker)
L233         try:
L234             if not t.dividends.empty: return "has"
L235         except Exception: return "unknown"
L236         try:
L237             a = t.actions
L238             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L239         except Exception: pass
L240         try:
L241             fi = t.fast_info
L242             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L243         except Exception: pass
L244         return "unknown"
L245
L246     @staticmethod
L247     def div_streak(t):
L248         try:
L249             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L250             years, streak = sorted(ann.index), 0
L251             for i in range(len(years)-1,0,-1):
L252                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L253                 else: break
L254             return streak
L255         except Exception: return 0
L256
L257     @staticmethod
L258     def fetch_finnhub_metrics(symbol):
L259         api_key = os.environ.get("FINNHUB_API_KEY")
L260         if not api_key: return {}
L261         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L262         try:
L263             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L264             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L265         except Exception: return {}
L266
L267     @staticmethod
L268     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L269         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L270         n = min(len(r), len(m), lookback)
L271         if n<60: return np.nan
L272         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L273         return np.nan if var==0 else cov/var
L274
L275     @staticmethod
L276     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L277                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L278         """
L279         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L280         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L281         """
L282         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L283         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L284         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L285         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L286         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L287
L288     @staticmethod
L289     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L290         """
L291         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L292         戻り値は降順ソート済み。
L293         """
L294         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L295         cnt, pen = {}, {}
L296         for t in order:
L297             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L298         return (s - pd.Series(pen)).sort_values(ascending=False)
L299
L300     @staticmethod
L301     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L302         """
L303         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L304         """
L305         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L306         if not hard:
L307             return list(eff.head(N).index)
L308         pick, used = [], {}
L309         for t in eff.index:
L310             s = sectors.get(t, "U")
L311             if used.get(s,0) < hard:
L312                 pick.append(t); used[s] = used.get(s,0) + 1
L313             if len(pick) == N: break
L314         return pick
L315
L316     @staticmethod
L317     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L318         """
L319         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L320         - px: 列=ticker（ベンチは含めない）
L321         - spx: ベンチマーク Series（px.index に整列）
L322         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L323         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L324         """
L325         import numpy as np, pandas as pd
L326         if px is None or px.empty:
L327             return pd.Series(dtype=int)
L328         px = px.dropna(how="all", axis=1)
L329         if win_days and win_days > 0:
L330             px = px.tail(win_days)
L331         if px.empty:
L332             return pd.Series(dtype=int)
L333         spx = spx.reindex(px.index).ffill()
L334
L335         ma50  = px.rolling(50).mean()
L336         ma150 = px.rolling(150).mean()
L337         ma200 = px.rolling(200).mean()
L338
L339         tt = (px > ma150)
L340         tt &= (px > ma200)
L341         tt &= (ma150 > ma200)
L342         tt &= (ma200 - ma200.shift(21) > 0)
L343         tt &= (ma50  > ma150)
L344         tt &= (ma50  > ma200)
L345         tt &= (px    > ma50)
L346
L347         lo252 = px.rolling(252).min()
L348         hi252 = px.rolling(252).max()
L349         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L350         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L351
L352         r12  = px.divide(px.shift(252)).sub(1.0)
L353         br12 = spx.divide(spx.shift(252)).sub(1.0)
L354         r1   = px.divide(px.shift(22)).sub(1.0)
L355         br1  = spx.divide(spx.shift(22)).sub(1.0)
L356         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L357         tt &= (rs >= 0.10)
L358
L359         return tt.fillna(False).sum(axis=1).astype(int)
L360
L361     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L362     def aggregate_scores(self, ib: Any, cfg):
L363         if cfg is None:
L364             raise ValueError("cfg is required; pass factor.PipelineConfig")
L365         self._validate_ib_for_scorer(ib)
L366
L367         px, spx, tickers = ib.px, ib.spx, ib.tickers
L368         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L369
L370         df, missing_logs = pd.DataFrame(index=tickers), []
L371         for t in tickers:
L372             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L373             # --- 基本特徴 ---
L374             df.loc[t,'TR']   = self.trend(s)
L375             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L376             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L377             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L378             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L379
L380             # --- 配当（欠損補完含む） ---
L381             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L382             if div is None or pd.isna(div):
L383                 try:
L384                     divs = yf.Ticker(t).dividends
L385                     if divs is not None and not divs.empty:
L386                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L387                         if last_close and last_close>0: div = float(div_1y/last_close)
L388                 except Exception: pass
L389             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L390
L391             # --- FCF/EV ---
L392             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L393             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L394
L395             # --- モメンタム・ボラ関連 ---
L396             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L397             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L398             n = int(min(len(r), len(rm)))
L399
L400             DOWNSIDE_DEV = np.nan
L401             if n>=60:
L402                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L403                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L404             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L405
L406             MDD_1Y = np.nan
L407             try:
L408                 w = s.iloc[-min(len(s),252):].dropna()
L409                 if len(w)>=30:
L410                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L411             except Exception: pass
L412             df.loc[t,'MDD_1Y'] = MDD_1Y
L413
L414             RESID_VOL = np.nan
L415             if n>=120:
L416                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L417                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L418                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L419                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L420             df.loc[t,'RESID_VOL'] = RESID_VOL
L421
L422             DOWN_OUTPERF = np.nan
L423             if n>=60:
L424                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L425                 if mask.sum()>=10:
L426                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L427                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!
```