```text
e": objG},
L1095         resD={"tickers": top_D, "avg_res_corr": avgD,
L1096               "sum_score": sumD, "objective": objD},
L1097         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1098
L1099     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1100     try:
L1101         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1102               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1103               .sort_values("G_plus_D")
L1104               .head(10)
L1105               .round(3))
L1106         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1107         _post_slack({"text": f"```{low_msg}```"})
L1108     except Exception as _e:
L1109         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1110
L1111     return sb
L1112
L1113 if __name__ == "__main__":
L1114     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #
L26 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L27 # =============================================================================
L28
L29 import os, sys, warnings
L30 import requests
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36
L37 if TYPE_CHECKING:
L38     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L39
L40 # ---- Dividend Helpers -------------------------------------------------------
L41 def _last_close(t, price_map=None):
L42     if price_map and (c := price_map.get(t)) is not None: return float(c)
L43     try:
L44         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L45         return float(h.iloc[-1]) if len(h) else np.nan
L46     except Exception:
L47         return np.nan
L48
L49 def _ttm_div_sum(t, lookback_days=400):
L50     try:
L51         div = yf.Ticker(t).dividends
L52         if div is None or len(div) == 0: return 0.0
L53         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L54         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L55         return ttm if ttm > 0 else float(div.tail(4).sum())
L56     except Exception:
L57         return 0.0
L58
L59 def ttm_div_yield_portfolio(tickers, price_map=None):
L60     ys = [(lambda c, s: (s/c) if (np.isfinite(c) and c>0 and s>0) else 0.0)(_last_close(t, price_map), _ttm_div_sum(t)) for t in tickers]
L61     return float(np.mean(ys)) if ys else 0.0
L62
L63 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L64 def winsorize_s(s: pd.Series, p=0.02):
L65     if s is None or s.dropna().empty: return s
L66     lo, hi = np.nanpercentile(s.astype(float), [100*p, 100*(1-p)]); return s.clip(lo, hi)
L67
L68 def robust_z(s: pd.Series, p=0.02):
L69     s2 = winsorize_s(s,p); return np.nan_to_num(zscore(s2.fillna(s2.mean())))
L70
L71 def robust_z_keepnan(s: pd.Series) -> pd.Series:
L72     """robust_z variant that preserves NaNs and falls back to rank-z when needed."""
L73     if s is None:
L74         return pd.Series(dtype=float)
L75     v = pd.to_numeric(s, errors="coerce")
L76     m = np.nanmedian(v)
L77     mad = np.nanmedian(np.abs(v - m))
L78     z = (v - m) / (1.4826 * mad + 1e-9)
L79     if np.nanstd(z) < 1e-9:
L80         r = v.rank(method="average", na_option="keep")
L81         z = (r - np.nanmean(r)) / (np.nanstd(r) + 1e-9)
L82     return pd.Series(z, index=v.index, dtype=float)
L83
L84 def _safe_div(a, b):
L85     try: return np.nan if (b is None or float(b)==0 or pd.isna(b)) else float(a)/float(b)
L86     except Exception: return np.nan
L87
L88 def _safe_last(series: pd.Series, default=np.nan):
L89     try: return float(series.iloc[-1])
L90     except Exception: return default
L91
L92 D_WEIGHTS_EFF = None  # 出力表示互換のため
L93
L94 # ---- Scorer 本体 -------------------------------------------------------------
L95 class Scorer:
L96     """
L97     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L98     - cfg は必須（factor.PipelineConfig を渡す）。
L99     - 旧カラム名を自動リネームして新スキーマに吸収します。
L100     """
L101
L102     # === 先頭で旧→新カラム名マップ（移行用） ===
L103     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L104     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L105
L106     # === スキーマ簡易チェック（最低限） ===
L107     @staticmethod
L108     def _validate_ib_for_scorer(ib: Any):
L109         miss = [a for a in ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"] if not hasattr(ib,a) or getattr(ib,a) is None]
L110         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L111         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L112         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L113         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L114         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L115         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L116
L117     # ----（Scorer専用）テクニカル・指標系 ----
L118     @staticmethod
L119     def trend(s: pd.Series):
L120         if len(s)<200: return np.nan
L121         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L122         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L123         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L124         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L125         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L126         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L127         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L128         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L129         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L130         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L131         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L132         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L133
L134     @staticmethod
L135     def rs(s, b):
L136         n, nb = len(s), len(b)
L137         if n<60 or nb<60: return np.nan
L138         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L139         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L140         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L141
L142     @staticmethod
L143     def tr_str(s):
L144         if s is None:
L145             return np.nan
L146         s = s.ffill(limit=2).dropna()
L147         if len(s) < 50:
L148             return np.nan
L149         ma50 = s.rolling(50, min_periods=50).mean()
L150         last_ma = ma50.iloc[-1]
L151         last_px = s.iloc[-1]
L152         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L153
L154     @staticmethod
L155     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L156         r = (s/b).dropna()
L157         if len(r) < win: return np.nan
L158         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L159         try: return float(np.polyfit(x, y, 1)[0])
L160         except Exception: return np.nan
L161
L162     @staticmethod
L163     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L164         ev = info_t.get('enterpriseValue', np.nan)
L165         if pd.notna(ev) and ev>0: return float(ev)
L166         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L167         try:
L168             bs = tk.quarterly_balance_sheet
L169             if bs is not None and not bs.empty:
L170                 c = bs.columns[0]
L171                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L172                     if k in bs.index: debt = float(bs.loc[k,c]); break
L173                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L174                     if k in bs.index: cash = float(bs.loc[k,c]); break
L175         except Exception: pass
L176         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L177         return np.nan
L178
L179     @staticmethod
L180     def dividend_status(ticker: str) -> str:
L181         t = yf.Ticker(ticker)
L182         try:
L183             if not t.dividends.empty: return "has"
L184         except Exception: return "unknown"
L185         try:
L186             a = t.actions
L187             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L188         except Exception: pass
L189         try:
L190             fi = t.fast_info
L191             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L192         except Exception: pass
L193         return "unknown"
L194
L195     @staticmethod
L196     def div_streak(t):
L197         try:
L198             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L199             years, streak = sorted(ann.index), 0
L200             for i in range(len(years)-1,0,-1):
L201                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L202                 else: break
L203             return streak
L204         except Exception: return 0
L205
L206     @staticmethod
L207     def fetch_finnhub_metrics(symbol):
L208         api_key = os.environ.get("FINNHUB_API_KEY")
L209         if not api_key: return {}
L210         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L211         try:
L212             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L213             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L214         except Exception: return {}
L215
L216     @staticmethod
L217     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L218         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L219         n = min(len(r), len(m), 
```