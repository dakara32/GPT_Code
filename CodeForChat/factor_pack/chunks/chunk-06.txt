```text
) if len(s)>=252 else s.max()
L132         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L133         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L134         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L135         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L136         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L137         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L138         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L139         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L140         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L141
L142     @staticmethod
L143     def rs(s, b):
L144         n, nb = len(s), len(b)
L145         if n<60 or nb<60: return np.nan
L146         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L147         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L148         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L149
L150     @staticmethod
L151     def tr_str(s):
L152         if len(s)<50: return np.nan
L153         return s.iloc[-1]/s.rolling(50).mean().iloc[-1] - 1
L154
L155     @staticmethod
L156     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L157         r = (s/b).dropna()
L158         if len(r)<win: return np.nan
L159         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L160         try: return float(np.polyfit(x, y, 1)[0])
L161         except Exception: return np.nan
L162
L163     @staticmethod
L164     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L165         ev = info_t.get('enterpriseValue', np.nan)
L166         if pd.notna(ev) and ev>0: return float(ev)
L167         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L168         try:
L169             bs = tk.quarterly_balance_sheet
L170             if bs is not None and not bs.empty:
L171                 c = bs.columns[0]
L172                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L173                     if k in bs.index: debt = float(bs.loc[k,c]); break
L174                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L175                     if k in bs.index: cash = float(bs.loc[k,c]); break
L176         except Exception: pass
L177         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L178         return np.nan
L179
L180     @staticmethod
L181     def dividend_status(ticker: str) -> str:
L182         t = yf.Ticker(ticker)
L183         try:
L184             if not t.dividends.empty: return "has"
L185         except Exception: return "unknown"
L186         try:
L187             a = t.actions
L188             if a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0: return "none_confident"
L189         except Exception: pass
L190         try:
L191             fi = t.fast_info
L192             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L193         except Exception: pass
L194         return "unknown"
L195
L196     @staticmethod
L197     def div_streak(t):
L198         try:
L199             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L200             years, streak = sorted(ann.index), 0
L201             for i in range(len(years)-1,0,-1):
L202                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L203                 else: break
L204             return streak
L205         except Exception: return 0
L206
L207     @staticmethod
L208     def fetch_finnhub_metrics(symbol):
L209         api_key = os.environ.get("FINNHUB_API_KEY")
L210         if not api_key: return {}
L211         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L212         try:
L213             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L214             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L215         except Exception: return {}
L216
L217     @staticmethod
L218     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L219         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L220         n = min(len(r), len(m), lookback)
L221         if n<60: return np.nan
L222         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L223         return np.nan if var==0 else cov/var
L224
L225     @staticmethod
L226     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L227                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L228         """
L229         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L230         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L231         """
L232         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L233         b50  = ((spx/ma50 - 1) + bands[0])/(2*bands[0])
L234         b200 = ((spx/ma200 - 1) + bands[1])/(2*bands[1])
L235         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L236         b = float(hist.iloc[-1])
L237         lo, mid = float(hist.quantile(q[0])), float(hist.quantile(q[1]))
L238         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L239
L240     @staticmethod
L241     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L242         """
L243         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L244         戻り値は降順ソート済み。
L245         """
L246         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L247         cnt, pen = {}, {}
L248         for t in order:
L249             sec = sectors.get(t, "U")
L250             k = cnt.get(sec, 0) + 1
L251             pen[t] = alpha * max(0, k - cap)
L252             cnt[sec] = k
L253         return (s - pd.Series(pen)).sort_values(ascending=False)
L254
L255     @staticmethod
L256     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L257         """
L258         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L259         """
L260         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L261         if not hard:
L262             return list(eff.head(N).index)
L263         pick, used = [], {}
L264         for t in eff.index:
L265             s = sectors.get(t, "U")
L266             if used.get(s, 0) < hard:
L267                 pick.append(t)
L268                 used[s] = used.get(s, 0) + 1
L269             if len(pick) == N:
L270                 break
L271         return pick
L272
L273     @staticmethod
L274     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L275         """
L276         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L277         - px: 列=ticker（ベンチは含めない）
L278         - spx: ベンチマーク Series（px.index に整列）
L279         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L280         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L281         """
L282         import numpy as np, pandas as pd
L283         if px is None or px.empty:
L284             return pd.Series(dtype=int)
L285         px = px.dropna(how="all", axis=1)
L286         if win_days and win_days > 0:
L287             px = px.tail(win_days)
L288         if px.empty:
L289             return pd.Series(dtype=int)
L290         spx = spx.reindex(px.index).ffill()
L291
L292         ma50  = px.rolling(50).mean()
L293         ma150 = px.rolling(150).mean()
L294         ma200 = px.rolling(200).mean()
L295
L296         tt = (px > ma150)
L297         tt &= (px > ma200)
L298         tt &= (ma150 > ma200)
L299         tt &= (ma200 - ma200.shift(21) > 0)
L300         tt &= (ma50  > ma150)
L301         tt &= (ma50  > ma200)
L302         tt &= (px    > ma50)
L303
L304         lo252 = px.rolling(252).min()
L305         hi252 = px.rolling(252).max()
L306         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L307         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L308
L309         r12  = px.divide(px.shift(252)).sub(1.0)
L310         br12 = spx.divide(spx.shift(252)).sub(1.0)
L311         r1   = px.divide(px.shift(22)).sub(1.0)
L312         br1  = spx.divide(spx.shift(22)).sub(1.0)
L313         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L314         tt &= (rs >= 0.10)
L315
L316         return tt.fillna(False).sum(axis=1).astype(int)
L317
L318     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L319     def aggregate_scores(self, ib: Any, cfg):
L320         if cfg is None:
L321             raise ValueError("cfg is required; pass factor.PipelineConfig")
L322         self._validate_ib_for_scorer(ib)
L323
L324         px, spx, tickers = ib.px, ib.spx, ib.tickers
L325         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L326
L327         df, missing_logs = pd.DataFrame(index=tickers), []
L328         for t in tickers:
L329             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L330             # --- 基本特徴 ---
L331             df.loc[t,'TR']   = self.trend(s)
L332             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L333             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L334             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L335             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L336
L337             # --- 配当（欠損補完含む） ---
L338             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L339             if div is None or pd.isna(div):
L340                 try:
L341                     divs = yf.Ticker(t).dividends
L342                     if divs is not None and not divs.empty:
L343                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L344                         if last_close and last_close>0: div = float(div_1y/last_close)
L345                 except Exception: pass
L346             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L347
L348             # --- FCF/EV ---
L349             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L350             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L351
L352             # --- モメンタム・ボラ関連 ---
L353             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L354             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L355             n = int(min(len(r), len(rm)))
L356
L357             DOWNSIDE_DEV = np.nan
L358             if n>=60:
L359                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L360                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L361             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L362
L363             MDD_1Y = np.nan
L364             try:
L365                 w = s.iloc[-min(len(s),252):].dropna()
L366                 if len(w)>=30:
L367                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L368             except Exception: pass
L369             df.loc[t,'MDD_1Y'] = MDD_1Y
L370
L371             RESID_VOL = np.nan
L372             if n>=120:
L373                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')

```