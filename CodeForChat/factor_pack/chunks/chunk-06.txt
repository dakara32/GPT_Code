```text
.ffill(limit=2)
L1147         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L1148         for name,ticks in portfolios.items():
L1149             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L1150             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L1151             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L1152             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L1153             if len(ticks)>=2:
L1154                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L1155                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L1156                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L1157             else: RAW_rho = RESID_rho = np.nan
L1158             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L1159         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L1160         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L1161         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L1162         def _fmt_row(s):
L1163             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L1164         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L1165         # === 追加: GSC+DSC が低い順 TOP10 ===
L1166         try:
L1167             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L1168             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L1169             all_scores = all_scores.dropna(subset=['G_plus_D'])
L1170             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L1171             print("Low Score Candidates (GSC+DSC bottom 10):")
L1172             print(self.low10_table.to_string())
L1173         except Exception as e:
L1174             print(f"[warn] low-score ranking failed: {e}")
L1175             self.low10_table = None
L1176         self.debug_text = ""
L1177         if debug_mode:
L1178             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L1179         else:
L1180             logger.debug(
L1181                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L1182                 debug_mode, True
L1183             )
L1184         self._debug_logged = True
L1185
L1186     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1187     def notify_slack(self):
L1188         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1189
L1190         if not SLACK_WEBHOOK_URL:
L1191             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1192             return
L1193
L1194         def _filter_suffix_from(spec: dict, group: str) -> str:
L1195             g = spec.get(group, {})
L1196             parts = [str(m) for m in g.get("pre_mask", [])]
L1197             for k, v in (g.get("pre_filter", {}) or {}).items():
L1198                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L1199                 name = {"beta": "β"}.get(base, base)
L1200                 try:
L1201                     val = f"{float(v):g}"
L1202                 except Exception:
L1203                     val = str(v)
L1204                 parts.append(f"{name}{op}{val}")
L1205             return "" if not parts else " / filter:" + " & ".join(parts)
L1206
L1207         def _inject_filter_suffix(title: str, group: str) -> str:
L1208             suf = _filter_suffix_from(FILTER_SPEC, group)
L1209             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1210
L1211         def _blk(title, tbl, fmt=None, drop=()):
L1212             if tbl is None or getattr(tbl, 'empty', False):
L1213                 return f"{title}\n(選定なし)\n"
L1214             if drop and hasattr(tbl, 'columns'):
L1215                 keep = [c for c in tbl.columns if c not in drop]
L1216                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1217             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1218
L1219         message = "📈 ファクター分散最適化の結果\n"
L1220         if self.miss_df is not None and not self.miss_df.empty:
L1221             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L1222         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1223         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1224         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L1225         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L1226
L1227         try:
L1228             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1229             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1230             if r is not None:
L1231                 r.raise_for_status()
L1232         except Exception as e:
L1233             print(f"[ERR] main_post_failed: {e}")
L1234
L1235 def _infer_g_universe(feature_df, selected12=None, near5=None):
L1236     try:
L1237         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1238         if out: return out
L1239     except Exception:
L1240         pass
L1241     base = set()
L1242     for lst in (selected12 or []), (near5 or []):
L1243         for x in (lst or []): base.add(x)
L1244     return list(base) if base else list(feature_df.index)
L1245
L1246 def _fmt_with_fire_mark(tickers, feature_df):
L1247     out = []
L1248     for t in tickers or []:
L1249         try:
L1250             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L1251             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L1252             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L1253         except Exception:
L1254             out.append(t)
L1255     return out
L1256
L1257 def _label_recent_event(t, feature_df):
L1258     try:
L1259         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L1260         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L1261         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L1262         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L1263         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L1264     except Exception:
L1265         pass
L1266     return t
L1267
L1268 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1269
L1270 def io_build_input_bundle() -> InputBundle:
L1271     """
L1272     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1273     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1274     """
L1275     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1276     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L1277
L1278 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1279               n_target: int) -> tuple[list, float, float, float]:
L1280     """
L1281     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1282     戻り値：(pick, avg_res_corr, sum_score, objective)
L1283     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1284     """
L1285     sc.cfg = cfg
L1286
L1287     if hasattr(sc, "score_build_features"):
L1288         feat = sc.score_build_features(inb)
L1289         if not hasattr(sc, "_feat_logged"):
L1290             T.log("features built (scorer)")
L1291             sc._feat_logged = True
L1292         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1293     else:
L1294         fb = sc.aggregate_scores(inb, cfg)
L1295         if not hasattr(sc, "_feat_logged"):
L1296             T.log("features built (scorer)")
L1297             sc._feat_logged = True
L1298         sc._feat = fb
L1299         agg = fb.g_score if group == "G" else fb.d_score_all
L1300         if group == "D" and hasattr(fb, "df"):
L1301             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L1302
L1303     if hasattr(sc, "filter_candidates"):
L1304         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1305
L1306     if isinstance(agg, pd.Series):
L1307         agg = _as_numeric_series(agg)
L1308
L1309     selector = Selector()
L1310     if hasattr(sc, "select_diversified"):
L1311         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1312             selector=selector, prev_tickers=None,
L1313             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1314             cross_mu=cfg.drrs.cross_mu_gd)
L1315     else:
L1316         if group == "G":
L1317             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1318             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1319                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1320                 lam=cfg.drrs.G.get("lam", 0.68),
L1321                 lookback=cfg.drrs.G.get("lookback", 252),
L1322                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1323         else:
L1324             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1325             g_fixed = getattr(sc, "_top_G", None)
L1326             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1327                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1328                 lam=cfg.drrs.D.get("lam", 0.85),
L1329                 lookback=cfg.drrs.D.get("lookback", 504),
L1330                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1331                 mu=cfg.drrs.cross_mu_gd)
L1332         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1333         sum_sc = res["sum_score"]; obj = res["objective"]
L1334         if group == "D":
L1335             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1336             T.log("selection finalized (G/D)")
L1337     try:
L1338         inc = [t for t in exist if t in agg.index]
L1339         pick = _sticky_keep_current(
L1340             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1341             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1342         )
L1343     except Exception as _e:
L1344         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1345     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1346     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1347     try:
L1348         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1349         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1350         setattr(sc, f"_near_{group}", near10)
L1351         setattr(sc, f"_agg_{group}", agg)
L1352     except Exception:
L1353         pass
L1354
L1355     if group == 
```