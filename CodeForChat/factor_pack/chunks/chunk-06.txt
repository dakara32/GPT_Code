```text
staticmethod
L1238     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L1239         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1240         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L1241
L1242     @classmethod
L1243     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L1244         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L1245         while improved and passes<max_pass:
L1246             improved, passes = False, passes+1
L1247             for i,out in enumerate(list(S)):
L1248                 for inn in range(len(score)):
L1249                     if inn in S: continue
L1250                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L1251                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1252                 if improved: break
L1253         return S, best
L1254
L1255     @staticmethod
L1256     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L1257         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1258         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L1259         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L1260         return float(s[idx].sum() - lam*within - mu*cross)
L1261
L1262     @classmethod
L1263     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L1264         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L1265         while improved and passes<max_pass:
L1266             improved, passes = False, passes+1
L1267             for i,out in enumerate(list(S)):
L1268                 for inn in range(N):
L1269                     if inn in S: continue
L1270                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L1271                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1272                 if improved: break
L1273         return S, best
L1274
L1275     @staticmethod
L1276     def avg_corr(C: np.ndarray, idx) -> float:
L1277         k = len(idx); P = C[np.ix_(idx, idx)]
L1278         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L1279
L1280     @classmethod
L1281     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L1282         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L1283         union = [t for t in pool_tickers if t in returns_df.columns]
L1284         for t in g_fixed:
L1285             if t not in union: union.append(t)
L1286         Rdf_all = returns_df[union]
L1287         Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all) >= lookback else Rdf_all
L1288         _thresh = max(1, int(0.8 * len(Rdf_all)))
L1289         Rdf_all = Rdf_all.dropna(axis=1, thresh=_thresh)
L1290         Rdf_all = Rdf_all.dropna()
L1291         pool_eff, g_eff = (
L1292             [t for t in pool_tickers if t in Rdf_all.columns],
L1293             [t for t in g_fixed if t in Rdf_all.columns],
L1294         )
L1295         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L1296         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L1297         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L1298         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L1299         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L1300         if len(g_eff)>0 and mu>0.0:
L1301             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L1302         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L1303         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L1304         selected_tickers = [pool_eff[i] for i in S]
L1305         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L1306
L1307     # ---- 選定（スコア Series / returns だけを受ける）----
L1308 # === Output：出力整形と送信（表示・Slack） ===
L1309 class Output:
L1310
L1311     def __init__(self, debug=None):
L1312         # self.debug は使わない（互換のため引数は受けるが無視）
L1313         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L1314         self.g_title = self.d_title = ""
L1315         self.g_formatters = self.d_formatters = {}
L1316         # 低スコア（GSC+DSC）Top10 表示/送信用
L1317         self.low10_table = None
L1318         self.debug_text = ""   # デバッグ用本文はここに一本化
L1319         self._debug_logged = False
L1320         self._miss_disp_info: Tuple[pd.DataFrame, bool, int] | None = None
L1321
L1322     @staticmethod
L1323     def _prepare_missing_display(df: pd.DataFrame | None) -> Tuple[pd.DataFrame, bool, int]:
L1324         if df is None or df.empty:
L1325             return pd.DataFrame(), False, 0
L1326         work = df.copy()
L1327         if 'ticker' not in work.columns:
L1328             work = work.reset_index()
L1329             if 'ticker' not in work.columns and 'index' in work.columns:
L1330                 work = work.rename(columns={'index': 'ticker'})
L1331         bool_cols = [c for c in ['EPS_missing', 'REV_missing'] if c in work.columns]
L1332         if bool_cols:
L1333             work = work.loc[work[bool_cols].any(axis=1)]
L1334         if work.empty:
L1335             return pd.DataFrame(columns=work.columns), False, 0
L1336         cols_order = [
L1337             col for col in [
L1338                 'ticker',
L1339                 'EPS_missing',
L1340                 'REV_missing',
L1341                 'eps_imputed',
L1342                 'EPS_TTM',
L1343                 'EPS_Q_LastQ',
L1344                 'EPS_A_LATEST',
L1345                 'REV_TTM',
L1346                 'REV_Q_LastQ',
L1347                 'REV_A_LATEST',
L1348             ]
L1349             if col in work.columns
L1350         ]
L1351         if cols_order:
L1352             work = work.loc[:, cols_order]
L1353         total = len(work)
L1354         truncated = False
L1355         if total > 50:
L1356             work = work.head(20)
L1357             truncated = True
L1358         return work, truncated, total
L1359
L1360     # --- 表示（元 display_results のロジックそのまま） ---
L1361     def display_results(self, *, exist, bench, df_z, g_score, d_score_all,
L1362                         init_G, init_D, top_G, top_D, **kwargs):
L1363         logger.info("📌 reached display_results")
L1364         pd.set_option('display.float_format','{:.3f}'.format)
L1365         print("📈 ファクター分散最適化の結果")
L1366         miss_df, truncated, total = self._prepare_missing_display(self.miss_df)
L1367         self._miss_disp_info = (miss_df, truncated, total)
L1368         lines = compact_missing_lines(miss_df)
L1369         if lines:
L1370             txt = "Missing Data:\n```" + "\n".join(lines) + "```"
L1371             if truncated:
L1372                 txt += f"\n...省略 ({total}件中 上位20件のみ表示)"
L1373             print(txt)
L1374
L1375         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L1376         try:
L1377             sc = getattr(self, "_sc", None)
L1378             agg_G = getattr(sc, "_agg_G", None)
L1379             agg_D = getattr(sc, "_agg_D", None)
L1380         except Exception:
L1381             sc = agg_G = agg_D = None
L1382         class _SeriesProxy:
L1383             __slots__ = ("primary", "fallback")
L1384             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L1385             def get(self, key, default=None):
L1386                 try:
L1387                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L1388                 except Exception:
L1389                     v = None
L1390                 if v is not None and not (isinstance(v, float) and v != v):
L1391                     return v
L1392                 try:
L1393                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L1394                 except Exception:
L1395                     return default
L1396         g_score = _SeriesProxy(agg_G, g_score)
L1397         d_score_all = _SeriesProxy(agg_D, d_score_all)
L1398         near_G = getattr(sc, "_near_G", []) if sc else []
L1399         near_D = getattr(sc, "_near_D", []) if sc else []
L1400
L1401         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L1402         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L1403         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L1404         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L1405         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L1406         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L1407                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L1408         if near_G:
L1409             add = [t for t in near_G if t not in set(G_UNI)][:10]
L1410             if len(add) < 10:
L1411                 try:
L1412                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1413                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L1414                     used = set(G_UNI + add)
L1415                     def _push(lst):
L1416                         nonlocal add, used
L1417                         for t in lst:
L1418                             if len(add) == 10: break
L1419                             if t in aggG.index and t not in used:
L1420                                 add.append(t); used.add(t)
L1421                     _push(out_now)           # ① 今回 OUT を優先
L1422                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L1423                 except Exception:
L1424                     pass
L1425             if add:
L1426                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L1427                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L1428         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L1429
L1430         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L1431         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L1432         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L1433         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L1434         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L1435         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L1436         import scorer
L1437         dw_eff = scorer.D_WEIGHTS_EFF
L1438         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L1
```