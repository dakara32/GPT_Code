```text
ump_dfz(df_z: pd.DataFrame, debug_mode: bool, max_rows: int = 400, ndigits: int = 3) -> None:
L89     """df_z を System log(INFO) へダンプする簡潔なユーティリティ."""
L90     if not debug_mode:
L91         return
L92     try:
L93         view = df_z.copy()
L94         view = view.apply(
L95             lambda s: s.round(ndigits)
L96             if getattr(getattr(s, "dtype", None), "kind", "") in ("f", "i")
L97             else s
L98         )
L99         if len(view) > max_rows:
L100             view = view.iloc[:max_rows]
L101
L102         # === NaNサマリ（列ごとの欠損件数 上位20） ===
L103         try:
L104             nan_counts = df_z.isna().sum().sort_values(ascending=False)
L105             top_nan = nan_counts[nan_counts > 0].head(20)
L106             if len(top_nan) > 0:
L107                 logger.info("NaN columns (top20):\n%s", top_nan.to_string())
L108             else:
L109                 logger.info("NaN columns: none")
L110         except Exception as exc:
L111             logger.warning("nan summary failed: %s", exc)
L112
L113         # === Zeroサマリ（列ごとのゼロ比率 上位20） ===
L114         try:
L115             zero_counts = ((df_z == 0) & (~df_z.isna())).sum()
L116             nonnull_counts = (~df_z.isna()).sum()
L117             zero_ratio = (zero_counts / nonnull_counts).sort_values(ascending=False)
L118             top_zero = zero_ratio[zero_ratio > 0].head(20)
L119             if len(top_zero) > 0:
L120                 logger.info(
L121                     "Zero-dominated columns (top20):\n%s",
L122                     top_zero.to_string(float_format=lambda x: f"{x:.2%}"),
L123                 )
L124             else:
L125                 logger.info("Zero-dominated columns: none")
L126         except Exception as exc:
L127             logger.warning("zero summary failed: %s", exc)
L128
L129         logger.info("===== DF_Z DUMP START =====")
L130         logger.info("\n%s", view.to_string(max_rows=None, max_cols=None))
L131         logger.info("===== DF_Z DUMP END =====")
L132     except Exception as exc:
L133         logger.warning("df_z dump failed: %s", exc)
L134
L135 def _safe_div(a, b):
L136     try: return np.nan if (b is None or float(b)==0 or pd.isna(b)) else float(a)/float(b)
L137     except Exception: return np.nan
L138
L139 def _safe_last(series: pd.Series, default=np.nan):
L140     try: return float(series.iloc[-1])
L141     except Exception: return default
L142
L143 D_WEIGHTS_EFF = None  # 出力表示互換のため
L144
L145 # ---- Scorer 本体 -------------------------------------------------------------
L146 class Scorer:
L147     """
L148     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L149     - cfg は必須（factor.PipelineConfig を渡す）。
L150     - 旧カラム名を自動リネームして新スキーマに吸収します。
L151     """
L152
L153     # === 先頭で旧→新カラム名マップ（移行用） ===
L154     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L155     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L156
L157     # === スキーマ簡易チェック（最低限） ===
L158     @staticmethod
L159     def _validate_ib_for_scorer(ib: Any):
L160         miss = [a for a in ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"] if not hasattr(ib,a) or getattr(ib,a) is None]
L161         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L162         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L163         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L164         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L165         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L166         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L167
L168     # ----（Scorer専用）テクニカル・指標系 ----
L169     @staticmethod
L170     def trend(s: pd.Series):
L171         if len(s)<200: return np.nan
L172         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L173         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L174         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L175         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L176         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L177         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L178         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L179         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L180         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L181         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L182         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L183         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L184
L185     @staticmethod
L186     def rs(s, b):
L187         n, nb = len(s), len(b)
L188         if n<60 or nb<60: return np.nan
L189         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L190         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L191         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L192
L193     @staticmethod
L194     def tr_str(s):
L195         if s is None:
L196             return np.nan
L197         s = s.ffill(limit=2).dropna()
L198         if len(s) < 50:
L199             return np.nan
L200         ma50 = s.rolling(50, min_periods=50).mean()
L201         last_ma = ma50.iloc[-1]
L202         last_px = s.iloc[-1]
L203         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L204
L205     @staticmethod
L206     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L207         r = (s/b).dropna()
L208         if len(r) < win: return np.nan
L209         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L210         try: return float(np.polyfit(x, y, 1)[0])
L211         except Exception: return np.nan
L212
L213     @staticmethod
L214     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L215         ev = info_t.get('enterpriseValue', np.nan)
L216         if pd.notna(ev) and ev>0: return float(ev)
L217         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L218         try:
L219             bs = tk.quarterly_balance_sheet
L220             if bs is not None and not bs.empty:
L221                 c = bs.columns[0]
L222                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L223                     if k in bs.index: debt = float(bs.loc[k,c]); break
L224                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L225                     if k in bs.index: cash = float(bs.loc[k,c]); break
L226         except Exception: pass
L227         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L228         return np.nan
L229
L230     @staticmethod
L231     def dividend_status(ticker: str) -> str:
L232         t = yf.Ticker(ticker)
L233         try:
L234             if not t.dividends.empty: return "has"
L235         except Exception: return "unknown"
L236         try:
L237             a = t.actions
L238             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L239         except Exception: pass
L240         try:
L241             fi = t.fast_info
L242             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L243         except Exception: pass
L244         return "unknown"
L245
L246     @staticmethod
L247     def div_streak(t):
L248         try:
L249             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L250             years, streak = sorted(ann.index), 0
L251             for i in range(len(years)-1,0,-1):
L252                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L253                 else: break
L254             return streak
L255         except Exception: return 0
L256
L257     @staticmethod
L258     def fetch_finnhub_metrics(symbol):
L259         api_key = os.environ.get("FINNHUB_API_KEY")
L260         if not api_key: return {}
L261         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L262         try:
L263             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L264             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L265         except Exception: return {}
L266
L267     @staticmethod
L268     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L269         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L270         n = min(len(r), len(m), lookback)
L271         if n<60: return np.nan
L272         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L273         return np.nan if var==0 else cov/var
L274
L275     @staticmethod
L276     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L277                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L278         """
L279         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L280         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L281         """
L282         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L283         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L284         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L285         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L286         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L287
L288     @staticmethod
L289     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L290         """
L291         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L292         戻り値は降順ソート済み。
L293         """
L294         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L295         cnt, pen = {}, {}
L296         for t in order:
L297             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L298         return (s - pd.Series(pen)).sort_values(ascending=False)
L299
L300     @staticmethod
L301     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L302         """
L303         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L304         """
L305         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L306         if not hard:
L307             return list(eff.head(N).index)
L308         pick, used = [], {}
L309         for t in eff.index:
L310             s = sectors.get(t, "U")
L311             if used.get(s,0) < hard:
L312                 pick.append(t); used[s] = used.get(s,0) + 1
L313             if len(pick) == N: break
L314         return pick
L315
L316     @staticmethod
L317     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L318         """
L319         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L320         - px: 列=ticker（ベンチは含めない
```