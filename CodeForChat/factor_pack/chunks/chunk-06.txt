```text
    S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L1240         for _ in range(k):
L1241             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L1242             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L1243             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L1244         return sorted(S)
L1245
L1246     @staticmethod
L1247     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L1248         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1249         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L1250
L1251     @classmethod
L1252     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L1253         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L1254         while improved and passes<max_pass:
L1255             improved, passes = False, passes+1
L1256             for i,out in enumerate(list(S)):
L1257                 for inn in range(len(score)):
L1258                     if inn in S: continue
L1259                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L1260                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1261                 if improved: break
L1262         return S, best
L1263
L1264     @staticmethod
L1265     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L1266         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1267         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L1268         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L1269         return float(s[idx].sum() - lam*within - mu*cross)
L1270
L1271     @classmethod
L1272     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L1273         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L1274         while improved and passes<max_pass:
L1275             improved, passes = False, passes+1
L1276             for i,out in enumerate(list(S)):
L1277                 for inn in range(N):
L1278                     if inn in S: continue
L1279                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L1280                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1281                 if improved: break
L1282         return S, best
L1283
L1284     @staticmethod
L1285     def avg_corr(C: np.ndarray, idx) -> float:
L1286         k = len(idx); P = C[np.ix_(idx, idx)]
L1287         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L1288
L1289     @classmethod
L1290     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L1291         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L1292         union = [t for t in pool_tickers if t in returns_df.columns]
L1293         for t in g_fixed:
L1294             if t not in union: union.append(t)
L1295         Rdf_all = returns_df[union]
L1296         Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all) >= lookback else Rdf_all
L1297         _thresh = max(1, int(0.8 * len(Rdf_all)))
L1298         Rdf_all = Rdf_all.dropna(axis=1, thresh=_thresh)
L1299         Rdf_all = Rdf_all.dropna()
L1300         pool_eff, g_eff = (
L1301             [t for t in pool_tickers if t in Rdf_all.columns],
L1302             [t for t in g_fixed if t in Rdf_all.columns],
L1303         )
L1304         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L1305         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L1306         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L1307         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L1308         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L1309         if len(g_eff)>0 and mu>0.0:
L1310             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L1311         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L1312         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L1313         selected_tickers = [pool_eff[i] for i in S]
L1314         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L1315
L1316     # ---- 選定（スコア Series / returns だけを受ける）----
L1317 # === Output：出力整形と送信（表示・Slack） ===
L1318 class Output:
L1319
L1320     def __init__(self, debug=None):
L1321         # self.debug は使わない（互換のため引数は受けるが無視）
L1322         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L1323         self.g_title = self.d_title = ""
L1324         self.g_formatters = self.d_formatters = {}
L1325         # 低スコア（GSC+DSC）Top10 表示/送信用
L1326         self.low10_table = None
L1327         self.debug_text = ""   # デバッグ用本文はここに一本化
L1328         self._debug_logged = False
L1329         self._miss_disp_info: Tuple[pd.DataFrame, bool, int] | None = None
L1330
L1331     @staticmethod
L1332     def _prepare_missing_display(df: pd.DataFrame | None) -> Tuple[pd.DataFrame, bool, int]:
L1333         if df is None or df.empty:
L1334             return pd.DataFrame(), False, 0
L1335         work = df.copy()
L1336         if 'ticker' not in work.columns:
L1337             work = work.reset_index()
L1338             if 'ticker' not in work.columns and 'index' in work.columns:
L1339                 work = work.rename(columns={'index': 'ticker'})
L1340         bool_cols = [c for c in ['EPS_missing', 'REV_missing'] if c in work.columns]
L1341         if bool_cols:
L1342             work = work.loc[work[bool_cols].any(axis=1)]
L1343         if work.empty:
L1344             return pd.DataFrame(columns=work.columns), False, 0
L1345         cols_order = [
L1346             col for col in [
L1347                 'ticker',
L1348                 'EPS_missing',
L1349                 'REV_missing',
L1350                 'eps_imputed',
L1351                 'EPS_TTM',
L1352                 'EPS_Q_LastQ',
L1353                 'EPS_A_LATEST',
L1354                 'REV_TTM',
L1355                 'REV_Q_LastQ',
L1356                 'REV_A_LATEST',
L1357             ]
L1358             if col in work.columns
L1359         ]
L1360         if cols_order:
L1361             work = work.loc[:, cols_order]
L1362         total = len(work)
L1363         truncated = False
L1364         if total > 50:
L1365             work = work.head(20)
L1366             truncated = True
L1367         return work, truncated, total
L1368
L1369     # --- 表示（元 display_results のロジックそのまま） ---
L1370     def display_results(self, *, exist, bench, df_raw=None, df_z, g_score, d_score_all,
L1371                         init_G, init_D, top_G, top_D, **kwargs):
L1372         logger.info("📌 reached display_results")
L1373         pd.set_option('display.float_format','{:.3f}'.format)
L1374         print("📈 ファクター分散最適化の結果")
L1375         miss_df, truncated, total = self._prepare_missing_display(self.miss_df)
L1376         self._miss_disp_info = (miss_df, truncated, total)
L1377         lines = compact_missing_lines(miss_df)
L1378         if lines:
L1379             txt = "Missing Data:\n```" + "\n".join(lines) + "```"
L1380             if truncated:
L1381                 txt += f"\n...省略 ({total}件中 上位20件のみ表示)"
L1382             print(txt)
L1383
L1384         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L1385         try:
L1386             sc = getattr(self, "_sc", None)
L1387             agg_G = getattr(sc, "_agg_G", None)
L1388             agg_D = getattr(sc, "_agg_D", None)
L1389         except Exception:
L1390             sc = agg_G = agg_D = None
L1391         beta_raw_series = pd.Series(dtype=float)
L1392         beta_z_series = pd.Series(dtype=float)
L1393         try:
L1394             if df_raw is not None and hasattr(df_raw, "columns") and 'BETA' in df_raw.columns:
L1395                 beta_raw_series = df_raw['BETA'].astype(float)
L1396                 beta_z_series = _zscore_series(beta_raw_series)
L1397         except Exception:
L1398             beta_raw_series = pd.Series(dtype=float)
L1399             beta_z_series = pd.Series(dtype=float)
L1400         class _SeriesProxy:
L1401             __slots__ = ("primary", "fallback")
L1402             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L1403             def get(self, key, default=None):
L1404                 try:
L1405                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L1406                 except Exception:
L1407                     v = None
L1408                 if v is not None and not (isinstance(v, float) and v != v):
L1409                     return v
L1410                 try:
L1411                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L1412                 except Exception:
L1413                     return default
L1414         g_score = _SeriesProxy(agg_G, g_score)
L1415         d_score_all = _SeriesProxy(agg_D, d_score_all)
L1416         near_G = getattr(sc, "_near_G", []) if sc else []
L1417         near_D = getattr(sc, "_near_D", []) if sc else []
L1418
L1419         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L1420         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L1421         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L1422         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L1423         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L1424         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L1425                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L1426         if near_G:
L1427             add = [t for t in near_G if t not in set(G_UNI)][:10]
L1428             if len(add) < 10:
L1429                 try:
L1430                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1431                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L1432                     used = set(G_UNI + add)
L1433                     def _push(lst):
L1434                         nonlocal add, used
L1435                         for t in lst:
L1436                             if len(add) == 10: break
L1437                             if t in aggG.index and t not in used:
L1438                                 add.append(t); used.add(t)
L1439                     _push(out_now)           # ① 今回 OUT を優先
L1440                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L1441                 except Exception:
L1442                     pass
L1443             if add:
L1444                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L1445                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L1446 
```