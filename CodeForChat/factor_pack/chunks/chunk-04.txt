```text

L680             sc = agg_G = agg_D = None
L681         class _SeriesProxy:
L682             __slots__ = ("primary", "fallback")
L683             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L684             def get(self, key, default=None):
L685                 try:
L686                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L687                     if v is not None and not (isinstance(v, float) and v != v):
L688                         return v
L689                 except Exception:
L690                     pass
L691                 try:
L692                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L693                 except Exception:
L694                     return default
L695         g_score = _SeriesProxy(agg_G, g_score)
L696         d_score_all = _SeriesProxy(agg_D, d_score_all)
L697         near_G = getattr(sc, "_near_G", []) if sc else []
L698         near_D = getattr(sc, "_near_D", []) if sc else []
L699
L700         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L701         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L702         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L703         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L704         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L705         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L706                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L707         if near_G:
L708             add = [t for t in near_G if t not in set(G_UNI)][:10]
L709             if len(add) < 10:
L710                 try:
L711                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L712                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L713                     used = set(G_UNI + add)
L714                     def _push(lst):
L715                         nonlocal add, used
L716                         for t in lst:
L717                             if len(add) == 10: break
L718                             if t in aggG.index and t not in used:
L719                                 add.append(t); used.add(t)
L720                     _push(out_now)           # ① 今回 OUT を優先
L721                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L722                 except Exception:
L723                     pass
L724             if add:
L725                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L726                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L727         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L728
L729         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L730         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L731         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L732         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L733         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L734         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L735         import scorer
L736         dw_eff = scorer.D_WEIGHTS_EFF
L737         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L738                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L739         if near_D:
L740             add = [t for t in near_D if t not in set(D_UNI)][:10]
L741             if add:
L742                 d_disp2 = pd.DataFrame(index=add)
L743                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L744                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L745                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L746         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L747
L748         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L749         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L750         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L751
L752         self.io_table = pd.DataFrame({
L753             'IN': pd.Series(in_list),
L754             '/ OUT': pd.Series(out_list)
L755         })
L756         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L757         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L758         self.io_table['GSC'] = pd.Series(g_list)
L759         self.io_table['DSC'] = pd.Series(d_list)
L760
L761         print("Changes:")
L762         print(self.io_table.to_string(index=False))
L763
L764         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L765         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L766         for name,ticks in portfolios.items():
L767             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L768             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L769             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L770             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L771             if len(ticks)>=2:
L772                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L773                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L774                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L775             else: RAW_rho = RESID_rho = np.nan
L776             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L777         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L778         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L779         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L780         def _fmt_row(s):
L781             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L782         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L783         # === 追加: GSC+DSC が低い順 TOP10 ===
L784         try:
L785             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L786             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L787             all_scores = all_scores.dropna(subset=['G_plus_D'])
L788             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L789             print("Low Score Candidates (GSC+DSC bottom 10):")
L790             print(self.low10_table.to_string())
L791         except Exception as e:
L792             print(f"[warn] low-score ranking failed: {e}")
L793             self.low10_table = None
L794         self.debug_text = ""
L795         if debug_mode:
L796             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L797         else:
L798             logger.debug(
L799                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L800                 debug_mode, True
L801             )
L802         self._debug_logged = True
L803
L804     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L805     def notify_slack(self):
L806         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L807
L808         if not SLACK_WEBHOOK_URL:
L809             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L810             return
L811
L812         def _filter_suffix_from(spec: dict, group: str) -> str:
L813             g = spec.get(group, {})
L814             parts = [str(m) for m in g.get("pre_mask", [])]
L815             for k, v in (g.get("pre_filter", {}) or {}).items():
L816                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L817                 name = {"beta": "β"}.get(base, base)
L818                 try:
L819                     val = f"{float(v):g}"
L820                 except Exception:
L821                     val = str(v)
L822                 parts.append(f"{name}{op}{val}")
L823             return "" if not parts else " / filter:" + " & ".join(parts)
L824
L825         def _inject_filter_suffix(title: str, group: str) -> str:
L826             suf = _filter_suffix_from(FILTER_SPEC, group)
L827             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L828
L829         def _blk(title, tbl, fmt=None, drop=()):
L830             if tbl is None or getattr(tbl, 'empty', False):
L831                 return f"{title}\n(選定なし)\n"
L832             if drop and hasattr(tbl, 'columns'):
L833                 keep = [c for c in tbl.columns if c not in drop]
L834                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L835             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L836
L837         message = "📈 ファクター分散最適化の結果\n"
L838         if self.miss_df is not None and not self.miss_df.empty:
L839             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L840         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L841         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L842         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L843         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L844
L845         try:
L846             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L847             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L848             if r is not None:
L849                 r.raise_for_status()
L850         except Exception as e:
L851             print(f"[ERR] main_post_failed: {e}")
L852
L853 def _infer_g_universe(feature_df, selected12=None, near5=None):
L854     try:
L855         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L856         if out: return out
L857     except Exception:
L858         pass
L859     base = set()
L860     for lst in (selected12 or []), (near5 or []):
L861         for x in (lst or []): base.add(x)
L862     return list(base) if base else list(feature_d
```