```text
{t: g_score.get(t) for t in G_UNI}, name='GSC')
L664         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L665         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L666         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L667         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L668                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L669         if near_G:
L670             add = [t for t in near_G if t not in set(G_UNI)][:10]
L671             if len(add) < 10:
L672                 try:
L673                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L674                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L675                     used = set(G_UNI + add)
L676                     def _push(lst):
L677                         nonlocal add, used
L678                         for t in lst:
L679                             if len(add) == 10: break
L680                             if t in aggG.index and t not in used:
L681                                 add.append(t); used.add(t)
L682                     _push(out_now)           # ① 今回 OUT を優先
L683                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L684                 except Exception:
L685                     pass
L686             if add:
L687                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L688                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L689         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L690
L691         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L692         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L693         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L694         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L695         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L696         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L697         import scorer
L698         dw_eff = scorer.D_WEIGHTS_EFF
L699         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L700                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L701         if near_D:
L702             add = [t for t in near_D if t not in set(D_UNI)][:10]
L703             if add:
L704                 d_disp2 = pd.DataFrame(index=add)
L705                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L706                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L707                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L708         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L709
L710         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L711         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L712         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L713
L714         self.io_table = pd.DataFrame({
L715             'IN': pd.Series(in_list),
L716             '/ OUT': pd.Series(out_list)
L717         })
L718         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L719         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L720         self.io_table['GSC'] = pd.Series(g_list)
L721         self.io_table['DSC'] = pd.Series(d_list)
L722
L723         print("Changes:")
L724         print(self.io_table.to_string(index=False))
L725
L726         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L727         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L728         for name,ticks in portfolios.items():
L729             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L730             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L731             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L732             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L733             if len(ticks)>=2:
L734                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L735                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L736                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L737             else: RAW_rho = RESID_rho = np.nan
L738             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L739         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L740         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L741         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L742         def _fmt_row(s):
L743             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L744         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L745         # === 追加: GSC+DSC が低い順 TOP10 ===
L746         try:
L747             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L748             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L749             all_scores = all_scores.dropna(subset=['G_plus_D'])
L750             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L751             print("Low Score Candidates (GSC+DSC bottom 10):")
L752             print(self.low10_table.to_string())
L753         except Exception as e:
L754             print(f"[warn] low-score ranking failed: {e}")
L755             self.low10_table = None
L756         # --- ここから: デバッグ出力は _compact_debug で一本化（表示経路もSlack経路もこれだけ）---
L757         if debug_mode:
L758             from types import SimpleNamespace
L759             df_full_src    = getattr(getattr(self, "_sc", None), "_feat", None)
L760             df_full        = getattr(df_full_src, "df_full", None) or kwargs.get("df_full")
L761             df_full_z_pass = getattr(df_full_src, "df_full_z", None) or kwargs.get("df_full_z")
L762             fb_like = SimpleNamespace(
L763                 df_full=df_full,
L764                 df_z=df_z,
L765                 df_full_z=df_full_z_pass,
L766                 g_score=g_score,
L767                 d_score_all=d_score_all,
L768                 missing_logs=self.miss_df,
L769             )
L770             sb_like = SimpleNamespace(top_G=top_G, top_D=top_D)
L771             self.debug_text = _compact_debug(
L772                 fb_like,
L773                 sb_like,
L774                 prevG=kwargs.get("prev_G", exist),
L775                 prevD=kwargs.get("prev_D", exist),
L776                 max_rows=int(os.getenv("DEBUG_MAX_ROWS", "140")),
L777             )
L778             if not (self.debug_text or "").strip():
L779                 self.debug_text = "(no debug info generated)"
L780             print(f"[DBG] debug_mode={debug_mode}  debug_len={len(self.debug_text or '')}  low10={self.low10_table is not None}")
L781         else:
L782             self.debug_text = ""
L783         # Slack側で分割送信するためコンソールには出力しない
L784         # if debug_mode and self.debug_text:
L785         #     print(self.debug_text)
L786
L787     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L788     def notify_slack(self):
L789         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L790         if not SLACK_WEBHOOK_URL:
L791             raise ValueError("SLACK_WEBHOOK_URL not set")
L792
L793         def _filter_suffix_from(spec: dict, group: str) -> str:
L794             g = spec.get(group, {})
L795             parts = [str(m) for m in g.get("pre_mask", [])]
L796             for k, v in (g.get("pre_filter", {}) or {}).items():
L797                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L798                 name = {"beta": "β"}.get(base, base)
L799                 try:
L800                     val = f"{float(v):g}"
L801                 except Exception:
L802                     val = str(v)
L803                 parts.append(f"{name}{op}{val}")
L804             return "" if not parts else " / filter:" + " & ".join(parts)
L805
L806         def _inject_filter_suffix(title: str, group: str) -> str:
L807             suf = _filter_suffix_from(FILTER_SPEC, group)
L808             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L809
L810         def _blk(title, tbl, fmt=None, drop=()):
L811             if tbl is None or getattr(tbl, 'empty', False):
L812                 return f"{title}\n(選定なし)\n"
L813             if drop and hasattr(tbl, 'columns'):
L814                 keep = [c for c in tbl.columns if c not in drop]
L815                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L816             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L817
L818         message = "📈 ファクター分散最適化の結果\n"
L819         if self.miss_df is not None and not self.miss_df.empty:
L820             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L821         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L822         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L823         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L824         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L825
L826         try:
L827             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L828             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L829             if r is not None:
L830                 r.raise_for_status()
L831         except Exception as e:
L832             print(f"[ERR] main_post_failed: {e}")
L833
L834         if debug_mode:
L835             header = "```DEBUG (after Low Score)```"
L836             try:
L837                 requests.post(SLACK_WEBHOOK_URL, json={"text": header})
L838             except Exception as e:
L839                 print(f"[ERR] debug_header_failed: {e}")
L840             _slack_send_text_chunks(SLACK_WEBHOOK_URL, self.debug_text or "(empty)", chunk=2800)
L841
L842 def _infer_g_universe(feature_df, selected12=None, near5=None):
```