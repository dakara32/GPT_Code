```text
e_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L766         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L767         _tlog("financials (yf) done")
L768         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L769         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L770         if need:
L771             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L772             df = yf_df.join(fh_df, how="left")
L773             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L774                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L775             print("[T] financials (finnhub) done (fallback only)")
L776         else:
L777             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L778             print("[T] financials (finnhub) skipped (no missing)")
L779         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L780         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L781         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L782         fcf_calc = cfo - capex
L783         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L784         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L785         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L786         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L787         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L788         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L789         return df[cols].sort_index()
L790
L791     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L792         eps_rows=[]
L793         for t in tickers:
L794             info_t = info[t]
L795             sec_t = (sec_map or {}).get(t, {})
L796             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L797             eps_q = sec_t.get("eps_q_recent", np.nan)
L798             try:
L799                 tk = tickers_bulk.tickers.get(t)
L800                 if tk is None:
L801                     sym = info_t.get("_yf_symbol") if isinstance(info_t, dict) else None
L802                     if sym:
L803                         tk = tickers_bulk.tickers.get(sym)
L804                 qearn = tk.quarterly_earnings if tk is not None else None
L805                 so = info_t.get("sharesOutstanding")
L806                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L807                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L808                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L809                     if pd.isna(eps_q):
L810                         eps_q = qearn["Earnings"].iloc[-1]/so
L811             except Exception: pass
L812             rev_ttm = sec_t.get("rev_ttm", np.nan)
L813             rev_q = sec_t.get("rev_q_recent", np.nan)
L814             if (not sec_t) or pd.isna(rev_ttm):
L815                 try:
L816                     tk = tickers_bulk.tickers.get(t)
L817                     if tk is None and isinstance(info_t, dict):
L818                         sym = info_t.get("_yf_symbol")
L819                         if sym:
L820                             tk = tickers_bulk.tickers.get(sym)
L821                     qfin = getattr(tk, "quarterly_financials", None)
L822                     if qfin is not None and not qfin.empty:
L823                         idx_lower = {str(i).lower(): i for i in qfin.index}
L824                         rev_idx = None
L825                         for name in ("Total Revenue", "TotalRevenue"):
L826                             key = name.lower()
L827                             if key in idx_lower:
L828                                 rev_idx = idx_lower[key]
L829                                 break
L830                         if rev_idx is not None:
L831                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L832                             if not rev_series.empty:
L833                                 rev_ttm_yf = float(rev_series.head(4).sum())
L834                                 if pd.isna(rev_ttm):
L835                                     rev_ttm = rev_ttm_yf
L836                                 if pd.isna(rev_q):
L837                                     rev_q = float(rev_series.iloc[0])
L838                 except Exception:
L839                     pass
L840             eps_rows.append({
L841                 "ticker": t,
L842                 "eps_ttm": eps_ttm,
L843                 "eps_ttm_prev": sec_t.get("eps_ttm_prev", np.nan),
L844                 "eps_q_recent": eps_q,
L845                 "eps_q_prev": sec_t.get("eps_lastq_prev", np.nan),
L846                 "rev_ttm": rev_ttm,
L847                 "rev_ttm_prev": sec_t.get("rev_ttm_prev", np.nan),
L848                 "rev_q_recent": rev_q,
L849                 "rev_q_prev": sec_t.get("rev_lastq_prev", np.nan),
L850                 "eps_annual_latest": sec_t.get("eps_annual_latest", np.nan),
L851                 "eps_annual_prev": sec_t.get("eps_annual_prev", np.nan),
L852                 "rev_annual_latest": sec_t.get("rev_annual_latest", np.nan),
L853                 "rev_annual_prev": sec_t.get("rev_annual_prev", np.nan),
L854                 "eps_cagr3": sec_t.get("eps_cagr3", np.nan),
L855                 "rev_cagr3": sec_t.get("rev_cagr3", np.nan),
L856             })
L857         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L858
L859     def prepare_data(self):
L860         """Fetch price and fundamental data for all tickers."""
L861         self.sec_dryrun_sample()
L862         # --- yfinance 用にティッカーを正規化（"$"剥がし、"."→"-"） ---
L863         def _to_yf(sym: str) -> str:
L864             s = (sym or "").strip().lstrip("$").replace("＄", "")
L865             # BRK.B / PBR.A などは Yahoo では '-' を使用
L866             yf_sym = s.replace("．", ".").replace(".", "-")
L867             return yf_sym or (sym or "")
L868
L869         cand_y = [_to_yf(t) for t in self.cand]
L870         cand_info = yf.Tickers(" ".join(cand_y))
L871
L872         def _price(orig: str, ysym: str) -> float:
L873             try:
L874                 return cand_info.tickers[ysym].fast_info.get("lastPrice", np.inf)
L875             except Exception as e:
L876                 print(f"{orig}: price fetch failed ({e})")
L877                 return np.inf
L878
L879         cand_prices = {orig: _price(orig, ysym) for orig, ysym in zip(self.cand, cand_y)}
L880         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L881         _tlog("price cap filter done (CAND_PRICE_MAX)")
L882         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L883         # ユニバース確定（元ティッカー保持）。yfinance には後で変換して渡す
L884         tickers = list(dict.fromkeys(self.exist + cand_f))
L885         yf_map = {t: _to_yf(t) for t in tickers}
L886         yf_list = list(dict.fromkeys([yf_map[t] for t in tickers]))
L887         _tlog(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L888         data = yf.download(yf_list + [self.bench], period="600d",
L889                            auto_adjust=True, progress=False, threads=False)
L890         _tlog("yf.download done")
L891         inv = {v: k for k, v in yf_map.items()}
L892         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L893         px = px.rename(columns=inv)
L894         try:
L895             if isinstance(data.columns, pd.MultiIndex):
L896                 data = data.rename(columns=inv, level=1)
L897             else:
L898                 data = data.rename(columns=inv)
L899         except Exception:
L900             pass
L901         spx = data["Close"][self.bench].reindex(px.index).ffill()
L902         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L903         if clip_days > 0:
L904             px, spx = px.tail(clip_days + 1), spx.tail(clip_days + 1)
L905             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)
L906         else:
L907             logger.debug("[T] price window clip skipped; rows=%d", len(px))
L908         tickers_bulk, info = yf.Tickers(" ".join(yf_list)), {}
L909         for orig, ysym in yf_map.items():
L910             if ysym in tickers_bulk.tickers:
L911                 tickers_bulk.tickers[orig] = tickers_bulk.tickers[ysym]
L912         for t in tickers:
L913             try:
L914                 tk = tickers_bulk.tickers.get(t) or tickers_bulk.tickers.get(yf_map[t])
L915                 info_entry = tk.info if tk is not None else {}
L916                 if not isinstance(info_entry, dict):
L917                     info_entry = {}
L918                 info_entry.setdefault("_yf_symbol", getattr(tk, "ticker", yf_map.get(t)))
L919                 info[t] = info_entry
L920             except Exception as e:
L921                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L922                 info[t] = {}
L923         try:
L924             sec_map = self.fetch_eps_rev_from_sec(tickers)
L925         except Exception as e:
L926             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L927             sec_map = {}
L928
L929         def _brief_len(s):
L930             try:
L931                 if isinstance(s, pd.Series):
L932                     return int(s.dropna().size)
L933                 if isinstance(s, (list, tuple)):
L934                     return len([v for v in s if pd.notna(v)])
L935                 if isinstance(s, np.ndarray):
L936                     return int(np.count_nonzero(~pd.isna(s)))
L937                 return int(bool(s))
L938             except Exception:
L939                 return 0
L940
L941         def _has_entries(val) -> bool:
L942             try:
L943                 if isinstance(val, pd.Series):
L944                     return not val.dropna().empty
L945                 if isinstance(val, (list, tuple)):
L946                     return any(pd.notna(v) for v in val)
L947                 return bool(val)
L948             except Exception:
L949                 return False
L950
L951         have_rev = 0
L952         have_eps = 0
L953         rev_lens: list[int] = []
L954         eps_lens: list[int] = []
L955         rev_y_lens: list[int] = []
L956         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L957
L958         for t in tickers:
L959             entry = info.get(t, {})
L960             m = (sec_map or {}).get(t) or {}
L961             if entry is None or not isinstance(entry, dict):
L962                 entry = {}
L963                 info[t] = entry
L964
L965             if m:
L966                 pairs_r = m.get("rev_q_series_pairs") or []
L967                 pairs_e = m.get("eps_q_series_pairs") or []
L968                 if pairs_r:
L969                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L970                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L971                     s = pd.Series(val, index=idx).sort_index()
L972                     entry["SEC_REV_Q_SERIES"] = s
L973                 else:
L974                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L975                 if pairs_e:
L976                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L977                   
```