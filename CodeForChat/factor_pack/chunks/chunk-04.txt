```text
[t for t in near_D if t not in set(D_UNI)][:10]
L659             if add:
L660                 d_disp2 = pd.DataFrame(index=add)
L661                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L662                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L663                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L664         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L665
L666         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L667         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L668         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L669
L670         self.io_table = pd.DataFrame({
L671             'IN': pd.Series(in_list),
L672             '/ OUT': pd.Series(out_list)
L673         })
L674         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L675         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L676         self.io_table['GSC'] = pd.Series(g_list)
L677         self.io_table['DSC'] = pd.Series(d_list)
L678
L679         print("Changes:")
L680         print(self.io_table.to_string(index=False))
L681
L682         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False)['Close']
L683         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L684         for name,ticks in portfolios.items():
L685             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L686             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L687             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L688             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L689             if len(ticks)>=2:
L690                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L691                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L692                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L693             else: RAW_rho = RESID_rho = np.nan
L694             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L695         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L696         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L697         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L698         def _fmt_row(s):
L699             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L700         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L701         if self.debug:
L702             self.debug_table = pd.concat([df_z[['TR','EPS','REV','ROE','BETA','DIV','FCF','RS','TR_str','DIV_STREAK']], g_score.rename('GSC'), d_score_all.rename('DSC')], axis=1).round(3)
L703             print("Debug Data:"); print(self.debug_table.to_string())
L704
L705         # === 追加: GSC+DSC が低い順 TOP10 ===
L706         try:
L707             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L708             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L709             all_scores = all_scores.dropna(subset=['G_plus_D'])
L710             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L711             print("Low Score Candidates (GSC+DSC bottom 10):")
L712             print(self.low10_table.to_string())
L713         except Exception as e:
L714             print(f"[warn] low-score ranking failed: {e}")
L715             self.low10_table = None
L716
L717     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L718     def notify_slack(self):
L719         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L720         if not SLACK_WEBHOOK_URL: raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L721         def _filter_suffix_from(spec: dict, group: str) -> str:
L722             g = spec.get(group, {})
L723             parts = [str(m) for m in g.get("pre_mask", [])]
L724             for k, v in (g.get("pre_filter", {}) or {}).items():
L725                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L726                 name = {"beta": "β"}.get(base, base)
L727                 try: val = f"{float(v):g}"
L728                 except: val = str(v)
L729                 parts.append(f"{name}{op}{val}")
L730             return "" if not parts else " / filter:" + " & ".join(parts)
L731         def _inject_filter_suffix(title: str, group: str) -> str:
L732             suf = _filter_suffix_from(FILTER_SPEC, group)
L733             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L734         def _blk(title, tbl, fmt=None, drop=()):
L735             if tbl is None or getattr(tbl,'empty',False): return f"{title}\n(選定なし)\n"
L736             if drop and hasattr(tbl,'columns'):
L737                 keep = [c for c in tbl.columns if c not in drop]
L738                 tbl, fmt = tbl[keep], {k:v for k,v in (fmt or {}).items() if k in keep}
L739             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L740
L741         g_title = _inject_filter_suffix(self.g_title, "G")
L742         d_title = _inject_filter_suffix(self.d_title, "D")
L743         message  = "📈 ファクター分散最適化の結果\n"
L744         if self.miss_df is not None and not self.miss_df.empty:
L745             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L746         message += _blk(g_title, self.g_table, self.g_formatters, drop=("TRD",))
L747         message += _blk(d_title, self.d_table, self.d_formatters)
L748         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table,'empty',False) else f"```{self.io_table.to_string(index=False)}```\n")
L749         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L750         if self.debug and self.debug_table is not None:
L751             message += "\nDebug Data\n```" + self.debug_table.to_string() + "```"
L752         payload = {"text": message}
L753         try:
L754             resp = requests.post(SLACK_WEBHOOK_URL, json=payload); resp.raise_for_status(); print("✅ Slack（Webhook）へ送信しました")
L755         except Exception as e: print(f"⚠️ Slack通知エラー: {e}")
L756
L757
L758 def _infer_g_universe(feature_df, selected12=None, near5=None):
L759     try:
L760         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L761         if out: return out
L762     except Exception:
L763         pass
L764     base = set()
L765     for lst in (selected12 or []), (near5 or []):
L766         for x in (lst or []): base.add(x)
L767     return list(base) if base else list(feature_df.index)
L768
L769
L770 def _fmt_with_fire_mark(tickers, feature_df):
L771     out = []
L772     for t in tickers or []:
L773         try:
L774             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L775             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L776             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L777         except Exception:
L778             out.append(t)
L779     return out
L780
L781
L782 def _label_recent_event(t, feature_df):
L783     try:
L784         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L785         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L786         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L787         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L788         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L789     except Exception:
L790         pass
L791     return t
L792
L793
L794 # ===== パイプライン可視化：G/D共通フロー（出力は不変） ==============================
L795
L796 def io_build_input_bundle() -> InputBundle:
L797     """
L798     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L799     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L800     """
L801     inp = Input(cand=cand, exist=exist, bench=bench,
L802                 price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY)
L803     state = inp.prepare_data()
L804     return InputBundle(
L805         cand=state["cand"], tickers=state["tickers"], bench=bench,
L806         data=state["data"], px=state["px"], spx=state["spx"],
L807         tickers_bulk=state["tickers_bulk"], info=state["info"],
L808         eps_df=state["eps_df"], fcf_df=state["fcf_df"],
L809         returns=state["returns"]
L810     )
L811
L812 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L813               n_target: int) -> tuple[list, float, float, float]:
L814     """
L815     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L816     戻り値：(pick, avg_res_corr, sum_score, objective)
L817     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L818     """
L819     sc.cfg = cfg
L820
L821     if hasattr(sc, "score_build_features"):
L822         feat = sc.score_build_features(inb)
L823         if not hasattr(sc, "_feat_logged"):
L824             T.log("features built (scorer)")
L825             sc._feat_logged = True
L826         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L827     else:
L828         fb = sc.aggregate_scores(inb, cfg)
L829         if not hasattr(sc, "_feat_logged"):
L830             T.log("features built (scorer)")
L831             sc._feat_logged = True
L832         sc._feat = fb
L833         agg = fb.g_score if group == "G" else fb.d_score_all
L834         if group == "D" and hasattr(fb, "df"):
L835             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L836
L837     if hasattr(sc, "filter_candidates"):
L838         mask = sc.filter_candidates(inb, agg, group, cfg)
L839         agg = agg[mask]
L840
L841     selector = Selector()
L842     if hasattr(sc, "select_diversified"):
L843         pick, avg_r, sum_sc, obj = sc.select_diversified(
L844             agg, group, cfg, n_target,
L845             selector=selector, prev_tickers=None,
L846             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L847             cross_mu=cfg.drrs.cross_mu_gd
L848         )
L849     else:
L850         if group == "G":
L851             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L852             res = selector.select_bucket_drrs(
L853                 returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L854                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L855                 lam=cfg.drrs.G.get("lam", 0.68),
L856                 lookback=cfg.drrs.G.get("lookback", 252),
L857                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0
L858             )
L859         else:
L860             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L861             g_fixed = getattr(sc, "_top_G", None)
L862             res = selector.select_bucket_drrs(
L863                 returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L864                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=
```