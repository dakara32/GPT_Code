```text
['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L616         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L617         # === 追加: GSC+DSC が低い順 TOP10 ===
L618         try:
L619             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L620             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L621             all_scores = all_scores.dropna(subset=['G_plus_D'])
L622             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L623             print("Low Score Candidates (GSC+DSC bottom 10):")
L624             print(self.low10_table.to_string())
L625         except Exception as e:
L626             print(f"[warn] low-score ranking failed: {e}")
L627             self.low10_table = None
L628         self.debug_text = ""
L629         if debug_mode:
L630             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L631         else:
L632             logger.debug(
L633                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L634                 debug_mode, True
L635             )
L636         self._debug_logged = True
L637
L638     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L639     def notify_slack(self):
L640         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L641
L642         if not SLACK_WEBHOOK_URL:
L643             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L644             return
L645
L646         def _filter_suffix_from(spec: dict, group: str) -> str:
L647             g = spec.get(group, {})
L648             parts = [str(m) for m in g.get("pre_mask", [])]
L649             for k, v in (g.get("pre_filter", {}) or {}).items():
L650                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L651                 name = {"beta": "β"}.get(base, base)
L652                 try:
L653                     val = f"{float(v):g}"
L654                 except Exception:
L655                     val = str(v)
L656                 parts.append(f"{name}{op}{val}")
L657             return "" if not parts else " / filter:" + " & ".join(parts)
L658
L659         def _inject_filter_suffix(title: str, group: str) -> str:
L660             suf = _filter_suffix_from(FILTER_SPEC, group)
L661             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L662
L663         def _blk(title, tbl, fmt=None, drop=()):
L664             if tbl is None or getattr(tbl, 'empty', False):
L665                 return f"{title}\n(選定なし)\n"
L666             if drop and hasattr(tbl, 'columns'):
L667                 keep = [c for c in tbl.columns if c not in drop]
L668                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L669             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L670
L671         message = "📈 ファクター分散最適化の結果\n"
L672         if self.miss_df is not None and not self.miss_df.empty:
L673             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L674         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L675         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L676         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L677         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L678
L679         try:
L680             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L681             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L682             if r is not None:
L683                 r.raise_for_status()
L684         except Exception as e:
L685             print(f"[ERR] main_post_failed: {e}")
L686
L687 def _infer_g_universe(feature_df, selected12=None, near5=None):
L688     try:
L689         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L690         if out: return out
L691     except Exception:
L692         pass
L693     base = set()
L694     for lst in (selected12 or []), (near5 or []):
L695         for x in (lst or []): base.add(x)
L696     return list(base) if base else list(feature_df.index)
L697
L698 def _fmt_with_fire_mark(tickers, feature_df):
L699     out = []
L700     for t in tickers or []:
L701         try:
L702             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L703             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L704             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L705         except Exception:
L706             out.append(t)
L707     return out
L708
L709 def _label_recent_event(t, feature_df):
L710     try:
L711         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L712         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L713         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L714         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L715         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L716     except Exception:
L717         pass
L718     return t
L719
L720 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L721
L722 def io_build_input_bundle() -> InputBundle:
L723     """
L724     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L725     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L726     """
L727     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L728     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L729
L730 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L731               n_target: int) -> tuple[list, float, float, float]:
L732     """
L733     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L734     戻り値：(pick, avg_res_corr, sum_score, objective)
L735     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L736     """
L737     sc.cfg = cfg
L738
L739     if hasattr(sc, "score_build_features"):
L740         feat = sc.score_build_features(inb)
L741         if not hasattr(sc, "_feat_logged"):
L742             T.log("features built (scorer)")
L743             sc._feat_logged = True
L744         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L745     else:
L746         fb = sc.aggregate_scores(inb, cfg)
L747         if not hasattr(sc, "_feat_logged"):
L748             T.log("features built (scorer)")
L749             sc._feat_logged = True
L750         sc._feat = fb
L751         agg = fb.g_score if group == "G" else fb.d_score_all
L752         if group == "D" and hasattr(fb, "df"):
L753             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L754
L755     if hasattr(sc, "filter_candidates"):
L756         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L757
L758     selector = Selector()
L759     if hasattr(sc, "select_diversified"):
L760         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L761             selector=selector, prev_tickers=None,
L762             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L763             cross_mu=cfg.drrs.cross_mu_gd)
L764     else:
L765         if group == "G":
L766             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L767             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L768                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L769                 lam=cfg.drrs.G.get("lam", 0.68),
L770                 lookback=cfg.drrs.G.get("lookback", 252),
L771                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L772         else:
L773             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L774             g_fixed = getattr(sc, "_top_G", None)
L775             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L776                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L777                 lam=cfg.drrs.D.get("lam", 0.85),
L778                 lookback=cfg.drrs.D.get("lookback", 504),
L779                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L780                 mu=cfg.drrs.cross_mu_gd)
L781         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L782         sum_sc = res["sum_score"]; obj = res["objective"]
L783         if group == "D":
L784             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L785             T.log("selection finalized (G/D)")
L786     try:
L787         inc = [t for t in exist if t in agg.index]
L788         pick = _sticky_keep_current(
L789             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L790             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L791         )
L792     except Exception as _e:
L793         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L794     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L795     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L796     try:
L797         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L798         near10 = list(pool.sort_values(ascending=False).head(10).index)
L799         setattr(sc, f"_near_{group}", near10)
L800         setattr(sc, f"_agg_{group}", agg)
L801     except Exception:
L802         pass
L803
L804     if group == "D":
L805         T.log("save done")
L806     if group == "G":
L807         sc._top_G = pick
L808     return pick, avg_r, sum_sc, obj
L809
L810 def run_pipeline() -> SelectionBundle:
L811     """
L812     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L813     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L814     """
L815     inb = io_build_input_bundle()
L816     cfg = PipelineConfig(
L817         weights=WeightsConfig(g=g_weights, d=D_weights),
L818         drrs=DRRSParams(
L819             corrM=corrM, shrink=DRRS_SHRINK,
L820             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L821         ),
L822         price_max=CAND_PRICE_MAX,
L823         debug_mode=debug_mode
L824     )
L825     sc = Scorer()
L826     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L827     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L828     alpha = Scorer.spx_to_alpha(inb.spx)
L829     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L830     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L831     sc._top_G = top_G
L832     try:
L833         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L834         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L835     except Exception:
L836         pass
L837     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L838     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L839     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L840     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L841     fb = getattr(sc, "_feat", None)
L842     near_G = getattr(sc, "_near_G", [])
L843     selected12 = list(top_G)
L844     df = fb.df if fb is not None else pd.DataFrame()
L845     guni = _infer_g_universe(df, sele
```