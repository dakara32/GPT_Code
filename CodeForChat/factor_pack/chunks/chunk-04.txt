```text
C={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L656         if near_G:
L657             add = [t for t in near_G if t not in set(G_UNI)][:10]
L658             if len(add) < 10:
L659                 try:
L660                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L661                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L662                     used = set(G_UNI + add)
L663                     def _push(lst):
L664                         nonlocal add, used
L665                         for t in lst:
L666                             if len(add) == 10: break
L667                             if t in aggG.index and t not in used:
L668                                 add.append(t); used.add(t)
L669                     _push(out_now)           # ① 今回 OUT を優先
L670                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L671                 except Exception:
L672                     pass
L673             if add:
L674                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L675                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L676         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L677
L678         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L679         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L680         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L681         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L682         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L683         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L684         import scorer
L685         dw_eff = scorer.D_WEIGHTS_EFF
L686         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L687                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L688         if near_D:
L689             add = [t for t in near_D if t not in set(D_UNI)][:10]
L690             if add:
L691                 d_disp2 = pd.DataFrame(index=add)
L692                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L693                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L694                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L695         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L696
L697         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L698         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L699         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L700
L701         self.io_table = pd.DataFrame({
L702             'IN': pd.Series(in_list),
L703             '/ OUT': pd.Series(out_list)
L704         })
L705         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L706         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L707         self.io_table['GSC'] = pd.Series(g_list)
L708         self.io_table['DSC'] = pd.Series(d_list)
L709
L710         print("Changes:")
L711         print(self.io_table.to_string(index=False))
L712
L713         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False)['Close']
L714         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L715         for name,ticks in portfolios.items():
L716             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L717             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L718             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L719             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L720             if len(ticks)>=2:
L721                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L722                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L723                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L724             else: RAW_rho = RESID_rho = np.nan
L725             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L726         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L727         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L728         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L729         def _fmt_row(s):
L730             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L731         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L732         # --- ここから: デバッグ出力は _compact_debug で一本化（表示経路もSlack経路もこれだけ）---
L733         if self.debug:
L734             from types import SimpleNamespace
L735             fb_like = SimpleNamespace(
L736                 df_z=df_z,
L737                 df_full_z=kwargs.get("df_full_z"),
L738                 g_score=g_score,
L739                 d_score_all=d_score_all,
L740                 missing_logs=self.miss_df,
L741             )
L742             sb_like = SimpleNamespace(top_G=top_G, top_D=top_D)
L743             self.debug_text = _compact_debug(
L744                 fb_like,
L745                 sb_like,
L746                 prevG=kwargs.get("prev_G", exist),
L747                 prevD=kwargs.get("prev_D", exist),
L748                 max_rows=int(os.getenv("DEBUG_MAX_ROWS", "140")),
L749             )
L750             print(self.debug_text)
L751         else:
L752             self.debug_text = ""
L753         # === 追加: GSC+DSC が低い順 TOP10 ===
L754         try:
L755             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L756             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L757             all_scores = all_scores.dropna(subset=['G_plus_D'])
L758             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L759             print("Low Score Candidates (GSC+DSC bottom 10):")
L760             print(self.low10_table.to_string())
L761         except Exception as e:
L762             print(f"[warn] low-score ranking failed: {e}")
L763             self.low10_table = None
L764
L765     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L766     def notify_slack(self):
L767         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L768         if not SLACK_WEBHOOK_URL: raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L769         def _filter_suffix_from(spec: dict, group: str) -> str:
L770             g = spec.get(group, {})
L771             parts = [str(m) for m in g.get("pre_mask", [])]
L772             for k, v in (g.get("pre_filter", {}) or {}).items():
L773                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L774                 name = {"beta": "β"}.get(base, base)
L775                 try: val = f"{float(v):g}"
L776                 except: val = str(v)
L777                 parts.append(f"{name}{op}{val}")
L778             return "" if not parts else " / filter:" + " & ".join(parts)
L779         def _inject_filter_suffix(title: str, group: str) -> str:
L780             suf = _filter_suffix_from(FILTER_SPEC, group)
L781             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L782         def _blk(title, tbl, fmt=None, drop=()):
L783             if tbl is None or getattr(tbl,'empty',False): return f"{title}\n(選定なし)\n"
L784             if drop and hasattr(tbl,'columns'):
L785                 keep = [c for c in tbl.columns if c not in drop]
L786                 tbl, fmt = tbl[keep], {k:v for k,v in (fmt or {}).items() if k in keep}
L787             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L788
L789         g_title = _inject_filter_suffix(self.g_title, "G")
L790         d_title = _inject_filter_suffix(self.d_title, "D")
L791         message  = "📈 ファクター分散最適化の結果\n"
L792         if self.miss_df is not None and not self.miss_df.empty:
L793             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L794         message += _blk(g_title, self.g_table, self.g_formatters, drop=("TRD",))
L795         message += _blk(d_title, self.d_table, self.d_formatters)
L796         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table,'empty',False) else f"```{self.io_table.to_string(index=False)}```\n")
L797         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L798         if self.debug and getattr(self, "debug_text", ""):
L799             message += "\n```" + self.debug_text + "```"
L800         payload = {"text": message}
L801         try:
L802             resp = requests.post(SLACK_WEBHOOK_URL, json=payload); resp.raise_for_status(); print("✅ Slack（Webhook）へ送信しました")
L803         except Exception as e: print(f"⚠️ Slack通知エラー: {e}")
L804
L805 def _infer_g_universe(feature_df, selected12=None, near5=None):
L806     try:
L807         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L808         if out: return out
L809     except Exception:
L810         pass
L811     base = set()
L812     for lst in (selected12 or []), (near5 or []):
L813         for x in (lst or []): base.add(x)
L814     return list(base) if base else list(feature_df.index)
L815
L816 def _fmt_with_fire_mark(tickers, feature_df):
L817     out = []
L818     for t in tickers or []:
L819         try:
L820             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L821             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L822             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L823         except Exception:
L824             out.append(t)
L825     return out
L826
L827 def _label_recent_event(t, feature_df):
L828     try:
L829         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L830         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L831         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L832         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L833         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L834     except Exception:
L835         pass
L836     return t
L837
L838 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L839
L840 def io_build_input_bundle() -> InputBundle:
L841     """
L842     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L843     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L844     """
L845     state = Input(cand=cand, exist=exist, bench=bench, p
```