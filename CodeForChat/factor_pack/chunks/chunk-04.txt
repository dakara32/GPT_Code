```text
ol:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L658         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L659                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L660         if near_G:
L661             add = [t for t in near_G if t not in set(G_UNI)][:10]
L662             if len(add) < 10:
L663                 try:
L664                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L665                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L666                     used = set(G_UNI + add)
L667                     def _push(lst):
L668                         nonlocal add, used
L669                         for t in lst:
L670                             if len(add) == 10: break
L671                             if t in aggG.index and t not in used:
L672                                 add.append(t); used.add(t)
L673                     _push(out_now)           # ① 今回 OUT を優先
L674                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L675                 except Exception:
L676                     pass
L677             if add:
L678                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L679                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L680         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L681
L682         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L683         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L684         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L685         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L686         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L687         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L688         import scorer
L689         dw_eff = scorer.D_WEIGHTS_EFF
L690         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L691                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L692         if near_D:
L693             add = [t for t in near_D if t not in set(D_UNI)][:10]
L694             if add:
L695                 d_disp2 = pd.DataFrame(index=add)
L696                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L697                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L698                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L699         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L700
L701         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L702         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L703         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L704
L705         self.io_table = pd.DataFrame({
L706             'IN': pd.Series(in_list),
L707             '/ OUT': pd.Series(out_list)
L708         })
L709         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L710         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L711         self.io_table['GSC'] = pd.Series(g_list)
L712         self.io_table['DSC'] = pd.Series(d_list)
L713
L714         print("Changes:")
L715         print(self.io_table.to_string(index=False))
L716
L717         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L718         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L719         for name,ticks in portfolios.items():
L720             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L721             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L722             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L723             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L724             if len(ticks)>=2:
L725                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L726                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L727                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L728             else: RAW_rho = RESID_rho = np.nan
L729             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L730         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L731         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L732         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L733         def _fmt_row(s):
L734             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L735         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L736         # --- ここから: デバッグ出力は _compact_debug で一本化（表示経路もSlack経路もこれだけ）---
L737         if debug_mode:
L738             from types import SimpleNamespace
L739             df_full_src    = getattr(getattr(self, "_sc", None), "_feat", None)
L740             df_full        = getattr(df_full_src, "df_full", None) or kwargs.get("df_full")
L741             df_full_z_pass = getattr(df_full_src, "df_full_z", None) or kwargs.get("df_full_z")
L742             fb_like = SimpleNamespace(
L743                 df_full=df_full,
L744                 df_z=df_z,
L745                 df_full_z=df_full_z_pass,
L746                 g_score=g_score,
L747                 d_score_all=d_score_all,
L748                 missing_logs=self.miss_df,
L749             )
L750             sb_like = SimpleNamespace(top_G=top_G, top_D=top_D)
L751             self.debug_text = _compact_debug(
L752                 fb_like,
L753                 sb_like,
L754                 prevG=kwargs.get("prev_G", exist),
L755                 prevD=kwargs.get("prev_D", exist),
L756                 max_rows=int(os.getenv("DEBUG_MAX_ROWS", "140")),
L757             )
L758         else:
L759             self.debug_text = ""
L760         # === 追加: GSC+DSC が低い順 TOP10 ===
L761         try:
L762             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L763             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L764             all_scores = all_scores.dropna(subset=['G_plus_D'])
L765             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L766             print("Low Score Candidates (GSC+DSC bottom 10):")
L767             print(self.low10_table.to_string())
L768         except Exception as e:
L769             print(f"[warn] low-score ranking failed: {e}")
L770             self.low10_table = None
L771
L772         if debug_mode and self.debug_text:
L773             print(self.debug_text)
L774
L775     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L776     def notify_slack(self):
L777         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L778         if not SLACK_WEBHOOK_URL: raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L779         def _filter_suffix_from(spec: dict, group: str) -> str:
L780             g = spec.get(group, {})
L781             parts = [str(m) for m in g.get("pre_mask", [])]
L782             for k, v in (g.get("pre_filter", {}) or {}).items():
L783                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L784                 name = {"beta": "β"}.get(base, base)
L785                 try: val = f"{float(v):g}"
L786                 except: val = str(v)
L787                 parts.append(f"{name}{op}{val}")
L788             return "" if not parts else " / filter:" + " & ".join(parts)
L789         def _inject_filter_suffix(title: str, group: str) -> str:
L790             suf = _filter_suffix_from(FILTER_SPEC, group)
L791             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L792         def _blk(title, tbl, fmt=None, drop=()):
L793             if tbl is None or getattr(tbl,'empty',False): return f"{title}\n(選定なし)\n"
L794             if drop and hasattr(tbl,'columns'):
L795                 keep = [c for c in tbl.columns if c not in drop]
L796                 tbl, fmt = tbl[keep], {k:v for k,v in (fmt or {}).items() if k in keep}
L797             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L798
L799         g_title = _inject_filter_suffix(self.g_title, "G")
L800         d_title = _inject_filter_suffix(self.d_title, "D")
L801         message  = "📈 ファクター分散最適化の結果\n"
L802         if self.miss_df is not None and not self.miss_df.empty:
L803             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L804         message += _blk(g_title, self.g_table, self.g_formatters, drop=("TRD",))
L805         message += _blk(d_title, self.d_table, self.d_formatters)
L806         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table,'empty',False) else f"```{self.io_table.to_string(index=False)}```\n")
L807         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L808         if debug_mode and getattr(self, "debug_text", ""):
L809             message += "\n```" + self.debug_text + "```"
L810         payload = {"text": message}
L811         try:
L812             resp = requests.post(SLACK_WEBHOOK_URL, json=payload); resp.raise_for_status(); print("✅ Slack（Webhook）へ送信しました")
L813         except Exception as e: print(f"⚠️ Slack通知エラー: {e}")
L814
L815 def _infer_g_universe(feature_df, selected12=None, near5=None):
L816     try:
L817         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L818         if out: return out
L819     except Exception:
L820         pass
L821     base = set()
L822     for lst in (selected12 or []), (near5 or []):
L823         for x in (lst or []): base.add(x)
L824     return list(base) if base else list(feature_df.index)
L825
L826 def _fmt_with_fire_mark(tickers, feature_df):
L827     out = []
L828     for t in tickers or []:
L829         try:
L830             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L831             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L832             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L833         except Exception:
L834             out.append(t)
L835     return out
L836
L837 def _label_recent_event(t, feature_df):
L838     try:
L839         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L840         pb = bool(fe
```