```text
and_info.tickers[t].fast_info.get("lastPrice", np.inf)
L736             except Exception as e:
L737                 print(f"{t}: price fetch failed ({e})")
L738                 return np.inf
L739
L740         cand_prices = {t: _price(t) for t in self.cand}
L741         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L742         T.log("price cap filter done (CAND_PRICE_MAX)")
L743         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L744         tickers = list(dict.fromkeys(self.exist + cand_f))
L745         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L746         data = yf.download(tickers + [self.bench], period="600d",
L747                            auto_adjust=True, progress=False, threads=False)
L748         T.log("yf.download done")
L749         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L750         spx = data["Close"][self.bench].reindex(px.index).ffill()
L751         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L752         if clip_days > 0:
L753             px, spx = px.tail(clip_days + 1), spx.tail(clip_days + 1)
L754             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)
L755         else:
L756             logger.info("[T] price window clip skipped; rows=%d", len(px))
L757         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L758         for t in tickers:
L759             try:
L760                 info[t] = tickers_bulk.tickers[t].info
L761             except Exception as e:
L762                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L763                 info[t] = {}
L764         try:
L765             sec_map = self.fetch_eps_rev_from_sec(tickers)
L766         except Exception as e:
L767             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L768             sec_map = {}
L769
L770         def _brief_len(s):
L771             try:
L772                 if isinstance(s, pd.Series):
L773                     return int(s.dropna().size)
L774                 if isinstance(s, (list, tuple)):
L775                     return len([v for v in s if pd.notna(v)])
L776                 if isinstance(s, np.ndarray):
L777                     return int(np.count_nonzero(~pd.isna(s)))
L778                 return int(bool(s))
L779             except Exception:
L780                 return 0
L781
L782         def _has_entries(val) -> bool:
L783             try:
L784                 if isinstance(val, pd.Series):
L785                     return not val.dropna().empty
L786                 if isinstance(val, (list, tuple)):
L787                     return any(pd.notna(v) for v in val)
L788                 return bool(val)
L789             except Exception:
L790                 return False
L791
L792         have_rev = 0
L793         have_eps = 0
L794         rev_lens: list[int] = []
L795         eps_lens: list[int] = []
L796         rev_y_lens: list[int] = []
L797         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L798
L799         for t in tickers:
L800             entry = info.get(t, {})
L801             m = (sec_map or {}).get(t) or {}
L802             if entry is None or not isinstance(entry, dict):
L803                 entry = {}
L804                 info[t] = entry
L805
L806             if m:
L807                 pairs_r = m.get("rev_q_series_pairs") or []
L808                 pairs_e = m.get("eps_q_series_pairs") or []
L809                 if pairs_r:
L810                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L811                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L812                     s = pd.Series(val, index=idx).sort_index()
L813                     entry["SEC_REV_Q_SERIES"] = s
L814                 else:
L815                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L816                 if pairs_e:
L817                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L818                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L819                     s = pd.Series(val, index=idx).sort_index()
L820                     entry["SEC_EPS_Q_SERIES"] = s
L821                 else:
L822                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L823
L824             r = entry.get("SEC_REV_Q_SERIES")
L825             e = entry.get("SEC_EPS_Q_SERIES")
L826             # 年次は直近3件（約3年）だけ保持。重み分岐の nY 判定は従来通り。
L827             try:
L828                 if hasattr(r, "index") and isinstance(r.index, pd.DatetimeIndex):
L829                     y = r.resample("Y").sum().dropna()
L830                     entry["SEC_REV_Y_SERIES"] = y.tail(3)
L831                 else:
L832                     entry["SEC_REV_Y_SERIES"] = []
L833             except Exception:
L834                 entry["SEC_REV_Y_SERIES"] = []
L835             ry = entry.get("SEC_REV_Y_SERIES")
L836             if _has_entries(r):
L837                 have_rev += 1
L838             if _has_entries(e):
L839                 have_eps += 1
L840             lr = _brief_len(r)
L841             le = _brief_len(e)
L842             rev_lens.append(lr)
L843             eps_lens.append(le)
L844             rev_y_lens.append(_brief_len(ry))
L845             if len(samples) < 8:
L846                 try:
L847                     rd = getattr(r, "index", [])[-1] if lr > 0 else None
L848                     rv = float(r.iloc[-1]) if lr > 0 else None
L849                     ed = getattr(e, "index", [])[-1] if le > 0 else None
L850                     ev = float(e.iloc[-1]) if le > 0 else None
L851                     samples.append((t, lr, str(rd) if rd is not None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L852                 except Exception:
L853                     samples.append((t, lr, "-", None, le, "-", None))
L854
L855         logger.info("[SEC] series attach: rev_q=%d/%d, eps_q=%d/%d", have_rev, len(tickers), have_eps, len(tickers))
L856         logger.info(
L857             "[SEC_SERIES] rev_q=%d (<=12), eps_q=%d (<=12), rev_y=%d (<=3)",
L858             max(rev_lens) if rev_lens else 0,
L859             max(eps_lens) if eps_lens else 0,
L860             max(rev_y_lens) if rev_y_lens else 0,
L861         )
L862
L863         if rev_lens:
L864             rev_lens_sorted = sorted(rev_lens)
L865             eps_lens_sorted = sorted(eps_lens)
L866             _log(
L867                 "SEC_SERIES",
L868                 f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L869                 f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L870             )
L871         for (t, lr, rd, rv, le, ed, ev) in samples:
L872             _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L873         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L874         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L875         if not eps_df.index.is_unique:
L876             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L877         eps_df = eps_df.assign(
L878             EPS_TTM=eps_df["eps_ttm"],
L879             EPS_Q_LastQ=eps_df["eps_q_recent"],
L880             REV_TTM=eps_df["rev_ttm"],
L881             REV_Q_LastQ=eps_df["rev_q_recent"],
L882         )
L883         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L884         try:
L885             n = len(eps_df)
L886             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L887             c_rev = int(eps_df["REV_TTM"].notna().sum())
L888             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L889         except Exception:
L890             pass
L891         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L892         T.log("eps/fcf prep done")
L893         returns = px[tickers].pct_change()
L894         T.log("price prep/returns done")
L895         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L896
L897 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L898 class Selector:
L899     # ---- DRRS helpers（Selector専用） ----
L900     @staticmethod
L901     def _z_np(X: np.ndarray) -> np.ndarray:
L902         X = np.asarray(X, dtype=np.float32)
L903         m = np.nanmean(X, axis=0, keepdims=True)
L904         s = np.nanstd(X, axis=0, keepdims=True)
L905         # 分母0/全NaN列の安全化：std==0 を 1 に置換（z=0に収束）
L906         s = np.where(np.isfinite(s) & (s > 0), s, 1.0).astype(np.float32)
L907         with np.errstate(invalid="ignore", divide="ignore"):
L908             Z = (np.nan_to_num(X) - np.nan_to_num(m)) / s
L909         return np.nan_to_num(Z)
L910
L911     @classmethod
L912     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L913         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L914         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L915         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L916         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L917         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L918
L919     @classmethod
L920     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L921         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L922         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L923         if k==0: return []
L924         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L925         for _ in range(k):
L926             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L927             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L928             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L929         return sorted(S)
L930
L931     @staticmethod
L932     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L933         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L934         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L935
L936     @classmethod
L937     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L938         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L939         while improved and passes<max_pass:
L940             improved, passes = False, passes+1
L941             for i,out in enumerate(list(S)):
L942                 for inn in range(len(score)):
L943                     if inn in S: continue
L944                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L945                     if v>best+1e-10: S, best, improved = cand, v, True; break
L946                 if improved: break
L947         return S, best
L948
L949     @staticmethod
L950     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L951         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L952         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L953         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L954         return float(s[idx].sum() - lam*within - mu*cross)
L955
L956     @classmethod
L957     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L958         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_with
```