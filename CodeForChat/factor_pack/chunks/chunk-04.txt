```text
                     def _push(lst):
L663                         nonlocal add, used
L664                         for t in lst:
L665                             if len(add) == 10: break
L666                             if t in aggG.index and t not in used:
L667                                 add.append(t); used.add(t)
L668                     _push(out_now)           # ① 今回 OUT を優先
L669                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L670                 except Exception:
L671                     pass
L672             if add:
L673                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L674                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L675         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L676
L677         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L678         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L679         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L680         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L681         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L682         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L683         import scorer
L684         dw_eff = scorer.D_WEIGHTS_EFF
L685         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L686                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L687         if near_D:
L688             add = [t for t in near_D if t not in set(D_UNI)][:10]
L689             if add:
L690                 d_disp2 = pd.DataFrame(index=add)
L691                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L692                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L693                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L694         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L695
L696         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L697         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L698         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L699
L700         self.io_table = pd.DataFrame({
L701             'IN': pd.Series(in_list),
L702             '/ OUT': pd.Series(out_list)
L703         })
L704         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L705         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L706         self.io_table['GSC'] = pd.Series(g_list)
L707         self.io_table['DSC'] = pd.Series(d_list)
L708
L709         print("Changes:")
L710         print(self.io_table.to_string(index=False))
L711
L712         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L713         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L714         for name,ticks in portfolios.items():
L715             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L716             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L717             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L718             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L719             if len(ticks)>=2:
L720                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L721                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L722                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L723             else: RAW_rho = RESID_rho = np.nan
L724             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L725         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L726         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L727         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L728         def _fmt_row(s):
L729             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L730         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L731         # === 追加: GSC+DSC が低い順 TOP10 ===
L732         try:
L733             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L734             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L735             all_scores = all_scores.dropna(subset=['G_plus_D'])
L736             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L737             print("Low Score Candidates (GSC+DSC bottom 10):")
L738             print(self.low10_table.to_string())
L739         except Exception as e:
L740             print(f"[warn] low-score ranking failed: {e}")
L741             self.low10_table = None
L742         self.debug_text = ""
L743         if debug_mode:
L744             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L745         else:
L746             logger.debug(
L747                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L748                 debug_mode, True
L749             )
L750         self._debug_logged = True
L751
L752     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L753     def notify_slack(self):
L754         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L755
L756         if not SLACK_WEBHOOK_URL:
L757             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L758             return
L759
L760         def _filter_suffix_from(spec: dict, group: str) -> str:
L761             g = spec.get(group, {})
L762             parts = [str(m) for m in g.get("pre_mask", [])]
L763             for k, v in (g.get("pre_filter", {}) or {}).items():
L764                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L765                 name = {"beta": "β"}.get(base, base)
L766                 try:
L767                     val = f"{float(v):g}"
L768                 except Exception:
L769                     val = str(v)
L770                 parts.append(f"{name}{op}{val}")
L771             return "" if not parts else " / filter:" + " & ".join(parts)
L772
L773         def _inject_filter_suffix(title: str, group: str) -> str:
L774             suf = _filter_suffix_from(FILTER_SPEC, group)
L775             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L776
L777         def _blk(title, tbl, fmt=None, drop=()):
L778             if tbl is None or getattr(tbl, 'empty', False):
L779                 return f"{title}\n(選定なし)\n"
L780             if drop and hasattr(tbl, 'columns'):
L781                 keep = [c for c in tbl.columns if c not in drop]
L782                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L783             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L784
L785         message = "📈 ファクター分散最適化の結果\n"
L786         if self.miss_df is not None and not self.miss_df.empty:
L787             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L788         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L789         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L790         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L791         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L792
L793         try:
L794             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L795             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L796             if r is not None:
L797                 r.raise_for_status()
L798         except Exception as e:
L799             print(f"[ERR] main_post_failed: {e}")
L800
L801 def _infer_g_universe(feature_df, selected12=None, near5=None):
L802     try:
L803         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L804         if out: return out
L805     except Exception:
L806         pass
L807     base = set()
L808     for lst in (selected12 or []), (near5 or []):
L809         for x in (lst or []): base.add(x)
L810     return list(base) if base else list(feature_df.index)
L811
L812 def _fmt_with_fire_mark(tickers, feature_df):
L813     out = []
L814     for t in tickers or []:
L815         try:
L816             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L817             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L818             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L819         except Exception:
L820             out.append(t)
L821     return out
L822
L823 def _label_recent_event(t, feature_df):
L824     try:
L825         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L826         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L827         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L828         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L829         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L830     except Exception:
L831         pass
L832     return t
L833
L834 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L835
L836 def io_build_input_bundle() -> InputBundle:
L837     """
L838     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L839     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L840     """
L841     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L842     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L843
L844 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L845               n_target: int) -> tuple[list, float, float, float]:
L846     """
L847     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L848     戻り値：(pick, avg_res_corr, sum_score, objective)
L849     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L850     """
L851     sc.cfg = cfg
L852
L853     if hasattr(sc, "score_build_features"):
L854         feat = sc.score_build_features(inb)
L855         if not hasattr(sc, "_feat_logged"):
L856             T.log("features built (scorer)")
L857             sc._
```