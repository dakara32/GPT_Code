```text
None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L713                     except Exception:
L714                         samples.append((t, lr, "-", None, le, "-", None))
L715
L716             if rev_lens:
L717                 rev_lens_sorted = sorted(rev_lens)
L718                 eps_lens_sorted = sorted(eps_lens)
L719                 _log(
L720                     "SEC_SERIES",
L721                     f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L722                     f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L723                 )
L724             for (t, lr, rd, rv, le, ed, ev) in samples:
L725                 _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L726         except Exception:
L727             sec_map = None
L728         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L729         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L730         if not eps_df.index.is_unique:
L731             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L732         eps_df = eps_df.assign(
L733             EPS_TTM=eps_df["eps_ttm"],
L734             EPS_Q_LastQ=eps_df["eps_q_recent"],
L735             REV_TTM=eps_df["rev_ttm"],
L736             REV_Q_LastQ=eps_df["rev_q_recent"],
L737         )
L738         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L739         try:
L740             n = len(eps_df)
L741             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L742             c_rev = int(eps_df["REV_TTM"].notna().sum())
L743             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L744         except Exception:
L745             pass
L746         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L747         T.log("eps/fcf prep done")
L748         returns = px[tickers].pct_change()
L749         T.log("price prep/returns done")
L750         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L751
L752 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L753 class Selector:
L754     # ---- DRRS helpers（Selector専用） ----
L755     @staticmethod
L756     def _z_np(X: np.ndarray) -> np.ndarray:
L757         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L758         return (np.nan_to_num(X)-m)/s
L759
L760     @classmethod
L761     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L762         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L763         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L764         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L765         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L766         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L767
L768     @classmethod
L769     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L770         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L771         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L772         if k==0: return []
L773         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L774         for _ in range(k):
L775             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L776             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L777             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L778         return sorted(S)
L779
L780     @staticmethod
L781     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L782         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L783         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L784
L785     @classmethod
L786     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L787         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L788         while improved and passes<max_pass:
L789             improved, passes = False, passes+1
L790             for i,out in enumerate(list(S)):
L791                 for inn in range(len(score)):
L792                     if inn in S: continue
L793                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L794                     if v>best+1e-10: S, best, improved = cand, v, True; break
L795                 if improved: break
L796         return S, best
L797
L798     @staticmethod
L799     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L800         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L801         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L802         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L803         return float(s[idx].sum() - lam*within - mu*cross)
L804
L805     @classmethod
L806     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L807         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L808         while improved and passes<max_pass:
L809             improved, passes = False, passes+1
L810             for i,out in enumerate(list(S)):
L811                 for inn in range(N):
L812                     if inn in S: continue
L813                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L814                     if v>best+1e-10: S, best, improved = cand, v, True; break
L815                 if improved: break
L816         return S, best
L817
L818     @staticmethod
L819     def avg_corr(C: np.ndarray, idx) -> float:
L820         k = len(idx); P = C[np.ix_(idx, idx)]
L821         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L822
L823     @classmethod
L824     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L825         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L826         union = [t for t in pool_tickers if t in returns_df.columns]
L827         for t in g_fixed:
L828             if t not in union: union.append(t)
L829         Rdf_all = returns_df[union]; Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all)>=lookback else Rdf_all; Rdf_all = Rdf_all.dropna()
L830         pool_eff, g_eff = [t for t in pool_tickers if t in Rdf_all.columns], [t for t in g_fixed if t in Rdf_all.columns]
L831         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L832         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L833         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L834         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L835         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L836         if len(g_eff)>0 and mu>0.0:
L837             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L838         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L839         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L840         selected_tickers = [pool_eff[i] for i in S]
L841         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L842
L843     # ---- 選定（スコア Series / returns だけを受ける）----
L844 # === Output：出力整形と送信（表示・Slack） ===
L845 class Output:
L846
L847     def __init__(self, debug=None):
L848         # self.debug は使わない（互換のため引数は受けるが無視）
L849         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L850         self.g_title = self.d_title = ""
L851         self.g_formatters = self.d_formatters = {}
L852         # 低スコア（GSC+DSC）Top10 表示/送信用
L853         self.low10_table = None
L854         self.debug_text = ""   # デバッグ用本文はここに一本化
L855         self._debug_logged = False
L856
L857     # --- 表示（元 display_results のロジックそのまま） ---
L858     def display_results(self, *, exist, bench, df_z, g_score, d_score_all,
L859                         init_G, init_D, top_G, top_D, **kwargs):
L860         logger.info("📌 reached display_results")
L861         pd.set_option('display.float_format','{:.3f}'.format)
L862         print("📈 ファクター分散最適化の結果")
L863         if self.miss_df is not None and not self.miss_df.empty:
L864             print("Missing Data:")
L865             print(self.miss_df.to_string(index=False))
L866
L867         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L868         try:
L869             sc = getattr(self, "_sc", None)
L870             agg_G = getattr(sc, "_agg_G", None)
L871             agg_D = getattr(sc, "_agg_D", None)
L872         except Exception:
L873             sc = agg_G = agg_D = None
L874         class _SeriesProxy:
L875             __slots__ = ("primary", "fallback")
L876             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L877             def get(self, key, default=None):
L878                 try:
L879                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L880                     if v is not None and not (isinstance(v, float) and v != v):
L881                         return v
L882                 except Exception:
L883                     pass
L884                 try:
L885                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L886                 except Exception:
L887                     return default
L888         g_score = _SeriesProxy(agg_G, g_score)
L889         d_score_all = _SeriesProxy(agg_D, d_score_all)
L890         near_G = getattr(sc, "_near_G", []) if sc else []
L891         near_D = getattr(sc, "_near_D", []) if sc else []
L892
L893         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L894         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L895         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L896         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L897         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L898         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L899                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L900         if near_G:
L901             add = [t for t in near_G if t not in set(G_UNI)][:10]
L902             if len(add) < 10:
L903                 try:
L904                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L905                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L906                     used = set(G_UNI + add)
L907                     def _push(lst):
L908      
```