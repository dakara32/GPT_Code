```text
atingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L800     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L801
L802     @staticmethod
L803     def _first_key(d: dict, keys: list[str]):
L804         for k in keys:
L805             if k in d and d[k] is not None: return d[k]
L806         return None
L807
L808     @staticmethod
L809     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L810         for i in range(retries):
L811             r = session.get(url, params=params, timeout=15)
L812             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L813             r.raise_for_status(); return r.json()
L814         r.raise_for_status()
L815
L816     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L817         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L818         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L819         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L820         for sym in tickers:
L821             cfo_ttm = capex_ttm = None
L822             try:
L823                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L824                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L825                 for item in arr[:4]:
L826                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L827                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L828                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L829             except Exception: pass
L830             if cfo_ttm is None or capex_ttm is None:
L831                 try:
L832                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L833                     arr = j.get("cashFlow") or []
L834                     if arr:
L835                         item0 = arr[0]
L836                         if cfo_ttm is None:
L837                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L838                             if v is not None: cfo_ttm = float(v)
L839                         if capex_ttm is None:
L840                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L841                             if v is not None: capex_ttm = float(v)
L842                 except Exception: pass
L843             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L844         return pd.DataFrame(rows).set_index("ticker")
L845
L846     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L847         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L848         T.log("financials (yf) done")
L849         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L850         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L851         if need:
L852             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L853             df = yf_df.join(fh_df, how="left")
L854             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L855                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L856             print("[T] financials (finnhub) done (fallback only)")
L857         else:
L858             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L859             print("[T] financials (finnhub) skipped (no missing)")
L860         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L861         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L862         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L863         fcf_calc = cfo - capex
L864         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L865         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L866         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L867         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L868         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L869         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L870         return df[cols].sort_index()
L871
L872     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L873         eps_rows=[]
L874         for t in tickers:
L875             info_t = info[t]
L876             sec_t = (sec_map or {}).get(t, {})
L877             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L878             eps_q = sec_t.get("eps_q_recent", np.nan)
L879             try:
L880                 tk = tickers_bulk.tickers.get(t)
L881                 if tk is None:
L882                     sym = info_t.get("_yf_symbol") if isinstance(info_t, dict) else None
L883                     if sym:
L884                         tk = tickers_bulk.tickers.get(sym)
L885                 qearn = tk.quarterly_earnings if tk is not None else None
L886                 so = info_t.get("sharesOutstanding")
L887                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L888                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L889                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L890                     if pd.isna(eps_q):
L891                         eps_q = qearn["Earnings"].iloc[-1]/so
L892             except Exception: pass
L893             rev_ttm = sec_t.get("rev_ttm", np.nan)
L894             rev_q = sec_t.get("rev_q_recent", np.nan)
L895             if (not sec_t) or pd.isna(rev_ttm):
L896                 try:
L897                     tk = tickers_bulk.tickers.get(t)
L898                     if tk is None and isinstance(info_t, dict):
L899                         sym = info_t.get("_yf_symbol")
L900                         if sym:
L901                             tk = tickers_bulk.tickers.get(sym)
L902                     qfin = getattr(tk, "quarterly_financials", None)
L903                     if qfin is not None and not qfin.empty:
L904                         idx_lower = {str(i).lower(): i for i in qfin.index}
L905                         rev_idx = None
L906                         for name in ("Total Revenue", "TotalRevenue"):
L907                             key = name.lower()
L908                             if key in idx_lower:
L909                                 rev_idx = idx_lower[key]
L910                                 break
L911                         if rev_idx is not None:
L912                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L913                             if not rev_series.empty:
L914                                 rev_ttm_yf = float(rev_series.head(4).sum())
L915                                 if pd.isna(rev_ttm):
L916                                     rev_ttm = rev_ttm_yf
L917                                 if pd.isna(rev_q):
L918                                     rev_q = float(rev_series.iloc[0])
L919                 except Exception:
L920                     pass
L921             eps_rows.append({
L922                 "ticker": t,
L923                 "eps_ttm": eps_ttm,
L924                 "eps_ttm_prev": sec_t.get("eps_ttm_prev", np.nan),
L925                 "eps_q_recent": eps_q,
L926                 "eps_q_prev": sec_t.get("eps_lastq_prev", np.nan),
L927                 "rev_ttm": rev_ttm,
L928                 "rev_ttm_prev": sec_t.get("rev_ttm_prev", np.nan),
L929                 "rev_q_recent": rev_q,
L930                 "rev_q_prev": sec_t.get("rev_lastq_prev", np.nan),
L931                 "eps_annual_latest": sec_t.get("eps_annual_latest", np.nan),
L932                 "eps_annual_prev": sec_t.get("eps_annual_prev", np.nan),
L933                 "rev_annual_latest": sec_t.get("rev_annual_latest", np.nan),
L934                 "rev_annual_prev": sec_t.get("rev_annual_prev", np.nan),
L935                 "eps_cagr3": sec_t.get("eps_cagr3", np.nan),
L936                 "rev_cagr3": sec_t.get("rev_cagr3", np.nan),
L937             })
L938         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L939
L940     def prepare_data(self):
L941         """Fetch price and fundamental data for all tickers."""
L942         self.sec_dryrun_sample()
L943         # --- yfinance 用にティッカーを正規化（"$"剥がし、"."→"-"） ---
L944         def _to_yf(sym: str) -> str:
L945             s = (sym or "").strip().lstrip("$").replace("＄", "")
L946             # BRK.B / PBR.A などは Yahoo では '-' を使用
L947             yf_sym = s.replace("．", ".").replace(".", "-")
L948             return yf_sym or (sym or "")
L949
L950         cand_y = [_to_yf(t) for t in self.cand]
L951         cand_info = yf.Tickers(" ".join(cand_y))
L952
L953         def _price(orig: str, ysym: str) -> float:
L954             try:
L955                 return cand_info.tickers[ysym].fast_info.get("lastPrice", np.inf)
L956             except Exception as e:
L957                 print(f"{orig}: price fetch failed ({e})")
L958                 return np.inf
L959
L960         cand_prices = {orig: _price(orig, ysym) for orig, ysym in zip(self.cand, cand_y)}
L961         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L962         T.log("price cap filter done (CAND_PRICE_MAX)")
L963         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L964         # ユニバース確定（元ティッカー保持）。yfinance には後で変換して渡す
L965         tickers = list(dict.fromkeys(self.exist + cand_f))
L966         yf_map = {t: _to_yf(t) for t in tickers}
L967         yf_list = list(dict.fromkeys([yf_map[t] for t in tickers]))
L968         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L969         data = yf.download(yf_list + [self.bench], period="600d",
L970                            auto_adjust=True, progress=False, threads=False)
L971         T.log("yf.download done")
L972         inv = {v: k for k, v in yf_map.items()}
L973         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L974         px = px.rename(columns=inv)
L975         try:
L976             if isinstance(data.columns, pd.MultiIndex):
L977                 data = data.rename(columns=inv, level=1)
L978             else:
L979                 data = data.rename(columns=inv)
L980         except Exception:
L981             pass
L982         spx = data["Close"][self.bench].reindex(px.index).ffill()
L983         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L984         if clip_days > 0:
L985             px, spx = px.tail(clip_days + 1), spx.tail(clip_days + 1)
L986             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)
L987         else:
L988             logger.info("[T] price window clip skipped; rows=%d", len(px))
L989         tickers_bulk, info = yf.Tickers(" ".join(yf_list)), {}
L990         for orig, ysym in yf_map.items():
L991             if ysym in tickers_bulk.tick
```