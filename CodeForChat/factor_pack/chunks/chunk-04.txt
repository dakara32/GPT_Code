```text
for t in G_UNI]
L658         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L659         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L660                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L661         if near_G:
L662             add = [t for t in near_G if t not in set(G_UNI)][:10]
L663             if len(add) < 10:
L664                 try:
L665                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L666                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L667                     used = set(G_UNI + add)
L668                     def _push(lst):
L669                         nonlocal add, used
L670                         for t in lst:
L671                             if len(add) == 10: break
L672                             if t in aggG.index and t not in used:
L673                                 add.append(t); used.add(t)
L674                     _push(out_now)           # ① 今回 OUT を優先
L675                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L676                 except Exception:
L677                     pass
L678             if add:
L679                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L680                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L681         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L682
L683         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L684         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L685         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L686         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L687         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L688         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L689         import scorer
L690         dw_eff = scorer.D_WEIGHTS_EFF
L691         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L692                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L693         if near_D:
L694             add = [t for t in near_D if t not in set(D_UNI)][:10]
L695             if add:
L696                 d_disp2 = pd.DataFrame(index=add)
L697                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L698                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L699                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L700         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L701
L702         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L703         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L704         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L705
L706         self.io_table = pd.DataFrame({
L707             'IN': pd.Series(in_list),
L708             '/ OUT': pd.Series(out_list)
L709         })
L710         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L711         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L712         self.io_table['GSC'] = pd.Series(g_list)
L713         self.io_table['DSC'] = pd.Series(d_list)
L714
L715         print("Changes:")
L716         print(self.io_table.to_string(index=False))
L717
L718         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L719         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L720         for name,ticks in portfolios.items():
L721             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L722             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L723             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L724             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L725             if len(ticks)>=2:
L726                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L727                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L728                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L729             else: RAW_rho = RESID_rho = np.nan
L730             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L731         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L732         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L733         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L734         def _fmt_row(s):
L735             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L736         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L737         # === 追加: GSC+DSC が低い順 TOP10 ===
L738         try:
L739             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L740             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L741             all_scores = all_scores.dropna(subset=['G_plus_D'])
L742             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L743             print("Low Score Candidates (GSC+DSC bottom 10):")
L744             print(self.low10_table.to_string())
L745         except Exception as e:
L746             print(f"[warn] low-score ranking failed: {e}")
L747             self.low10_table = None
L748         # --- ここから: デバッグ出力は _compact_debug で一本化（表示経路もSlack経路もこれだけ）---
L749         if debug_mode:
L750             from types import SimpleNamespace
L751             df_full_src    = getattr(getattr(self, "_sc", None), "_feat", None)
L752             df_full        = getattr(df_full_src, "df_full", None) or kwargs.get("df_full")
L753             df_full_z_pass = getattr(df_full_src, "df_full_z", None) or kwargs.get("df_full_z")
L754             fb_like = SimpleNamespace(
L755                 df_full=df_full,
L756                 df_z=df_z,
L757                 df_full_z=df_full_z_pass,
L758                 g_score=g_score,
L759                 d_score_all=d_score_all,
L760                 missing_logs=self.miss_df,
L761             )
L762             sb_like = SimpleNamespace(top_G=top_G, top_D=top_D)
L763             self.debug_text = _compact_debug(
L764                 fb_like,
L765                 sb_like,
L766                 prevG=kwargs.get("prev_G", exist),
L767                 prevD=kwargs.get("prev_D", exist),
L768                 max_rows=int(os.getenv("DEBUG_MAX_ROWS", "140")),
L769             )
L770             self._has_debug = bool((self.debug_text or "").strip())
L771             print(f"[DBG] debug_mode={debug_mode}  debug_len={len(self.debug_text or '')}  low10={self.low10_table is not None}")
L772         else:
L773             self.debug_text = ""
L774             self._has_debug = False
L775         # Slack側で分割送信するためコンソールには出力しない
L776         # if debug_mode and self.debug_text:
L777         #     print(self.debug_text)
L778
L779     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L780     def notify_slack(self):
L781         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L782         if not SLACK_WEBHOOK_URL:
L783             raise ValueError("SLACK_WEBHOOK_URL not set")
L784
L785         def _filter_suffix_from(spec: dict, group: str) -> str:
L786             g = spec.get(group, {})
L787             parts = [str(m) for m in g.get("pre_mask", [])]
L788             for k, v in (g.get("pre_filter", {}) or {}).items():
L789                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L790                 name = {"beta": "β"}.get(base, base)
L791                 try:
L792                     val = f"{float(v):g}"
L793                 except Exception:
L794                     val = str(v)
L795                 parts.append(f"{name}{op}{val}")
L796             return "" if not parts else " / filter:" + " & ".join(parts)
L797
L798         def _inject_filter_suffix(title: str, group: str) -> str:
L799             suf = _filter_suffix_from(FILTER_SPEC, group)
L800             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L801
L802         def _blk(title, tbl, fmt=None, drop=()):
L803             if tbl is None or getattr(tbl, 'empty', False):
L804                 return f"{title}\n(選定なし)\n"
L805             if drop and hasattr(tbl, 'columns'):
L806                 keep = [c for c in tbl.columns if c not in drop]
L807                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L808             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L809
L810         message = "📈 ファクター分散最適化の結果\n"
L811         if self.miss_df is not None and not self.miss_df.empty:
L812             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L813         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L814         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L815         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L816         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L817
L818         try:
L819             resp = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L820             print(f"[DBG] main_post_status={getattr(resp, 'status_code', None)}  size={len(message)}")
L821             if resp is not None:
L822                 resp.raise_for_status()
L823             print("✅ Slack: main message sent")
L824         except Exception as e:
L825             print(f"⚠️ Slack main message error: {e}")
L826
L827         if debug_mode and self._has_debug:
L828             print(f"[DBG] sending debug chunks... len={len(self.debug_text)}")
L829             _slack_debug(self.debug_text, chunk=2800, fenced=True)
L830         else:
L831             print(f"[DBG] skip debug send: debug_mode={debug_mode} _has_debug={self._has_debug}")
L832
L833 def _infer_g_universe(feature_df, selected12=None, near5=None):
L834     try:
L835         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L836         if out: return out
L837     except Exception:
L838         pass
L839     base = set()
L840     for l
```