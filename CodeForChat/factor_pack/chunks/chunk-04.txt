```text
(v) for v in capex_vals]))
L774             except Exception: pass
L775             if cfo_ttm is None or capex_ttm is None:
L776                 try:
L777                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L778                     arr = j.get("cashFlow") or []
L779                     if arr:
L780                         item0 = arr[0]
L781                         if cfo_ttm is None:
L782                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L783                             if v is not None: cfo_ttm = float(v)
L784                         if capex_ttm is None:
L785                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L786                             if v is not None: capex_ttm = float(v)
L787                 except Exception: pass
L788             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L789         return pd.DataFrame(rows).set_index("ticker")
L790
L791     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L792         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L793         T.log("financials (yf) done")
L794         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L795         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L796         if need:
L797             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L798             df = yf_df.join(fh_df, how="left")
L799             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L800                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L801             print("[T] financials (finnhub) done (fallback only)")
L802         else:
L803             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L804             print("[T] financials (finnhub) skipped (no missing)")
L805         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L806         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L807         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L808         fcf_calc = cfo - capex
L809         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L810         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L811         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L812         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L813         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L814         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L815         return df[cols].sort_index()
L816
L817     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L818         eps_rows=[]
L819         for t in tickers:
L820             info_t = info[t]
L821             sec_t = (sec_map or {}).get(t, {})
L822             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L823             eps_q = sec_t.get("eps_q_recent", np.nan)
L824             try:
L825                 tk = tickers_bulk.tickers.get(t)
L826                 if tk is None:
L827                     sym = info_t.get("_yf_symbol") if isinstance(info_t, dict) else None
L828                     if sym:
L829                         tk = tickers_bulk.tickers.get(sym)
L830                 qearn = tk.quarterly_earnings if tk is not None else None
L831                 so = info_t.get("sharesOutstanding")
L832                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L833                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L834                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L835                     if pd.isna(eps_q):
L836                         eps_q = qearn["Earnings"].iloc[-1]/so
L837             except Exception: pass
L838             rev_ttm = sec_t.get("rev_ttm", np.nan)
L839             rev_q = sec_t.get("rev_q_recent", np.nan)
L840             if (not sec_t) or pd.isna(rev_ttm):
L841                 try:
L842                     tk = tickers_bulk.tickers.get(t)
L843                     if tk is None and isinstance(info_t, dict):
L844                         sym = info_t.get("_yf_symbol")
L845                         if sym:
L846                             tk = tickers_bulk.tickers.get(sym)
L847                     qfin = getattr(tk, "quarterly_financials", None)
L848                     if qfin is not None and not qfin.empty:
L849                         idx_lower = {str(i).lower(): i for i in qfin.index}
L850                         rev_idx = None
L851                         for name in ("Total Revenue", "TotalRevenue"):
L852                             key = name.lower()
L853                             if key in idx_lower:
L854                                 rev_idx = idx_lower[key]
L855                                 break
L856                         if rev_idx is not None:
L857                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L858                             if not rev_series.empty:
L859                                 rev_ttm_yf = float(rev_series.head(4).sum())
L860                                 if pd.isna(rev_ttm):
L861                                     rev_ttm = rev_ttm_yf
L862                                 if pd.isna(rev_q):
L863                                     rev_q = float(rev_series.iloc[0])
L864                 except Exception:
L865                     pass
L866             eps_rows.append({
L867                 "ticker": t,
L868                 "eps_ttm": eps_ttm,
L869                 "eps_ttm_prev": sec_t.get("eps_ttm_prev", np.nan),
L870                 "eps_q_recent": eps_q,
L871                 "eps_q_prev": sec_t.get("eps_lastq_prev", np.nan),
L872                 "rev_ttm": rev_ttm,
L873                 "rev_ttm_prev": sec_t.get("rev_ttm_prev", np.nan),
L874                 "rev_q_recent": rev_q,
L875                 "rev_q_prev": sec_t.get("rev_lastq_prev", np.nan),
L876                 "eps_annual_latest": sec_t.get("eps_annual_latest", np.nan),
L877                 "eps_annual_prev": sec_t.get("eps_annual_prev", np.nan),
L878                 "rev_annual_latest": sec_t.get("rev_annual_latest", np.nan),
L879                 "rev_annual_prev": sec_t.get("rev_annual_prev", np.nan),
L880                 "eps_cagr3": sec_t.get("eps_cagr3", np.nan),
L881                 "rev_cagr3": sec_t.get("rev_cagr3", np.nan),
L882             })
L883         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L884
L885     def prepare_data(self):
L886         """Fetch price and fundamental data for all tickers."""
L887         self.sec_dryrun_sample()
L888         # --- yfinance 用にティッカーを正規化（"$"剥がし、"."→"-"） ---
L889         def _to_yf(sym: str) -> str:
L890             s = (sym or "").strip().lstrip("$").replace("＄", "")
L891             # BRK.B / PBR.A などは Yahoo では '-' を使用
L892             yf_sym = s.replace("．", ".").replace(".", "-")
L893             return yf_sym or (sym or "")
L894
L895         cand_y = [_to_yf(t) for t in self.cand]
L896         cand_info = yf.Tickers(" ".join(cand_y))
L897
L898         def _price(orig: str, ysym: str) -> float:
L899             try:
L900                 return cand_info.tickers[ysym].fast_info.get("lastPrice", np.inf)
L901             except Exception as e:
L902                 print(f"{orig}: price fetch failed ({e})")
L903                 return np.inf
L904
L905         cand_prices = {orig: _price(orig, ysym) for orig, ysym in zip(self.cand, cand_y)}
L906         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L907         T.log("price cap filter done (CAND_PRICE_MAX)")
L908         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L909         # ユニバース確定（元ティッカー保持）。yfinance には後で変換して渡す
L910         tickers = list(dict.fromkeys(self.exist + cand_f))
L911         yf_map = {t: _to_yf(t) for t in tickers}
L912         yf_list = list(dict.fromkeys([yf_map[t] for t in tickers]))
L913         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L914         data = yf.download(yf_list + [self.bench], period="600d",
L915                            auto_adjust=True, progress=False, threads=False)
L916         T.log("yf.download done")
L917         inv = {v: k for k, v in yf_map.items()}
L918         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L919         px = px.rename(columns=inv)
L920         try:
L921             if isinstance(data.columns, pd.MultiIndex):
L922                 data = data.rename(columns=inv, level=1)
L923             else:
L924                 data = data.rename(columns=inv)
L925         except Exception:
L926             pass
L927         spx = data["Close"][self.bench].reindex(px.index).ffill()
L928         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L929         if clip_days > 0:
L930             px, spx = px.tail(clip_days + 1), spx.tail(clip_days + 1)
L931             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)
L932         else:
L933             logger.info("[T] price window clip skipped; rows=%d", len(px))
L934         tickers_bulk, info = yf.Tickers(" ".join(yf_list)), {}
L935         for orig, ysym in yf_map.items():
L936             if ysym in tickers_bulk.tickers:
L937                 tickers_bulk.tickers[orig] = tickers_bulk.tickers[ysym]
L938         for t in tickers:
L939             try:
L940                 tk = tickers_bulk.tickers.get(t) or tickers_bulk.tickers.get(yf_map[t])
L941                 info_entry = tk.info if tk is not None else {}
L942                 if not isinstance(info_entry, dict):
L943                     info_entry = {}
L944                 info_entry.setdefault("_yf_symbol", getattr(tk, "ticker", yf_map.get(t)))
L945                 info[t] = info_entry
L946             except Exception as e:
L947                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L948                 info[t] = {}
L949         try:
L950             sec_map = self.fetch_eps_rev_from_sec(tickers)
L951         except Exception as e:
L952             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L953             sec_map = {}
L954
L955         def _brief_len(s):
L956             try:
L957                 if isinstance(s, pd.Series):
L958                     return int(s.dropna().size)
L959                 if isinstance(s, (list, tuple)):
L960                     return len([v for v in s if pd.notna(v)])
L961                 if isinstance(s, np.ndarray):
L962                     return int(np.count_nonzero(~pd.isna(s)))
L963                 return int(bool(s))
L964             except Exception:
L965                 return 0
L966
L967         def _has_entries(val) -> bool:
L968             try:
L969                 if isinstance(val, pd.Series):
L970                     return not val.dropna().empty
L971                 if isinstance(val, (list, tuple)):
L972                     return any(pd.notna(v) for v in val)
L973                 return bool(val)
L974             except Exception:
L975                 return False
L976
L977         have_rev = 0
L978         have_eps = 0
L979         rev_lens: list[int] = []
L980         eps_lens: list[int] = []
L981         rev_y_lens: list[int] = []
```