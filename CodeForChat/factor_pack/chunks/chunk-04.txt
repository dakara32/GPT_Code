```text
  self.io_table['DSC'] = pd.Series(d_list)
L626
L627         print("Changes:")
L628         print(self.io_table.to_string(index=False))
L629
L630         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False)['Close']
L631         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L632         for name,ticks in portfolios.items():
L633             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L634             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L635             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L636             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L637             if len(ticks)>=2:
L638                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L639                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L640                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L641             else: RAW_rho = RESID_rho = np.nan
L642             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L643         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L644         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L645         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L646         def _fmt_row(s):
L647             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L648         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L649         if self.debug:
L650             self.debug_table = pd.concat([df_z[['TR','EPS','REV','ROE','BETA','DIV','FCF','RS','TR_str','DIV_STREAK']], g_score.rename('GSC'), d_score_all.rename('DSC')], axis=1).round(3)
L651             print("Debug Data:"); print(self.debug_table.to_string())
L652
L653         # === 追加: GSC+DSC が低い順 TOP10 ===
L654         try:
L655             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L656             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L657             all_scores = all_scores.dropna(subset=['G_plus_D'])
L658             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L659             print("Low Score Candidates (GSC+DSC bottom 10):")
L660             print(self.low10_table.to_string())
L661         except Exception as e:
L662             print(f"[warn] low-score ranking failed: {e}")
L663             self.low10_table = None
L664
L665     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L666     def notify_slack(self):
L667         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L668         if not SLACK_WEBHOOK_URL: raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L669         def _filter_suffix_from(spec: dict, group: str) -> str:
L670             g = spec.get(group, {})
L671             parts = [str(m) for m in g.get("pre_mask", [])]
L672             for k, v in (g.get("pre_filter", {}) or {}).items():
L673                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L674                 name = {"beta": "β"}.get(base, base)
L675                 try: val = f"{float(v):g}"
L676                 except: val = str(v)
L677                 parts.append(f"{name}{op}{val}")
L678             return "" if not parts else " / filter:" + " & ".join(parts)
L679         def _inject_filter_suffix(title: str, group: str) -> str:
L680             suf = _filter_suffix_from(FILTER_SPEC, group)
L681             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L682         def _blk(title, tbl, fmt=None, drop=()):
L683             if tbl is None or getattr(tbl,'empty',False): return f"{title}\n(選定なし)\n"
L684             if drop and hasattr(tbl,'columns'):
L685                 keep = [c for c in tbl.columns if c not in drop]
L686                 tbl, fmt = tbl[keep], {k:v for k,v in (fmt or {}).items() if k in keep}
L687             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L688
L689         g_title = _inject_filter_suffix(self.g_title, "G")
L690         d_title = _inject_filter_suffix(self.d_title, "D")
L691         message  = "📈 ファクター分散最適化の結果\n"
L692         if self.miss_df is not None and not self.miss_df.empty:
L693             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L694         message += _blk(g_title, self.g_table, self.g_formatters, drop=("TRD",))
L695         message += _blk(d_title, self.d_table, self.d_formatters)
L696         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table,'empty',False) else f"```{self.io_table.to_string(index=False)}```\n")
L697         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L698         if self.debug and self.debug_table is not None:
L699             message += "\nDebug Data\n```" + self.debug_table.to_string() + "```"
L700         payload = {"text": message}
L701         try:
L702             resp = requests.post(SLACK_WEBHOOK_URL, json=payload); resp.raise_for_status(); print("✅ Slack（Webhook）へ送信しました")
L703         except Exception as e: print(f"⚠️ Slack通知エラー: {e}")
L704
L705
L706 def _infer_g_universe(feature_df, selected12=None, near5=None):
L707     try:
L708         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L709         if out: return out
L710     except Exception:
L711         pass
L712     base = set()
L713     for lst in (selected12 or []), (near5 or []):
L714         for x in (lst or []): base.add(x)
L715     return list(base) if base else list(feature_df.index)
L716
L717
L718 def _fmt_with_fire_mark(tickers, feature_df):
L719     out = []
L720     for t in tickers or []:
L721         try:
L722             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L723             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L724             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L725         except Exception:
L726             out.append(t)
L727     return out
L728
L729
L730 def _label_recent_event(t, feature_df):
L731     try:
L732         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L733         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L734         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L735         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L736         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L737     except Exception:
L738         pass
L739     return t
L740
L741
L742 # ===== パイプライン可視化：G/D共通フロー（出力は不変） ==============================
L743
L744 def io_build_input_bundle() -> InputBundle:
L745     """
L746     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L747     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L748     """
L749     inp = Input(cand=cand, exist=exist, bench=bench,
L750                 price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY)
L751     state = inp.prepare_data()
L752     return InputBundle(
L753         cand=state["cand"], tickers=state["tickers"], bench=bench,
L754         data=state["data"], px=state["px"], spx=state["spx"],
L755         tickers_bulk=state["tickers_bulk"], info=state["info"],
L756         eps_df=state["eps_df"], fcf_df=state["fcf_df"],
L757         returns=state["returns"]
L758     )
L759
L760 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L761               n_target: int) -> tuple[list, float, float, float]:
L762     """
L763     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L764     戻り値：(pick, avg_res_corr, sum_score, objective)
L765     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L766     """
L767     sc.cfg = cfg
L768
L769     if hasattr(sc, "score_build_features"):
L770         feat = sc.score_build_features(inb)
L771         if not hasattr(sc, "_feat_logged"):
L772             T.log("features built (scorer)")
L773             sc._feat_logged = True
L774         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L775     else:
L776         fb = sc.aggregate_scores(inb, cfg)
L777         if not hasattr(sc, "_feat_logged"):
L778             T.log("features built (scorer)")
L779             sc._feat_logged = True
L780         sc._feat = fb
L781         agg = fb.g_score if group == "G" else fb.d_score_all
L782         if group == "D" and hasattr(fb, "df"):
L783             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L784
L785     if hasattr(sc, "filter_candidates"):
L786         mask = sc.filter_candidates(inb, agg, group, cfg)
L787         agg = agg[mask]
L788
L789     selector = Selector()
L790     if hasattr(sc, "select_diversified"):
L791         pick, avg_r, sum_sc, obj = sc.select_diversified(
L792             agg, group, cfg, n_target,
L793             selector=selector, prev_tickers=None,
L794             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L795             cross_mu=cfg.drrs.cross_mu_gd
L796         )
L797     else:
L798         if group == "G":
L799             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L800             res = selector.select_bucket_drrs(
L801                 returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L802                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L803                 lam=cfg.drrs.G.get("lam", 0.68),
L804                 lookback=cfg.drrs.G.get("lookback", 252),
L805                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0
L806             )
L807         else:
L808             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L809             g_fixed = getattr(sc, "_top_G", None)
L810             res = selector.select_bucket_drrs(
L811                 returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L812                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L813                 lam=cfg.drrs.D.get("lam", 0.85),
L814                 lookback=cfg.drrs.D.get("lookback", 504),
L815                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L816                 mu=cfg.drrs.cross_mu_gd
L817             )
L818         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L819         sum_sc = res["sum_score"]; obj = res["objective"]
L820         if group == "D":
L821             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L822             T.log("selection finalized (G/D)")
L823     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L824     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L825     try:
L826         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L827         near10 = list(pool.sort_values(ascending=False).head(10).index)
L828         setattr(sc, f"_near_{group}", near10)
L829         setattr(sc, f"_agg_{group}", agg)
L830     except Exception:
L831         pass
L832
L833     if group == "D":
L834         T.log("save done")
L835     if group == "G":
L836         sc._top_G = pick
L837     return pick, avg_r, sum_sc, obj
L838
L839 def run_pipeline() -> SelectionBundle:
L840     """
L841     G/D共通フローの入口。
```