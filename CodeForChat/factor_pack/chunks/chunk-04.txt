```text

L645         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L646         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L647         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L648         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L649         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L650         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L651         import scorer
L652         dw_eff = scorer.D_WEIGHTS_EFF
L653         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L654                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L655         if near_D:
L656             add = [t for t in near_D if t not in set(D_UNI)][:10]
L657             if add:
L658                 d_disp2 = pd.DataFrame(index=add)
L659                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L660                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L661                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L662         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L663
L664         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L665         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L666         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L667
L668         self.io_table = pd.DataFrame({
L669             'IN': pd.Series(in_list),
L670             '/ OUT': pd.Series(out_list)
L671         })
L672         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L673         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L674         self.io_table['GSC'] = pd.Series(g_list)
L675         self.io_table['DSC'] = pd.Series(d_list)
L676
L677         print("Changes:")
L678         print(self.io_table.to_string(index=False))
L679
L680         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L681         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L682         for name,ticks in portfolios.items():
L683             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L684             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L685             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L686             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L687             if len(ticks)>=2:
L688                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L689                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L690                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L691             else: RAW_rho = RESID_rho = np.nan
L692             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L693         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L694         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L695         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L696         def _fmt_row(s):
L697             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L698         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L699         # === 追加: GSC+DSC が低い順 TOP10 ===
L700         try:
L701             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L702             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L703             all_scores = all_scores.dropna(subset=['G_plus_D'])
L704             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L705             print("Low Score Candidates (GSC+DSC bottom 10):")
L706             print(self.low10_table.to_string())
L707         except Exception as e:
L708             print(f"[warn] low-score ranking failed: {e}")
L709             self.low10_table = None
L710         # --- ここから: デバッグ出力は _compact_debug で一本化（表示経路はここだけ）---
L711         if debug_mode:
L712             from types import SimpleNamespace
L713
L714             df_full_src    = getattr(getattr(self, "_sc", None), "_feat", None)
L715             df_full        = getattr(df_full_src, "df_full", None) or kwargs.get("df_full")
L716             df_full_z_pass = getattr(df_full_src, "df_full_z", None) or kwargs.get("df_full_z")
L717
L718             fb_like = SimpleNamespace(
L719                 df_full=df_full,
L720                 df_z=df_z,
L721                 df_full_z=df_full_z_pass,
L722                 g_score=g_score,
L723                 d_score_all=d_score_all,
L724                 missing_logs=self.miss_df,
L725             )
L726             sb_like = SimpleNamespace(top_G=top_G, top_D=top_D)
L727
L728             self.debug_text = _compact_debug(
L729                 fb_like,
L730                 sb_like,
L731                 prevG=kwargs.get("prev_G", exist),
L732                 prevD=kwargs.get("prev_D", exist),
L733                 max_rows=int(os.getenv("DEBUG_MAX_ROWS", "120")),
L734             )
L735
L736             if not (self.debug_text or "").strip():
L737                 src_df = df_full or df_full_z_pass or df_z
L738                 if src_df is not None and getattr(src_df, "empty", False) is False:
L739                     core = [c for c in [
L740                         "GRW","TR_EPS","TR_REV","EPS_Q_YOY","REV_Q_YOY","REV_YOY_ACC",
L741                         "RULE40","FCF_MGN","GSC","DSC"
L742                     ] if c in src_df.columns]
L743                     if core:
L744                         pick: list[str] = []
L745                         for t in (self.g_table, self.d_table, self.low10_table):
L746                             if t is not None and getattr(t, "empty", False) is False:
L747                                 pick += [i for i in list(t.index) if i in src_df.index]
L748                         view = (src_df.loc[pick, core] if pick else src_df[core]).head(int(os.getenv("DEBUG_MAX_ROWS", "80")))
L749                         self.debug_text = "DEBUG fallback\n" + view.to_string()
L750                     else:
L751                         self.debug_text = "(no debug columns)"
L752                 else:
L753                     self.debug_text = "(no dataframe)"
L754         else:
L755             self.debug_text = ""
L756         if debug_mode and (self.debug_text or "").strip():
L757             lines = (self.debug_text or "").count("\n") + 1
L758             print(f"[debug] dump begin: {lines} lines", flush=True)
L759             print("```DEBUG (selected + current + near-miss)```", flush=True)
L760             print(self.debug_text, flush=True)
L761             _write_debug_log(self.debug_text, "debug_scores.txt")
L762             print("[debug] dump end", flush=True)
L763         else:
L764             print(f"[debug] skip dump: debug_mode={debug_mode} empty={not bool((self.debug_text or '').strip())}", flush=True)
L765
L766     def notify_slack(self):
L767         """[log] 互換名：本文を標準出力へ"""
L768
L769         def _filter_suffix_from(spec: dict, group: str) -> str:
L770             g = spec.get(group, {})
L771             parts = [str(m) for m in g.get("pre_mask", [])]
L772             for k, v in (g.get("pre_filter", {}) or {}).items():
L773                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L774                 name = {"beta": "β"}.get(base, base)
L775                 try:
L776                     val = f"{float(v):g}"
L777                 except Exception:
L778                     val = str(v)
L779                 parts.append(f"{name}{op}{val}")
L780             return "" if not parts else " / filter:" + " & ".join(parts)
L781
L782         def _inject_filter_suffix(title: str, group: str) -> str:
L783             suf = _filter_suffix_from(FILTER_SPEC, group)
L784             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L785
L786         def _blk(title, tbl, fmt=None, drop=()):
L787             if tbl is None or getattr(tbl, 'empty', False):
L788                 return f"{title}\n(選定なし)\n"
L789             if drop and hasattr(tbl, 'columns'):
L790                 keep = [c for c in tbl.columns if c not in drop]
L791                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L792             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L793
L794         message = "📈 ファクター分散最適化の結果\n"
L795         if self.miss_df is not None and not self.miss_df.empty:
L796             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L797         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L798         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L799         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L800         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L801
L802         print(message)
L803
L804         if (self.debug_text or "").strip():
L805             print("```DEBUG (after Low Score)```")
L806             print(self.debug_text)
L807
L808 def _infer_g_universe(feature_df, selected12=None, near5=None):
L809     try:
L810         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L811         if out: return out
L812     except Exception:
L813         pass
L814     base = set()
L815     for lst in (selected12 or []), (near5 or []):
L816         for x in (lst or []): base.add(x)
L817     return list(base) if base else list(feature_df.index)
L818
L819 def _fmt_with_fire_mark(tickers, feature_df):
L820     out = []
L821     for t in tickers or []:
L822         try:
L823             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L824             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L825             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L826         except Exception:
L827             out.append(t)
L828     return out
L829
L830 def _label_recent_event(t, feature_df):
L831     try:
L832         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L833         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L834         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L835         elif pb and not br: return f"{t}（押し
```