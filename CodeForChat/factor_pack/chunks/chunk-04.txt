```text
lf.fallback.get(key) if hasattr(self.fallback, "get") else default
L670                 except Exception:
L671                     return default
L672         g_score = _SeriesProxy(agg_G, g_score)
L673         d_score_all = _SeriesProxy(agg_D, d_score_all)
L674         near_G = getattr(sc, "_near_G", []) if sc else []
L675         near_D = getattr(sc, "_near_D", []) if sc else []
L676
L677         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L678         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L679         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L680         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L681         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L682         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L683                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L684         if near_G:
L685             add = [t for t in near_G if t not in set(G_UNI)][:10]
L686             if len(add) < 10:
L687                 try:
L688                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L689                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L690                     used = set(G_UNI + add)
L691                     def _push(lst):
L692                         nonlocal add, used
L693                         for t in lst:
L694                             if len(add) == 10: break
L695                             if t in aggG.index and t not in used:
L696                                 add.append(t); used.add(t)
L697                     _push(out_now)           # ① 今回 OUT を優先
L698                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L699                 except Exception:
L700                     pass
L701             if add:
L702                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L703                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L704         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L705
L706         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L707         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L708         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L709         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L710         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L711         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L712         import scorer
L713         dw_eff = scorer.D_WEIGHTS_EFF
L714         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L715                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L716         if near_D:
L717             add = [t for t in near_D if t not in set(D_UNI)][:10]
L718             if add:
L719                 d_disp2 = pd.DataFrame(index=add)
L720                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L721                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L722                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L723         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L724
L725         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L726         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L727         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L728
L729         self.io_table = pd.DataFrame({
L730             'IN': pd.Series(in_list),
L731             '/ OUT': pd.Series(out_list)
L732         })
L733         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L734         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L735         self.io_table['GSC'] = pd.Series(g_list)
L736         self.io_table['DSC'] = pd.Series(d_list)
L737
L738         print("Changes:")
L739         print(self.io_table.to_string(index=False))
L740
L741         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L742         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L743         for name,ticks in portfolios.items():
L744             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L745             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L746             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L747             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L748             if len(ticks)>=2:
L749                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L750                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L751                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L752             else: RAW_rho = RESID_rho = np.nan
L753             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L754         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L755         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L756         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L757         def _fmt_row(s):
L758             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L759         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L760         # === 追加: GSC+DSC が低い順 TOP10 ===
L761         try:
L762             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L763             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L764             all_scores = all_scores.dropna(subset=['G_plus_D'])
L765             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L766             print("Low Score Candidates (GSC+DSC bottom 10):")
L767             print(self.low10_table.to_string())
L768             try:
L769                 df_full_src = getattr(getattr(self, "_sc", None), "_feat", None)
L770                 df_full = getattr(df_full_src, "df_full", None) or kwargs.get("df_full")
L771                 df_full_z_pass = getattr(df_full_src, "df_full_z", None) or kwargs.get("df_full_z")
L772                 if not (getattr(self, "debug_text", None) or "").strip():
L773                     fb_like = SimpleNamespace(
L774                         df_full=df_full,
L775                         df_z=df_z,
L776                         df_full_z=df_full_z_pass,
L777                         g_score=g_score,
L778                         d_score_all=d_score_all,
L779                         missing_logs=self.miss_df,
L780                     )
L781                     sb_like = SimpleNamespace(top_G=top_G, top_D=top_D)
L782                     self.debug_text = _compact_debug(
L783                         fb_like,
L784                         sb_like,
L785                         prevG=kwargs.get("prev_G", exist),
L786                         prevD=kwargs.get("prev_D", exist),
L787                         max_rows=int(os.getenv("DEBUG_MAX_ROWS", "120")),
L788                     )
L789                 if not (self.debug_text or "").strip():
L790                     src_df = df_full or df_full_z_pass or df_z
L791                     if src_df is not None and getattr(src_df, "empty", False) is False:
L792                         core = [c for c in [
L793                             "GRW","TR_EPS","TR_REV","EPS_Q_YOY","REV_Q_YOY","REV_YOY_ACC",
L794                             "RULE40","FCF_MGN","GSC","DSC"
L795                         ] if c in src_df.columns]
L796                         if core:
L797                             pick: list[str] = []
L798                             for t in (self.g_table, self.d_table, self.low10_table):
L799                                 if t is not None and getattr(t, "empty", False) is False:
L800                                     pick += [i for i in list(t.index) if i in src_df.index]
L801                             view = (src_df.loc[pick, core] if pick else src_df[core]).head(int(os.getenv("DEBUG_MAX_ROWS", "80")))
L802                             self.debug_text = "DEBUG fallback\n" + view.to_string()
L803                         else:
L804                             self.debug_text = "(no debug columns)"
L805                     else:
L806                         self.debug_text = "(no dataframe)"
L807                 dt = (self.debug_text or "").strip()
L808                 logger.info("===== DEBUG (after Low Score) START =====")
L809                 if dt:
L810                     logger.info("\n%s", dt)
L811                 else:
L812                     logger.info("<empty debug_text>")
L813                 logger.info("===== DEBUG (after Low Score) END =====")
L814             except Exception as e:
L815                 logger.warning("debug dump failed: %s", e)
L816         except Exception as e:
L817             print(f"[warn] low-score ranking failed: {e}")
L818             self.low10_table = None
L819         if not debug_mode:
L820             self.debug_text = ""
L821         if debug_mode:
L822             self._debug_logged = True
L823         else:
L824             logger.debug(
L825                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L826                 debug_mode, not bool((self.debug_text or '').strip())
L827             )
L828             self._debug_logged = True
L829
L830     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L831     def notify_slack(self):
L832         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L833
L834         if not SLACK_WEBHOOK_URL:
L835             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L836             return
L837
L838         def _filter_suffix_from(spec: dict, group: str) -> str:
L839             g = spec.get(group, {})
L840             parts = [str(m) for m in g.get("pre_mask", [])]
L841             for k, v in (g.get("pre_filter", {}) or {}).items():
L842                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L843                 name = {"beta": "β"}.get(base, base)
L844                 try:
L845                     val = f"{float(v):g}"
L846                 except Exception:
L847                     val = str(v)
L848                 parts.a
```