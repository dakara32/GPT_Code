```text
self._CF_ALIASES
L822
L823         def one(t: str):
L824             try:
L825                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L826                 qcf = tk.quarterly_cashflow
L827                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L828                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L829                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L830                 if any(v is None for v in (cfo, capex, fcf)):
L831                     acf = tk.cashflow
L832                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L833                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L834                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L835             except Exception as e:
L836                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L837             n=np.nan
L838             return {"ticker":t,
L839                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L840                     "capex_ttm_yf": n if capex is None else capex,
L841                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L842
L843         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L844         with ThreadPoolExecutor(max_workers=mw) as ex:
L845             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L846         return pd.DataFrame(rows).set_index("ticker")
L847
L848     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L849     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L850
L851     @staticmethod
L852     def _first_key(d: dict, keys: list[str]):
L853         for k in keys:
L854             if k in d and d[k] is not None: return d[k]
L855         return None
L856
L857     @staticmethod
L858     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L859         for i in range(retries):
L860             r = session.get(url, params=params, timeout=15)
L861             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L862             r.raise_for_status(); return r.json()
L863         r.raise_for_status()
L864
L865     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L866         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L867         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L868         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L869         for sym in tickers:
L870             cfo_ttm = capex_ttm = None
L871             try:
L872                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L873                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L874                 for item in arr[:4]:
L875                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L876                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L877                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L878             except Exception: pass
L879             if cfo_ttm is None or capex_ttm is None:
L880                 try:
L881                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L882                     arr = j.get("cashFlow") or []
L883                     if arr:
L884                         item0 = arr[0]
L885                         if cfo_ttm is None:
L886                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L887                             if v is not None: cfo_ttm = float(v)
L888                         if capex_ttm is None:
L889                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L890                             if v is not None: capex_ttm = float(v)
L891                 except Exception: pass
L892             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L893         return pd.DataFrame(rows).set_index("ticker")
L894
L895     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L896         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L897         T.log("financials (yf) done")
L898         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L899         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L900         if need:
L901             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L902             df = yf_df.join(fh_df, how="left")
L903             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L904                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L905             print("[T] financials (finnhub) done (fallback only)")
L906         else:
L907             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L908             print("[T] financials (finnhub) skipped (no missing)")
L909         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L910         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L911         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L912         fcf_calc = cfo - capex
L913         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L914         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L915         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L916         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L917         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L918         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L919         return df[cols].sort_index()
L920
L921     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L922         eps_rows=[]
L923         for t in tickers:
L924             info_t = info[t]
L925             sec_t = (sec_map or {}).get(t, {})
L926             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L927             eps_q = sec_t.get("eps_q_recent", np.nan)
L928             try:
L929                 tk = tickers_bulk.tickers.get(t)
L930                 if tk is None:
L931                     sym = info_t.get("_yf_symbol") if isinstance(info_t, dict) else None
L932                     if sym:
L933                         tk = tickers_bulk.tickers.get(sym)
L934                 qearn = tk.quarterly_earnings if tk is not None else None
L935                 so = info_t.get("sharesOutstanding")
L936                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L937                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L938                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L939                     if pd.isna(eps_q):
L940                         eps_q = qearn["Earnings"].iloc[-1]/so
L941             except Exception: pass
L942             rev_ttm = sec_t.get("rev_ttm", np.nan)
L943             rev_q = sec_t.get("rev_q_recent", np.nan)
L944             if (not sec_t) or pd.isna(rev_ttm):
L945                 try:
L946                     tk = tickers_bulk.tickers.get(t)
L947                     if tk is None and isinstance(info_t, dict):
L948                         sym = info_t.get("_yf_symbol")
L949                         if sym:
L950                             tk = tickers_bulk.tickers.get(sym)
L951                     qfin = getattr(tk, "quarterly_financials", None)
L952                     if qfin is not None and not qfin.empty:
L953                         idx_lower = {str(i).lower(): i for i in qfin.index}
L954                         rev_idx = None
L955                         for name in ("Total Revenue", "TotalRevenue"):
L956                             key = name.lower()
L957                             if key in idx_lower:
L958                                 rev_idx = idx_lower[key]
L959                                 break
L960                         if rev_idx is not None:
L961                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L962                             if not rev_series.empty:
L963                                 rev_ttm_yf = float(rev_series.head(4).sum())
L964                                 if pd.isna(rev_ttm):
L965                                     rev_ttm = rev_ttm_yf
L966                                 if pd.isna(rev_q):
L967                                     rev_q = float(rev_series.iloc[0])
L968                 except Exception:
L969                     pass
L970             eps_rows.append({
L971                 "ticker": t,
L972                 "eps_ttm": eps_ttm,
L973                 "eps_ttm_prev": sec_t.get("eps_ttm_prev", np.nan),
L974                 "eps_q_recent": eps_q,
L975                 "eps_q_prev": sec_t.get("eps_lastq_prev", np.nan),
L976                 "rev_ttm": rev_ttm,
L977                 "rev_ttm_prev": sec_t.get("rev_ttm_prev", np.nan),
L978                 "rev_q_recent": rev_q,
L979                 "rev_q_prev": sec_t.get("rev_lastq_prev", np.nan),
L980                 "eps_annual_latest": sec_t.get("eps_annual_latest", np.nan),
L981                 "eps_annual_prev": sec_t.get("eps_annual_prev", np.nan),
L982                 "rev_annual_latest": sec_t.get("rev_annual_latest", np.nan),
L983                 "rev_annual_prev": sec_t.get("rev_annual_prev", np.nan),
L984                 "eps_cagr3": sec_t.get("eps_cagr3", np.nan),
L985                 "rev_cagr3": sec_t.get("rev_cagr3", np.nan),
L986             })
L987         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L988
L989     def prepare_data(self):
L990         """Fetch price and fundamental data for all tickers."""
L991         self.sec_dryrun_sample()
L992         # --- yfinance 用にティッカーを正規化（"$"剥がし、"."→"-"） ---
L993         def _to_yf(sym: str) -> str:
L994             s = (sym or "").strip().lstrip("$").replace("＄", "")
L995             # BRK.B / PBR.A などは Yahoo では '-' を使用
L996             yf_sym = s.replace("．", ".").replace(".", "-")
L997             return yf_sym or (sym or "")
L998
L999         cand_y = [_to_yf(t) for t in self.cand]
L1000         cand_info = yf.Tickers(" ".join(cand_y))
L1001
L1002         def _price(orig: str, ysym: str) -> float:
L1003             try:
L1004                 return cand_info.tickers[ysym].fast_info.get("lastPrice", np.inf)
L1005             except Exception as e:
L1006                 print(f"{orig}: price fetch failed ({e})")
L1007                 return np.inf
L1008
L1009         cand_prices = {orig: _price(orig, ysym) for orig, ysym in zip(self.cand, cand_y)}
L1010         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L1011         T.log("price cap filter done (CAND_PRICE_MAX)")
L1012   
```