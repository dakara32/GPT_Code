```text
_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L667         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L668         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L669         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L670         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L671         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L672                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L673         if near_G:
L674             add = [t for t in near_G if t not in set(G_UNI)][:10]
L675             if len(add) < 10:
L676                 try:
L677                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L678                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L679                     used = set(G_UNI + add)
L680                     def _push(lst):
L681                         nonlocal add, used
L682                         for t in lst:
L683                             if len(add) == 10: break
L684                             if t in aggG.index and t not in used:
L685                                 add.append(t); used.add(t)
L686                     _push(out_now)           # ① 今回 OUT を優先
L687                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L688                 except Exception:
L689                     pass
L690             if add:
L691                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L692                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L693         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L694
L695         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L696         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L697         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L698         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L699         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L700         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L701         import scorer
L702         dw_eff = scorer.D_WEIGHTS_EFF
L703         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L704                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L705         if near_D:
L706             add = [t for t in near_D if t not in set(D_UNI)][:10]
L707             if add:
L708                 d_disp2 = pd.DataFrame(index=add)
L709                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L710                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L711                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L712         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L713
L714         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L715         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L716         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L717
L718         self.io_table = pd.DataFrame({
L719             'IN': pd.Series(in_list),
L720             '/ OUT': pd.Series(out_list)
L721         })
L722         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L723         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L724         self.io_table['GSC'] = pd.Series(g_list)
L725         self.io_table['DSC'] = pd.Series(d_list)
L726
L727         print("Changes:")
L728         print(self.io_table.to_string(index=False))
L729
L730         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L731         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L732         for name,ticks in portfolios.items():
L733             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L734             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L735             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L736             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L737             if len(ticks)>=2:
L738                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L739                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L740                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L741             else: RAW_rho = RESID_rho = np.nan
L742             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L743         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L744         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L745         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L746         def _fmt_row(s):
L747             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L748         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L749         # === 追加: GSC+DSC が低い順 TOP10 ===
L750         try:
L751             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L752             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L753             all_scores = all_scores.dropna(subset=['G_plus_D'])
L754             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L755             print("Low Score Candidates (GSC+DSC bottom 10):")
L756             print(self.low10_table.to_string())
L757         except Exception as e:
L758             print(f"[warn] low-score ranking failed: {e}")
L759             self.low10_table = None
L760         # --- ここから: デバッグ出力は _compact_debug で一本化（表示経路もSlack経路もこれだけ）---
L761         if debug_mode:
L762             from types import SimpleNamespace
L763
L764             df_full_src    = getattr(getattr(self, "_sc", None), "_feat", None)
L765             df_full        = getattr(df_full_src, "df_full", None) or kwargs.get("df_full")
L766             df_full_z_pass = getattr(df_full_src, "df_full_z", None) or kwargs.get("df_full_z")
L767
L768             fb_like = SimpleNamespace(
L769                 df_full=df_full,
L770                 df_z=df_z,
L771                 df_full_z=df_full_z_pass,
L772                 g_score=g_score,
L773                 d_score_all=d_score_all,
L774                 missing_logs=self.miss_df,
L775             )
L776             sb_like = SimpleNamespace(top_G=top_G, top_D=top_D)
L777
L778             self.debug_text = _compact_debug(
L779                 fb_like,
L780                 sb_like,
L781                 prevG=kwargs.get("prev_G", exist),
L782                 prevD=kwargs.get("prev_D", exist),
L783                 max_rows=int(os.getenv("DEBUG_MAX_ROWS", "120")),
L784             )
L785
L786             if not (self.debug_text or "").strip():
L787                 src_df = df_full or df_full_z_pass or df_z
L788                 if src_df is not None and getattr(src_df, "empty", False) is False:
L789                     core = [c for c in [
L790                         "GRW","TR_EPS","TR_REV","EPS_Q_YOY","REV_Q_YOY","REV_YOY_ACC",
L791                         "RULE40","FCF_MGN","GSC","DSC"
L792                     ] if c in src_df.columns]
L793                     if core:
L794                         pick: list[str] = []
L795                         for t in (self.g_table, self.d_table, self.low10_table):
L796                             if t is not None and getattr(t, "empty", False) is False:
L797                                 pick += [i for i in list(t.index) if i in src_df.index]
L798                         view = (src_df.loc[pick, core] if pick else src_df[core]).head(int(os.getenv("DEBUG_MAX_ROWS", "80")))
L799                         self.debug_text = "DEBUG fallback\n" + view.to_string()
L800                     else:
L801                         self.debug_text = "(no debug columns)"
L802                 else:
L803                     self.debug_text = "(no dataframe)"
L804         else:
L805             self.debug_text = ""
L806         # Slack側で分割送信するためコンソールには出力しない
L807         # if debug_mode and self.debug_text:
L808         #     print(self.debug_text)
L809
L810     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L811     def notify_slack(self):
L812         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L813         if not SLACK_WEBHOOK_URL:
L814             raise ValueError("SLACK_WEBHOOK_URL not set")
L815
L816         def _filter_suffix_from(spec: dict, group: str) -> str:
L817             g = spec.get(group, {})
L818             parts = [str(m) for m in g.get("pre_mask", [])]
L819             for k, v in (g.get("pre_filter", {}) or {}).items():
L820                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L821                 name = {"beta": "β"}.get(base, base)
L822                 try:
L823                     val = f"{float(v):g}"
L824                 except Exception:
L825                     val = str(v)
L826                 parts.append(f"{name}{op}{val}")
L827             return "" if not parts else " / filter:" + " & ".join(parts)
L828
L829         def _inject_filter_suffix(title: str, group: str) -> str:
L830             suf = _filter_suffix_from(FILTER_SPEC, group)
L831             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L832
L833         def _blk(title, tbl, fmt=None, drop=()):
L834             if tbl is None or getattr(tbl, 'empty', False):
L835                 return f"{title}\n(選定なし)\n"
L836             if drop and hasattr(tbl, 'columns'):
L837                 keep = [c for c in tbl.columns if c not in drop]
L838                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L839             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L840
L841         message = "📈 ファクター分散最適化の結果\n"
L842         if self.miss_df is not None and not self.miss_df.empty:
L843             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L844         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L845         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L846         message += "Changes\n" + ("(変更なし)
```