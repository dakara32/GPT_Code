```text
   v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L828
L829     @staticmethod
L830     def _latest(s: pd.Series|None) -> float|None:
L831         if s is None or s.empty: return None
L832         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L833
L834     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L835         from concurrent.futures import ThreadPoolExecutor, as_completed
L836         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L837
L838         def one(t: str):
L839             try:
L840                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L841                 qcf = tk.quarterly_cashflow
L842                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L843                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L844                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L845                 if any(v is None for v in (cfo, capex, fcf)):
L846                     acf = tk.cashflow
L847                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L848                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L849                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L850             except Exception as e:
L851                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L852             n=np.nan
L853             return {"ticker":t,
L854                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L855                     "capex_ttm_yf": n if capex is None else capex,
L856                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L857
L858         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L859         with ThreadPoolExecutor(max_workers=mw) as ex:
L860             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L861         return pd.DataFrame(rows).set_index("ticker")
L862
L863     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L864     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L865
L866     @staticmethod
L867     def _first_key(d: dict, keys: list[str]):
L868         for k in keys:
L869             if k in d and d[k] is not None: return d[k]
L870         return None
L871
L872     @staticmethod
L873     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L874         for i in range(retries):
L875             r = session.get(url, params=params, timeout=15)
L876             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L877             r.raise_for_status(); return r.json()
L878         r.raise_for_status()
L879
L880     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L881         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L882         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L883         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L884         for sym in tickers:
L885             cfo_ttm = capex_ttm = None
L886             try:
L887                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L888                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L889                 for item in arr[:4]:
L890                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L891                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L892                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L893             except Exception: pass
L894             if cfo_ttm is None or capex_ttm is None:
L895                 try:
L896                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L897                     arr = j.get("cashFlow") or []
L898                     if arr:
L899                         item0 = arr[0]
L900                         if cfo_ttm is None:
L901                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L902                             if v is not None: cfo_ttm = float(v)
L903                         if capex_ttm is None:
L904                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L905                             if v is not None: capex_ttm = float(v)
L906                 except Exception: pass
L907             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L908         return pd.DataFrame(rows).set_index("ticker")
L909
L910     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L911         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L912         T.log("financials (yf) done")
L913         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L914         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L915         if need:
L916             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L917             df = yf_df.join(fh_df, how="left")
L918             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L919                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L920             print("[T] financials (finnhub) done (fallback only)")
L921         else:
L922             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L923             print("[T] financials (finnhub) skipped (no missing)")
L924         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L925         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L926         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L927         fcf_calc = cfo - capex
L928         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L929         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L930         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L931         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L932         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L933         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L934         return df[cols].sort_index()
L935
L936     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L937         eps_rows=[]
L938         for t in tickers:
L939             info_t = info[t]
L940             sec_t = (sec_map or {}).get(t, {})
L941             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L942             eps_q = sec_t.get("eps_q_recent", np.nan)
L943             try:
L944                 tk = tickers_bulk.tickers.get(t)
L945                 if tk is None:
L946                     sym = info_t.get("_yf_symbol") if isinstance(info_t, dict) else None
L947                     if sym:
L948                         tk = tickers_bulk.tickers.get(sym)
L949                 qearn = tk.quarterly_earnings if tk is not None else None
L950                 so = info_t.get("sharesOutstanding")
L951                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L952                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L953                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L954                     if pd.isna(eps_q):
L955                         eps_q = qearn["Earnings"].iloc[-1]/so
L956             except Exception: pass
L957             rev_ttm = sec_t.get("rev_ttm", np.nan)
L958             rev_q = sec_t.get("rev_q_recent", np.nan)
L959             if (not sec_t) or pd.isna(rev_ttm):
L960                 try:
L961                     tk = tickers_bulk.tickers.get(t)
L962                     if tk is None and isinstance(info_t, dict):
L963                         sym = info_t.get("_yf_symbol")
L964                         if sym:
L965                             tk = tickers_bulk.tickers.get(sym)
L966                     qfin = getattr(tk, "quarterly_financials", None)
L967                     if qfin is not None and not qfin.empty:
L968                         idx_lower = {str(i).lower(): i for i in qfin.index}
L969                         rev_idx = None
L970                         for name in ("Total Revenue", "TotalRevenue"):
L971                             key = name.lower()
L972                             if key in idx_lower:
L973                                 rev_idx = idx_lower[key]
L974                                 break
L975                         if rev_idx is not None:
L976                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L977                             if not rev_series.empty:
L978                                 rev_ttm_yf = float(rev_series.head(4).sum())
L979                                 if pd.isna(rev_ttm):
L980                                     rev_ttm = rev_ttm_yf
L981                                 if pd.isna(rev_q):
L982                                     rev_q = float(rev_series.iloc[0])
L983                 except Exception:
L984                     pass
L985             eps_rows.append({
L986                 "ticker": t,
L987                 "eps_ttm": eps_ttm,
L988                 "eps_ttm_prev": sec_t.get("eps_ttm_prev", np.nan),
L989                 "eps_q_recent": eps_q,
L990                 "eps_q_prev": sec_t.get("eps_lastq_prev", np.nan),
L991                 "rev_ttm": rev_ttm,
L992                 "rev_ttm_prev": sec_t.get("rev_ttm_prev", np.nan),
L993                 "rev_q_recent": rev_q,
L994                 "rev_q_prev": sec_t.get("rev_lastq_prev", np.nan),
L995                 "eps_annual_latest": sec_t.get("eps_annual_latest", np.nan),
L996                 "eps_annual_prev": sec_t.get("eps_annual_prev", np.nan),
L997                 "rev_annual_latest": sec_t.get("rev_annual_latest", np.nan),
L998                 "rev_annual_prev": sec_t.get("rev_annual_prev", np.nan),
L999                 "eps_cagr3": sec_t.get("eps_cagr3", np.nan),
L1000                 "rev_cagr3": sec_t.get("rev_cagr3", np.nan),
L1001             })
L1002         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L1003
L1004     def prepare_data(self):
L1005         """Fetch price and fundamental data for all tickers."""
L1006         self.sec_dryrun_sample()
L1007         # --- yfinance 用にティッカーを正規化（"$"剥がし、"."→"-"） ---
L1008         def _to_yf(sym: str) -> str:
L1009             s = (sym or "").strip().lstrip("$").replace("＄", "")
L1010             # BRK.B / PBR.A などは Yahoo では '-' を使用
L1011             yf_sym = s.replace("．", ".").replace(".", "-")
L1012             return yf_sym or (sym or "")
L1013
L1014         cand_y = [_to_yf(t) for t in self.cand]
L1015         cand_info = yf.Tickers(" ".join(cand_y))
L1016
L1017
```