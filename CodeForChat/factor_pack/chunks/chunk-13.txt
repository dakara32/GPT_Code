```text
f_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1050         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1051
L1052         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1053         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1054         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1055         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1056
L1057         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1058         # ① 全銘柄で G/D スコアを算出（unmasked）
L1059         g_weights = pd.Series(cfg.weights.g, dtype=float)
L1060         need_g = ["GROWTH_F", "MOM"]
L1061         dbg_cols = ["GROWTH_F", "MOM", "VOL"]
L1062         if all(c in df_z.columns for c in need_g):
L1063             mask_g = df_z[need_g].notna().all(axis=1)
L1064         else:
L1065             mask_g = pd.Series(False, index=df_z.index, dtype=bool)
L1066         for c in dbg_cols:
L1067             if c in df_z.columns:
L1068                 df_z[f"DBGRW.{c}"] = df_z[c]
L1069         df_fill_g = df_z.reindex(columns=g_weights.index, fill_value=np.nan).copy()
L1070         for c in df_fill_g.columns:
L1071             if c not in need_g:
L1072                 df_fill_g[c] = df_fill_g[c].fillna(0)
L1073         g_score_all = _as_numeric_series(
L1074             df_fill_g.mul(g_weights.reindex(df_fill_g.columns)).sum(axis=1, skipna=False)
L1075         )
L1076         g_score_all = g_score_all.where(mask_g)
L1077
L1078         d_comp = pd.concat({
L1079             'QAL': df_z['D_QAL'],
L1080             'YLD': df_z['D_YLD'],
L1081             'VOL': df_z['D_VOL_RAW'],
L1082             'TRD': df_z['D_TRD']
L1083         }, axis=1)
L1084         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1085         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1086         need_d_candidates = ["VOL", "QAL"]
L1087         mask_d = pd.Series(True, index=d_comp.index, dtype=bool)
L1088         for c in need_d_candidates:
L1089             if c in d_comp.columns:
L1090                 mask_d &= d_comp[c].notna()
L1091             else:
L1092                 mask_d &= False
L1093         df_fill_d = d_comp.copy()
L1094         for c in df_fill_d.columns:
L1095             if c not in need_d_candidates:
L1096                 df_fill_d[c] = df_fill_d[c].fillna(0)
L1097         d_score_all = _as_numeric_series(
L1098             df_fill_d.mul(dw, axis=1).sum(axis=1, skipna=False)
L1099         )
L1100         d_score_all = d_score_all.where(mask_d)
L1101
L1102         # ② テンプレ判定（既存ロジックそのまま）
L1103         mask = df['trend_template']
L1104         if not bool(mask.any()):
L1105             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1106                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1107                 (df.get('RS', np.nan) >= 0.08) &
L1108                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1109                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1110                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1111                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1112                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1113             df['trend_template'] = mask
L1114
L1115         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1116         g_score = _as_numeric_series(g_score_all.loc[mask])
L1117         Scorer.g_score = g_score
L1118         df_z['GSC'] = g_score_all
L1119         df_z['DSC'] = d_score_all
L1120
L1121         try:
L1122             current = (pd.read_csv("current_tickers.csv")
L1123                   .iloc[:, 0]
L1124                   .str.upper()
L1125                   .tolist())
L1126         except FileNotFoundError:
L1127             warnings.warn("current_tickers.csv not found — bonus skipped")
L1128             current = []
L1129
L1130         mask_bonus = g_score.index.isin(current)
L1131         if mask_bonus.any():
L1132             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1133             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1134             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1135             sigma_g = g_score.std()
L1136             if pd.isna(sigma_g):
L1137                 sigma_g = 0.0
L1138             bonus_g = round(k * sigma_g, 3)
L1139             g_score.loc[mask_bonus] += bonus_g
L1140             Scorer.g_score = g_score
L1141             # 3) D 側も同様に σ の NaN をケア
L1142             sigma_d = d_score_all.std()
L1143             if pd.isna(sigma_d):
L1144                 sigma_d = 0.0
L1145             bonus_d = round(k * sigma_d, 3)
L1146             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1147
L1148         try:
L1149             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1150         except Exception:
L1151             pass
L1152
L1153         df_full = df.copy()
L1154         df_full_z = df_z.copy()
L1155
L1156         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1157         missing_logs_df = getattr(ib, "missing_logs", pd.DataFrame())
L1158         if not isinstance(missing_logs_df, pd.DataFrame):
L1159             try:
L1160                 missing_logs_df = pd.DataFrame(missing_logs_df)
L1161             except Exception:
L1162                 missing_logs_df = pd.DataFrame()
L1163
L1164         return FeatureBundle(df=df,
L1165             df_z=df_z,
L1166             g_score=g_score,
L1167             d_score_all=d_score_all,
L1168             missing_logs=missing_logs_df,
L1169             df_full=df_full,
L1170             df_full_z=df_full_z,
L1171             scaler=None)
L1172
L1173 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1174     """以前はブレイクアウト/押し目反発フラグを付与していたが、現在は無効化。"""
L1175     return feature_df
L1176
L1177
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=12）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 12本)`（= N_G）
L17   - 緊急解除: `max(q20, 18本)`（= ceil(1.5×12)）
L18   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **14%**
L24  - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（20×5%に全戻しのみ）
L25
L26 ## モード別の推奨“保有銘柄数”（MMF≒現金）
L27 *各枠=5%（20銘柄均等）。モード移行時は**Gの枠数のみ**調整し、外した枠は現金として保持。*
L28
L29 - **NORMAL:** G **12** / D **8** / 現金化枠 **0**  
L30 - **CAUTION:** G **10** / D **8** / 現金化枠 **2**（= 10%）  
L31 - **EMERG:** G **8**  / D **8** / 現金化枠 **4**（= 20%）  
L32
L33 > 実運用：⭐️低スコアのGから順に外す。解除時はfactor上位から補充。
L34
L35 ## トレーリングストップ
L36 - **基本TS (モード別):** NORMAL **15%** / CAUTION **13%** / EMERG **10%**
L37 - 含み益が **+30% / +60% / +100%** 到達で、基本から **-3pt / -6pt / -8pt** 引き上げ
L38 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L39
L40 ## 半戻し（リバランス）手順
L41 ドリフトチェックで**アラート**が出た場合（合計|drift| がモード閾値を超過、EMERG除く）、翌営業日の米国寄付きで下記を実施する。
L42
L43 1. **売却（必須）**  
L44    Slackテーブルの **Δqty がマイナスの銘柄を売却** する（寄付き成行推奨）。  
L45    これは「半戻し」計算に基づく過重量の削減を意味する。
L46
L47 2. **購入（任意・半戻し目安）**  
L48    半戻し後の合計|drift|を**シミュレーション値（Slackヘッダに表示）**に近づけることを目安に、  
L49    **任意の銘柄を買い増し**してバランスを取る（Δqtyがプラスの銘柄を優先してもよい）。
L50
L51 3. **トレーリングストップの再設定（必須）**  
L52    すべての保有銘柄について、最新の評価額に合わせてTSを**再発注／更新**する。  
L53    ルールは下記（利益到達で段階的にタイト化）：  
L54    - **基本TS:** -15%  
L55    - **+30% 到達 → TS -12%**  
L56    - **+60% 到達 → TS -9%**  
L57    - **+100% 到達 → TS -7%**  
L58    ※ストップ価格の引き上げは許可、**引き下げは不可**（利益保全の原則）。
L59
L60 4. **例外（EMERGモード）**  
L61    緊急(EMERG)では**ドリフト由来の売買は停止（∞）**。20銘柄×各5%への**全戻し**のみ許容。
L62
L63 5. **実行タイミング**
L64    - 判定：米国市場終値直後
L65    - 執行：翌営業日の米国寄付き成行
L66
L67 ## モード移行の実務手順（超シンプル）
L68 モードが変わったら、**MMF≒現金**として扱い、**Gの枠数だけ**を調整する：
L69 1. **Gを削る**（CAUTION/EMERG）  
L70    - ⭐️低スコアのGから順に外す。  
L71    - **`current_tickers.csv` から外すG銘柄の行を削除**（＝その枠は現金化）。
L72 2. **現金として保持**  
L73    - 外した枠は現金（またはMMF相当）でプール。  
L74 3. **復帰時の補充**（NORMALへ）  
L75    - **`current_tickers.csv` に銘柄を追加**（factor上位から）。  
L76    - 以降は日次ドリフト/TSルールに従う。
L77
L78 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて自動で均等比率が再計算される。
L79
L80 ## 入替銘柄選定
L81 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L82 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L83
L84 ## 再エントリー（クールダウン）
L85 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L86
L87 ## 実行タイミング
L88 - 判定：米国市場終値直後
L89 - 執行：翌営業日の米国寄付き成行
```

## <documents/factor_design.md>
```text
L1 # factor.py 詳細設計書
L2
L3 ## 概要
L4 - 既存ポートフォリオの銘柄と検討中の銘柄群を同時に扱う銘柄選定パイプライン。
L5 - 価格・財務データを取り込みスコアリングとDRRS選定を行うことで、以下のアウトプットを得る。
L6   - 採用銘柄と惜しくも漏れた銘柄のスコア一覧
L7   - IN/OUTのティッカーリストとOUT側の低スコア銘柄
L8   - 新旧ポートフォリオの比較表
L9   - 検討中銘柄の低スコアランキング（整理用）
L10
L11 ## 全体フロー
L12 1. **Input** – `current_tickers.csv`と`candidate_tickers.csv`を読み込み、yfinanceやFinnhubのAPIから価格・財務データを収集して`InputBundle`を整備。
L13 2. **Score Calculation** – Scorerが特徴量を計算し因子スコアを合成して`FeatureBundle`を生成。
L14 3. **Correlation Reduction & Selection** – SelectorがDRRSロジックで相関を抑えつつG/D銘柄を選定し`SelectionBundle`を得る。
L15 4. **Output** – 採用結果と周辺情報を表・Slack通知として出力。
L16
L17 ```mermaid
L18 flowchart LR
L19   A[Input\nAPI & 前処理] --> B[Score Calculation\n特徴量・因子合成]
L20   B --> C[Correlation Reduction\nDRRS選定]
L21   C --> D[Output\nSlack通知]
L22 ```
L23
L24 ## 定数・設定
L25 | 変数 | 内容 | 主な用途 |
L26 | --- | --- | --- |
L27 | `exist` / `cand` | 現行ポートフォリオと検討中銘柄のティッカーリスト | スコア対象ユニバースの構成、候補整理 |
L28 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L29 | `CAND_PRICE_MAX` | 候補銘柄の許容価格上限 | 高額銘柄の事前除外 |
L30 | `N_G` / `N_D` | G/D採用枠の件数（**既定: 12 / 8**） | 最終的に選ぶ銘柄数の制約 |
L31 | `g_weights` / `D_weights` | 各因子の重みdict | G/Dスコア合成 |
L32 | `D_BETA_MAX` | Dバケットの許容β上限 | 高β銘柄の除外フィルタ |
L33 | `FILTER_SPEC` | G/Dごとの前処理フィルタ | トレンドマスクやβ上限設定 |
L34 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L35 | `DRRS_G` / `DRRS_D` | DRRSパラメータdict | バケット別の相関低減設定 |
L36 | `DRRS_SHRINK` | 残差相関の対角シュリンク率 | `residual_corr`の安定化 |
L37 | `CROSS_MU_GD` | G-D間クロス相関ペナルティμ | 2バケット同時最適化で相関抑制 |
L38 | `RESULTS_DIR` | 選定結果保存ディレクトリ | `_save_sel`/`_
```