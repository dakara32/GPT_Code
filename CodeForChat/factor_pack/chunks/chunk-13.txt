```text
'])
L1000         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1001
L1002         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1003         # ① 全銘柄で G/D スコアを算出（unmasked）
L1004         g_weights = pd.Series(cfg.weights.g, dtype=float)
L1005         need_g = ["GROWTH_F", "MOM"]
L1006         dbg_cols = ["GROWTH_F", "MOM", "VOL"]
L1007         if all(c in df_z.columns for c in need_g):
L1008             mask_g = df_z[need_g].notna().all(axis=1)
L1009         else:
L1010             mask_g = pd.Series(False, index=df_z.index, dtype=bool)
L1011         for c in dbg_cols:
L1012             if c in df_z.columns:
L1013                 df_z[f"DBGRW.{c}"] = df_z[c]
L1014         df_fill_g = df_z.reindex(columns=g_weights.index, fill_value=np.nan).copy()
L1015         for c in df_fill_g.columns:
L1016             if c not in need_g:
L1017                 df_fill_g[c] = df_fill_g[c].fillna(0)
L1018         g_score_all = _as_numeric_series(
L1019             df_fill_g.mul(g_weights.reindex(df_fill_g.columns)).sum(axis=1, skipna=False)
L1020         )
L1021         g_score_all = g_score_all.where(mask_g)
L1022
L1023         d_comp = pd.concat({
L1024             'QAL': df_z['D_QAL'],
L1025             'YLD': df_z['D_YLD'],
L1026             'VOL': df_z['D_VOL_RAW'],
L1027             'TRD': df_z['D_TRD']
L1028         }, axis=1)
L1029         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1030         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1031         need_d_candidates = ["VOL", "QAL"]
L1032         mask_d = pd.Series(True, index=d_comp.index, dtype=bool)
L1033         for c in need_d_candidates:
L1034             if c in d_comp.columns:
L1035                 mask_d &= d_comp[c].notna()
L1036             else:
L1037                 mask_d &= False
L1038         df_fill_d = d_comp.copy()
L1039         for c in df_fill_d.columns:
L1040             if c not in need_d_candidates:
L1041                 df_fill_d[c] = df_fill_d[c].fillna(0)
L1042         d_score_all = _as_numeric_series(
L1043             df_fill_d.mul(dw, axis=1).sum(axis=1, skipna=False)
L1044         )
L1045         d_score_all = d_score_all.where(mask_d)
L1046
L1047         # ② テンプレ判定（既存ロジックそのまま）
L1048         mask = df['trend_template']
L1049         if not bool(mask.any()):
L1050             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1051                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1052                 (df.get('RS', np.nan) >= 0.08) &
L1053                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1054                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1055                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1056                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1057                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1058             df['trend_template'] = mask
L1059
L1060         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1061         g_score = _as_numeric_series(g_score_all.loc[mask])
L1062         Scorer.g_score = g_score
L1063         df_z['GSC'] = g_score_all
L1064         df_z['DSC'] = d_score_all
L1065
L1066         try:
L1067             current = (pd.read_csv("current_tickers.csv")
L1068                   .iloc[:, 0]
L1069                   .str.upper()
L1070                   .tolist())
L1071         except FileNotFoundError:
L1072             warnings.warn("current_tickers.csv not found — bonus skipped")
L1073             current = []
L1074
L1075         mask_bonus = g_score.index.isin(current)
L1076         if mask_bonus.any():
L1077             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1078             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1079             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1080             sigma_g = g_score.std()
L1081             if pd.isna(sigma_g):
L1082                 sigma_g = 0.0
L1083             bonus_g = round(k * sigma_g, 3)
L1084             g_score.loc[mask_bonus] += bonus_g
L1085             Scorer.g_score = g_score
L1086             # 3) D 側も同様に σ の NaN をケア
L1087             sigma_d = d_score_all.std()
L1088             if pd.isna(sigma_d):
L1089                 sigma_d = 0.0
L1090             bonus_d = round(k * sigma_d, 3)
L1091             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1092
L1093         try:
L1094             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1095         except Exception:
L1096             pass
L1097
L1098         df_full = df.copy()
L1099         df_full_z = df_z.copy()
L1100
L1101         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1102         missing_logs_df = getattr(ib, "missing_logs", pd.DataFrame())
L1103         if not isinstance(missing_logs_df, pd.DataFrame):
L1104             try:
L1105                 missing_logs_df = pd.DataFrame(missing_logs_df)
L1106             except Exception:
L1107                 missing_logs_df = pd.DataFrame()
L1108
L1109         return FeatureBundle(df=df,
L1110             df_z=df_z,
L1111             g_score=g_score,
L1112             d_score_all=d_score_all,
L1113             missing_logs=missing_logs_df,
L1114             df_full=df_full,
L1115             df_full_z=df_full_z,
L1116             scaler=None)
L1117
L1118 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1119     """
L1120     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1121     次の列を feature_df に追加する（index=ticker）。
L1122       - G_BREAKOUT_recent_5d : bool
L1123       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1124       - G_PULLBACK_recent_5d : bool
L1125       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1126       - G_PIVOT_price        : float
L1127     失敗しても例外は握り潰し、既存処理を阻害しない。
L1128     """
L1129     try:
L1130         px   = bundle.px                      # 終値 DataFrame
L1131         hi   = bundle.data['High']
L1132         lo   = bundle.data['Low']
L1133         vol  = bundle.data['Volume']
L1134         bench= bundle.spx                     # ベンチマーク Series
L1135
L1136         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1137         g_universe = getattr(self_obj, "g_universe", None)
L1138         if g_universe is None:
L1139             try:
L1140                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1141             except Exception:
L1142                 g_universe = list(feature_df.index)
L1143         if not g_universe:
L1144             return feature_df
L1145
L1146         # 指標
L1147         px = px.ffill(limit=2)
L1148         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1149         ma50  = px[g_universe].rolling(50).mean()
L1150         ma150 = px[g_universe].rolling(150).mean()
L1151         ma200 = px[g_universe].rolling(200).mean()
L1152         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1153         vol20 = vol[g_universe].rolling(20).mean()
L1154         vol50 = vol[g_universe].rolling(50).mean()
L1155
L1156         # トレンドテンプレート合格
L1157         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1158                             & (ma150 > ma200) & (ma200.diff() > 0)
L1159
L1160         # 汎用ピボット：直近65営業日の高値（当日除外）
L1161         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1162
L1163         # 相対力：年内高値更新
L1164         bench_aligned = bench.reindex(px.index).ffill()
L1165         rs = px[g_universe].div(bench_aligned, axis=0)
L1166         rs_high = rs.rolling(252).max().shift(1)
L1167
L1168         # ブレイクアウト「発生日」：条件立ち上がり
L1169         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1170                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1171         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1172
L1173         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1174         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1175         volume_dryup = (vol20 / vol50) <= 1.0
L1176         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1177         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1178         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1179
L1180         # 直近N営業日内の発火 / 最終発生日
L1181         rows = []
L1182         for t in g_universe:
L1183             def _recent_and_date(s, win):
L1184                 sw = s[t].iloc[-win:]
L1185                 if sw.any():
L1186                     d = sw[sw].index[-1]
L1187                     return True, d.strftime("%Y-%m-%d")
L1188                 return False, ""
L1189             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1190             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1191             rows.append((t, {
L1192                 "G_BREAKOUT_recent_5d": br_recent,
L1193                 "G_BREAKOUT_last_date": br_date,
L1194                 "G_PULLBACK_recent_5d": pb_recent,
L1195                 "G_PULLBACK_last_date": pb_date,
L1196                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1197             }))
L1198         flags = pd.DataFrame({k: v for k, v in rows}).T
L1199
L1200         # 列を作成・上書き
L1201         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1202         for c in cols:
L1203             if c not in feature_df.columns:
L1204                 feature_df[c] = np.nan
L1205         feature_df.loc[flags.index, flags.columns] = flags
L1206
L1207     except Exception:
L1208         pass
L1209     return feature_df
L1210
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=12）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 12本)`（= N_G）
L17   - 緊急解除: `max(q20, 18本)`（= ceil(1.5×12)）
L18   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / 
```