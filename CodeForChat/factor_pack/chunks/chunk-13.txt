```text
['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1023         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1024         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1025         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1026
L1027         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1028         # ① 全銘柄で G/D スコアを算出（unmasked）
L1029         g_weights = pd.Series(cfg.weights.g, dtype=float)
L1030         need_g = ["GROWTH_F", "MOM"]
L1031         dbg_cols = ["GROWTH_F", "MOM", "VOL"]
L1032         if all(c in df_z.columns for c in need_g):
L1033             mask_g = df_z[need_g].notna().all(axis=1)
L1034         else:
L1035             mask_g = pd.Series(False, index=df_z.index, dtype=bool)
L1036         for c in dbg_cols:
L1037             if c in df_z.columns:
L1038                 df_z[f"DBGRW.{c}"] = df_z[c]
L1039         df_fill_g = df_z.reindex(columns=g_weights.index, fill_value=np.nan).copy()
L1040         for c in df_fill_g.columns:
L1041             if c not in need_g:
L1042                 df_fill_g[c] = df_fill_g[c].fillna(0)
L1043         g_score_all = _as_numeric_series(
L1044             df_fill_g.mul(g_weights.reindex(df_fill_g.columns)).sum(axis=1, skipna=False)
L1045         )
L1046         g_score_all = g_score_all.where(mask_g)
L1047
L1048         d_comp = pd.concat({
L1049             'QAL': df_z['D_QAL'],
L1050             'YLD': df_z['D_YLD'],
L1051             'VOL': df_z['D_VOL_RAW'],
L1052             'TRD': df_z['D_TRD']
L1053         }, axis=1)
L1054         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1055         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1056         need_d_candidates = ["VOL", "QAL"]
L1057         mask_d = pd.Series(True, index=d_comp.index, dtype=bool)
L1058         for c in need_d_candidates:
L1059             if c in d_comp.columns:
L1060                 mask_d &= d_comp[c].notna()
L1061             else:
L1062                 mask_d &= False
L1063         df_fill_d = d_comp.copy()
L1064         for c in df_fill_d.columns:
L1065             if c not in need_d_candidates:
L1066                 df_fill_d[c] = df_fill_d[c].fillna(0)
L1067         d_score_all = _as_numeric_series(
L1068             df_fill_d.mul(dw, axis=1).sum(axis=1, skipna=False)
L1069         )
L1070         d_score_all = d_score_all.where(mask_d)
L1071
L1072         # ② テンプレ判定（既存ロジックそのまま）
L1073         mask = df['trend_template']
L1074         if not bool(mask.any()):
L1075             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1076                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1077                 (df.get('RS', np.nan) >= 0.08) &
L1078                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1079                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1080                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1081                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1082                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1083             df['trend_template'] = mask
L1084
L1085         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1086         g_score = _as_numeric_series(g_score_all.loc[mask])
L1087         Scorer.g_score = g_score
L1088         df_z['GSC'] = g_score_all
L1089         df_z['DSC'] = d_score_all
L1090
L1091         try:
L1092             current = (pd.read_csv("current_tickers.csv")
L1093                   .iloc[:, 0]
L1094                   .str.upper()
L1095                   .tolist())
L1096         except FileNotFoundError:
L1097             warnings.warn("current_tickers.csv not found — bonus skipped")
L1098             current = []
L1099
L1100         mask_bonus = g_score.index.isin(current)
L1101         if mask_bonus.any():
L1102             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1103             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1104             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1105             sigma_g = g_score.std()
L1106             if pd.isna(sigma_g):
L1107                 sigma_g = 0.0
L1108             bonus_g = round(k * sigma_g, 3)
L1109             g_score.loc[mask_bonus] += bonus_g
L1110             Scorer.g_score = g_score
L1111             # 3) D 側も同様に σ の NaN をケア
L1112             sigma_d = d_score_all.std()
L1113             if pd.isna(sigma_d):
L1114                 sigma_d = 0.0
L1115             bonus_d = round(k * sigma_d, 3)
L1116             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1117
L1118         try:
L1119             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1120         except Exception:
L1121             pass
L1122
L1123         df_full = df.copy()
L1124         df_full_z = df_z.copy()
L1125
L1126         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1127         missing_logs_df = getattr(ib, "missing_logs", pd.DataFrame())
L1128         if not isinstance(missing_logs_df, pd.DataFrame):
L1129             try:
L1130                 missing_logs_df = pd.DataFrame(missing_logs_df)
L1131             except Exception:
L1132                 missing_logs_df = pd.DataFrame()
L1133
L1134         return FeatureBundle(df=df,
L1135             df_z=df_z,
L1136             g_score=g_score,
L1137             d_score_all=d_score_all,
L1138             missing_logs=missing_logs_df,
L1139             df_full=df_full,
L1140             df_full_z=df_full_z,
L1141             scaler=None)
L1142
L1143 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1144     """
L1145     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1146     次の列を feature_df に追加する（index=ticker）。
L1147       - G_BREAKOUT_recent_5d : bool
L1148       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1149       - G_PULLBACK_recent_5d : bool
L1150       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1151       - G_PIVOT_price        : float
L1152     失敗しても例外は握り潰し、既存処理を阻害しない。
L1153     """
L1154     try:
L1155         px   = bundle.px                      # 終値 DataFrame
L1156         hi   = bundle.data['High']
L1157         lo   = bundle.data['Low']
L1158         vol  = bundle.data['Volume']
L1159         bench= bundle.spx                     # ベンチマーク Series
L1160
L1161         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1162         g_universe = getattr(self_obj, "g_universe", None)
L1163         if g_universe is None:
L1164             try:
L1165                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1166             except Exception:
L1167                 g_universe = list(feature_df.index)
L1168         if not g_universe:
L1169             return feature_df
L1170
L1171         # 指標
L1172         px = px.ffill(limit=2)
L1173         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1174         ma50  = px[g_universe].rolling(50).mean()
L1175         ma150 = px[g_universe].rolling(150).mean()
L1176         ma200 = px[g_universe].rolling(200).mean()
L1177         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1178         vol20 = vol[g_universe].rolling(20).mean()
L1179         vol50 = vol[g_universe].rolling(50).mean()
L1180
L1181         # トレンドテンプレート合格
L1182         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1183                             & (ma150 > ma200) & (ma200.diff() > 0)
L1184
L1185         # 汎用ピボット：直近65営業日の高値（当日除外）
L1186         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1187
L1188         # 相対力：年内高値更新
L1189         bench_aligned = bench.reindex(px.index).ffill()
L1190         rs = px[g_universe].div(bench_aligned, axis=0)
L1191         rs_high = rs.rolling(252).max().shift(1)
L1192
L1193         # ブレイクアウト「発生日」：条件立ち上がり
L1194         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1195                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1196         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1197
L1198         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1199         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1200         volume_dryup = (vol20 / vol50) <= 1.0
L1201         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1202         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1203         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1204
L1205         # 直近N営業日内の発火 / 最終発生日
L1206         rows = []
L1207         for t in g_universe:
L1208             def _recent_and_date(s, win):
L1209                 sw = s[t].iloc[-win:]
L1210                 if sw.any():
L1211                     d = sw[sw].index[-1]
L1212                     return True, d.strftime("%Y-%m-%d")
L1213                 return False, ""
L1214             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1215             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1216             rows.append((t, {
L1217                 "G_BREAKOUT_recent_5d": br_recent,
L1218                 "G_BREAKOUT_last_date": br_date,
L1219                 "G_PULLBACK_recent_5d": pb_recent,
L1220                 "G_PULLBACK_last_date": pb_date,
L1221                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1222             }))
L1223         flags = pd.DataFrame({k: v for k, v in rows}).T
L1224
L1225         # 列を作成・上書き
L1226         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1227         for c in cols:
L1228             if c not in feature_df.columns:
L1229                 feature_df[c] = np.nan
L1230         feature_df.loc[flags.index, flags.columns] = flags
L1231
L1232     except Exception:
L1233         pass
L1234     return feature_df
L1235
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 
```