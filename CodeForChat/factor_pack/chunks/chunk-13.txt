```text
ma")
L1027             return any(k in ind for k in keys)
L1028
L1029         tickers_s = pd.Index(df_z.index)
L1030         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1031         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1032         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1033
L1034         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1035             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1036             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1037         # === end: BIO LOSS PENALTY =======================================
L1038
L1039         _debug_only_cols = [c for c in df_z.columns if c.endswith("_RAW")]
L1040         _no_score_cols = ["DIV_TTM_PS", "DIV_YOY", "LOW52PCT25_EXCESS", "MA50_OVER_200"]
L1041         _drop_cols = [c for c in (_debug_only_cols + _no_score_cols) if c in df_z.columns]
L1042         if _drop_cols:
L1043             df_z = df_z.drop(columns=_drop_cols, errors="ignore")
L1044
L1045         assert not any(c.endswith("_RAW") for c in df_z.columns)
L1046         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L1047             assert c not in df_z.columns
L1048
L1049         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1050         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1051
L1052         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1053         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1054         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1055         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1056
L1057         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1058         # ① 全銘柄で G/D スコアを算出（unmasked）
L1059         g_weights = pd.Series(cfg.weights.g, dtype=float)
L1060         need_g = ["GROWTH_F", "MOM"]
L1061         dbg_cols = ["GROWTH_F", "MOM", "VOL"]
L1062         if all(c in df_z.columns for c in need_g):
L1063             mask_g = df_z[need_g].notna().all(axis=1)
L1064         else:
L1065             mask_g = pd.Series(False, index=df_z.index, dtype=bool)
L1066         for c in dbg_cols:
L1067             if c in df_z.columns:
L1068                 df_z[f"DBGRW.{c}"] = df_z[c]
L1069         df_fill_g = df_z.reindex(columns=g_weights.index, fill_value=np.nan).copy()
L1070         for c in df_fill_g.columns:
L1071             if c not in need_g:
L1072                 df_fill_g[c] = df_fill_g[c].fillna(0)
L1073         g_score_all = _as_numeric_series(
L1074             df_fill_g.mul(g_weights.reindex(df_fill_g.columns)).sum(axis=1, skipna=False)
L1075         )
L1076         g_score_all = g_score_all.where(mask_g)
L1077
L1078         d_comp = pd.concat({
L1079             'QAL': df_z['D_QAL'],
L1080             'YLD': df_z['D_YLD'],
L1081             'VOL': df_z['D_VOL_RAW'],
L1082             'TRD': df_z['D_TRD']
L1083         }, axis=1)
L1084         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1085         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1086         need_d_candidates = ["VOL", "QAL"]
L1087         mask_d = pd.Series(True, index=d_comp.index, dtype=bool)
L1088         for c in need_d_candidates:
L1089             if c in d_comp.columns:
L1090                 mask_d &= d_comp[c].notna()
L1091             else:
L1092                 mask_d &= False
L1093         df_fill_d = d_comp.copy()
L1094         for c in df_fill_d.columns:
L1095             if c not in need_d_candidates:
L1096                 df_fill_d[c] = df_fill_d[c].fillna(0)
L1097         d_score_all = _as_numeric_series(
L1098             df_fill_d.mul(dw, axis=1).sum(axis=1, skipna=False)
L1099         )
L1100         d_score_all = d_score_all.where(mask_d)
L1101
L1102         # ② テンプレ判定（既存ロジックそのまま）
L1103         mask = df['trend_template']
L1104         if not bool(mask.any()):
L1105             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1106                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1107                 (df.get('RS', np.nan) >= 0.08) &
L1108                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1109                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1110                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1111                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1112                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1113             df['trend_template'] = mask
L1114
L1115         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1116         g_score = _as_numeric_series(g_score_all.loc[mask])
L1117         Scorer.g_score = g_score
L1118         df_z['GSC'] = g_score_all
L1119         df_z['DSC'] = d_score_all
L1120
L1121         try:
L1122             current = (pd.read_csv("current_tickers.csv")
L1123                   .iloc[:, 0]
L1124                   .str.upper()
L1125                   .tolist())
L1126         except FileNotFoundError:
L1127             warnings.warn("current_tickers.csv not found — bonus skipped")
L1128             current = []
L1129
L1130         mask_bonus = g_score.index.isin(current)
L1131         if mask_bonus.any():
L1132             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1133             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1134             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1135             sigma_g = g_score.std()
L1136             if pd.isna(sigma_g):
L1137                 sigma_g = 0.0
L1138             bonus_g = round(k * sigma_g, 3)
L1139             g_score.loc[mask_bonus] += bonus_g
L1140             Scorer.g_score = g_score
L1141             # 3) D 側も同様に σ の NaN をケア
L1142             sigma_d = d_score_all.std()
L1143             if pd.isna(sigma_d):
L1144                 sigma_d = 0.0
L1145             bonus_d = round(k * sigma_d, 3)
L1146             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1147
L1148         try:
L1149             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1150         except Exception:
L1151             pass
L1152
L1153         df_full = df.copy()
L1154         df_full_z = df_z.copy()
L1155
L1156         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1157         missing_logs_df = getattr(ib, "missing_logs", pd.DataFrame())
L1158         if not isinstance(missing_logs_df, pd.DataFrame):
L1159             try:
L1160                 missing_logs_df = pd.DataFrame(missing_logs_df)
L1161             except Exception:
L1162                 missing_logs_df = pd.DataFrame()
L1163
L1164         return FeatureBundle(df=df,
L1165             df_z=df_z,
L1166             g_score=g_score,
L1167             d_score_all=d_score_all,
L1168             missing_logs=missing_logs_df,
L1169             df_full=df_full,
L1170             df_full_z=df_full_z,
L1171             scaler=None)
L1172
L1173 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1174     """
L1175     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1176     次の列を feature_df に追加する（index=ticker）。
L1177       - G_BREAKOUT_recent_5d : bool
L1178       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1179       - G_PULLBACK_recent_5d : bool
L1180       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1181       - G_PIVOT_price        : float
L1182     失敗しても例外は握り潰し、既存処理を阻害しない。
L1183     """
L1184     try:
L1185         px   = bundle.px                      # 終値 DataFrame
L1186         hi   = bundle.data['High']
L1187         lo   = bundle.data['Low']
L1188         vol  = bundle.data['Volume']
L1189         bench= bundle.spx                     # ベンチマーク Series
L1190
L1191         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1192         g_universe = getattr(self_obj, "g_universe", None)
L1193         if g_universe is None:
L1194             try:
L1195                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1196             except Exception:
L1197                 g_universe = list(feature_df.index)
L1198         if not g_universe:
L1199             return feature_df
L1200
L1201         # 指標
L1202         px = px.ffill(limit=2)
L1203         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1204         ma50  = px[g_universe].rolling(50).mean()
L1205         ma150 = px[g_universe].rolling(150).mean()
L1206         ma200 = px[g_universe].rolling(200).mean()
L1207         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1208         vol20 = vol[g_universe].rolling(20).mean()
L1209         vol50 = vol[g_universe].rolling(50).mean()
L1210
L1211         # トレンドテンプレート合格
L1212         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1213                             & (ma150 > ma200) & (ma200.diff() > 0)
L1214
L1215         # 汎用ピボット：直近65営業日の高値（当日除外）
L1216         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1217
L1218         # 相対力：年内高値更新
L1219         bench_aligned = bench.reindex(px.index).ffill()
L1220         rs = px[g_universe].div(bench_aligned, axis=0)
L1221         rs_high = rs.rolling(252).max().shift(1)
L1222
L1223         # ブレイクアウト「発生日」：条件立ち上がり
L1224         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1225                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1226         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1227
L1228         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1229         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1230         volume_dryup = (vol20 / vol50) <= 1.0
L1231         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1232         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1233         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1234
L1235         # 直近N営業日内の発火 / 最終発生日
L1236         rows = []
L1237         for t in g_universe:
L1238             def _recent_and_date(s, win):
L1239                 sw = s[t].iloc[-win:]
L1240                 if sw.any():
L1241                     d = sw[sw].index[-1]
L1242                     return True, d.strftime("%Y-%m-%d")
L1243                 return False, ""
L1244             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1245             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1246             rows.append((t, {
L1247                 "G_BREAKOUT_recent_5d": br_recent,
L1248                 "G_BREAKOUT_last_date": br_date,
L1249                 "G_PULLBACK_recent_5d": pb_recent,
L1250                 "G_PULLBACK_last_date": pb_date,
L1251                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1252             }))
L1253         flags = pd.DataFrame({k: v for k, v in rows}).T
L1254
L1255         # 列を作成・上書き
L1256         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1257         for c in cols:
L1258             if c not in feature_df.columns:
L1259                 feature_df[c] = np.nan
L1260         feature_df.loc[flags.index, flags.columns] = flags
L1261
L1262     except Exception:
L1263         pass
L1264     return feature_df
L1265
```

## <.github/workfl
```