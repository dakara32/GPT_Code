```text
.inf):
L281             sel.remove(weakest); sel.append(t)
L282     if len(sel) > n_target:
L283         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L284     return sel
L285
L286
L287 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L288 class Input:
L289     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L290         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L291         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L292
L293     # ---- （Input専用）EPS補完・FCF算出系 ----
L294     @staticmethod
L295     def _sec_headers():
L296         mail = (os.getenv("SEC_CONTACT_EMAIL") or "yasonba55@gmail.com").strip()
L297         app = (os.getenv("SEC_APP_NAME") or "FactorBot/1.0").strip()
L298         return {"User-Agent": f"{app} ({mail})", "From": mail, "Accept": "application/json"}
L299
L300     @staticmethod
L301     def _sec_get(url: str, retries: int = 3, backoff: float = 0.5):
L302         for i in range(retries):
L303             r = requests.get(url, headers=Input._sec_headers(), timeout=20)
L304             if r.status_code in (429, 503, 403):
L305                 time.sleep(min(2 ** i * backoff, 8.0))
L306                 continue
L307             r.raise_for_status(); return r.json()
L308         r.raise_for_status()
L309
L310     @staticmethod
L311     def _sec_ticker_map():
L312         j = Input._sec_get("https://data.sec.gov/api/xbrl/company_tickers.json")
L313         mp = {}
L314         for _, v in (j or {}).items():
L315             try:
L316                 mp[str(v["ticker"]).upper()] = f"{int(v['cik_str']):010d}"
L317             except Exception:
L318                 continue
L319         return mp
L320
L321     # --- 追加: ADR/OTC向けの簡易正規化（末尾Y/F, ドット等） ---
L322     @staticmethod
L323     def _normalize_ticker(sym: str) -> list[str]:
L324         s = (sym or "").upper().strip()
L325         # 追加: 先頭の$や全角の記号を除去
L326         s = s.lstrip("$").replace("＄", "").replace("．", ".").replace("－", "-")
L327         cand: list[str] = []
L328
L329         def add(x: str) -> None:
L330             if x and x not in cand:
L331                 cand.append(x)
L332
L333         # 1) 原文を最優先（SECは BRK.B, BF.B など . を正式採用）
L334         add(s)
L335         # 2) Yahoo系バリアント（. と - の揺れを相互に）
L336         if "." in s:
L337             add(s.replace(".", "-"))
L338             add(s.replace(".", ""))
L339         if "-" in s:
L340             add(s.replace("-", "."))
L341             add(s.replace("-", ""))
L342         # 3) ドット・ハイフン・ピリオド無し版（最後の保険）
L343         add(s.replace("-", "").replace(".", ""))
L344         # 4) ADR簡易：末尾Y/Fの除去（SECマップは本体ティッカーを持つことがある）
L345         if len(s) >= 2 and s[-1] in {"Y", "F"}:
L346             add(s[:-1])
L347         return cand
L348
L349     @staticmethod
L350     def _sec_companyfacts(cik: str):
L351         return Input._sec_get(f"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik}.json")
L352
L353     @staticmethod
L354     def _units_for_tags(facts: dict, namespaces: list[str], tags: list[str]) -> list[dict]:
L355         """facts から namespace/tag を横断して units 配列を収集（存在順に連結）。"""
L356         out: list[dict] = []
L357         facts = (facts or {}).get("facts", {})
L358         for ns in namespaces:
L359             node = facts.get(ns, {}) if isinstance(facts, dict) else {}
L360             for tg in tags:
L361                 try:
L362                     units = node[tg]["units"]
L363                 except Exception:
L364                     continue
L365                 picks: list[dict] = []
L366                 if "USD/shares" in units:
L367                     picks.extend(list(units["USD/shares"]))
L368                 if "USD" in units:
L369                     picks.extend(list(units["USD"]))
L370                 if not picks:
L371                     for arr in units.values():
L372                         picks.extend(list(arr))
L373                 out.extend(picks)
L374         return out
L375
L376     @staticmethod
L377     def _only_quarterly(arr: list[dict]) -> list[dict]:
L378         """companyfactsの混在配列から『四半期』だけを抽出。
L379
L380         - frame に "Q" を含む（例: CY2024Q2I）
L381         - fp が Q1/Q2/Q3/Q4
L382         - form が 10-Q/10-Q/A/6-K
L383         """
L384         if not arr:
L385             return []
L386         q_forms = {"10-Q", "10-Q/A", "6-K"}
L387         out = [
L388             x
L389             for x in arr
L390             if (
L391                 "Q" in (x.get("frame") or "").upper()
L392                 or (x.get("fp") or "").upper() in {"Q1", "Q2", "Q3", "Q4"}
L393                 or (x.get("form") or "").upper() in q_forms
L394             )
L395         ]
L396         out.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L397         return out
L398
L399     @staticmethod
L400     def _series_from_facts_with_dates(arr, key_val="val", key_dt="end", normalize=float):
L401         """companyfactsアイテム配列から (date,value) を返す。dateはYYYY-MM-DDを想定。"""
L402         out: List[Tuple[str, float]] = []
L403         for x in (arr or []):
L404             try:
L405                 d = x.get(key_dt)
L406                 if d is None:
L407                     continue
L408                 v = x.get(key_val)
L409                 out.append((str(d), normalize(v) if v is not None else float("nan")))
L410             except Exception:
L411                 continue
L412         out.sort(key=lambda t: t[0], reverse=True)
L413         return out
L414
L415     def fetch_eps_rev_from_sec(self, tickers: list[str]) -> dict:
L416         out = {}
L417         t2cik = self._sec_ticker_map()
L418         n_map = n_rev = n_eps = 0
L419         miss_map: list[str] = []
L420         miss_facts: list[str] = []
L421         for t in tickers:
L422             base = (t or "").upper()
L423             candidates: list[str] = []
L424             for key in [base, *self._normalize_ticker(t)]:
L425                 if key and key not in candidates:
L426                     candidates.append(key)
L427             cik = next((t2cik.get(key) for key in candidates if t2cik.get(key)), None)
L428             if not cik:
L429                 out[t] = {}
L430                 miss_map.append(t)
L431                 continue
L432             try:
L433                 j = self._sec_companyfacts(cik)
L434                 facts = j or {}
L435                 rev_tags = [
L436                     "Revenues",
L437                     "RevenueFromContractWithCustomerExcludingAssessedTax",
L438                     "SalesRevenueNet",
L439                     "SalesRevenueGoodsNet",
L440                     "SalesRevenueServicesNet",
L441                     "Revenue",
L442                 ]
L443                 eps_tags = [
L444                     "EarningsPerShareDiluted",
L445                     "EarningsPerShareBasicAndDiluted",
L446                     "EarningsPerShare",
L447                     "EarningsPerShareBasic",
L448                 ]
L449                 rev_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], rev_tags)
L450                 eps_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], eps_tags)
L451                 rev_q_items = self._only_quarterly(rev_arr)
L452                 eps_q_items = self._only_quarterly(eps_arr)
L453                 # (date,value) で取得
L454                 rev_pairs = self._series_from_facts_with_dates(rev_q_items)
L455                 eps_pairs = self._series_from_facts_with_dates(eps_q_items)
L456                 rev_vals = [v for (_d, v) in rev_pairs]
L457                 eps_vals = [v for (_d, v) in eps_pairs]
L458                 rev_q = float(rev_vals[0]) if rev_vals else float("nan")
L459                 eps_q = float(eps_vals[0]) if eps_vals else float("nan")
L460                 rev_ttm = float(sum(v for v in rev_vals[:4] if v == v)) if rev_vals else float("nan")
L461                 eps_ttm = float(sum(v for v in eps_vals[:4] if v == v)) if eps_vals else float("nan")
L462                 out[t] = {
L463                     "eps_q_recent": eps_q,
L464                     "eps_ttm": eps_ttm,
L465                     "rev_q_recent": rev_q,
L466                     "rev_ttm": rev_ttm,
L467                     # 後段でDatetimeIndex化できるよう (date,value) を保持。値だけの互換キーも残す。
L468                     "eps_q_series_pairs": eps_pairs[:16],
L469                     "rev_q_series_pairs": rev_pairs[:16],
L470                     "eps_q_series": eps_vals[:16],
L471                     "rev_q_series": rev_vals[:16],
L472                 }
L473                 n_map += 1
L474                 if rev_vals:
L475                     n_rev += 1
L476                 if eps_vals:
L477                     n_eps += 1
L478             except Exception:
L479                 out[t] = {}
L480                 miss_facts.append(t)
L481             time.sleep(0.30)
L482         # 取得サマリをログ（Actionsで確認しやすいよう print）
L483         try:
L484             total = len(tickers)
L485             print(f"[SEC] map={n_map}/{total}  rev_q_hit={n_rev}  eps_q_hit={n_eps}")
L486             # デバッグ: 取得本数の分布（先頭のみ）
L487             try:
L488                 lens = [len((out.get(t, {}) or {}).get("rev_q_series", [])) for t in tickers]
L489                 print(f"[SEC] rev_q_series length: min={min(lens) if lens else 0} "
L490                       f"p25={np.percentile(lens,25) if lens else 0} median={np.median(lens) if lens else 0} "
L491                       f"p75={np.percentile(lens,75) if lens else 0} max={max(lens) if lens else 0}")
L492             except Exception:
L493                 pass
L494             if miss_map:
L495                 print(f"[SEC] no CIK map: {len(miss_map)} (サンプル例) {miss_map[:20]}")
L496             if miss_facts:
L497                 print(f"[SEC] CIKあり だが対象factなし: {len(miss_facts)} (サンプル例) {miss_facts[:20]}")
L498         except Exception:
L499             pass
L500         return out
L501
L502     def sec_dryrun_sample(self, tickers: list[str] | None = None) -> None:
L503         if not _env_true("SEC_DRYRUN_SAMPLE", False):
L504             return
L505         sample = tickers or ["BRK.B", "BF.B", "GOOGL", "META", "UBER", "PBR.A", "TSM", "NARI", "EVBN", "SWAV"]
L506         print(f"[SEC-DRYRUN] sample tickers: {sample}")
L507         try:
L508             t2cik = self._sec_ticker_map()
L509             hits = 0
L510             for sym in sample:
L511                 candidates: list[str] = []
L512
L513                 def add(key: str) -> None:
L514                     if key and key not in candidates:
L515                         candidates.append(key)
L516
L517                 add((sym or "").upper())
L518                 for alt in self._normalize_ticker(sym):
L519                     add(alt)
L520                 if any(t2cik.get(key) for key in candidates):
L521                     hits += 1
L522             sec_data = self.fetch_eps_rev_from_sec(sample)
L523             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L524             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L525             total = len(sample)
L526             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L527         except Exception as e:
L528             print(f"[SEC-DRYRUN] error: {e}")
L529     @staticmethod
L530     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L531         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L532         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L533         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L534
L535     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L536
L537     @staticmethod
L538     def _pick_row(df: pd.D
```