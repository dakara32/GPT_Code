```text
 continue
L280         while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L281             i += 1
L282         if i < len(poolD):
L283             D[j] = poolD[i]; used.add(D[j]); i += 1
L284     return top_G, D
L285
L286
L287 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L288                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L289     import pandas as pd, numpy as np
L290     sel = list(pick)
L291     if not sel: return sel
L292     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L293     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L294     std = agg.std()
L295     sigma = float(std) if pd.notna(std) else 0.0
L296     thresh = kth - delta_z * sigma
L297     ranked_all = agg.sort_values(ascending=False)
L298     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L299     for t in cand:
L300         within_score = pd.notna(agg[t]) and agg[t] >= thresh
L301         within_rank = t in ranked_all.index and ranked_all.index.get_loc(t) < n_target + keep_buffer
L302         if not (within_score or within_rank):
L303             continue
L304         non_inc = [x for x in sel if x not in incumbents]
L305         if not non_inc:
L306             break
L307         weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L308         if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L309             sel.remove(weakest); sel.append(t)
L310     if len(sel) > n_target:
L311         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L312     return sel
L313
L314
L315 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L316 class Input:
L317     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L318         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L319         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L320
L321     # ---- （Input専用）EPS補完・FCF算出系 ----
L322     @staticmethod
L323     def _sec_headers():
L324         mail = (os.getenv("SEC_CONTACT_EMAIL") or os.getenv("SEC_EMAIL") or "").strip()
L325         ua = f"factor-selection/1 (+mailto:{mail})" if mail else "factor-selection/1"
L326         headers = {"User-Agent": ua[:200], "Accept": "application/json"}
L327         if mail:
L328             headers["From"] = mail[:200]
L329         return headers
L330
L331     @staticmethod
L332     def _sec_get(url: str, retries: int = 3, backoff: float = 0.5):
L333         for i in range(retries):
L334             r = requests.get(url, headers=Input._sec_headers(), timeout=20)
L335             if r.status_code in (429, 503, 403):
L336                 time.sleep(min(2 ** i * backoff, 8.0))
L337                 continue
L338             r.raise_for_status(); return r.json()
L339         r.raise_for_status()
L340
L341     @staticmethod
L342     def _sec_ticker_map():
L343         import requests
L344
L345         url_primary = "https://data.sec.gov/api/xbrl/company_tickers.json"
L346         url_fallback = "https://www.sec.gov/files/company_tickers.json"
L347         mp = {}
L348         try:
L349             j = Input._sec_get(url_primary)  # 既存の堅牢GET（リトライ・バックオフ）
L350         except Exception:
L351             r = requests.get(url_fallback, headers=Input._sec_headers(), timeout=20)
L352             r.raise_for_status()
L353             j = r.json()
L354         # 形状A: {"0": {"ticker":..., "cik_str":...}, ...}
L355         if isinstance(j, dict) and "0" in j:
L356             for _, v in (j or {}).items():
L357                 try:
L358                     mp[str(v["ticker"]).upper()] = f"{int(v['cik_str']):010d}"
L359                 except Exception:
L360                     pass
L361         # 形状B: [{"ticker":..., "cik_str":...}, ...]
L362         elif isinstance(j, list):
L363             for v in j:
L364                 try:
L365                     mp[str(v.get("ticker")).upper()] = f"{int(v.get('cik_str')):010d}"
L366                 except Exception:
L367                     pass
L368         # 形状C: {"data":[[idx,ticker,title,cik_str],...]}
L369         elif isinstance(j, dict) and "data" in j:
L370             for row in j.get("data") or []:
L371                 try:
L372                     t = str(row[1]).upper()
L373                     c = int(row[3])
L374                     mp[t] = f"{c:010d}"
L375                 except Exception:
L376                     pass
L377         return mp
L378
L379     # --- 追加: ADR/OTC向けの簡易正規化（末尾Y/F, ドット等） ---
L380     @staticmethod
L381     def _normalize_ticker(sym: str) -> list[str]:
L382         s = (sym or "").upper().strip()
L383         # 追加: 先頭の$や全角の記号を除去
L384         s = s.lstrip("$").replace("＄", "").replace("．", ".").replace("－", "-")
L385         cand: list[str] = []
L386
L387         def add(x: str) -> None:
L388             if x and x not in cand:
L389                 cand.append(x)
L390
L391         # 1) 原文を最優先（SECは BRK.B, BF.B など . を正式採用）
L392         add(s)
L393         # 2) Yahoo系バリアント（. と - の揺れを相互に）
L394         if "." in s:
L395             add(s.replace(".", "-"))
L396             add(s.replace(".", ""))
L397         if "-" in s:
L398             add(s.replace("-", "."))
L399             add(s.replace("-", ""))
L400         # 3) ドット・ハイフン・ピリオド無し版（最後の保険）
L401         add(s.replace("-", "").replace(".", ""))
L402         # 4) ADR簡易：末尾Y/Fの除去（SECマップは本体ティッカーを持つことがある）
L403         if len(s) >= 2 and s[-1] in {"Y", "F"}:
L404             add(s[:-1])
L405         return cand
L406
L407     @staticmethod
L408     def _sec_companyfacts(cik: str):
L409         return Input._sec_get(f"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik}.json")
L410
L411     @staticmethod
L412     def _units_for_tags(facts: dict, namespaces: list[str], tags: list[str]) -> list[dict]:
L413         """facts から namespace/tag を横断して units 配列を収集（存在順に連結）。"""
L414         out: list[dict] = []
L415         facts = (facts or {}).get("facts", {})
L416         for ns in namespaces:
L417             node = facts.get(ns, {}) if isinstance(facts, dict) else {}
L418             for tg in tags:
L419                 try:
L420                     units = node[tg]["units"]
L421                 except Exception:
L422                     continue
L423                 picks: list[dict] = []
L424                 if "USD/shares" in units:
L425                     picks.extend(list(units["USD/shares"]))
L426                 if "USD" in units:
L427                     picks.extend(list(units["USD"]))
L428                 if not picks:
L429                     for arr in units.values():
L430                         picks.extend(list(arr))
L431                 out.extend(picks)
L432         return out
L433
L434     @staticmethod
L435     def _only_quarterly(arr: list[dict]) -> list[dict]:
L436         """companyfactsの混在配列から『四半期』だけを抽出。
L437
L438         - frame に "Q" を含む（例: CY2024Q2I）
L439         - fp が Q1/Q2/Q3/Q4
L440         - form が 10-Q/10-Q/A/6-K
L441         """
L442         if not arr:
L443             return []
L444         q_forms = {"10-Q", "10-Q/A", "6-K"}
L445         out = [
L446             x
L447             for x in arr
L448             if (
L449                 "Q" in (x.get("frame") or "").upper()
L450                 or (x.get("fp") or "").upper() in {"Q1", "Q2", "Q3", "Q4"}
L451                 or (x.get("form") or "").upper() in q_forms
L452             )
L453         ]
L454         out.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L455         return out
L456
L457     @staticmethod
L458     def _series_from_facts_with_dates(arr, key_val="val", key_dt="end", normalize=float):
L459         """companyfactsアイテム配列から (date,value) を返す。dateはYYYY-MM-DDを想定。"""
L460         out: List[Tuple[str, float]] = []
L461         for x in (arr or []):
L462             try:
L463                 d = x.get(key_dt)
L464                 if d is None:
L465                     continue
L466                 v = x.get(key_val)
L467                 out.append((str(d), normalize(v) if v is not None else float("nan")))
L468             except Exception:
L469                 continue
L470         out.sort(key=lambda t: t[0], reverse=True)
L471         return out
L472
L473     def _series_q_and_a(self, facts: list[dict]) -> tuple[list[Tuple[str, float]], list[Tuple[str, float]]]:
L474         """四半期・年次の両seriesを抽出して返す（formで簡易判定）。"""
L475         if not facts:
L476             return [], []
L477         q_items = self._only_quarterly(list(facts))
L478         annual_forms = {"10-K", "10-K/A", "20-F", "20-F/A"}
L479         a_items = [x for x in facts if str((x or {}).get("form", "")).upper() in annual_forms]
L480         a_items.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L481         return self._series_from_facts_with_dates(q_items), self._series_from_facts_with_dates(a_items)
L482
L483     @staticmethod
L484     def _ttm_from_q_or_a(q_vals: list[float], a_vals: list[float]) -> float:
L485         """四半期TTM（4本合算）を優先し、欠損時は年次値で補完。"""
L486         import math
L487
L488         def _clean(vals: list[float]) -> list[float]:
L489             out: list[float] = []
L490             for v in vals:
L491                 try:
L492                     f = float(v)
L493                 except Exception:
L494                     continue
L495                 if math.isfinite(f):
L496                     out.append(f)
L497                 else:
L498                     out.append(float("nan"))
L499             return out
L500
L501         def _sum4(vs: list[float]) -> float:
L502             filtered = [v for v in vs[:4] if v == v]
L503             if len(filtered) >= 2:
L504                 return float(sum(filtered))
L505             if len(filtered) == 1:
L506                 return float(filtered[0])
L507             return float("nan")
L508
L509         q_clean = _clean(q_vals or [])
L510         ttm_q = _sum4(q_clean)
L511         if ttm_q == ttm_q:
L512             return ttm_q
L513         for v in _clean(a_vals or []):
L514             if v == v:
L515                 return float(v)
L516         return float("nan")
L517
L518     def fetch_eps_rev_from_sec(self, tickers: list[str]) -> dict:
L519         out = {}
L520         t2cik = self._sec_ticker_map()
L521         n_map = n_rev = n_eps = 0
L522         miss_map: list[str] = []
L523         miss_facts: list[str] = []
L524         for t in tickers:
L525             base = (t or "").upper()
L526             candidates: list[str] = []
L527             for key in [base, *self._normalize_ticker(t)]:
L528                 if key and key not in candidates:
L529                     candidates.append(key)
L530             cik = next((t2cik.get(key) for key in candidates if t2cik.get(key)), None)
L531             if not cik:
L532                 out[t] = {}
L533                 miss_map.append(t)
L534                 continue
L535             try:
L536                 j = self._sec_companyfacts(cik)
L537                 facts = j or {}
L538                 rev_tags = [
L539                     "Revenues",
L540                     "RevenueFromContractWithCustomerExcludingAssessedTax",
L541                     "SalesRevenueNet",
L542                     "SalesRevenueGoodsNet",
L543                     "SalesRevenueServicesNet",
L544                     "Revenue",
L545                 ]
L546                 eps_tags = [
L547                     "EarningsPerShareDiluted",
L548                     "EarningsPerShareBasicAndDiluted",
L549                     "EarningsPerShare",
L550                     "EarningsPerShareBasic",
L551                 ]
L552                 rev_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], rev_tags)
L553                 eps_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], eps_tags)
L554                 rev_q_pairs, rev_a_pairs = self._series_q_and_a(rev_arr)
L555                 eps_q_pairs, eps_a_pairs = self._series_q_and_a(eps_arr)
L556
L557                 rev_q_
```