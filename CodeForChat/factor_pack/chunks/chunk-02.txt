```text
D):
L261                 i += 1
L262             if i < len(poolD):
L263                 D[j] = poolD[i]; used.add(D[j]); i += 1
L264     return top_G, D
L265
L266
L267 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L268                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L269     import pandas as pd, numpy as np
L270     sel = list(pick)
L271     if not sel: return sel
L272     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L273     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L274     sigma = float(agg.std()) if pd.notna(agg.std()) else 0.0
L275     thresh = kth - delta_z * sigma
L276     ranked_all = agg.sort_values(ascending=False)
L277     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L278     for t in cand:
L279         within_score = (pd.notna(agg[t]) and agg[t] >= thresh)
L280         within_rank  = (t in ranked_all.index) and (ranked_all.index.get_loc(t) < n_target + keep_buffer)
L281         if within_score or within_rank:
L282             non_inc = [x for x in sel if x not in incumbents]
L283             if not non_inc: break
L284             weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L285             if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L286                 sel.remove(weakest); sel.append(t)
L287     if len(sel) > n_target:
L288         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L289     return sel
L290
L291
L292 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L293 class Input:
L294     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L295         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L296         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L297
L298     # ---- （Input専用）EPS補完・FCF算出系 ----
L299     @staticmethod
L300     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L301         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L302         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L303         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L304
L305     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L306
L307     @staticmethod
L308     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L309         if df is None or df.empty: return None
L310         idx_lower={str(i).lower():i for i in df.index}
L311         for n in names:
L312             k=n.lower()
L313             if k in idx_lower: return df.loc[idx_lower[k]]
L314         return None
L315
L316     @staticmethod
L317     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L318         if s is None or s.empty: return None
L319         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L320
L321     @staticmethod
L322     def _latest(s: pd.Series|None) -> float|None:
L323         if s is None or s.empty: return None
L324         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L325
L326     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L327         from concurrent.futures import ThreadPoolExecutor, as_completed
L328         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L329
L330         def one(t: str):
L331             try:
L332                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L333                 qcf = tk.quarterly_cashflow
L334                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L335                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L336                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L337                 if any(v is None for v in (cfo, capex, fcf)):
L338                     acf = tk.cashflow
L339                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L340                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L341                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L342             except Exception as e:
L343                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L344             n=np.nan
L345             return {"ticker":t,
L346                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L347                     "capex_ttm_yf": n if capex is None else capex,
L348                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L349
L350         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L351         with ThreadPoolExecutor(max_workers=mw) as ex:
L352             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L353         return pd.DataFrame(rows).set_index("ticker")
L354
L355     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L356     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L357
L358     @staticmethod
L359     def _first_key(d: dict, keys: list[str]):
L360         for k in keys:
L361             if k in d and d[k] is not None: return d[k]
L362         return None
L363
L364     @staticmethod
L365     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L366         for i in range(retries):
L367             r = session.get(url, params=params, timeout=15)
L368             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L369             r.raise_for_status(); return r.json()
L370         r.raise_for_status()
L371
L372     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L373         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L374         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L375         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L376         for sym in tickers:
L377             cfo_ttm = capex_ttm = None
L378             try:
L379                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L380                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L381                 for item in arr[:4]:
L382                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L383                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L384                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L385             except Exception: pass
L386             if cfo_ttm is None or capex_ttm is None:
L387                 try:
L388                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L389                     arr = j.get("cashFlow") or []
L390                     if arr:
L391                         item0 = arr[0]
L392                         if cfo_ttm is None:
L393                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L394                             if v is not None: cfo_ttm = float(v)
L395                         if capex_ttm is None:
L396                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L397                             if v is not None: capex_ttm = float(v)
L398                 except Exception: pass
L399             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L400         return pd.DataFrame(rows).set_index("ticker")
L401
L402     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L403         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L404         T.log("financials (yf) done")
L405         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L406         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L407         if need:
L408             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L409             df = yf_df.join(fh_df, how="left")
L410             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L411                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L412             print("[T] financials (finnhub) done (fallback only)")
L413         else:
L414             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L415             print("[T] financials (finnhub) skipped (no missing)")
L416         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L417         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L418         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L419         fcf_calc = cfo - capex
L420         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L421         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L422         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L423         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L424         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L425         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L426         return df[cols].sort_index()
L427
L428     def _build_eps_df(self, tickers, tickers_bulk, info):
L429         eps_rows=[]
L430         for t in tickers:
L431             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L432             try:
L433                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L434                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L435                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L436                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L437                     eps_q = qearn["Earnings"].iloc[-1]/so
L438             except Exception: pass
L439             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L440         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L441
L442     def prepare_data(self):
L443         """Fetch price and fundamental data for all tickers."""
L444         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L445         for t in self.cand:
L446             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L447             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L448         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L449         T.log("price cap filter done (CAND_PRICE_MAX)")
L450         tickers = sorted(set(self.exist + cand_f))
L451         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}"
```