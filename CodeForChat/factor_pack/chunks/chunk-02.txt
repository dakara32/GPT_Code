```text
D[i] in D):
L263                 i += 1
L264             if i < len(poolD):
L265                 D[j] = poolD[i]; used.add(D[j]); i += 1
L266     return top_G, D
L267
L268
L269 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L270                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L271     import pandas as pd, numpy as np
L272     sel = list(pick)
L273     if not sel: return sel
L274     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L275     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L276     sigma = float(agg.std()) if pd.notna(agg.std()) else 0.0
L277     thresh = kth - delta_z * sigma
L278     ranked_all = agg.sort_values(ascending=False)
L279     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L280     for t in cand:
L281         within_score = (pd.notna(agg[t]) and agg[t] >= thresh)
L282         within_rank  = (t in ranked_all.index) and (ranked_all.index.get_loc(t) < n_target + keep_buffer)
L283         if within_score or within_rank:
L284             non_inc = [x for x in sel if x not in incumbents]
L285             if not non_inc: break
L286             weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L287             if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L288                 sel.remove(weakest); sel.append(t)
L289     if len(sel) > n_target:
L290         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L291     return sel
L292
L293
L294 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L295 class Input:
L296     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L297         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L298         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L299
L300     # ---- （Input専用）EPS補完・FCF算出系 ----
L301     @staticmethod
L302     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L303         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L304         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L305         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L306
L307     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L308
L309     @staticmethod
L310     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L311         if df is None or df.empty: return None
L312         idx_lower={str(i).lower():i for i in df.index}
L313         for n in names:
L314             k=n.lower()
L315             if k in idx_lower: return df.loc[idx_lower[k]]
L316         return None
L317
L318     @staticmethod
L319     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L320         if s is None or s.empty: return None
L321         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L322
L323     @staticmethod
L324     def _latest(s: pd.Series|None) -> float|None:
L325         if s is None or s.empty: return None
L326         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L327
L328     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L329         from concurrent.futures import ThreadPoolExecutor, as_completed
L330         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L331
L332         def one(t: str):
L333             try:
L334                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L335                 qcf = tk.quarterly_cashflow
L336                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L337                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L338                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L339                 if any(v is None for v in (cfo, capex, fcf)):
L340                     acf = tk.cashflow
L341                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L342                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L343                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L344             except Exception as e:
L345                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L346             n=np.nan
L347             return {"ticker":t,
L348                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L349                     "capex_ttm_yf": n if capex is None else capex,
L350                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L351
L352         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L353         with ThreadPoolExecutor(max_workers=mw) as ex:
L354             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L355         return pd.DataFrame(rows).set_index("ticker")
L356
L357     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L358     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L359
L360     @staticmethod
L361     def _first_key(d: dict, keys: list[str]):
L362         for k in keys:
L363             if k in d and d[k] is not None: return d[k]
L364         return None
L365
L366     @staticmethod
L367     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L368         for i in range(retries):
L369             r = session.get(url, params=params, timeout=15)
L370             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L371             r.raise_for_status(); return r.json()
L372         r.raise_for_status()
L373
L374     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L375         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L376         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L377         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L378         for sym in tickers:
L379             cfo_ttm = capex_ttm = None
L380             try:
L381                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L382                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L383                 for item in arr[:4]:
L384                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L385                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L386                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L387             except Exception: pass
L388             if cfo_ttm is None or capex_ttm is None:
L389                 try:
L390                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L391                     arr = j.get("cashFlow") or []
L392                     if arr:
L393                         item0 = arr[0]
L394                         if cfo_ttm is None:
L395                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L396                             if v is not None: cfo_ttm = float(v)
L397                         if capex_ttm is None:
L398                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L399                             if v is not None: capex_ttm = float(v)
L400                 except Exception: pass
L401             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L402         return pd.DataFrame(rows).set_index("ticker")
L403
L404     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L405         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L406         T.log("financials (yf) done")
L407         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L408         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L409         if need:
L410             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L411             df = yf_df.join(fh_df, how="left")
L412             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L413                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L414             print("[T] financials (finnhub) done (fallback only)")
L415         else:
L416             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L417             print("[T] financials (finnhub) skipped (no missing)")
L418         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L419         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L420         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L421         fcf_calc = cfo - capex
L422         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L423         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L424         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L425         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L426         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L427         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L428         return df[cols].sort_index()
L429
L430     def _build_eps_df(self, tickers, tickers_bulk, info):
L431         eps_rows=[]
L432         for t in tickers:
L433             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L434             try:
L435                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L436                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L437                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L438                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L439                     eps_q = qearn["Earnings"].iloc[-1]/so
L440             except Exception: pass
L441             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L442         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L443
L444     def prepare_data(self):
L445         """Fetch price and fundamental data for all tickers."""
L446         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L447         for t in self.cand:
L448             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L449             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L450         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L451         T.log("price cap filter done (CAND_PRICE_MAX)")
L452         tickers = sorted(set(self.exist + cand_f))
L453         T.log(f"universe prepared: unique={len(tickers)} bench={self
```