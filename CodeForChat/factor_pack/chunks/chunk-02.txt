```text
        try:
L283                 j = self._sec_companyfacts(cik)
L284                 rev_arr = self._pick_usd_facts(j, "Revenues") or self._pick_usd_facts(j, "SalesRevenueNet")
L285                 eps_arr = self._pick_usd_facts(j, "EarningsPerShareDiluted") or self._pick_usd_facts(j, "EarningsPerShareBasic")
L286                 if rev_arr:
L287                     rev_arr = sorted(rev_arr, key=lambda x: x.get("end", ""), reverse=True)
L288                 if eps_arr:
L289                     eps_arr = sorted(eps_arr, key=lambda x: x.get("end", ""), reverse=True)
L290                 rev_vals = self._series_from_facts(rev_arr)
L291                 eps_vals = self._series_from_facts(eps_arr)
L292                 rev_q = float(rev_vals[0]) if rev_vals else float("nan")
L293                 eps_q = float(eps_vals[0]) if eps_vals else float("nan")
L294                 rev_ttm = float(sum([v for v in rev_vals[:4] if v == v])) if rev_vals else float("nan")
L295                 eps_ttm = float(sum([v for v in eps_vals[:4] if v == v])) if eps_vals else float("nan")
L296                 out[t] = {
L297                     "eps_q_recent": eps_q,
L298                     "eps_ttm": eps_ttm,
L299                     "rev_q_recent": rev_q,
L300                     "rev_ttm": rev_ttm,
L301                     "eps_q_series": eps_vals[:8],
L302                     "rev_q_series": rev_vals[:8],
L303                 }
L304             except Exception:
L305                 out[t] = {}
L306             time.sleep(0.12)
L307         return out
L308     @staticmethod
L309     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L310         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L311         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L312         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L313
L314     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L315
L316     @staticmethod
L317     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L318         if df is None or df.empty: return None
L319         idx_lower={str(i).lower():i for i in df.index}
L320         for n in names:
L321             k=n.lower()
L322             if k in idx_lower: return df.loc[idx_lower[k]]
L323         return None
L324
L325     @staticmethod
L326     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L327         if s is None or s.empty: return None
L328         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L329
L330     @staticmethod
L331     def _latest(s: pd.Series|None) -> float|None:
L332         if s is None or s.empty: return None
L333         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L334
L335     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L336         from concurrent.futures import ThreadPoolExecutor, as_completed
L337         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L338
L339         def one(t: str):
L340             try:
L341                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L342                 qcf = tk.quarterly_cashflow
L343                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L344                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L345                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L346                 if any(v is None for v in (cfo, capex, fcf)):
L347                     acf = tk.cashflow
L348                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L349                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L350                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L351             except Exception as e:
L352                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L353             n=np.nan
L354             return {"ticker":t,
L355                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L356                     "capex_ttm_yf": n if capex is None else capex,
L357                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L358
L359         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L360         with ThreadPoolExecutor(max_workers=mw) as ex:
L361             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L362         return pd.DataFrame(rows).set_index("ticker")
L363
L364     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L365     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L366
L367     @staticmethod
L368     def _first_key(d: dict, keys: list[str]):
L369         for k in keys:
L370             if k in d and d[k] is not None: return d[k]
L371         return None
L372
L373     @staticmethod
L374     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L375         for i in range(retries):
L376             r = session.get(url, params=params, timeout=15)
L377             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L378             r.raise_for_status(); return r.json()
L379         r.raise_for_status()
L380
L381     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L382         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L383         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L384         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L385         for sym in tickers:
L386             cfo_ttm = capex_ttm = None
L387             try:
L388                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L389                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L390                 for item in arr[:4]:
L391                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L392                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L393                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L394             except Exception: pass
L395             if cfo_ttm is None or capex_ttm is None:
L396                 try:
L397                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L398                     arr = j.get("cashFlow") or []
L399                     if arr:
L400                         item0 = arr[0]
L401                         if cfo_ttm is None:
L402                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L403                             if v is not None: cfo_ttm = float(v)
L404                         if capex_ttm is None:
L405                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L406                             if v is not None: capex_ttm = float(v)
L407                 except Exception: pass
L408             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L409         return pd.DataFrame(rows).set_index("ticker")
L410
L411     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L412         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L413         T.log("financials (yf) done")
L414         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L415         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L416         if need:
L417             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L418             df = yf_df.join(fh_df, how="left")
L419             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L420                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L421             print("[T] financials (finnhub) done (fallback only)")
L422         else:
L423             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L424             print("[T] financials (finnhub) skipped (no missing)")
L425         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L426         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L427         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L428         fcf_calc = cfo - capex
L429         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L430         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L431         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L432         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L433         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L434         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L435         return df[cols].sort_index()
L436
L437     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L438         eps_rows=[]
L439         for t in tickers:
L440             info_t = info[t]
L441             sec_t = (sec_map or {}).get(t, {})
L442             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L443             eps_q = sec_t.get("eps_q_recent", np.nan)
L444             try:
L445                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L446                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L447                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L448                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L449                     if pd.isna(eps_q):
L450                         eps_q = qearn["Earnings"].iloc[-1]/so
L451             except Exception: pass
L452             rev_ttm = sec_t.get("rev_ttm", np.nan)
L453             rev_q = sec_t.get("rev_q_recent", np.nan)
L454             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q,"rev_ttm":rev_ttm,"rev_q_recent":rev_q})
L455         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L456
L457     def prepare_data(self):
L458         """Fetch price and fundamental data for all tickers."""
L459         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L460         for t in self.cand:
L461             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L462             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L463         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L464         T.log("price cap filter done (CAND_PRICE_MAX)")
L465         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L466         tickers = list(dict.fromkeys(self.exist + cand_f))
L467         T.
```