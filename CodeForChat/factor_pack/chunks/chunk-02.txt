```text
    eff_days = len(base)
L281     lead_lines = [
L282         f"テンプレ合格本数: {C_full}本 → モード {mode_ja}",
L283         f"現在のしきい値（{th_src}）: 緊急入り<{th_in}本 / 解除≥{th_out}本 / 通常復帰≥{th_norm}本",
L284         f"参考指標（過去~{win}営業日, 有効={eff_days}日）: 下位5%={q05}本 / 下位20%={q20}本 / 60%分位={q60}本",
L285     ]
L286     return lead_lines, mode
L287
L288
L289 # ===== Input：外部I/Oと前処理（CSV/API・欠損補完） =====
L290 class Input:
L291     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L292         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L293         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L294
L295     # ---- （Input専用）EPS補完・FCF算出系 ----
L296     @staticmethod
L297     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L298         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L299         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L300         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L301
L302     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L303
L304     @staticmethod
L305     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L306         if df is None or df.empty: return None
L307         idx_lower = {str(i).lower(): i for i in df.index}
L308         for name in names:
L309             key = name.lower()
L310             if key in idx_lower: return df.loc[idx_lower[key]]
L311         return None
L312
L313     @staticmethod
L314     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L315         if s is None or s.empty: return None
L316         vals = s.dropna().astype(float); return None if vals.empty else vals.iloc[:n].sum()
L317
L318     @staticmethod
L319     def _latest(s: pd.Series|None) -> float|None:
L320         if s is None or s.empty: return None
L321         vals = s.dropna().astype(float); return vals.iloc[0] if not vals.empty else None
L322
L323     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L324         from concurrent.futures import ThreadPoolExecutor, as_completed
L325         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L326
L327         def one(t: str):
L328             try:
L329                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L330                 qcf = tk.quarterly_cashflow
L331                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L332                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L333                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L334                 if any(v is None for v in (cfo, capex, fcf)):
L335                     acf = tk.cashflow
L336                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L337                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L338                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L339             except Exception as e:
L340                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L341             n=np.nan
L342             return {"ticker":t,
L343                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L344                     "capex_ttm_yf": n if capex is None else capex,
L345                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L346
L347         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L348         with ThreadPoolExecutor(max_workers=mw) as ex:
L349             for f in as_completed(ex.submit(one,t) for t in tickers): rows.append(f.result())
L350         return pd.DataFrame(rows).set_index("ticker")
L351
L352     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L353     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L354
L355     @staticmethod
L356     def _first_key(d: dict, keys: list[str]):
L357         for k in keys:
L358             if k in d and d[k] is not None: return d[k]
L359         return None
L360
L361     @staticmethod
L362     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L363         for i in range(retries):
L364             r = session.get(url, params=params, timeout=15)
L365             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L366             r.raise_for_status(); return r.json()
L367         r.raise_for_status()
L368
L369     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L370         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L371         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L372         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L373         for sym in tickers:
L374             cfo_ttm = capex_ttm = None
L375             try:
L376                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L377                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L378                 for item in arr[:4]:
L379                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L380                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L381                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L382             except Exception: pass
L383             if cfo_ttm is None or capex_ttm is None:
L384                 try:
L385                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L386                     arr = j.get("cashFlow") or []
L387                     if arr:
L388                         item0 = arr[0]
L389                         if cfo_ttm is None:
L390                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L391                             if v is not None: cfo_ttm = float(v)
L392                         if capex_ttm is None:
L393                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L394                             if v is not None: capex_ttm = float(v)
L395                 except Exception: pass
L396             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L397         return pd.DataFrame(rows).set_index("ticker")
L398
L399     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L400         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L401         T.log("financials (yf) done")
L402         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L403         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L404         if need:
L405             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L406             df = yf_df.join(fh_df, how="left")
L407             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L408                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L409             print("[T] financials (finnhub) done (fallback only)")
L410         else:
L411             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L412             print("[T] financials (finnhub) skipped (no missing)")
L413         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L414         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L415         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L416         fcf_calc = cfo - capex
L417         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L418         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L419         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L420         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L421         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L422         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L423         return df[cols].sort_index()
L424
L425     def _build_eps_df(self, tickers, tickers_bulk, info):
L426         eps_rows=[]
L427         for t in tickers:
L428             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L429             try:
L430                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L431                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L432                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L433                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L434                     eps_q = qearn["Earnings"].iloc[-1]/so
L435             except Exception: pass
L436             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L437         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L438
L439     def prepare_data(self):
L440         """Fetch price and fundamental data for all tickers."""
L441         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L442         for t in self.cand:
L443             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L444             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L445         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L446         T.log("price cap filter done (CAND_PRICE_MAX)")
L447         tickers = sorted(set(self.exist + cand_f))
L448         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L449         data = yf.download(tickers + [self.bench], period="600d", auto_adjust=True, progress=False)
L450         T.log("yf.download done")
L451         px, spx = data["Close"], data["Close"][self.bench]
L452         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L453         if clip_days > 0:
L454             px  = px.tail(clip_days + 1)
L455             spx = spx.tail(clip_days + 1)
L456             print(f"[T] price window clipped by env: {len(px)} rows (PRICE_CLIP_DAYS={clip_days})")
L457         else:
L458             print(f"[T] price window clip skipped; rows={len(px)}")
L459         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L460         for t in tickers:
L461             try: info[t] = tickers_bulk.tickers[t].info
L462             except Exception as e: print(f"{t}: info fetch failed ({e})"); info[t] = {}
L463         eps_df = self._build_eps_df(tickers, tickers_bulk, info)
L464         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L465         T.log("eps/fcf prep done")
L466         returns = px[tickers].pct_change()
L467         T.log("price prep/returns 
```