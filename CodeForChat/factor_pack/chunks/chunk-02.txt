```text
 cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L257         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L258
L259     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L260
L261     @staticmethod
L262     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L263         if df is None or df.empty: return None
L264         idx_lower = {str(i).lower(): i for i in df.index}
L265         for name in names:
L266             key = name.lower()
L267             if key in idx_lower: return df.loc[idx_lower[key]]
L268         return None
L269
L270     @staticmethod
L271     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L272         if s is None or s.empty: return None
L273         vals = s.dropna().astype(float); return None if vals.empty else vals.iloc[:n].sum()
L274
L275     @staticmethod
L276     def _latest(s: pd.Series|None) -> float|None:
L277         if s is None or s.empty: return None
L278         vals = s.dropna().astype(float); return vals.iloc[0] if not vals.empty else None
L279
L280     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L281         from concurrent.futures import ThreadPoolExecutor, as_completed
L282         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L283
L284         def one(t: str):
L285             try:
L286                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L287                 qcf = tk.quarterly_cashflow
L288                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L289                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L290                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L291                 if any(v is None for v in (cfo, capex, fcf)):
L292                     acf = tk.cashflow
L293                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L294                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L295                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L296             except Exception as e:
L297                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L298             n=np.nan
L299             return {"ticker":t,
L300                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L301                     "capex_ttm_yf": n if capex is None else capex,
L302                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L303
L304         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L305         with ThreadPoolExecutor(max_workers=mw) as ex:
L306             for f in as_completed(ex.submit(one,t) for t in tickers): rows.append(f.result())
L307         return pd.DataFrame(rows).set_index("ticker")
L308
L309     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L310     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L311
L312     @staticmethod
L313     def _first_key(d: dict, keys: list[str]):
L314         for k in keys:
L315             if k in d and d[k] is not None: return d[k]
L316         return None
L317
L318     @staticmethod
L319     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L320         for i in range(retries):
L321             r = session.get(url, params=params, timeout=15)
L322             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L323             r.raise_for_status(); return r.json()
L324         r.raise_for_status()
L325
L326     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L327         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L328         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L329         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L330         for sym in tickers:
L331             cfo_ttm = capex_ttm = None
L332             try:
L333                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L334                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L335                 for item in arr[:4]:
L336                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L337                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L338                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L339             except Exception: pass
L340             if cfo_ttm is None or capex_ttm is None:
L341                 try:
L342                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L343                     arr = j.get("cashFlow") or []
L344                     if arr:
L345                         item0 = arr[0]
L346                         if cfo_ttm is None:
L347                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L348                             if v is not None: cfo_ttm = float(v)
L349                         if capex_ttm is None:
L350                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L351                             if v is not None: capex_ttm = float(v)
L352                 except Exception: pass
L353             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L354         return pd.DataFrame(rows).set_index("ticker")
L355
L356     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L357         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L358         T.log("financials (yf) done")
L359         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L360         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L361         if need:
L362             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L363             df = yf_df.join(fh_df, how="left")
L364             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L365                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L366             print("[T] financials (finnhub) done (fallback only)")
L367         else:
L368             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L369             print("[T] financials (finnhub) skipped (no missing)")
L370         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L371         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L372         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L373         fcf_calc = cfo - capex
L374         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L375         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L376         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L377         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L378         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L379         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L380         return df[cols].sort_index()
L381
L382     def _build_eps_df(self, tickers, tickers_bulk, info):
L383         eps_rows=[]
L384         for t in tickers:
L385             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L386             try:
L387                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L388                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L389                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L390                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L391                     eps_q = qearn["Earnings"].iloc[-1]/so
L392             except Exception: pass
L393             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L394         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L395
L396     def prepare_data(self):
L397         """Fetch price and fundamental data for all tickers."""
L398         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L399         for t in self.cand:
L400             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L401             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L402         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L403         T.log("price cap filter done (CAND_PRICE_MAX)")
L404         tickers = sorted(set(self.exist + cand_f))
L405         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L406         data = yf.download(tickers + [self.bench], period="600d", auto_adjust=True, progress=False)
L407         T.log("yf.download done")
L408         px, spx = data["Close"], data["Close"][self.bench]
L409         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L410         if clip_days > 0:
L411             px  = px.tail(clip_days + 1)
L412             spx = spx.tail(clip_days + 1)
L413             print(f"[T] price window clipped by env: {len(px)} rows (PRICE_CLIP_DAYS={clip_days})")
L414         else:
L415             print(f"[T] price window clip skipped; rows={len(px)}")
L416         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L417         for t in tickers:
L418             try: info[t] = tickers_bulk.tickers[t].info
L419             except Exception as e: print(f"{t}: info fetch failed ({e})"); info[t] = {}
L420         eps_df = self._build_eps_df(tickers, tickers_bulk, info)
L421         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L422         T.log("eps/fcf prep done")
L423         returns = px[tickers].pct_change()
L424         T.log("price prep/returns done")
L425         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L426
L427
L428 # ===== Selector：相関低減・選定（スコア＆リターンだけ読む） =====
L429 class Selector:
L430     # ---- DRRS helpers（Selector専用） ----
L431     @staticmethod
L432     def _z_np(X: np.ndarray) -> np.ndarray:
L433         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L434         return (np.nan_to_num(X)-m)/s
L435
L436     @classmethod
L437     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L438         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L439         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L440         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs =
```