```text
 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L258             n=np.nan
L259             return {"ticker":t,
L260                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L261                     "capex_ttm_yf": n if capex is None else capex,
L262                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L263
L264         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L265         with ThreadPoolExecutor(max_workers=mw) as ex:
L266             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L267         return pd.DataFrame(rows).set_index("ticker")
L268
L269     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L270     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L271
L272     @staticmethod
L273     def _first_key(d: dict, keys: list[str]):
L274         for k in keys:
L275             if k in d and d[k] is not None: return d[k]
L276         return None
L277
L278     @staticmethod
L279     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L280         for i in range(retries):
L281             r = session.get(url, params=params, timeout=15)
L282             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L283             r.raise_for_status(); return r.json()
L284         r.raise_for_status()
L285
L286     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L287         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L288         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L289         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L290         for sym in tickers:
L291             cfo_ttm = capex_ttm = None
L292             try:
L293                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L294                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L295                 for item in arr[:4]:
L296                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L297                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L298                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L299             except Exception: pass
L300             if cfo_ttm is None or capex_ttm is None:
L301                 try:
L302                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L303                     arr = j.get("cashFlow") or []
L304                     if arr:
L305                         item0 = arr[0]
L306                         if cfo_ttm is None:
L307                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L308                             if v is not None: cfo_ttm = float(v)
L309                         if capex_ttm is None:
L310                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L311                             if v is not None: capex_ttm = float(v)
L312                 except Exception: pass
L313             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L314         return pd.DataFrame(rows).set_index("ticker")
L315
L316     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L317         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L318         T.log("financials (yf) done")
L319         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L320         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L321         if need:
L322             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L323             df = yf_df.join(fh_df, how="left")
L324             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L325                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L326             print("[T] financials (finnhub) done (fallback only)")
L327         else:
L328             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L329             print("[T] financials (finnhub) skipped (no missing)")
L330         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L331         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L332         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L333         fcf_calc = cfo - capex
L334         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L335         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L336         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L337         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L338         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L339         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L340         return df[cols].sort_index()
L341
L342     def _build_eps_df(self, tickers, tickers_bulk, info):
L343         eps_rows=[]
L344         for t in tickers:
L345             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L346             try:
L347                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L348                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L349                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L350                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L351                     eps_q = qearn["Earnings"].iloc[-1]/so
L352             except Exception: pass
L353             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L354         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L355
L356     def prepare_data(self):
L357         """Fetch price and fundamental data for all tickers."""
L358         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L359         for t in self.cand:
L360             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L361             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L362         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L363         T.log("price cap filter done (CAND_PRICE_MAX)")
L364         tickers = sorted(set(self.exist + cand_f))
L365         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L366         data = yf.download(tickers + [self.bench], period="600d",
L367                            auto_adjust=True, progress=False, threads=False)
L368         T.log("yf.download done")
L369         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L370         spx = data["Close"][self.bench].reindex(px.index).ffill()
L371         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L372         if clip_days > 0:
L373             px  = px.tail(clip_days + 1)
L374             spx = spx.tail(clip_days + 1)
L375             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)
L376         else:
L377             logger.info("[T] price window clip skipped; rows=%d", len(px))
L378         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L379         for t in tickers:
L380             try:
L381                 info[t] = tickers_bulk.tickers[t].info
L382             except Exception as e:
L383                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L384                 info[t] = {}
L385         eps_df = self._build_eps_df(tickers, tickers_bulk, info)
L386         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L387         T.log("eps/fcf prep done")
L388         returns = px[tickers].pct_change()
L389         T.log("price prep/returns done")
L390         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L391
L392 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L393 class Selector:
L394     # ---- DRRS helpers（Selector専用） ----
L395     @staticmethod
L396     def _z_np(X: np.ndarray) -> np.ndarray:
L397         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L398         return (np.nan_to_num(X)-m)/s
L399
L400     @classmethod
L401     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L402         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L403         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L404         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L405         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L406         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L407
L408     @classmethod
L409     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L410         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L411         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L412         if k==0: return []
L413         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L414         for _ in range(k):
L415             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L416             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L417             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L418         return sorted(S)
L419
L420     @staticmethod
L421     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L422         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L423         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L424
L425     @classmethod
L426     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L427         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L428         while improved and passes<max_pass:
L429             improved, passes = False, passes+1
L430             for i,out in enumerate(list(S)):
L431                 for inn in range(len(score)):
L432                     if inn in S: continue
L433                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L434                     if v>best+1e-10: S, best, improved = cand, v, True; break
L435                 if improved: break
L436         return S, best
L437
L438     @staticmethod
L439     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L440         idx = list(idx); P = C_w
```