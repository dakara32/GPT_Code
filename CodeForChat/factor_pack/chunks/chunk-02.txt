```text
x, fcf)):
L254                     acf = tk.cashflow
L255                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L256                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L257                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L258             except Exception as e:
L259                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L260             n=np.nan
L261             return {"ticker":t,
L262                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L263                     "capex_ttm_yf": n if capex is None else capex,
L264                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L265
L266         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L267         with ThreadPoolExecutor(max_workers=mw) as ex:
L268             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L269         return pd.DataFrame(rows).set_index("ticker")
L270
L271     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L272     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L273
L274     @staticmethod
L275     def _first_key(d: dict, keys: list[str]):
L276         for k in keys:
L277             if k in d and d[k] is not None: return d[k]
L278         return None
L279
L280     @staticmethod
L281     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L282         for i in range(retries):
L283             r = session.get(url, params=params, timeout=15)
L284             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L285             r.raise_for_status(); return r.json()
L286         r.raise_for_status()
L287
L288     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L289         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L290         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L291         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L292         for sym in tickers:
L293             cfo_ttm = capex_ttm = None
L294             try:
L295                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L296                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L297                 for item in arr[:4]:
L298                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L299                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L300                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L301             except Exception: pass
L302             if cfo_ttm is None or capex_ttm is None:
L303                 try:
L304                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L305                     arr = j.get("cashFlow") or []
L306                     if arr:
L307                         item0 = arr[0]
L308                         if cfo_ttm is None:
L309                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L310                             if v is not None: cfo_ttm = float(v)
L311                         if capex_ttm is None:
L312                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L313                             if v is not None: capex_ttm = float(v)
L314                 except Exception: pass
L315             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L316         return pd.DataFrame(rows).set_index("ticker")
L317
L318     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L319         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L320         T.log("financials (yf) done")
L321         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L322         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L323         if need:
L324             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L325             df = yf_df.join(fh_df, how="left")
L326             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L327                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L328             print("[T] financials (finnhub) done (fallback only)")
L329         else:
L330             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L331             print("[T] financials (finnhub) skipped (no missing)")
L332         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L333         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L334         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L335         fcf_calc = cfo - capex
L336         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L337         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L338         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L339         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L340         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L341         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L342         return df[cols].sort_index()
L343
L344     def _build_eps_df(self, tickers, tickers_bulk, info):
L345         eps_rows=[]
L346         for t in tickers:
L347             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L348             try:
L349                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L350                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L351                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L352                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L353                     eps_q = qearn["Earnings"].iloc[-1]/so
L354             except Exception: pass
L355             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L356         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L357
L358     def prepare_data(self):
L359         """Fetch price and fundamental data for all tickers."""
L360         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L361         for t in self.cand:
L362             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L363             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L364         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L365         T.log("price cap filter done (CAND_PRICE_MAX)")
L366         tickers = sorted(set(self.exist + cand_f))
L367         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L368         data = yf.download(tickers + [self.bench], period="600d", auto_adjust=True, progress=False)
L369         T.log("yf.download done")
L370         px, spx = data["Close"], data["Close"][self.bench]
L371         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L372         if clip_days > 0:
L373             px  = px.tail(clip_days + 1)
L374             spx = spx.tail(clip_days + 1)
L375             print(f"[T] price window clipped by env: {len(px)} rows (PRICE_CLIP_DAYS={clip_days})")
L376         else:
L377             print(f"[T] price window clip skipped; rows={len(px)}")
L378         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L379         for t in tickers:
L380             try: info[t] = tickers_bulk.tickers[t].info
L381             except Exception as e: print(f"{t}: info fetch failed ({e})"); info[t] = {}
L382         eps_df = self._build_eps_df(tickers, tickers_bulk, info)
L383         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L384         T.log("eps/fcf prep done")
L385         returns = px[tickers].pct_change()
L386         T.log("price prep/returns done")
L387         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L388
L389 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L390 class Selector:
L391     # ---- DRRS helpers（Selector専用） ----
L392     @staticmethod
L393     def _z_np(X: np.ndarray) -> np.ndarray:
L394         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L395         return (np.nan_to_num(X)-m)/s
L396
L397     @classmethod
L398     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L399         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L400         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L401         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L402         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L403         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L404
L405     @classmethod
L406     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L407         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L408         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L409         if k==0: return []
L410         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L411         for _ in range(k):
L412             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L413             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L414             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L415         return sorted(S)
L416
L417     @staticmethod
L418     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L419         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L420         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L421
L422     @classmethod
L423     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L424         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L425         while improved and passes<max_pass:
L426             improved, passes = False, passes+1
L427             for i,out in enumerate(list(S)):
L428                 for inn in range(len(score)):
L429                     if inn in S: continue
L430                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L431                     if v>best+1e-10: S, best, improved = cand, v, True; break
L432                 if improved: break
L433         return S, best
L434
L435     
```