```text
: list[dict]) -> list[dict]:
L278         """companyfactsの混在配列から『四半期』だけを抽出。
L279
L280         - frame に "Q" を含む（例: CY2024Q2I）
L281         - fp が Q1/Q2/Q3/Q4
L282         - form が 10-Q/10-Q/A/6-K
L283         """
L284         if not arr:
L285             return []
L286         q_forms = {"10-Q", "10-Q/A", "6-K"}
L287
L288         def is_q(x: dict) -> bool:
L289             frame = (x.get("frame") or "").upper()
L290             fp = (x.get("fp") or "").upper()
L291             form = (x.get("form") or "").upper()
L292             return ("Q" in frame) or (fp in {"Q1", "Q2", "Q3", "Q4"}) or (form in q_forms)
L293
L294         out = [x for x in arr if is_q(x)]
L295         out.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L296         return out
L297
L298     @staticmethod
L299     def _series_from_facts(arr, key="val", normalize=float):
L300         out = []
L301         for x in (arr or []):
L302             try:
L303                 v = x.get(key)
L304                 out.append(normalize(v) if v is not None else float("nan"))
L305             except Exception:
L306                 out.append(float("nan"))
L307         return out
L308
L309     def fetch_eps_rev_from_sec(self, tickers: list[str]) -> dict:
L310         out = {}
L311         t2cik = self._sec_ticker_map()
L312         for t in tickers:
L313             cik = t2cik.get(t.upper())
L314             if not cik:
L315                 out[t] = {}
L316                 continue
L317             try:
L318                 j = self._sec_companyfacts(cik)
L319                 facts = j or {}
L320                 rev_tags = [
L321                     "Revenues",
L322                     "RevenueFromContractWithCustomerExcludingAssessedTax",
L323                     "SalesRevenueNet",
L324                     "SalesRevenueGoodsNet",
L325                     "SalesRevenueServicesNet",
L326                     "Revenue",
L327                 ]
L328                 eps_tags = [
L329                     "EarningsPerShareDiluted",
L330                     "EarningsPerShareBasicAndDiluted",
L331                     "EarningsPerShare",
L332                     "EarningsPerShareBasic",
L333                 ]
L334                 rev_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], rev_tags)
L335                 eps_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], eps_tags)
L336                 rev_q_items = self._only_quarterly(rev_arr)
L337                 eps_q_items = self._only_quarterly(eps_arr)
L338                 rev_vals = self._series_from_facts(rev_q_items)
L339                 eps_vals = self._series_from_facts(eps_q_items)
L340                 rev_q = float(rev_vals[0]) if rev_vals else float("nan")
L341                 eps_q = float(eps_vals[0]) if eps_vals else float("nan")
L342                 rev_ttm = float(sum([v for v in rev_vals[:4] if v == v])) if rev_vals else float("nan")
L343                 eps_ttm = float(sum([v for v in eps_vals[:4] if v == v])) if eps_vals else float("nan")
L344                 out[t] = {
L345                     "eps_q_recent": eps_q,
L346                     "eps_ttm": eps_ttm,
L347                     "rev_q_recent": rev_q,
L348                     "rev_ttm": rev_ttm,
L349                     "eps_q_series": eps_vals[:8],
L350                     "rev_q_series": rev_vals[:8],
L351                 }
L352             except Exception:
L353                 out[t] = {}
L354             time.sleep(0.12)
L355         return out
L356     @staticmethod
L357     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L358         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L359         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L360         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L361
L362     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L363
L364     @staticmethod
L365     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L366         if df is None or df.empty: return None
L367         idx_lower={str(i).lower():i for i in df.index}
L368         for n in names:
L369             k=n.lower()
L370             if k in idx_lower: return df.loc[idx_lower[k]]
L371         return None
L372
L373     @staticmethod
L374     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L375         if s is None or s.empty: return None
L376         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L377
L378     @staticmethod
L379     def _latest(s: pd.Series|None) -> float|None:
L380         if s is None or s.empty: return None
L381         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L382
L383     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L384         from concurrent.futures import ThreadPoolExecutor, as_completed
L385         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L386
L387         def one(t: str):
L388             try:
L389                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L390                 qcf = tk.quarterly_cashflow
L391                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L392                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L393                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L394                 if any(v is None for v in (cfo, capex, fcf)):
L395                     acf = tk.cashflow
L396                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L397                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L398                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L399             except Exception as e:
L400                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L401             n=np.nan
L402             return {"ticker":t,
L403                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L404                     "capex_ttm_yf": n if capex is None else capex,
L405                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L406
L407         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L408         with ThreadPoolExecutor(max_workers=mw) as ex:
L409             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L410         return pd.DataFrame(rows).set_index("ticker")
L411
L412     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L413     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L414
L415     @staticmethod
L416     def _first_key(d: dict, keys: list[str]):
L417         for k in keys:
L418             if k in d and d[k] is not None: return d[k]
L419         return None
L420
L421     @staticmethod
L422     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L423         for i in range(retries):
L424             r = session.get(url, params=params, timeout=15)
L425             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L426             r.raise_for_status(); return r.json()
L427         r.raise_for_status()
L428
L429     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L430         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L431         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L432         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L433         for sym in tickers:
L434             cfo_ttm = capex_ttm = None
L435             try:
L436                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L437                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L438                 for item in arr[:4]:
L439                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L440                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L441                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L442             except Exception: pass
L443             if cfo_ttm is None or capex_ttm is None:
L444                 try:
L445                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L446                     arr = j.get("cashFlow") or []
L447                     if arr:
L448                         item0 = arr[0]
L449                         if cfo_ttm is None:
L450                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L451                             if v is not None: cfo_ttm = float(v)
L452                         if capex_ttm is None:
L453                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L454                             if v is not None: capex_ttm = float(v)
L455                 except Exception: pass
L456             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L457         return pd.DataFrame(rows).set_index("ticker")
L458
L459     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L460         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L461         T.log("financials (yf) done")
L462         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L463         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L464         if need:
L465             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L466             df = yf_df.join(fh_df, how="left")
L467             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L468                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L469             print("[T] financials (finnhub) done (fallback only)")
L470         else:
L471             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L472             print("[T] financials (finnhub) skipped (no missing)")
L473         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L474         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L475         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L476         fcf_calc = cfo - capex
L477         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L478         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L479         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L480         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L481         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L482         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L483         return df[cols].sort_index()
L484
L485     def _build
```