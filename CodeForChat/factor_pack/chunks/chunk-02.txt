```text
, "DSC") if c not in cols]
L269         cols += [c for c in extra if c not in cols]
L270     else:
L271         cols = [c for c in df_focus.columns if c not in ("GSC", "DSC")]
L272         cols += [c for c in ("GSC", "DSC") if c not in cols]
L273
L274     body = df_focus.reindex(columns=cols).round(3).to_string(max_rows=None, max_cols=None, na_rep="nan") if focus else "(no rows)"
L275
L276     def _fmt_near(lbl, ser, lst):
L277         if ser is None:
L278             return f"{lbl}: off"
L279         get = ser.get
L280         parts = []
L281         for t in lst:
L282             val = get(t, np.nan)
L283             parts.append(f"{t}:{val:.3f}" if pd.notna(val) else f"{t}:nan")
L284         return f"{lbl}: " + (", ".join(parts) if parts else "-")
L285
L286     head = [
L287         f"G new/out: {len(g_new)}/{len(g_out)}  D new/out: {len(d_new)}/{len(d_out)}",
L288         _fmt_near("G near10", g_sorted, g_miss),
L289         _fmt_near("D near10", d_sorted, d_miss),
L290         f"Filters: G pre_mask=['trend_template'], D pre_filter={{'beta_max': {D_BETA_MAX}}}",
L291         f"Cols={'ALL' if all_cols else 'MIN'}  Rows={'ALL' if all_rows else 'SELECTED+CURRENT+NEAR'}",
L292     ]
L293
L294     miss_txt = ""
L295     if _env_true("DEBUG_MISSING_LOGS", False):
L296         miss = getattr(fb, "missing_logs", None)
L297         if miss is not None and not miss.empty:
L298             miss_txt = "\nMissing data (head)\n" + miss.head(10).to_string(index=False)
L299
L300     lines = head + ["", "Changed/Selected (+ Near Miss + Current)", "GRW深掘り表", body]
L301     return "\n".join(lines) + miss_txt
L302
L303 def _disjoint_keepG(top_G, top_D, poolD):
L304     """G重複をDから除去し、poolDで順次補充（枯渇時は元銘柄維持）。"""
L305     used, D, i = set(top_G), list(top_D), 0
L306     for j, t in enumerate(D):
L307         if t in used:
L308             while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L309                 i += 1
L310             if i < len(poolD):
L311                 D[j] = poolD[i]; used.add(D[j]); i += 1
L312     return top_G, D
L313
L314
L315 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L316                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L317     import pandas as pd, numpy as np
L318     sel = list(pick)
L319     if not sel: return sel
L320     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L321     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L322     sigma = float(agg.std()) if pd.notna(agg.std()) else 0.0
L323     thresh = kth - delta_z * sigma
L324     ranked_all = agg.sort_values(ascending=False)
L325     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L326     for t in cand:
L327         within_score = (pd.notna(agg[t]) and agg[t] >= thresh)
L328         within_rank  = (t in ranked_all.index) and (ranked_all.index.get_loc(t) < n_target + keep_buffer)
L329         if within_score or within_rank:
L330             non_inc = [x for x in sel if x not in incumbents]
L331             if not non_inc: break
L332             weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L333             if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L334                 sel.remove(weakest); sel.append(t)
L335     if len(sel) > n_target:
L336         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L337     return sel
L338
L339
L340 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L341 class Input:
L342     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L343         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L344         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L345
L346     # ---- （Input専用）EPS補完・FCF算出系 ----
L347     @staticmethod
L348     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L349         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L350         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L351         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L352
L353     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L354
L355     @staticmethod
L356     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L357         if df is None or df.empty: return None
L358         idx_lower={str(i).lower():i for i in df.index}
L359         for n in names:
L360             k=n.lower()
L361             if k in idx_lower: return df.loc[idx_lower[k]]
L362         return None
L363
L364     @staticmethod
L365     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L366         if s is None or s.empty: return None
L367         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L368
L369     @staticmethod
L370     def _latest(s: pd.Series|None) -> float|None:
L371         if s is None or s.empty: return None
L372         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L373
L374     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L375         from concurrent.futures import ThreadPoolExecutor, as_completed
L376         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L377
L378         def one(t: str):
L379             try:
L380                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L381                 qcf = tk.quarterly_cashflow
L382                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L383                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L384                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L385                 if any(v is None for v in (cfo, capex, fcf)):
L386                     acf = tk.cashflow
L387                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L388                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L389                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L390             except Exception as e:
L391                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L392             n=np.nan
L393             return {"ticker":t,
L394                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L395                     "capex_ttm_yf": n if capex is None else capex,
L396                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L397
L398         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L399         with ThreadPoolExecutor(max_workers=mw) as ex:
L400             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L401         return pd.DataFrame(rows).set_index("ticker")
L402
L403     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L404     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L405
L406     @staticmethod
L407     def _first_key(d: dict, keys: list[str]):
L408         for k in keys:
L409             if k in d and d[k] is not None: return d[k]
L410         return None
L411
L412     @staticmethod
L413     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L414         for i in range(retries):
L415             r = session.get(url, params=params, timeout=15)
L416             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L417             r.raise_for_status(); return r.json()
L418         r.raise_for_status()
L419
L420     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L421         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L422         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L423         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L424         for sym in tickers:
L425             cfo_ttm = capex_ttm = None
L426             try:
L427                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L428                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L429                 for item in arr[:4]:
L430                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L431                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L432                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L433             except Exception: pass
L434             if cfo_ttm is None or capex_ttm is None:
L435                 try:
L436                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L437                     arr = j.get("cashFlow") or []
L438                     if arr:
L439                         item0 = arr[0]
L440                         if cfo_ttm is None:
L441                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L442                             if v is not None: cfo_ttm = float(v)
L443                         if capex_ttm is None:
L444                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L445                             if v is not None: capex_ttm = float(v)
L446                 except Exception: pass
L447             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L448         return pd.DataFrame(rows).set_index("ticker")
L449
L450     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L451         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L452         T.log("financials (yf) done")
L453         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L454         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L455         if need:
L456             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L457             df = yf_df.join(fh_df, how="left")
L458             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L459                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L460             print("[T] financials (finnhub) done (fallback only)")
L461         else:
L462             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L463             print("[T] financials (finnhub) skipped (no missing)")
L464         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L465         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L466         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L467         fcf_calc = cfo - capex
L468         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L469         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L470         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L471         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L472         df["fcf_imputed"] = df[["
```