```text

L298                 "EPS_Q_LastQ",
L299                 "EPS_A_LATEST",
L300                 "REV_TTM",
L301                 "REV_Q_LastQ",
L302                 "REV_A_LATEST",
L303             ]
L304         )
L305
L306     return pd.DataFrame(rows)
L307
L308 _env_true = lambda name, default=False: (os.getenv(name) or str(default)).strip().lower() == "true"
L309
L310 def _post_slack(payload: dict):
L311     url = os.getenv("SLACK_WEBHOOK_URL")
L312     if not url: print("⚠️ SLACK_WEBHOOK_URL 未設定"); return
L313     try:
L314         requests.post(url, json=payload).raise_for_status()
L315     except Exception as e:
L316         print(f"⚠️ Slack通知エラー: {e}")
L317
L318 def _slack_send_text_chunks(url: str, text: str, chunk: int = 2800) -> None:
L319     """Slackへテキストを分割送信（コードブロック形式）。"""
L320
L321     def _post_text(payload: str) -> None:
L322         try:
L323             resp = requests.post(url, json={"text": payload})
L324             print(f"[DBG] debug_post status={getattr(resp,'status_code',None)} size={len(payload)}")
L325             if resp is not None:
L326                 resp.raise_for_status()
L327         except Exception as e:
L328             print(f"[ERR] debug_post_failed: {e}")
L329
L330     body = (text or "").strip()
L331     if not body:
L332         print("[DBG] skip debug send: empty body")
L333         return
L334
L335     block, block_len = [], 0
L336
L337     def _flush():
L338         nonlocal block, block_len
L339         if block:
L340             _post_text("```" + "\n".join(block) + "```")
L341             block, block_len = [], 0
L342
L343     for raw in body.splitlines():
L344         line = raw or ""
L345         while len(line) > chunk:
L346             head, line = line[:chunk], line[chunk:]
L347             _flush()
L348             _post_text("```" + head + "```")
L349         add_len = len(line) if not block else len(line) + 1
L350         if block and block_len + add_len > chunk:
L351             _flush(); add_len = len(line)
L352         block.append(line)
L353         block_len += add_len
L354     _flush()
L355
L356 def _disjoint_keepG(top_G, top_D, poolD):
L357     """G重複をDから除去し、poolDで順次補充（枯渇時は元銘柄維持）。"""
L358     used, D, i = set(top_G), list(top_D), 0
L359     for j, t in enumerate(D):
L360         if t not in used:
L361             continue
L362         while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L363             i += 1
L364         if i < len(poolD):
L365             D[j] = poolD[i]; used.add(D[j]); i += 1
L366     return top_G, D
L367
L368
L369 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L370                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L371     import pandas as pd, numpy as np
L372     sel = list(pick)
L373     if not sel: return sel
L374     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L375     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L376     std = agg.std()
L377     sigma = float(std) if pd.notna(std) else 0.0
L378     thresh = kth - delta_z * sigma
L379     ranked_all = agg.sort_values(ascending=False)
L380     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L381     for t in cand:
L382         within_score = pd.notna(agg[t]) and agg[t] >= thresh
L383         within_rank = t in ranked_all.index and ranked_all.index.get_loc(t) < n_target + keep_buffer
L384         if not (within_score or within_rank):
L385             continue
L386         non_inc = [x for x in sel if x not in incumbents]
L387         if not non_inc:
L388             break
L389         weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L390         if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L391             sel.remove(weakest); sel.append(t)
L392     if len(sel) > n_target:
L393         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L394     return sel
L395
L396
L397 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L398 class Input:
L399     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L400         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L401         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L402
L403     # ---- （Input専用）EPS補完・FCF算出系 ----
L404     @staticmethod
L405     def _sec_headers():
L406         mail = (os.getenv("SEC_CONTACT_EMAIL") or "yasonba55@gmail.com").strip()
L407         app = (os.getenv("SEC_APP_NAME") or "FactorBot/1.0").strip()
L408         return {"User-Agent": f"{app} ({mail})", "From": mail, "Accept": "application/json"}
L409
L410     @staticmethod
L411     def _sec_get(url: str, retries: int = 3, backoff: float = 0.5):
L412         for i in range(retries):
L413             r = requests.get(url, headers=Input._sec_headers(), timeout=20)
L414             if r.status_code in (429, 503, 403):
L415                 time.sleep(min(2 ** i * backoff, 8.0))
L416                 continue
L417             r.raise_for_status(); return r.json()
L418         r.raise_for_status()
L419
L420     @staticmethod
L421     def _sec_ticker_map():
L422         import requests
L423
L424         url_primary = "https://data.sec.gov/api/xbrl/company_tickers.json"
L425         url_fallback = "https://www.sec.gov/files/company_tickers.json"
L426         mp = {}
L427         try:
L428             j = Input._sec_get(url_primary)  # 既存の堅牢GET（リトライ・バックオフ）
L429         except Exception:
L430             r = requests.get(url_fallback, headers=Input._sec_headers(), timeout=20)
L431             r.raise_for_status()
L432             j = r.json()
L433         # 形状A: {"0": {"ticker":..., "cik_str":...}, ...}
L434         if isinstance(j, dict) and "0" in j:
L435             for _, v in (j or {}).items():
L436                 try:
L437                     mp[str(v["ticker"]).upper()] = f"{int(v['cik_str']):010d}"
L438                 except Exception:
L439                     pass
L440         # 形状B: [{"ticker":..., "cik_str":...}, ...]
L441         elif isinstance(j, list):
L442             for v in j:
L443                 try:
L444                     mp[str(v.get("ticker")).upper()] = f"{int(v.get('cik_str')):010d}"
L445                 except Exception:
L446                     pass
L447         # 形状C: {"data":[[idx,ticker,title,cik_str],...]}
L448         elif isinstance(j, dict) and "data" in j:
L449             for row in j.get("data") or []:
L450                 try:
L451                     t = str(row[1]).upper()
L452                     c = int(row[3])
L453                     mp[t] = f"{c:010d}"
L454                 except Exception:
L455                     pass
L456         return mp
L457
L458     # --- 追加: ADR/OTC向けの簡易正規化（末尾Y/F, ドット等） ---
L459     @staticmethod
L460     def _normalize_ticker(sym: str) -> list[str]:
L461         s = (sym or "").upper().strip()
L462         # 追加: 先頭の$や全角の記号を除去
L463         s = s.lstrip("$").replace("＄", "").replace("．", ".").replace("－", "-")
L464         cand: list[str] = []
L465
L466         def add(x: str) -> None:
L467             if x and x not in cand:
L468                 cand.append(x)
L469
L470         # 1) 原文を最優先（SECは BRK.B, BF.B など . を正式採用）
L471         add(s)
L472         # 2) Yahoo系バリアント（. と - の揺れを相互に）
L473         if "." in s:
L474             add(s.replace(".", "-"))
L475             add(s.replace(".", ""))
L476         if "-" in s:
L477             add(s.replace("-", "."))
L478             add(s.replace("-", ""))
L479         # 3) ドット・ハイフン・ピリオド無し版（最後の保険）
L480         add(s.replace("-", "").replace(".", ""))
L481         # 4) ADR簡易：末尾Y/Fの除去（SECマップは本体ティッカーを持つことがある）
L482         if len(s) >= 2 and s[-1] in {"Y", "F"}:
L483             add(s[:-1])
L484         return cand
L485
L486     @staticmethod
L487     def _sec_companyfacts(cik: str):
L488         return Input._sec_get(f"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik}.json")
L489
L490     @staticmethod
L491     def _units_for_tags(facts: dict, namespaces: list[str], tags: list[str]) -> list[dict]:
L492         """facts から namespace/tag を横断して units 配列を収集（存在順に連結）。"""
L493         out: list[dict] = []
L494         facts = (facts or {}).get("facts", {})
L495         for ns in namespaces:
L496             node = facts.get(ns, {}) if isinstance(facts, dict) else {}
L497             for tg in tags:
L498                 try:
L499                     units = node[tg]["units"]
L500                 except Exception:
L501                     continue
L502                 picks: list[dict] = []
L503                 if "USD/shares" in units:
L504                     picks.extend(list(units["USD/shares"]))
L505                 if "USD" in units:
L506                     picks.extend(list(units["USD"]))
L507                 if not picks:
L508                     for arr in units.values():
L509                         picks.extend(list(arr))
L510                 out.extend(picks)
L511         return out
L512
L513     @staticmethod
L514     def _only_quarterly(arr: list[dict]) -> list[dict]:
L515         """companyfactsの混在配列から『四半期』だけを抽出。
L516
L517         - frame に "Q" を含む（例: CY2024Q2I）
L518         - fp が Q1/Q2/Q3/Q4
L519         - form が 10-Q/10-Q/A/6-K
L520         """
L521         if not arr:
L522             return []
L523         q_forms = {"10-Q", "10-Q/A", "6-K"}
L524         out = [
L525             x
L526             for x in arr
L527             if (
L528                 "Q" in (x.get("frame") or "").upper()
L529                 or (x.get("fp") or "").upper() in {"Q1", "Q2", "Q3", "Q4"}
L530                 or (x.get("form") or "").upper() in q_forms
L531             )
L532         ]
L533         out.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L534         return out
L535
L536     @staticmethod
L537     def _series_from_facts_with_dates(arr, key_val="val", key_dt="end", normalize=float):
L538         """companyfactsアイテム配列から (date,value) を返す。dateはYYYY-MM-DDを想定。"""
L539         out: List[Tuple[str, float]] = []
L540         for x in (arr or []):
L541             try:
L542                 d = x.get(key_dt)
L543                 if d is None:
L544                     continue
L545                 v = x.get(key_val)
L546                 out.append((str(d), normalize(v) if v is not None else float("nan")))
L547             except Exception:
L548                 continue
L549         out.sort(key=lambda t: t[0], reverse=True)
L550         return out
L551
L552     def _series_q_and_a(self, facts: list[dict]) -> tuple[list[Tuple[str, float]], list[Tuple[str, float]]]:
L553         """四半期・年次の両seriesを抽出して返す（formで簡易判定）。"""
L554         if not facts:
L555             return [], []
L556         q_items = self._only_quarterly(list(facts))
L557         annual_forms = {"10-K", "10-K/A", "20-F", "20-F/A"}
L558         a_items = [x for x in facts if str((x or {}).get("form", "")).upper() in annual_forms]
L559         a_items.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L560         return self._series_from_facts_with_dates(q_items), self._series_from_facts_with_dates(a_items)
L561
L562     @staticmethod
L563     def _ttm_from_q_or_a(q_vals: list[float], a_vals: list[float]) -> float:
L564         """四半期TTM（4本合算）を優先し、欠損時は年次値で補完。"""
L565         import math
L566
L567         def _clean(vals: list[float]) -> list[float]:
L568             out: list[float] = []
L569             for v in vals:
L570                 try:
L571                     f = float(v)
L572                 except Exception:
L573                     continue
L574                 if math.isfinite(f):
L575                     out.append(f)
L576                 else:
L577                     out.append(float("nan"))
L578             return out
L579
L580         def _sum4(vs: list[float]) -> float:
L581             filtered = [v for v in vs[:4] if v == v]
L582             if len(filtered) >= 2:
L583                 return float(sum(filtered))
L584             if len(filtered) == 1:
L585                 return float
```