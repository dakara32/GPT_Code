```text
eakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L280             sel.remove(weakest); sel.append(t)
L281     if len(sel) > n_target:
L282         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L283     return sel
L284
L285
L286 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L287 class Input:
L288     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L289         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L290         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L291
L292     # ---- （Input専用）EPS補完・FCF算出系 ----
L293     @staticmethod
L294     def _sec_headers():
L295         mail = (os.getenv("SEC_CONTACT_EMAIL") or os.getenv("SEC_EMAIL") or "").strip()
L296         ua = f"factor-selection/1 (+mailto:{mail})" if mail else "factor-selection/1"
L297         headers = {"User-Agent": ua[:200], "Accept": "application/json"}
L298         if mail:
L299             headers["From"] = mail[:200]
L300         return headers
L301
L302     @staticmethod
L303     def _sec_get(url: str, retries: int = 3, backoff: float = 0.5):
L304         for i in range(retries):
L305             r = requests.get(url, headers=Input._sec_headers(), timeout=20)
L306             if r.status_code in (429, 503, 403):
L307                 time.sleep(min(2 ** i * backoff, 8.0))
L308                 continue
L309             r.raise_for_status(); return r.json()
L310         r.raise_for_status()
L311
L312     @staticmethod
L313     def _sec_ticker_map():
L314         import requests
L315
L316         url_primary = "https://data.sec.gov/api/xbrl/company_tickers.json"
L317         url_fallback = "https://www.sec.gov/files/company_tickers.json"
L318         mp = {}
L319         try:
L320             j = Input._sec_get(url_primary)  # 既存の堅牢GET（リトライ・バックオフ）
L321         except Exception:
L322             r = requests.get(url_fallback, headers=Input._sec_headers(), timeout=20)
L323             r.raise_for_status()
L324             j = r.json()
L325         # 形状A: {"0": {"ticker":..., "cik_str":...}, ...}
L326         if isinstance(j, dict) and "0" in j:
L327             for _, v in (j or {}).items():
L328                 try:
L329                     mp[str(v["ticker"]).upper()] = f"{int(v['cik_str']):010d}"
L330                 except Exception:
L331                     pass
L332         # 形状B: [{"ticker":..., "cik_str":...}, ...]
L333         elif isinstance(j, list):
L334             for v in j:
L335                 try:
L336                     mp[str(v.get("ticker")).upper()] = f"{int(v.get('cik_str')):010d}"
L337                 except Exception:
L338                     pass
L339         # 形状C: {"data":[[idx,ticker,title,cik_str],...]}
L340         elif isinstance(j, dict) and "data" in j:
L341             for row in j.get("data") or []:
L342                 try:
L343                     t = str(row[1]).upper()
L344                     c = int(row[3])
L345                     mp[t] = f"{c:010d}"
L346                 except Exception:
L347                     pass
L348         return mp
L349
L350     # --- 追加: ADR/OTC向けの簡易正規化（末尾Y/F, ドット等） ---
L351     @staticmethod
L352     def _normalize_ticker(sym: str) -> list[str]:
L353         s = (sym or "").upper().strip()
L354         # 追加: 先頭の$や全角の記号を除去
L355         s = s.lstrip("$").replace("＄", "").replace("．", ".").replace("－", "-")
L356         cand: list[str] = []
L357
L358         def add(x: str) -> None:
L359             if x and x not in cand:
L360                 cand.append(x)
L361
L362         # 1) 原文を最優先（SECは BRK.B, BF.B など . を正式採用）
L363         add(s)
L364         # 2) Yahoo系バリアント（. と - の揺れを相互に）
L365         if "." in s:
L366             add(s.replace(".", "-"))
L367             add(s.replace(".", ""))
L368         if "-" in s:
L369             add(s.replace("-", "."))
L370             add(s.replace("-", ""))
L371         # 3) ドット・ハイフン・ピリオド無し版（最後の保険）
L372         add(s.replace("-", "").replace(".", ""))
L373         # 4) ADR簡易：末尾Y/Fの除去（SECマップは本体ティッカーを持つことがある）
L374         if len(s) >= 2 and s[-1] in {"Y", "F"}:
L375             add(s[:-1])
L376         return cand
L377
L378     @staticmethod
L379     def _sec_companyfacts(cik: str):
L380         return Input._sec_get(f"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik}.json")
L381
L382     @staticmethod
L383     def _units_for_tags(facts: dict, namespaces: list[str], tags: list[str]) -> list[dict]:
L384         """facts から namespace/tag を横断して units 配列を収集（存在順に連結）。"""
L385         out: list[dict] = []
L386         facts = (facts or {}).get("facts", {})
L387         for ns in namespaces:
L388             node = facts.get(ns, {}) if isinstance(facts, dict) else {}
L389             for tg in tags:
L390                 try:
L391                     units = node[tg]["units"]
L392                 except Exception:
L393                     continue
L394                 picks: list[dict] = []
L395                 if "USD/shares" in units:
L396                     picks.extend(list(units["USD/shares"]))
L397                 if "USD" in units:
L398                     picks.extend(list(units["USD"]))
L399                 if not picks:
L400                     for arr in units.values():
L401                         picks.extend(list(arr))
L402                 out.extend(picks)
L403         return out
L404
L405     @staticmethod
L406     def _only_quarterly(arr: list[dict]) -> list[dict]:
L407         """companyfactsの混在配列から『四半期』だけを抽出。
L408
L409         - frame に "Q" を含む（例: CY2024Q2I）
L410         - fp が Q1/Q2/Q3/Q4
L411         - form が 10-Q/10-Q/A/6-K
L412         """
L413         if not arr:
L414             return []
L415         q_forms = {"10-Q", "10-Q/A", "6-K"}
L416         out = [
L417             x
L418             for x in arr
L419             if (
L420                 "Q" in (x.get("frame") or "").upper()
L421                 or (x.get("fp") or "").upper() in {"Q1", "Q2", "Q3", "Q4"}
L422                 or (x.get("form") or "").upper() in q_forms
L423             )
L424         ]
L425         out.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L426         return out
L427
L428     @staticmethod
L429     def _series_from_facts_with_dates(arr, key_val="val", key_dt="end", normalize=float):
L430         """companyfactsアイテム配列から (date,value) を返す。dateはYYYY-MM-DDを想定。"""
L431         out: List[Tuple[str, float]] = []
L432         for x in (arr or []):
L433             try:
L434                 d = x.get(key_dt)
L435                 if d is None:
L436                     continue
L437                 v = x.get(key_val)
L438                 out.append((str(d), normalize(v) if v is not None else float("nan")))
L439             except Exception:
L440                 continue
L441         out.sort(key=lambda t: t[0], reverse=True)
L442         return out
L443
L444     def _series_q_and_a(self, facts: list[dict]) -> tuple[list[Tuple[str, float]], list[Tuple[str, float]]]:
L445         """四半期・年次の両seriesを抽出して返す（formで簡易判定）。"""
L446         if not facts:
L447             return [], []
L448         q_items = self._only_quarterly(list(facts))
L449         annual_forms = {"10-K", "10-K/A", "20-F", "20-F/A"}
L450         a_items = [x for x in facts if str((x or {}).get("form", "")).upper() in annual_forms]
L451         a_items.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L452         return self._series_from_facts_with_dates(q_items), self._series_from_facts_with_dates(a_items)
L453
L454     @staticmethod
L455     def _ttm_from_q_or_a(q_vals: list[float], a_vals: list[float]) -> float:
L456         """四半期TTM（4本合算）を優先し、欠損時は年次値で補完。"""
L457         import math
L458
L459         def _clean(vals: list[float]) -> list[float]:
L460             out: list[float] = []
L461             for v in vals:
L462                 try:
L463                     f = float(v)
L464                 except Exception:
L465                     continue
L466                 if math.isfinite(f):
L467                     out.append(f)
L468                 else:
L469                     out.append(float("nan"))
L470             return out
L471
L472         def _sum4(vs: list[float]) -> float:
L473             filtered = [v for v in vs[:4] if v == v]
L474             if len(filtered) >= 2:
L475                 return float(sum(filtered))
L476             if len(filtered) == 1:
L477                 return float(filtered[0])
L478             return float("nan")
L479
L480         q_clean = _clean(q_vals or [])
L481         ttm_q = _sum4(q_clean)
L482         if ttm_q == ttm_q:
L483             return ttm_q
L484         for v in _clean(a_vals or []):
L485             if v == v:
L486                 return float(v)
L487         return float("nan")
L488
L489     def fetch_eps_rev_from_sec(self, tickers: list[str]) -> dict:
L490         out = {}
L491         t2cik = self._sec_ticker_map()
L492         n_map = n_rev = n_eps = 0
L493         miss_map: list[str] = []
L494         miss_facts: list[str] = []
L495         for t in tickers:
L496             base = (t or "").upper()
L497             candidates: list[str] = []
L498             for key in [base, *self._normalize_ticker(t)]:
L499                 if key and key not in candidates:
L500                     candidates.append(key)
L501             cik = next((t2cik.get(key) for key in candidates if t2cik.get(key)), None)
L502             if not cik:
L503                 out[t] = {}
L504                 miss_map.append(t)
L505                 continue
L506             try:
L507                 j = self._sec_companyfacts(cik)
L508                 facts = j or {}
L509                 rev_tags = [
L510                     "Revenues",
L511                     "RevenueFromContractWithCustomerExcludingAssessedTax",
L512                     "SalesRevenueNet",
L513                     "SalesRevenueGoodsNet",
L514                     "SalesRevenueServicesNet",
L515                     "Revenue",
L516                 ]
L517                 eps_tags = [
L518                     "EarningsPerShareDiluted",
L519                     "EarningsPerShareBasicAndDiluted",
L520                     "EarningsPerShare",
L521                     "EarningsPerShareBasic",
L522                 ]
L523                 rev_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], rev_tags)
L524                 eps_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], eps_tags)
L525                 rev_q_pairs, rev_a_pairs = self._series_q_and_a(rev_arr)
L526                 eps_q_pairs, eps_a_pairs = self._series_q_and_a(eps_arr)
L527
L528                 rev_q_pairs = rev_q_pairs[:12]
L529                 eps_q_pairs = eps_q_pairs[:12]
L530                 rev_a_pairs = rev_a_pairs[:6]
L531                 eps_a_pairs = eps_a_pairs[:6]
L532
L533                 def _vals(pairs: list[tuple[str, float]]) -> list[float]:
L534                     vals: list[float] = []
L535                     for _d, v in pairs:
L536                         try:
L537                             vals.append(float(v))
L538                         except Exception:
L539                             vals.append(float("nan"))
L540                     return vals
L541
L542                 rev_q_vals = _vals(rev_q_pairs)
L543                 eps_q_vals = _vals(eps_q_pairs)
L544                 rev_a_vals = _vals(rev_a_pairs)
L545                 eps_a_vals = _vals(eps_a_pairs)
L546
L547                 def _first_valid(vals: list[float]) -> float:
L548                     for v in vals:
L549                         if v == v:
L550                             return float(v)
L551                     return float("nan")
L552
L553                 def _nth_valid(vals: list[float], n: int) -> float:
L554                     idx = 0
L555                     for v in vals:
L556                         if v == v:
L557                             if idx == n:
L558                                 return float(v)
L559                      
```