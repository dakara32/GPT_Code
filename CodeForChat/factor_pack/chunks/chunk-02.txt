```text
{"EMERG":"üö®", "CAUTION":"‚ö†Ô∏è", "NORMAL":"üü¢"}
L280     mode_ja = _MODE_JA.get(mode, mode)
L281     emoji = _MODE_EMOJI.get(mode, "‚ÑπÔ∏è")
L282     eff_days = len(base)
L283     lead_lines = [
L284         f"{emoji} *ÁèæÂú®„É¢„Éº„Éâ: {mode_ja}*",
L285         f"„ÉÜ„É≥„Éó„É¨ÂêàÊ†ºÊú¨Êï∞: *{C_full}Êú¨*",
L286         f"„Åó„Åç„ÅÑÂÄ§Ôºà{th_src}Ôºâ",
L287         f"  „ÉªÁ∑äÊÄ•ÂÖ•„Çä: <{th_in}Êú¨",
L288         f"  „ÉªÁ∑äÊÄ•Ëß£Èô§: ‚â•{th_out}Êú¨",
L289         f"  „ÉªÈÄöÂ∏∏Âæ©Â∏∞: ‚â•{th_norm}Êú¨",
L290         f"ÂèÇËÄÉÊåáÊ®ôÔºàÈÅéÂéª~{win}Âñ∂Ê•≠Êó•, ÊúâÂäπ={eff_days}Êó•Ôºâ",
L291         f"  „Éª‰∏ã‰Ωç5%: {q05}Êú¨",
L292         f"  „Éª‰∏ã‰Ωç20%: {q20}Êú¨",
L293         f"  „Éª60%ÂàÜ‰Ωç: {q60}Êú¨",
L294     ]
L295     return lead_lines, mode
L296
L297
L298 # ===== InputÔºöÂ§ñÈÉ®I/O„Å®ÂâçÂá¶ÁêÜÔºàCSV/API„ÉªÊ¨†ÊêçË£úÂÆåÔºâ =====
L299 class Input:
L300     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L301         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L302         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L303
L304     # ---- ÔºàInputÂ∞ÇÁî®ÔºâEPSË£úÂÆå„ÉªFCFÁÆóÂá∫Á≥ª ----
L305     @staticmethod
L306     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L307         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L308         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L309         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L310
L311     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L312
L313     @staticmethod
L314     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L315         if df is None or df.empty: return None
L316         idx_lower = {str(i).lower(): i for i in df.index}
L317         for name in names:
L318             key = name.lower()
L319             if key in idx_lower: return df.loc[idx_lower[key]]
L320         return None
L321
L322     @staticmethod
L323     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L324         if s is None or s.empty: return None
L325         vals = s.dropna().astype(float); return None if vals.empty else vals.iloc[:n].sum()
L326
L327     @staticmethod
L328     def _latest(s: pd.Series|None) -> float|None:
L329         if s is None or s.empty: return None
L330         vals = s.dropna().astype(float); return vals.iloc[0] if not vals.empty else None
L331
L332     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L333         from concurrent.futures import ThreadPoolExecutor, as_completed
L334         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L335
L336         def one(t: str):
L337             try:
L338                 tk = yf.Ticker(t)  # ‚òÖ „Çª„ÉÉ„Ç∑„Éß„É≥„ÅØÊ∏°„Åï„Å™„ÅÑÔºàYF„Ååcurl_cffi„ÅßÁÆ°ÁêÜÔºâ
L339                 qcf = tk.quarterly_cashflow
L340                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L341                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L342                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L343                 if any(v is None for v in (cfo, capex, fcf)):
L344                     acf = tk.cashflow
L345                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L346                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L347                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L348             except Exception as e:
L349                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L350             n=np.nan
L351             return {"ticker":t,
L352                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L353                     "capex_ttm_yf": n if capex is None else capex,
L354                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L355
L356         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L357         with ThreadPoolExecutor(max_workers=mw) as ex:
L358             for f in as_completed(ex.submit(one,t) for t in tickers): rows.append(f.result())
L359         return pd.DataFrame(rows).set_index("ticker")
L360
L361     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L362     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L363
L364     @staticmethod
L365     def _first_key(d: dict, keys: list[str]):
L366         for k in keys:
L367             if k in d and d[k] is not None: return d[k]
L368         return None
L369
L370     @staticmethod
L371     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L372         for i in range(retries):
L373             r = session.get(url, params=params, timeout=15)
L374             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L375             r.raise_for_status(); return r.json()
L376         r.raise_for_status()
L377
L378     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L379         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L380         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L381         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L382         for sym in tickers:
L383             cfo_ttm = capex_ttm = None
L384             try:
L385                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L386                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L387                 for item in arr[:4]:
L388                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L389                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L390                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L391             except Exception: pass
L392             if cfo_ttm is None or capex_ttm is None:
L393                 try:
L394                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L395                     arr = j.get("cashFlow") or []
L396                     if arr:
L397                         item0 = arr[0]
L398                         if cfo_ttm is None:
L399                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L400                             if v is not None: cfo_ttm = float(v)
L401                         if capex_ttm is None:
L402                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L403                             if v is not None: capex_ttm = float(v)
L404                 except Exception: pass
L405             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L406         return pd.DataFrame(rows).set_index("ticker")
L407
L408     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L409         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L410         T.log("financials (yf) done")
L411         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L412         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L413         if need:
L414             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L415             df = yf_df.join(fh_df, how="left")
L416             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L417                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L418             print("[T] financials (finnhub) done (fallback only)")
L419         else:
L420             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L421             print("[T] financials (finnhub) skipped (no missing)")
L422         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L423         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L424         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L425         fcf_calc = cfo - capex
L426         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L427         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L428         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L429         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L430         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L431         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L432         return df[cols].sort_index()
L433
L434     def _build_eps_df(self, tickers, tickers_bulk, info):
L435         eps_rows=[]
L436         for t in tickers:
L437             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L438             try:
L439                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L440                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L441                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L442                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L443                     eps_q = qearn["Earnings"].iloc[-1]/so
L444             except Exception: pass
L445             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L446         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L447
L448     def prepare_data(self):
L449         """Fetch price and fundamental data for all tickers."""
L450         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L451         for t in self.cand:
L452             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L453             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L454         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L455         T.log("price cap filter done (CAND_PRICE_MAX)")
L456         tickers = sorted(set(self.exist + cand_f))
L457         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L458         data = yf.download(tickers + [self.bench], period="600d", auto_adjust=True, progress=False)
L459         T.log("yf.download done")
L460         px, spx = data["Close"], data["Close"][self.bench]
L461         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0„Å™„ÇâÁÑ°ÂäπÔºàÊó¢ÂÆöÔºâ
L462         if clip_days > 0:
L463             px  = px.tail(clip_days + 1)
L464             spx = spx.tail(clip_days + 1)
L465             print(f"[T] price window clipped by env: {len(px)} rows (PRICE_CLIP_DAYS={clip_days})")
L466         else:
L467             print(f"[T] price window clip skipped; rows={len(px)}")
L468         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L469         for t in tickers:
L470             try: info[t] = tickers_bulk.tickers[t].info
L471             except Exception as e: print(f"{t}: info fetch failed ({e})"); info[t] = {}
L47
```