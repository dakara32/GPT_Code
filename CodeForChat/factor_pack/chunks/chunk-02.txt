```text
r c in df_focus.columns if c not in cols]
L272         cols = cols + [c for c in ("GSC", "DSC") if c not in cols]
L273         cols += [c for c in extra if c not in cols]
L274     else:
L275         cols = [c for c in df_focus.columns if c not in ("GSC", "DSC")]
L276         cols += [c for c in ("GSC", "DSC") if c not in cols]
L277
L278     body = df_focus.reindex(columns=cols).round(3).to_string(max_rows=None, max_cols=None, na_rep="nan") if focus else "(no rows)"
L279
L280     def _fmt_near(lbl, ser, lst):
L281         if ser is None:
L282             return f"{lbl}: off"
L283         get = ser.get
L284         parts = []
L285         for t in lst:
L286             val = get(t, np.nan)
L287             parts.append(f"{t}:{val:.3f}" if pd.notna(val) else f"{t}:nan")
L288         return f"{lbl}: " + (", ".join(parts) if parts else "-")
L289
L290     head = [
L291         f"G new/out: {len(g_new)}/{len(g_out)}  D new/out: {len(d_new)}/{len(d_out)}",
L292         _fmt_near("G near10", g_sorted, g_miss),
L293         _fmt_near("D near10", d_sorted, d_miss),
L294         f"Filters: G pre_mask=['trend_template'], D pre_filter={{'beta_max': {D_BETA_MAX}}}",
L295         f"Cols={'ALL' if all_cols else 'MIN'}  Rows={'ALL' if all_rows else 'SELECTED+CURRENT+NEAR'}",
L296     ]
L297
L298     miss_txt = ""
L299     if _env_true("DEBUG_MISSING_LOGS", False):
L300         miss = getattr(fb, "missing_logs", None)
L301         if miss is not None and not miss.empty:
L302             miss_txt = "\nMissing data (head)\n" + miss.head(10).to_string(index=False)
L303
L304     lines = head + ["", "Changed/Selected (+ Near Miss + Current)", "GRW深掘り表", body]
L305     return "\n".join(lines) + miss_txt
L306
L307 def _disjoint_keepG(top_G, top_D, poolD):
L308     """G重複をDから除去し、poolDで順次補充（枯渇時は元銘柄維持）。"""
L309     used, D, i = set(top_G), list(top_D), 0
L310     for j, t in enumerate(D):
L311         if t in used:
L312             while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L313                 i += 1
L314             if i < len(poolD):
L315                 D[j] = poolD[i]; used.add(D[j]); i += 1
L316     return top_G, D
L317
L318
L319 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L320                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L321     import pandas as pd, numpy as np
L322     sel = list(pick)
L323     if not sel: return sel
L324     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L325     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L326     sigma = float(agg.std()) if pd.notna(agg.std()) else 0.0
L327     thresh = kth - delta_z * sigma
L328     ranked_all = agg.sort_values(ascending=False)
L329     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L330     for t in cand:
L331         within_score = (pd.notna(agg[t]) and agg[t] >= thresh)
L332         within_rank  = (t in ranked_all.index) and (ranked_all.index.get_loc(t) < n_target + keep_buffer)
L333         if within_score or within_rank:
L334             non_inc = [x for x in sel if x not in incumbents]
L335             if not non_inc: break
L336             weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L337             if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L338                 sel.remove(weakest); sel.append(t)
L339     if len(sel) > n_target:
L340         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L341     return sel
L342
L343
L344 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L345 class Input:
L346     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L347         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L348         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L349
L350     # ---- （Input専用）EPS補完・FCF算出系 ----
L351     @staticmethod
L352     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L353         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L354         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L355         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L356
L357     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L358
L359     @staticmethod
L360     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L361         if df is None or df.empty: return None
L362         idx_lower={str(i).lower():i for i in df.index}
L363         for n in names:
L364             k=n.lower()
L365             if k in idx_lower: return df.loc[idx_lower[k]]
L366         return None
L367
L368     @staticmethod
L369     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L370         if s is None or s.empty: return None
L371         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L372
L373     @staticmethod
L374     def _latest(s: pd.Series|None) -> float|None:
L375         if s is None or s.empty: return None
L376         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L377
L378     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L379         from concurrent.futures import ThreadPoolExecutor, as_completed
L380         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L381
L382         def one(t: str):
L383             try:
L384                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L385                 qcf = tk.quarterly_cashflow
L386                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L387                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L388                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L389                 if any(v is None for v in (cfo, capex, fcf)):
L390                     acf = tk.cashflow
L391                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L392                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L393                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L394             except Exception as e:
L395                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L396             n=np.nan
L397             return {"ticker":t,
L398                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L399                     "capex_ttm_yf": n if capex is None else capex,
L400                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L401
L402         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L403         with ThreadPoolExecutor(max_workers=mw) as ex:
L404             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L405         return pd.DataFrame(rows).set_index("ticker")
L406
L407     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L408     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L409
L410     @staticmethod
L411     def _first_key(d: dict, keys: list[str]):
L412         for k in keys:
L413             if k in d and d[k] is not None: return d[k]
L414         return None
L415
L416     @staticmethod
L417     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L418         for i in range(retries):
L419             r = session.get(url, params=params, timeout=15)
L420             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L421             r.raise_for_status(); return r.json()
L422         r.raise_for_status()
L423
L424     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L425         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L426         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L427         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L428         for sym in tickers:
L429             cfo_ttm = capex_ttm = None
L430             try:
L431                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L432                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L433                 for item in arr[:4]:
L434                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L435                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L436                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L437             except Exception: pass
L438             if cfo_ttm is None or capex_ttm is None:
L439                 try:
L440                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L441                     arr = j.get("cashFlow") or []
L442                     if arr:
L443                         item0 = arr[0]
L444                         if cfo_ttm is None:
L445                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L446                             if v is not None: cfo_ttm = float(v)
L447                         if capex_ttm is None:
L448                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L449                             if v is not None: capex_ttm = float(v)
L450                 except Exception: pass
L451             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L452         return pd.DataFrame(rows).set_index("ticker")
L453
L454     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L455         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L456         T.log("financials (yf) done")
L457         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L458         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L459         if need:
L460             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L461             df = yf_df.join(fh_df, how="left")
L462             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L463                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L464             print("[T] financials (finnhub) done (fallback only)")
L465         else:
L466             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L467             print("[T] financials (finnhub) skipped (no missing)")
L468         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L469         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L470         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L471         fcf_calc = cfo - capex
L472         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L473         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L474         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L475         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np
```