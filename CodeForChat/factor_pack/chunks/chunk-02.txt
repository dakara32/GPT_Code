```text
4     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L255         for i in range(retries):
L256             r = session.get(url, params=params, timeout=15)
L257             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L258             r.raise_for_status(); return r.json()
L259         r.raise_for_status()
L260
L261     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L262         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L263         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L264         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L265         for sym in tickers:
L266             cfo_ttm = capex_ttm = None
L267             try:
L268                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L269                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L270                 for item in arr[:4]:
L271                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L272                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L273                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L274             except Exception: pass
L275             if cfo_ttm is None or capex_ttm is None:
L276                 try:
L277                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L278                     arr = j.get("cashFlow") or []
L279                     if arr:
L280                         item0 = arr[0]
L281                         if cfo_ttm is None:
L282                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L283                             if v is not None: cfo_ttm = float(v)
L284                         if capex_ttm is None:
L285                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L286                             if v is not None: capex_ttm = float(v)
L287                 except Exception: pass
L288             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L289         return pd.DataFrame(rows).set_index("ticker")
L290
L291     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L292         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L293         T.log("financials (yf) done")
L294         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L295         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L296         if need:
L297             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L298             df = yf_df.join(fh_df, how="left")
L299             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L300                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L301             print("[T] financials (finnhub) done (fallback only)")
L302         else:
L303             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L304             print("[T] financials (finnhub) skipped (no missing)")
L305         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L306         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L307         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L308         fcf_calc = cfo - capex
L309         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L310         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L311         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L312         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L313         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L314         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L315         return df[cols].sort_index()
L316
L317     def _build_eps_df(self, tickers, tickers_bulk, info):
L318         eps_rows=[]
L319         for t in tickers:
L320             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L321             try:
L322                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L323                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L324                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L325                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L326                     eps_q = qearn["Earnings"].iloc[-1]/so
L327             except Exception: pass
L328             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L329         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L330
L331     def prepare_data(self):
L332         """Fetch price and fundamental data for all tickers."""
L333         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L334         for t in self.cand:
L335             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L336             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L337         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L338         T.log("price cap filter done (CAND_PRICE_MAX)")
L339         tickers = sorted(set(self.exist + cand_f))
L340         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L341         data = yf.download(tickers + [self.bench], period="600d", auto_adjust=True, progress=False)
L342         T.log("yf.download done")
L343         px, spx = data["Close"], data["Close"][self.bench]
L344         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L345         if clip_days > 0:
L346             px  = px.tail(clip_days + 1)
L347             spx = spx.tail(clip_days + 1)
L348             print(f"[T] price window clipped by env: {len(px)} rows (PRICE_CLIP_DAYS={clip_days})")
L349         else:
L350             print(f"[T] price window clip skipped; rows={len(px)}")
L351         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L352         for t in tickers:
L353             try: info[t] = tickers_bulk.tickers[t].info
L354             except Exception as e: print(f"{t}: info fetch failed ({e})"); info[t] = {}
L355         eps_df = self._build_eps_df(tickers, tickers_bulk, info)
L356         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L357         T.log("eps/fcf prep done")
L358         returns = px[tickers].pct_change()
L359         T.log("price prep/returns done")
L360         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L361
L362 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L363 class Selector:
L364     # ---- DRRS helpers（Selector専用） ----
L365     @staticmethod
L366     def _z_np(X: np.ndarray) -> np.ndarray:
L367         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L368         return (np.nan_to_num(X)-m)/s
L369
L370     @classmethod
L371     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L372         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L373         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L374         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L375         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L376         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L377
L378     @classmethod
L379     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L380         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L381         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L382         if k==0: return []
L383         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L384         for _ in range(k):
L385             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L386             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L387             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L388         return sorted(S)
L389
L390     @staticmethod
L391     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L392         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L393         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L394
L395     @classmethod
L396     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L397         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L398         while improved and passes<max_pass:
L399             improved, passes = False, passes+1
L400             for i,out in enumerate(list(S)):
L401                 for inn in range(len(score)):
L402                     if inn in S: continue
L403                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L404                     if v>best+1e-10: S, best, improved = cand, v, True; break
L405                 if improved: break
L406         return S, best
L407
L408     @staticmethod
L409     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L410         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L411         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L412         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L413         return float(s[idx].sum() - lam*within - mu*cross)
L414
L415     @classmethod
L416     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L417         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L418         while improved and passes<max_pass:
L419             improved, passes = False, passes+1
L420             for i,out in enumerate(list(S)):
L421                 for inn in range(N):
L422                     if inn in S: continue
L423                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L424                     if v>best+1e-10: S, best, improved = cand, v, True; break
L425                 if improved: break
L426         return S, best
L427
L428     @staticmethod
L429     def avg_corr(C: np.ndarray, idx) -> float:
L430         k = len(idx); P = C[np.ix_(idx, idx)]
L431         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L432
L433     @classmethod
L434     def select_buc
```