```text
F算出系 ----
L252     @staticmethod
L253     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L254         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L255         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L256         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L257
L258     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L259
L260     @staticmethod
L261     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L262         if df is None or df.empty: return None
L263         idx_lower={str(i).lower():i for i in df.index}
L264         for n in names:
L265             k=n.lower()
L266             if k in idx_lower: return df.loc[idx_lower[k]]
L267         return None
L268
L269     @staticmethod
L270     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L271         if s is None or s.empty: return None
L272         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L273
L274     @staticmethod
L275     def _latest(s: pd.Series|None) -> float|None:
L276         if s is None or s.empty: return None
L277         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L278
L279     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L280         from concurrent.futures import ThreadPoolExecutor, as_completed
L281         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L282
L283         def one(t: str):
L284             try:
L285                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L286                 qcf = tk.quarterly_cashflow
L287                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L288                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L289                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L290                 if any(v is None for v in (cfo, capex, fcf)):
L291                     acf = tk.cashflow
L292                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L293                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L294                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L295             except Exception as e:
L296                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L297             n=np.nan
L298             return {"ticker":t,
L299                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L300                     "capex_ttm_yf": n if capex is None else capex,
L301                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L302
L303         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L304         with ThreadPoolExecutor(max_workers=mw) as ex:
L305             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L306         return pd.DataFrame(rows).set_index("ticker")
L307
L308     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L309     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L310
L311     @staticmethod
L312     def _first_key(d: dict, keys: list[str]):
L313         for k in keys:
L314             if k in d and d[k] is not None: return d[k]
L315         return None
L316
L317     @staticmethod
L318     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L319         for i in range(retries):
L320             r = session.get(url, params=params, timeout=15)
L321             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L322             r.raise_for_status(); return r.json()
L323         r.raise_for_status()
L324
L325     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L326         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L327         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L328         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L329         for sym in tickers:
L330             cfo_ttm = capex_ttm = None
L331             try:
L332                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L333                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L334                 for item in arr[:4]:
L335                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L336                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L337                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L338             except Exception: pass
L339             if cfo_ttm is None or capex_ttm is None:
L340                 try:
L341                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L342                     arr = j.get("cashFlow") or []
L343                     if arr:
L344                         item0 = arr[0]
L345                         if cfo_ttm is None:
L346                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L347                             if v is not None: cfo_ttm = float(v)
L348                         if capex_ttm is None:
L349                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L350                             if v is not None: capex_ttm = float(v)
L351                 except Exception: pass
L352             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L353         return pd.DataFrame(rows).set_index("ticker")
L354
L355     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L356         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L357         T.log("financials (yf) done")
L358         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L359         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L360         if need:
L361             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L362             df = yf_df.join(fh_df, how="left")
L363             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L364                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L365             print("[T] financials (finnhub) done (fallback only)")
L366         else:
L367             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L368             print("[T] financials (finnhub) skipped (no missing)")
L369         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L370         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L371         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L372         fcf_calc = cfo - capex
L373         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L374         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L375         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L376         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L377         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L378         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L379         return df[cols].sort_index()
L380
L381     def _build_eps_df(self, tickers, tickers_bulk, info):
L382         eps_rows=[]
L383         for t in tickers:
L384             info_t, eps_ttm, eps_q = info[t], info[t].get("trailingEps", np.nan), np.nan
L385             try:
L386                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L387                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L388                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L389                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L390                     eps_q = qearn["Earnings"].iloc[-1]/so
L391             except Exception: pass
L392             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q})
L393         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L394
L395     def prepare_data(self):
L396         """Fetch price and fundamental data for all tickers."""
L397         cand_info = yf.Tickers(" ".join(self.cand)); cand_prices = {}
L398         for t in self.cand:
L399             try: cand_prices[t] = cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L400             except Exception as e: print(f"{t}: price fetch failed ({e})"); cand_prices[t] = np.inf
L401         cand_f = [t for t,p in cand_prices.items() if p<=self.price_max]
L402         T.log("price cap filter done (CAND_PRICE_MAX)")
L403         tickers = sorted(set(self.exist + cand_f))
L404         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L405         data = yf.download(tickers + [self.bench], period="600d", auto_adjust=True, progress=False)
L406         T.log("yf.download done")
L407         px, spx = data["Close"], data["Close"][self.bench]
L408         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L409         if clip_days > 0:
L410             px  = px.tail(clip_days + 1)
L411             spx = spx.tail(clip_days + 1)
L412             print(f"[T] price window clipped by env: {len(px)} rows (PRICE_CLIP_DAYS={clip_days})")
L413         else:
L414             print(f"[T] price window clip skipped; rows={len(px)}")
L415         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L416         for t in tickers:
L417             try: info[t] = tickers_bulk.tickers[t].info
L418             except Exception as e: print(f"{t}: info fetch failed ({e})"); info[t] = {}
L419         eps_df = self._build_eps_df(tickers, tickers_bulk, info)
L420         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L421         T.log("eps/fcf prep done")
L422         returns = px[tickers].pct_change()
L423         T.log("price prep/returns done")
L424         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L425
L426 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L427 class Selector:
L428     # ---- DRRS helpers（Selector専用） ----
L429     @staticmethod
L430     def _z_np(X: np.ndarray) -> np.ndarray:
L431         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L432         return (np.nan_to_num(X)-m)/s
L433
L434     @classmethod
L435     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L436         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False);
```