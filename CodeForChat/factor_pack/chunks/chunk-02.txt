```text
EV_Q_LastQ",
L296                 "REV_A_LATEST",
L297             ]
L298         )
L299
L300     return pd.DataFrame(rows)
L301
L302 _env_true = lambda name, default=False: (os.getenv(name) or str(default)).strip().lower() == "true"
L303
L304 def _post_slack(payload: dict):
L305     url = os.getenv("SLACK_WEBHOOK_URL")
L306     if not url: print("⚠️ SLACK_WEBHOOK_URL 未設定"); return
L307     try:
L308         requests.post(url, json=payload).raise_for_status()
L309     except Exception as e:
L310         print(f"⚠️ Slack通知エラー: {e}")
L311
L312 def _slack_send_text_chunks(url: str, text: str, chunk: int = 2800) -> None:
L313     """Slackへテキストを分割送信（コードブロック形式）。"""
L314
L315     def _post_text(payload: str) -> None:
L316         try:
L317             resp = requests.post(url, json={"text": payload})
L318             print(f"[DBG] debug_post status={getattr(resp,'status_code',None)} size={len(payload)}")
L319             if resp is not None:
L320                 resp.raise_for_status()
L321         except Exception as e:
L322             print(f"[ERR] debug_post_failed: {e}")
L323
L324     body = (text or "").strip()
L325     if not body:
L326         print("[DBG] skip debug send: empty body")
L327         return
L328
L329     block, block_len = [], 0
L330
L331     def _flush():
L332         nonlocal block, block_len
L333         if block:
L334             _post_text("```" + "\n".join(block) + "```")
L335             block, block_len = [], 0
L336
L337     for raw in body.splitlines():
L338         line = raw or ""
L339         while len(line) > chunk:
L340             head, line = line[:chunk], line[chunk:]
L341             _flush()
L342             _post_text("```" + head + "```")
L343         add_len = len(line) if not block else len(line) + 1
L344         if block and block_len + add_len > chunk:
L345             _flush(); add_len = len(line)
L346         block.append(line)
L347         block_len += add_len
L348     _flush()
L349
L350 def _disjoint_keepG(top_G, top_D, poolD):
L351     """G重複をDから除去し、poolDで順次補充（枯渇時は元銘柄維持）。"""
L352     used, D, i = set(top_G), list(top_D), 0
L353     for j, t in enumerate(D):
L354         if t not in used:
L355             continue
L356         while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L357             i += 1
L358         if i < len(poolD):
L359             D[j] = poolD[i]; used.add(D[j]); i += 1
L360     return top_G, D
L361
L362
L363 def _sticky_keep_current(agg: pd.Series, pick: list[str], incumbents: list[str],
L364                          n_target: int, delta_z: float, keep_buffer: int) -> list[str]:
L365     import pandas as pd, numpy as np
L366     sel = list(pick)
L367     if not sel: return sel
L368     ranked_sel = agg.reindex(sel).sort_values(ascending=False)
L369     kth = ranked_sel.iloc[min(len(sel), n_target)-1]
L370     std = agg.std()
L371     sigma = float(std) if pd.notna(std) else 0.0
L372     thresh = kth - delta_z * sigma
L373     ranked_all = agg.sort_values(ascending=False)
L374     cand = [t for t in incumbents if (t not in sel) and (t in agg.index)]
L375     for t in cand:
L376         within_score = pd.notna(agg[t]) and agg[t] >= thresh
L377         within_rank = t in ranked_all.index and ranked_all.index.get_loc(t) < n_target + keep_buffer
L378         if not (within_score or within_rank):
L379             continue
L380         non_inc = [x for x in sel if x not in incumbents]
L381         if not non_inc:
L382             break
L383         weakest = min(non_inc, key=lambda x: agg.get(x, -np.inf))
L384         if weakest in sel and agg.get(t, -np.inf) >= agg.get(weakest, -np.inf):
L385             sel.remove(weakest); sel.append(t)
L386     if len(sel) > n_target:
L387         sel = sorted(sel, key=lambda x: agg.get(x, -1e9), reverse=True)[:n_target]
L388     return sel
L389
L390
L391 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L392 class Input:
L393     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L394         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L395         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L396
L397     # ---- （Input専用）EPS補完・FCF算出系 ----
L398     @staticmethod
L399     def _sec_headers():
L400         mail = (os.getenv("SEC_CONTACT_EMAIL") or "yasonba55@gmail.com").strip()
L401         app = (os.getenv("SEC_APP_NAME") or "FactorBot/1.0").strip()
L402         return {"User-Agent": f"{app} ({mail})", "From": mail, "Accept": "application/json"}
L403
L404     @staticmethod
L405     def _sec_get(url: str, retries: int = 3, backoff: float = 0.5):
L406         for i in range(retries):
L407             r = requests.get(url, headers=Input._sec_headers(), timeout=20)
L408             if r.status_code in (429, 503, 403):
L409                 time.sleep(min(2 ** i * backoff, 8.0))
L410                 continue
L411             r.raise_for_status(); return r.json()
L412         r.raise_for_status()
L413
L414     @staticmethod
L415     def _sec_ticker_map():
L416         import requests
L417
L418         url_primary = "https://data.sec.gov/api/xbrl/company_tickers.json"
L419         url_fallback = "https://www.sec.gov/files/company_tickers.json"
L420         mp = {}
L421         try:
L422             j = Input._sec_get(url_primary)  # 既存の堅牢GET（リトライ・バックオフ）
L423         except Exception:
L424             r = requests.get(url_fallback, headers=Input._sec_headers(), timeout=20)
L425             r.raise_for_status()
L426             j = r.json()
L427         # 形状A: {"0": {"ticker":..., "cik_str":...}, ...}
L428         if isinstance(j, dict) and "0" in j:
L429             for _, v in (j or {}).items():
L430                 try:
L431                     mp[str(v["ticker"]).upper()] = f"{int(v['cik_str']):010d}"
L432                 except Exception:
L433                     pass
L434         # 形状B: [{"ticker":..., "cik_str":...}, ...]
L435         elif isinstance(j, list):
L436             for v in j:
L437                 try:
L438                     mp[str(v.get("ticker")).upper()] = f"{int(v.get('cik_str')):010d}"
L439                 except Exception:
L440                     pass
L441         # 形状C: {"data":[[idx,ticker,title,cik_str],...]}
L442         elif isinstance(j, dict) and "data" in j:
L443             for row in j.get("data") or []:
L444                 try:
L445                     t = str(row[1]).upper()
L446                     c = int(row[3])
L447                     mp[t] = f"{c:010d}"
L448                 except Exception:
L449                     pass
L450         return mp
L451
L452     # --- 追加: ADR/OTC向けの簡易正規化（末尾Y/F, ドット等） ---
L453     @staticmethod
L454     def _normalize_ticker(sym: str) -> list[str]:
L455         s = (sym or "").upper().strip()
L456         # 追加: 先頭の$や全角の記号を除去
L457         s = s.lstrip("$").replace("＄", "").replace("．", ".").replace("－", "-")
L458         cand: list[str] = []
L459
L460         def add(x: str) -> None:
L461             if x and x not in cand:
L462                 cand.append(x)
L463
L464         # 1) 原文を最優先（SECは BRK.B, BF.B など . を正式採用）
L465         add(s)
L466         # 2) Yahoo系バリアント（. と - の揺れを相互に）
L467         if "." in s:
L468             add(s.replace(".", "-"))
L469             add(s.replace(".", ""))
L470         if "-" in s:
L471             add(s.replace("-", "."))
L472             add(s.replace("-", ""))
L473         # 3) ドット・ハイフン・ピリオド無し版（最後の保険）
L474         add(s.replace("-", "").replace(".", ""))
L475         # 4) ADR簡易：末尾Y/Fの除去（SECマップは本体ティッカーを持つことがある）
L476         if len(s) >= 2 and s[-1] in {"Y", "F"}:
L477             add(s[:-1])
L478         return cand
L479
L480     @staticmethod
L481     def _sec_companyfacts(cik: str):
L482         return Input._sec_get(f"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik}.json")
L483
L484     @staticmethod
L485     def _units_for_tags(facts: dict, namespaces: list[str], tags: list[str]) -> list[dict]:
L486         """facts から namespace/tag を横断して units 配列を収集（存在順に連結）。"""
L487         out: list[dict] = []
L488         facts = (facts or {}).get("facts", {})
L489         for ns in namespaces:
L490             node = facts.get(ns, {}) if isinstance(facts, dict) else {}
L491             for tg in tags:
L492                 try:
L493                     units = node[tg]["units"]
L494                 except Exception:
L495                     continue
L496                 picks: list[dict] = []
L497                 if "USD/shares" in units:
L498                     picks.extend(list(units["USD/shares"]))
L499                 if "USD" in units:
L500                     picks.extend(list(units["USD"]))
L501                 if not picks:
L502                     for arr in units.values():
L503                         picks.extend(list(arr))
L504                 out.extend(picks)
L505         return out
L506
L507     @staticmethod
L508     def _only_quarterly(arr: list[dict]) -> list[dict]:
L509         """companyfactsの混在配列から『四半期』だけを抽出。
L510
L511         - frame に "Q" を含む（例: CY2024Q2I）
L512         - fp が Q1/Q2/Q3/Q4
L513         - form が 10-Q/10-Q/A/6-K
L514         """
L515         if not arr:
L516             return []
L517         q_forms = {"10-Q", "10-Q/A", "6-K"}
L518         out = [
L519             x
L520             for x in arr
L521             if (
L522                 "Q" in (x.get("frame") or "").upper()
L523                 or (x.get("fp") or "").upper() in {"Q1", "Q2", "Q3", "Q4"}
L524                 or (x.get("form") or "").upper() in q_forms
L525             )
L526         ]
L527         out.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L528         return out
L529
L530     @staticmethod
L531     def _series_from_facts_with_dates(arr, key_val="val", key_dt="end", normalize=float):
L532         """companyfactsアイテム配列から (date,value) を返す。dateはYYYY-MM-DDを想定。"""
L533         out: List[Tuple[str, float]] = []
L534         for x in (arr or []):
L535             try:
L536                 d = x.get(key_dt)
L537                 if d is None:
L538                     continue
L539                 v = x.get(key_val)
L540                 out.append((str(d), normalize(v) if v is not None else float("nan")))
L541             except Exception:
L542                 continue
L543         out.sort(key=lambda t: t[0], reverse=True)
L544         return out
L545
L546     def _series_q_and_a(self, facts: list[dict]) -> tuple[list[Tuple[str, float]], list[Tuple[str, float]]]:
L547         """四半期・年次の両seriesを抽出して返す（formで簡易判定）。"""
L548         if not facts:
L549             return [], []
L550         q_items = self._only_quarterly(list(facts))
L551         annual_forms = {"10-K", "10-K/A", "20-F", "20-F/A"}
L552         a_items = [x for x in facts if str((x or {}).get("form", "")).upper() in annual_forms]
L553         a_items.sort(key=lambda x: (x.get("end") or ""), reverse=True)
L554         return self._series_from_facts_with_dates(q_items), self._series_from_facts_with_dates(a_items)
L555
L556     @staticmethod
L557     def _ttm_from_q_or_a(q_vals: list[float], a_vals: list[float]) -> float:
L558         """四半期TTM（4本合算）を優先し、欠損時は年次値で補完。"""
L559         import math
L560
L561         def _clean(vals: list[float]) -> list[float]:
L562             out: list[float] = []
L563             for v in vals:
L564                 try:
L565                     f = float(v)
L566                 except Exception:
L567                     continue
L568                 if math.isfinite(f):
L569                     out.append(f)
L570                 else:
L571                     out.append(float("nan"))
L572             return out
L573
L574         def _sum4(vs: list[float]) -> float:
L575             filtered = [v for v in vs[:4] if v == v]
L576             if len(filtered) >= 2:
L577                 return float(sum(filtered))
L578             if len(filtered) == 1:
L579                 return float(filtered[0])
L580             return float("nan")
L581
L582         q_clean = _clean(q_vals or [])
L583         ttm_q = _sum4(q_
```