```text
 iu[0].size else 0.0
L432         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L433         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L434
L435     @classmethod
L436     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L437         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L438         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L439         if k==0: return []
L440         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L441         for _ in range(k):
L442             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L443             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L444             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L445         return sorted(S)
L446
L447     @staticmethod
L448     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L449         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L450         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L451
L452     @classmethod
L453     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L454         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L455         while improved and passes<max_pass:
L456             improved, passes = False, passes+1
L457             for i,out in enumerate(list(S)):
L458                 for inn in range(len(score)):
L459                     if inn in S: continue
L460                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L461                     if v>best+1e-10: S, best, improved = cand, v, True; break
L462                 if improved: break
L463         return S, best
L464
L465     @staticmethod
L466     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L467         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L468         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L469         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L470         return float(s[idx].sum() - lam*within - mu*cross)
L471
L472     @classmethod
L473     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L474         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L475         while improved and passes<max_pass:
L476             improved, passes = False, passes+1
L477             for i,out in enumerate(list(S)):
L478                 for inn in range(N):
L479                     if inn in S: continue
L480                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L481                     if v>best+1e-10: S, best, improved = cand, v, True; break
L482                 if improved: break
L483         return S, best
L484
L485     @staticmethod
L486     def avg_corr(C: np.ndarray, idx) -> float:
L487         k = len(idx); P = C[np.ix_(idx, idx)]
L488         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L489
L490     @classmethod
L491     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L492         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L493         union = [t for t in pool_tickers if t in returns_df.columns]
L494         for t in g_fixed:
L495             if t not in union: union.append(t)
L496         Rdf_all = returns_df[union]; Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all)>=lookback else Rdf_all; Rdf_all = Rdf_all.dropna()
L497         pool_eff, g_eff = [t for t in pool_tickers if t in Rdf_all.columns], [t for t in g_fixed if t in Rdf_all.columns]
L498         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L499         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L500         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L501         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L502         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L503         if len(g_eff)>0 and mu>0.0:
L504             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L505         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L506         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L507         selected_tickers = [pool_eff[i] for i in S]
L508         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L509
L510     # ---- 選定（スコア Series / returns だけを受ける）----
L511 # === Output：出力整形と送信（表示・Slack） ===
L512 class Output:
L513
L514     def __init__(self, debug=False):
L515         self.debug = debug
L516         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L517         self.g_title = self.d_title = ""
L518         self.g_formatters = self.d_formatters = {}
L519         # 低スコア（GSC+DSC）Top10 表示/送信用
L520         self.low10_table = None
L521
L522     # --- 表示（元 display_results のロジックそのまま） ---
L523     def display_results(self, *, exist, bench, df_z, g_score, d_score_all,
L524                         init_G, init_D, top_G, top_D, **kwargs):
L525         pd.set_option('display.float_format','{:.3f}'.format)
L526         print("📈 ファクター分散最適化の結果")
L527         if self.miss_df is not None and not self.miss_df.empty:
L528             print("Missing Data:")
L529             print(self.miss_df.to_string(index=False))
L530
L531         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L532         try:
L533             sc = getattr(self, "_sc", None)
L534             agg_G = getattr(sc, "_agg_G", None)
L535             agg_D = getattr(sc, "_agg_D", None)
L536         except Exception:
L537             sc = agg_G = agg_D = None
L538         class _SeriesProxy:
L539             __slots__ = ("primary", "fallback")
L540             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L541             def get(self, key, default=None):
L542                 try:
L543                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L544                     if v is not None and not (isinstance(v, float) and v != v):
L545                         return v
L546                 except Exception:
L547                     pass
L548                 try:
L549                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L550                 except Exception:
L551                     return default
L552         g_score = _SeriesProxy(agg_G, g_score)
L553         d_score_all = _SeriesProxy(agg_D, d_score_all)
L554         near_G = getattr(sc, "_near_G", []) if sc else []
L555         near_D = getattr(sc, "_near_D", []) if sc else []
L556
L557         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L558         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L559         self.g_table = pd.concat([df_z.loc[G_UNI,['GRW','MOM','TRD','VOL']], gsc_series], axis=1)
L560         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L561         self.g_formatters = {col:"{:.2f}".format for col in ['GRW','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L562         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L563                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L564         if near_G:
L565             add = [t for t in near_G if t not in set(G_UNI)][:10]
L566             if len(add) < 10:
L567                 try:
L568                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L569                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L570                     used = set(G_UNI + add)
L571                     def _push(lst):
L572                         nonlocal add, used
L573                         for t in lst:
L574                             if len(add) == 10: break
L575                             if t in aggG.index and t not in used:
L576                                 add.append(t); used.add(t)
L577                     _push(out_now)           # ① 今回 OUT を優先
L578                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L579                 except Exception:
L580                     pass
L581             if add:
L582                 near_tbl = pd.concat([df_z.loc[add,['GRW','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L583                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L584         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L585
L586         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L587         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L588         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L589         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L590         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L591         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L592         import scorer
L593         dw_eff = scorer.D_WEIGHTS_EFF
L594         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L595                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L596         if near_D:
L597             add = [t for t in near_D if t not in set(D_UNI)][:10]
L598             if add:
L599                 d_disp2 = pd.DataFrame(index=add)
L600                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L601                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L602                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L603         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L604
L605         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L606         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L607         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L608
L609         self.io_table = pd.DataFrame({
L610             'IN': pd.Series(in_list),
L611             '/ OUT': pd.Series(out_list)
L612         })
L613         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L614         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L615         self.io_table['GSC'] = pd.Series(g_list)
L616         self.io_table['DSC'] = pd.Series(
```