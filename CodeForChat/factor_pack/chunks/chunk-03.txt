```text
clean)
L584         if ttm_q == ttm_q:
L585             return ttm_q
L586         for v in _clean(a_vals or []):
L587             if v == v:
L588                 return float(v)
L589         return float("nan")
L590
L591     def fetch_eps_rev_from_sec(self, tickers: list[str]) -> dict:
L592         out = {}
L593         t2cik = self._sec_ticker_map()
L594         n_map = n_rev = n_eps = 0
L595         miss_map: list[str] = []
L596         miss_facts: list[str] = []
L597         for t in tickers:
L598             base = (t or "").upper()
L599             candidates: list[str] = []
L600             for key in [base, *self._normalize_ticker(t)]:
L601                 if key and key not in candidates:
L602                     candidates.append(key)
L603             cik = next((t2cik.get(key) for key in candidates if t2cik.get(key)), None)
L604             if not cik:
L605                 out[t] = {}
L606                 miss_map.append(t)
L607                 continue
L608             try:
L609                 j = self._sec_companyfacts(cik)
L610                 facts = j or {}
L611                 rev_tags = [
L612                     "Revenues",
L613                     "RevenueFromContractWithCustomerExcludingAssessedTax",
L614                     "SalesRevenueNet",
L615                     "SalesRevenueGoodsNet",
L616                     "SalesRevenueServicesNet",
L617                     "Revenue",
L618                 ]
L619                 eps_tags = [
L620                     "EarningsPerShareDiluted",
L621                     "EarningsPerShareBasicAndDiluted",
L622                     "EarningsPerShare",
L623                     "EarningsPerShareBasic",
L624                 ]
L625                 rev_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], rev_tags)
L626                 eps_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], eps_tags)
L627                 rev_q_pairs, rev_a_pairs = self._series_q_and_a(rev_arr)
L628                 eps_q_pairs, eps_a_pairs = self._series_q_and_a(eps_arr)
L629
L630                 rev_q_pairs = rev_q_pairs[:12]
L631                 eps_q_pairs = eps_q_pairs[:12]
L632                 rev_a_pairs = rev_a_pairs[:6]
L633                 eps_a_pairs = eps_a_pairs[:6]
L634
L635                 def _vals(pairs: list[tuple[str, float]]) -> list[float]:
L636                     vals: list[float] = []
L637                     for _d, v in pairs:
L638                         try:
L639                             vals.append(float(v))
L640                         except Exception:
L641                             vals.append(float("nan"))
L642                     return vals
L643
L644                 rev_q_vals = _vals(rev_q_pairs)
L645                 eps_q_vals = _vals(eps_q_pairs)
L646                 rev_a_vals = _vals(rev_a_pairs)
L647                 eps_a_vals = _vals(eps_a_pairs)
L648
L649                 def _first_valid(vals: list[float]) -> float:
L650                     for v in vals:
L651                         if v == v:
L652                             return float(v)
L653                     return float("nan")
L654
L655                 def _nth_valid(vals: list[float], n: int) -> float:
L656                     idx = 0
L657                     for v in vals:
L658                         if v == v:
L659                             if idx == n:
L660                                 return float(v)
L661                             idx += 1
L662                     return float("nan")
L663
L664                 def _quarter_from_annual(vals: list[float]) -> float:
L665                     v = _first_valid(vals)
L666                     return float(v / 4.0) if v == v else float("nan")
L667
L668                 def _quarter_from_annual_prev(vals: list[float]) -> float:
L669                     v = _nth_valid(vals, 1)
L670                     return float(v / 4.0) if v == v else float("nan")
L671
L672                 rev_lastq = _first_valid(rev_q_vals)
L673                 if rev_lastq != rev_lastq:
L674                     rev_lastq = _quarter_from_annual(rev_a_vals)
L675                 eps_lastq = _first_valid(eps_q_vals)
L676                 if eps_lastq != eps_lastq:
L677                     eps_lastq = _quarter_from_annual(eps_a_vals)
L678
L679                 rev_lastq_prev = _nth_valid(rev_q_vals, 4)
L680                 if rev_lastq_prev != rev_lastq_prev:
L681                     rev_lastq_prev = _quarter_from_annual_prev(rev_a_vals)
L682                 eps_lastq_prev = _nth_valid(eps_q_vals, 4)
L683                 if eps_lastq_prev != eps_lastq_prev:
L684                     eps_lastq_prev = _quarter_from_annual_prev(eps_a_vals)
L685
L686                 rev_ttm = self._ttm_from_q_or_a(rev_q_vals, rev_a_vals)
L687                 eps_ttm = self._ttm_from_q_or_a(eps_q_vals, eps_a_vals)
L688                 rev_ttm_prev = self._ttm_from_q_or_a(rev_q_vals[4:], rev_a_vals[1:])
L689                 eps_ttm_prev = self._ttm_from_q_or_a(eps_q_vals[4:], eps_a_vals[1:])
L690
L691                 rev_annual_latest = _first_valid(rev_a_vals)
L692                 rev_annual_prev = _nth_valid(rev_a_vals, 1)
L693                 eps_annual_latest = _first_valid(eps_a_vals)
L694                 eps_annual_prev = _nth_valid(eps_a_vals, 1)
L695
L696                 def _cagr3(vals: list[float]) -> float:
L697                     vals_valid = [v for v in vals if v == v]
L698                     if len(vals_valid) >= 3:
L699                         latest, base = float(vals_valid[0]), float(vals_valid[2])
L700                         if latest > 0 and base > 0:
L701                             try:
L702                                 return float((latest / base) ** (1 / 2) - 1.0)
L703                             except Exception:
L704                                 return float("nan")
L705                     return float("nan")
L706
L707                 rev_cagr3 = _cagr3(rev_a_vals)
L708                 eps_cagr3 = _cagr3(eps_a_vals)
L709
L710                 out[t] = {
L711                     "eps_q_recent": eps_lastq,
L712                     "eps_ttm": eps_ttm,
L713                     "eps_ttm_prev": eps_ttm_prev,
L714                     "eps_lastq_prev": eps_lastq_prev,
L715                     "rev_q_recent": rev_lastq,
L716                     "rev_ttm": rev_ttm,
L717                     "rev_ttm_prev": rev_ttm_prev,
L718                     "rev_lastq_prev": rev_lastq_prev,
L719                     # 後段でDatetimeIndex化できるよう (date,value) を保持。値だけの互換キーも残す。
L720                     # 3年運用に合わせて四半期は直近12本のみ保持（約3年=12Q）
L721                     "eps_q_series_pairs": eps_q_pairs,
L722                     "rev_q_series_pairs": rev_q_pairs,
L723                     "eps_q_series": eps_q_vals,
L724                     "rev_q_series": rev_q_vals,
L725                     "eps_a_series_pairs": eps_a_pairs,
L726                     "rev_a_series_pairs": rev_a_pairs,
L727                     "eps_a_series": eps_a_vals,
L728                     "rev_a_series": rev_a_vals,
L729                     "eps_annual_latest": eps_annual_latest,
L730                     "eps_annual_prev": eps_annual_prev,
L731                     "rev_annual_latest": rev_annual_latest,
L732                     "rev_annual_prev": rev_annual_prev,
L733                     "eps_cagr3": eps_cagr3,
L734                     "rev_cagr3": rev_cagr3,
L735                 }
L736                 n_map += 1
L737                 if any(v == v for v in rev_q_vals) or any(v == v for v in rev_a_vals):
L738                     n_rev += 1
L739                 if any(v == v for v in eps_q_vals) or any(v == v for v in eps_a_vals):
L740                     n_eps += 1
L741             except Exception:
L742                 out[t] = {}
L743                 miss_facts.append(t)
L744             time.sleep(0.30)
L745         # 取得サマリをログ（Actionsで確認しやすいよう print）
L746         try:
L747             total = len(tickers)
L748             print(f"[SEC] map={n_map}/{total}  rev_q_hit={n_rev}  eps_q_hit={n_eps}")
L749             # デバッグ: 取得本数の分布（先頭のみ）
L750             try:
L751                 lens = [len((out.get(t, {}) or {}).get("rev_q_series", [])) for t in tickers]
L752                 print(f"[SEC] rev_q_series length: min={min(lens) if lens else 0} "
L753                       f"p25={np.percentile(lens,25) if lens else 0} median={np.median(lens) if lens else 0} "
L754                       f"p75={np.percentile(lens,75) if lens else 0} max={max(lens) if lens else 0}")
L755             except Exception:
L756                 pass
L757             if miss_map:
L758                 print(f"[SEC] no CIK map: {len(miss_map)} (サンプル例) {miss_map[:20]}")
L759             if miss_facts:
L760                 print(f"[SEC] CIKあり だが対象factなし: {len(miss_facts)} (サンプル例) {miss_facts[:20]}")
L761         except Exception:
L762             pass
L763         return out
L764
L765     def sec_dryrun_sample(self, tickers: list[str] | None = None) -> None:
L766         if not _env_true("SEC_DRYRUN_SAMPLE", False):
L767             return
L768         sample = tickers or ["BRK.B", "BF.B", "GOOGL", "META", "UBER", "PBR.A", "TSM", "NARI", "EVBN", "SWAV"]
L769         print(f"[SEC-DRYRUN] sample tickers: {sample}")
L770         try:
L771             t2cik = self._sec_ticker_map()
L772             hits = 0
L773             for sym in sample:
L774                 candidates: list[str] = []
L775
L776                 def add(key: str) -> None:
L777                     if key and key not in candidates:
L778                         candidates.append(key)
L779
L780                 add((sym or "").upper())
L781                 for alt in self._normalize_ticker(sym):
L782                     add(alt)
L783                 if any(t2cik.get(key) for key in candidates):
L784                     hits += 1
L785             sec_data = self.fetch_eps_rev_from_sec(sample)
L786             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L787             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L788             total = len(sample)
L789             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L790         except Exception as e:
L791             print(f"[SEC-DRYRUN] error: {e}")
L792     @staticmethod
L793     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L794         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L795         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L796         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L797
L798     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L799
L800     @staticmethod
L801     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L802         if df is None or df.empty: return None
L803         idx_lower={str(i).lower():i for i in df.index}
L804         for n in names:
L805             k=n.lower()
L806             if k in idx_lower: return df.loc[idx_lower[k]]
L807         return None
L808
L809     @staticmethod
L810     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L811         if s is None or s.empty: return None
L812         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L813
L814     @staticmethod
L815     def _latest(s: pd.Series|None) -> float|None:
L816         if s is None or s.empty: return None
L817         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L818
L819     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L820         from concurrent.futures import ThreadPoolExecutor, as_completed
L821         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, 
```