```text
= n:
L559                                 return float(v)
L560                             idx += 1
L561                     return float("nan")
L562
L563                 def _quarter_from_annual(vals: list[float]) -> float:
L564                     v = _first_valid(vals)
L565                     return float(v / 4.0) if v == v else float("nan")
L566
L567                 def _quarter_from_annual_prev(vals: list[float]) -> float:
L568                     v = _nth_valid(vals, 1)
L569                     return float(v / 4.0) if v == v else float("nan")
L570
L571                 rev_lastq = _first_valid(rev_q_vals)
L572                 if rev_lastq != rev_lastq:
L573                     rev_lastq = _quarter_from_annual(rev_a_vals)
L574                 eps_lastq = _first_valid(eps_q_vals)
L575                 if eps_lastq != eps_lastq:
L576                     eps_lastq = _quarter_from_annual(eps_a_vals)
L577
L578                 rev_lastq_prev = _nth_valid(rev_q_vals, 4)
L579                 if rev_lastq_prev != rev_lastq_prev:
L580                     rev_lastq_prev = _quarter_from_annual_prev(rev_a_vals)
L581                 eps_lastq_prev = _nth_valid(eps_q_vals, 4)
L582                 if eps_lastq_prev != eps_lastq_prev:
L583                     eps_lastq_prev = _quarter_from_annual_prev(eps_a_vals)
L584
L585                 rev_ttm = self._ttm_from_q_or_a(rev_q_vals, rev_a_vals)
L586                 eps_ttm = self._ttm_from_q_or_a(eps_q_vals, eps_a_vals)
L587                 rev_ttm_prev = self._ttm_from_q_or_a(rev_q_vals[4:], rev_a_vals[1:])
L588                 eps_ttm_prev = self._ttm_from_q_or_a(eps_q_vals[4:], eps_a_vals[1:])
L589
L590                 rev_annual_latest = _first_valid(rev_a_vals)
L591                 rev_annual_prev = _nth_valid(rev_a_vals, 1)
L592                 eps_annual_latest = _first_valid(eps_a_vals)
L593                 eps_annual_prev = _nth_valid(eps_a_vals, 1)
L594
L595                 def _cagr3(vals: list[float]) -> float:
L596                     vals_valid = [v for v in vals if v == v]
L597                     if len(vals_valid) >= 3:
L598                         latest, base = float(vals_valid[0]), float(vals_valid[2])
L599                         if latest > 0 and base > 0:
L600                             try:
L601                                 return float((latest / base) ** (1 / 2) - 1.0)
L602                             except Exception:
L603                                 return float("nan")
L604                     return float("nan")
L605
L606                 rev_cagr3 = _cagr3(rev_a_vals)
L607                 eps_cagr3 = _cagr3(eps_a_vals)
L608
L609                 out[t] = {
L610                     "eps_q_recent": eps_lastq,
L611                     "eps_ttm": eps_ttm,
L612                     "eps_ttm_prev": eps_ttm_prev,
L613                     "eps_lastq_prev": eps_lastq_prev,
L614                     "rev_q_recent": rev_lastq,
L615                     "rev_ttm": rev_ttm,
L616                     "rev_ttm_prev": rev_ttm_prev,
L617                     "rev_lastq_prev": rev_lastq_prev,
L618                     # 後段でDatetimeIndex化できるよう (date,value) を保持。値だけの互換キーも残す。
L619                     # 3年運用に合わせて四半期は直近12本のみ保持（約3年=12Q）
L620                     "eps_q_series_pairs": eps_q_pairs,
L621                     "rev_q_series_pairs": rev_q_pairs,
L622                     "eps_q_series": eps_q_vals,
L623                     "rev_q_series": rev_q_vals,
L624                     "eps_a_series_pairs": eps_a_pairs,
L625                     "rev_a_series_pairs": rev_a_pairs,
L626                     "eps_a_series": eps_a_vals,
L627                     "rev_a_series": rev_a_vals,
L628                     "eps_annual_latest": eps_annual_latest,
L629                     "eps_annual_prev": eps_annual_prev,
L630                     "rev_annual_latest": rev_annual_latest,
L631                     "rev_annual_prev": rev_annual_prev,
L632                     "eps_cagr3": eps_cagr3,
L633                     "rev_cagr3": rev_cagr3,
L634                 }
L635                 n_map += 1
L636                 if any(v == v for v in rev_q_vals) or any(v == v for v in rev_a_vals):
L637                     n_rev += 1
L638                 if any(v == v for v in eps_q_vals) or any(v == v for v in eps_a_vals):
L639                     n_eps += 1
L640             except Exception:
L641                 out[t] = {}
L642                 miss_facts.append(t)
L643             time.sleep(0.30)
L644         # 取得サマリをログ（Actionsで確認しやすいよう print）
L645         try:
L646             total = len(tickers)
L647             print(f"[SEC] map={n_map}/{total}  rev_q_hit={n_rev}  eps_q_hit={n_eps}")
L648             # デバッグ: 取得本数の分布（先頭のみ）
L649             try:
L650                 lens = [len((out.get(t, {}) or {}).get("rev_q_series", [])) for t in tickers]
L651                 print(f"[SEC] rev_q_series length: min={min(lens) if lens else 0} "
L652                       f"p25={np.percentile(lens,25) if lens else 0} median={np.median(lens) if lens else 0} "
L653                       f"p75={np.percentile(lens,75) if lens else 0} max={max(lens) if lens else 0}")
L654             except Exception:
L655                 pass
L656             if miss_map:
L657                 print(f"[SEC] no CIK map: {len(miss_map)} (サンプル例) {miss_map[:20]}")
L658             if miss_facts:
L659                 print(f"[SEC] CIKあり だが対象factなし: {len(miss_facts)} (サンプル例) {miss_facts[:20]}")
L660         except Exception:
L661             pass
L662         return out
L663
L664     def sec_dryrun_sample(self, tickers: list[str] | None = None) -> None:
L665         if not _env_true("SEC_DRYRUN_SAMPLE", False):
L666             return
L667         sample = tickers or ["BRK.B", "BF.B", "GOOGL", "META", "UBER", "PBR.A", "TSM", "NARI", "EVBN", "SWAV"]
L668         print(f"[SEC-DRYRUN] sample tickers: {sample}")
L669         try:
L670             t2cik = self._sec_ticker_map()
L671             hits = 0
L672             for sym in sample:
L673                 candidates: list[str] = []
L674
L675                 def add(key: str) -> None:
L676                     if key and key not in candidates:
L677                         candidates.append(key)
L678
L679                 add((sym or "").upper())
L680                 for alt in self._normalize_ticker(sym):
L681                     add(alt)
L682                 if any(t2cik.get(key) for key in candidates):
L683                     hits += 1
L684             sec_data = self.fetch_eps_rev_from_sec(sample)
L685             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L686             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L687             total = len(sample)
L688             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L689         except Exception as e:
L690             print(f"[SEC-DRYRUN] error: {e}")
L691     @staticmethod
L692     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L693         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L694         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L695         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L696
L697     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L698
L699     @staticmethod
L700     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L701         if df is None or df.empty: return None
L702         idx_lower={str(i).lower():i for i in df.index}
L703         for n in names:
L704             k=n.lower()
L705             if k in idx_lower: return df.loc[idx_lower[k]]
L706         return None
L707
L708     @staticmethod
L709     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L710         if s is None or s.empty: return None
L711         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L712
L713     @staticmethod
L714     def _latest(s: pd.Series|None) -> float|None:
L715         if s is None or s.empty: return None
L716         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L717
L718     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L719         from concurrent.futures import ThreadPoolExecutor, as_completed
L720         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L721
L722         def one(t: str):
L723             try:
L724                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L725                 qcf = tk.quarterly_cashflow
L726                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L727                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L728                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L729                 if any(v is None for v in (cfo, capex, fcf)):
L730                     acf = tk.cashflow
L731                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L732                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L733                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L734             except Exception as e:
L735                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L736             n=np.nan
L737             return {"ticker":t,
L738                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L739                     "capex_ttm_yf": n if capex is None else capex,
L740                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L741
L742         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L743         with ThreadPoolExecutor(max_workers=mw) as ex:
L744             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L745         return pd.DataFrame(rows).set_index("ticker")
L746
L747     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L748     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L749
L750     @staticmethod
L751     def _first_key(d: dict, keys: list[str]):
L752         for k in keys:
L753             if k in d and d[k] is not None: return d[k]
L754         return None
L755
L756     @staticmethod
L757     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L758         for i in range(retries):
L759             r = session.get(url, params=params, timeout=15)
L760             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L761             r.raise_for_status(); return r.json()
L762         r.raise_for_status()
L763
L764     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L765         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L766         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L767         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L768         for sym in tickers:
L769             cfo_ttm = capex_ttm = None
L770             try:
L771                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L772                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L773                 for item in arr[:4]:
L774                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L775                 if any(v is not None 
```