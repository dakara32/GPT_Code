```text
6                 rev_ttm = self._ttm_from_q_or_a(rev_q_vals, rev_a_vals)
L557                 eps_ttm = self._ttm_from_q_or_a(eps_q_vals, eps_a_vals)
L558                 rev_ttm_prev = self._ttm_from_q_or_a(rev_q_vals[4:], rev_a_vals[1:])
L559                 eps_ttm_prev = self._ttm_from_q_or_a(eps_q_vals[4:], eps_a_vals[1:])
L560
L561                 rev_annual_latest = _first_valid(rev_a_vals)
L562                 rev_annual_prev = _nth_valid(rev_a_vals, 1)
L563                 eps_annual_latest = _first_valid(eps_a_vals)
L564                 eps_annual_prev = _nth_valid(eps_a_vals, 1)
L565
L566                 def _cagr3(vals: list[float]) -> float:
L567                     vals_valid = [v for v in vals if v == v]
L568                     if len(vals_valid) >= 3:
L569                         latest, base = float(vals_valid[0]), float(vals_valid[2])
L570                         if latest > 0 and base > 0:
L571                             try:
L572                                 return float((latest / base) ** (1 / 2) - 1.0)
L573                             except Exception:
L574                                 return float("nan")
L575                     return float("nan")
L576
L577                 rev_cagr3 = _cagr3(rev_a_vals)
L578                 eps_cagr3 = _cagr3(eps_a_vals)
L579
L580                 out[t] = {
L581                     "eps_q_recent": eps_lastq,
L582                     "eps_ttm": eps_ttm,
L583                     "eps_ttm_prev": eps_ttm_prev,
L584                     "eps_lastq_prev": eps_lastq_prev,
L585                     "rev_q_recent": rev_lastq,
L586                     "rev_ttm": rev_ttm,
L587                     "rev_ttm_prev": rev_ttm_prev,
L588                     "rev_lastq_prev": rev_lastq_prev,
L589                     # 後段でDatetimeIndex化できるよう (date,value) を保持。値だけの互換キーも残す。
L590                     # 3年運用に合わせて四半期は直近12本のみ保持（約3年=12Q）
L591                     "eps_q_series_pairs": eps_q_pairs,
L592                     "rev_q_series_pairs": rev_q_pairs,
L593                     "eps_q_series": eps_q_vals,
L594                     "rev_q_series": rev_q_vals,
L595                     "eps_a_series_pairs": eps_a_pairs,
L596                     "rev_a_series_pairs": rev_a_pairs,
L597                     "eps_a_series": eps_a_vals,
L598                     "rev_a_series": rev_a_vals,
L599                     "eps_annual_latest": eps_annual_latest,
L600                     "eps_annual_prev": eps_annual_prev,
L601                     "rev_annual_latest": rev_annual_latest,
L602                     "rev_annual_prev": rev_annual_prev,
L603                     "eps_cagr3": eps_cagr3,
L604                     "rev_cagr3": rev_cagr3,
L605                 }
L606                 n_map += 1
L607                 if any(v == v for v in rev_q_vals) or any(v == v for v in rev_a_vals):
L608                     n_rev += 1
L609                 if any(v == v for v in eps_q_vals) or any(v == v for v in eps_a_vals):
L610                     n_eps += 1
L611             except Exception:
L612                 out[t] = {}
L613                 miss_facts.append(t)
L614             time.sleep(0.30)
L615         # 取得サマリをログ（Actionsで確認しやすいよう print）
L616         try:
L617             total = len(tickers)
L618             print(f"[SEC] map={n_map}/{total}  rev_q_hit={n_rev}  eps_q_hit={n_eps}")
L619             # デバッグ: 取得本数の分布（先頭のみ）
L620             try:
L621                 lens = [len((out.get(t, {}) or {}).get("rev_q_series", [])) for t in tickers]
L622                 print(f"[SEC] rev_q_series length: min={min(lens) if lens else 0} "
L623                       f"p25={np.percentile(lens,25) if lens else 0} median={np.median(lens) if lens else 0} "
L624                       f"p75={np.percentile(lens,75) if lens else 0} max={max(lens) if lens else 0}")
L625             except Exception:
L626                 pass
L627             if miss_map:
L628                 print(f"[SEC] no CIK map: {len(miss_map)} (サンプル例) {miss_map[:20]}")
L629             if miss_facts:
L630                 print(f"[SEC] CIKあり だが対象factなし: {len(miss_facts)} (サンプル例) {miss_facts[:20]}")
L631         except Exception:
L632             pass
L633         return out
L634
L635     def sec_dryrun_sample(self, tickers: list[str] | None = None) -> None:
L636         if not _env_true("SEC_DRYRUN_SAMPLE", False):
L637             return
L638         sample = tickers or ["BRK.B", "BF.B", "GOOGL", "META", "UBER", "PBR.A", "TSM", "NARI", "EVBN", "SWAV"]
L639         print(f"[SEC-DRYRUN] sample tickers: {sample}")
L640         try:
L641             t2cik = self._sec_ticker_map()
L642             hits = 0
L643             for sym in sample:
L644                 candidates: list[str] = []
L645
L646                 def add(key: str) -> None:
L647                     if key and key not in candidates:
L648                         candidates.append(key)
L649
L650                 add((sym or "").upper())
L651                 for alt in self._normalize_ticker(sym):
L652                     add(alt)
L653                 if any(t2cik.get(key) for key in candidates):
L654                     hits += 1
L655             sec_data = self.fetch_eps_rev_from_sec(sample)
L656             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L657             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L658             total = len(sample)
L659             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L660         except Exception as e:
L661             print(f"[SEC-DRYRUN] error: {e}")
L662     @staticmethod
L663     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L664         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L665         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L666         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L667
L668     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L669
L670     @staticmethod
L671     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L672         if df is None or df.empty: return None
L673         idx_lower={str(i).lower():i for i in df.index}
L674         for n in names:
L675             k=n.lower()
L676             if k in idx_lower: return df.loc[idx_lower[k]]
L677         return None
L678
L679     @staticmethod
L680     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L681         if s is None or s.empty: return None
L682         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L683
L684     @staticmethod
L685     def _latest(s: pd.Series|None) -> float|None:
L686         if s is None or s.empty: return None
L687         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L688
L689     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L690         from concurrent.futures import ThreadPoolExecutor, as_completed
L691         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L692
L693         def one(t: str):
L694             try:
L695                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L696                 qcf = tk.quarterly_cashflow
L697                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L698                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L699                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L700                 if any(v is None for v in (cfo, capex, fcf)):
L701                     acf = tk.cashflow
L702                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L703                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L704                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L705             except Exception as e:
L706                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L707             n=np.nan
L708             return {"ticker":t,
L709                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L710                     "capex_ttm_yf": n if capex is None else capex,
L711                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L712
L713         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L714         with ThreadPoolExecutor(max_workers=mw) as ex:
L715             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L716         return pd.DataFrame(rows).set_index("ticker")
L717
L718     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L719     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L720
L721     @staticmethod
L722     def _first_key(d: dict, keys: list[str]):
L723         for k in keys:
L724             if k in d and d[k] is not None: return d[k]
L725         return None
L726
L727     @staticmethod
L728     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L729         for i in range(retries):
L730             r = session.get(url, params=params, timeout=15)
L731             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L732             r.raise_for_status(); return r.json()
L733         r.raise_for_status()
L734
L735     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L736         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L737         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L738         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L739         for sym in tickers:
L740             cfo_ttm = capex_ttm = None
L741             try:
L742                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L743                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L744                 for item in arr[:4]:
L745                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L746                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L747                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L748             except Exception: pass
L749             if cfo_ttm is None or capex_ttm is None:
L750                 try:
L751                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L752                     arr = j.get("cashFlow") or []
L753                     if arr:
L754                         item0 = arr[0]
L755                         if cfo_ttm is None:
L756                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L757                             if v is not None: cfo_ttm = float(v)
L758                         if capex_ttm is None:
L759                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L760                             if v is not None: capex_ttm = float(v)
L761                 except Exception: pass
L762             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L763         return pd.DataFrame(rows).set_index("ticker")
L764
L765     def comput
```