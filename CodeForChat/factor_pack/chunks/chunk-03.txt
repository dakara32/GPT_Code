```text
S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L425         return sorted(S)
L426
L427     @staticmethod
L428     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L429         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L430         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L431
L432     @classmethod
L433     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L434         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L435         while improved and passes<max_pass:
L436             improved, passes = False, passes+1
L437             for i,out in enumerate(list(S)):
L438                 for inn in range(len(score)):
L439                     if inn in S: continue
L440                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L441                     if v>best+1e-10: S, best, improved = cand, v, True; break
L442                 if improved: break
L443         return S, best
L444
L445     @staticmethod
L446     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L447         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L448         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L449         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L450         return float(s[idx].sum() - lam*within - mu*cross)
L451
L452     @classmethod
L453     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L454         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L455         while improved and passes<max_pass:
L456             improved, passes = False, passes+1
L457             for i,out in enumerate(list(S)):
L458                 for inn in range(N):
L459                     if inn in S: continue
L460                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L461                     if v>best+1e-10: S, best, improved = cand, v, True; break
L462                 if improved: break
L463         return S, best
L464
L465     @staticmethod
L466     def avg_corr(C: np.ndarray, idx) -> float:
L467         k = len(idx); P = C[np.ix_(idx, idx)]
L468         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L469
L470     @classmethod
L471     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L472         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L473         union = [t for t in pool_tickers if t in returns_df.columns]
L474         for t in g_fixed:
L475             if t not in union: union.append(t)
L476         Rdf_all = returns_df[union]; Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all)>=lookback else Rdf_all; Rdf_all = Rdf_all.dropna()
L477         pool_eff, g_eff = [t for t in pool_tickers if t in Rdf_all.columns], [t for t in g_fixed if t in Rdf_all.columns]
L478         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L479         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L480         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L481         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L482         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L483         if len(g_eff)>0 and mu>0.0:
L484             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L485         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L486         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L487         selected_tickers = [pool_eff[i] for i in S]
L488         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L489
L490     # ---- 選定（スコア Series / returns だけを受ける）----
L491 # === Output：出力整形と送信（表示・Slack） ===
L492 class Output:
L493
L494     def __init__(self, debug=False):
L495         self.debug = debug
L496         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L497         self.g_title = self.d_title = ""
L498         self.g_formatters = self.d_formatters = {}
L499         # 低スコア（GSC+DSC）Top10 表示/送信用
L500         self.low10_table = None
L501
L502     # --- 表示（元 display_results のロジックそのまま） ---
L503     def display_results(self, *, exist, bench, df_z, g_score, d_score_all,
L504                         init_G, init_D, top_G, top_D, **kwargs):
L505         pd.set_option('display.float_format','{:.3f}'.format)
L506         print("📈 ファクター分散最適化の結果")
L507         if self.miss_df is not None and not self.miss_df.empty:
L508             print("Missing Data:")
L509             print(self.miss_df.to_string(index=False))
L510
L511         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L512         try:
L513             sc = getattr(self, "_sc", None)
L514             agg_G = getattr(sc, "_agg_G", None)
L515             agg_D = getattr(sc, "_agg_D", None)
L516         except Exception:
L517             sc = agg_G = agg_D = None
L518         class _SeriesProxy:
L519             __slots__ = ("primary", "fallback")
L520             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L521             def get(self, key, default=None):
L522                 try:
L523                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L524                     if v is not None and not (isinstance(v, float) and v != v):
L525                         return v
L526                 except Exception:
L527                     pass
L528                 try:
L529                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L530                 except Exception:
L531                     return default
L532         g_score = _SeriesProxy(agg_G, g_score)
L533         d_score_all = _SeriesProxy(agg_D, d_score_all)
L534         near_G = getattr(sc, "_near_G", []) if sc else []
L535         near_D = getattr(sc, "_near_D", []) if sc else []
L536
L537         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L538         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L539         self.g_table = pd.concat([df_z.loc[G_UNI,['GRW','MOM','TRD','VOL']], gsc_series], axis=1)
L540         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L541         self.g_formatters = {col:"{:.2f}".format for col in ['GRW','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L542         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L543                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L544         if near_G:
L545             add = [t for t in near_G if t not in set(G_UNI)][:10]
L546             if len(add) < 10:
L547                 try:
L548                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L549                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L550                     used = set(G_UNI + add)
L551                     def _push(lst):
L552                         nonlocal add, used
L553                         for t in lst:
L554                             if len(add) == 10: break
L555                             if t in aggG.index and t not in used:
L556                                 add.append(t); used.add(t)
L557                     _push(out_now)           # ① 今回 OUT を優先
L558                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L559                 except Exception:
L560                     pass
L561             if add:
L562                 near_tbl = pd.concat([df_z.loc[add,['GRW','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L563                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L564         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L565
L566         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L567         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L568         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L569         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L570         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L571         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L572         import scorer
L573         dw_eff = scorer.D_WEIGHTS_EFF
L574         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L575                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L576         if near_D:
L577             add = [t for t in near_D if t not in set(D_UNI)][:10]
L578             if add:
L579                 d_disp2 = pd.DataFrame(index=add)
L580                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L581                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L582                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L583         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L584
L585         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L586         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L587         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L588
L589         self.io_table = pd.DataFrame({
L590             'IN': pd.Series(in_list),
L591             '/ OUT': pd.Series(out_list)
L592         })
L593         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L594         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L595         self.io_table['GSC'] = pd.Series(g_list)
L596         self.io_table['DSC'] = pd.Series(d_list)
L597
L598         print("Changes:")
L599         print(self.io_table.to_string(index=False))
L600
L601         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False)['Close']
L602         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L603         for name,ticks in portfolios.items():
L604             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L605             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L606             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L607             sharpe, drawdown = ann_ret/ann_vol,
```