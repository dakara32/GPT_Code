```text
=15)
L520             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L521             r.raise_for_status(); return r.json()
L522         r.raise_for_status()
L523
L524     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L525         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L526         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L527         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L528         for sym in tickers:
L529             cfo_ttm = capex_ttm = None
L530             try:
L531                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L532                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L533                 for item in arr[:4]:
L534                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L535                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L536                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L537             except Exception: pass
L538             if cfo_ttm is None or capex_ttm is None:
L539                 try:
L540                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L541                     arr = j.get("cashFlow") or []
L542                     if arr:
L543                         item0 = arr[0]
L544                         if cfo_ttm is None:
L545                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L546                             if v is not None: cfo_ttm = float(v)
L547                         if capex_ttm is None:
L548                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L549                             if v is not None: capex_ttm = float(v)
L550                 except Exception: pass
L551             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L552         return pd.DataFrame(rows).set_index("ticker")
L553
L554     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L555         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L556         T.log("financials (yf) done")
L557         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L558         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L559         if need:
L560             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L561             df = yf_df.join(fh_df, how="left")
L562             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L563                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L564             print("[T] financials (finnhub) done (fallback only)")
L565         else:
L566             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L567             print("[T] financials (finnhub) skipped (no missing)")
L568         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L569         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L570         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L571         fcf_calc = cfo - capex
L572         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L573         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L574         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L575         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L576         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L577         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L578         return df[cols].sort_index()
L579
L580     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L581         eps_rows=[]
L582         for t in tickers:
L583             info_t = info[t]
L584             sec_t = (sec_map or {}).get(t, {})
L585             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L586             eps_q = sec_t.get("eps_q_recent", np.nan)
L587             try:
L588                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L589                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L590                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L591                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L592                     if pd.isna(eps_q):
L593                         eps_q = qearn["Earnings"].iloc[-1]/so
L594             except Exception: pass
L595             rev_ttm = sec_t.get("rev_ttm", np.nan)
L596             rev_q = sec_t.get("rev_q_recent", np.nan)
L597             if (not sec_t) or pd.isna(rev_ttm):
L598                 try:
L599                     tk = tickers_bulk.tickers[t]
L600                     qfin = getattr(tk, "quarterly_financials", None)
L601                     if qfin is not None and not qfin.empty:
L602                         idx_lower = {str(i).lower(): i for i in qfin.index}
L603                         rev_idx = None
L604                         for name in ("Total Revenue", "TotalRevenue"):
L605                             key = name.lower()
L606                             if key in idx_lower:
L607                                 rev_idx = idx_lower[key]
L608                                 break
L609                         if rev_idx is not None:
L610                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L611                             if not rev_series.empty:
L612                                 rev_ttm_yf = float(rev_series.head(4).sum())
L613                                 if pd.isna(rev_ttm):
L614                                     rev_ttm = rev_ttm_yf
L615                                 if pd.isna(rev_q):
L616                                     rev_q = float(rev_series.iloc[0])
L617                 except Exception:
L618                     pass
L619             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q,"rev_ttm":rev_ttm,"rev_q_recent":rev_q})
L620         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L621
L622     def prepare_data(self):
L623         """Fetch price and fundamental data for all tickers."""
L624         self.sec_dryrun_sample()
L625         cand_info = yf.Tickers(" ".join(self.cand))
L626
L627         def _price(t: str) -> float:
L628             try:
L629                 return cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L630             except Exception as e:
L631                 print(f"{t}: price fetch failed ({e})")
L632                 return np.inf
L633
L634         cand_prices = {t: _price(t) for t in self.cand}
L635         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L636         T.log("price cap filter done (CAND_PRICE_MAX)")
L637         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L638         tickers = list(dict.fromkeys(self.exist + cand_f))
L639         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L640         data = yf.download(tickers + [self.bench], period="600d",
L641                            auto_adjust=True, progress=False, threads=False)
L642         T.log("yf.download done")
L643         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L644         spx = data["Close"][self.bench].reindex(px.index).ffill()
L645         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L646         if clip_days > 0:
L647             px, spx = px.tail(clip_days + 1), spx.tail(clip_days + 1)
L648             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)
L649         else:
L650             logger.info("[T] price window clip skipped; rows=%d", len(px))
L651         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L652         for t in tickers:
L653             try:
L654                 info[t] = tickers_bulk.tickers[t].info
L655             except Exception as e:
L656                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L657                 info[t] = {}
L658         try:
L659             sec_map = self.fetch_eps_rev_from_sec(tickers)
L660         except Exception as e:
L661             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L662             sec_map = {}
L663
L664         def _brief_len(s):
L665             try:
L666                 if isinstance(s, pd.Series):
L667                     return int(s.dropna().size)
L668                 if isinstance(s, (list, tuple)):
L669                     return len([v for v in s if pd.notna(v)])
L670                 if isinstance(s, np.ndarray):
L671                     return int(np.count_nonzero(~pd.isna(s)))
L672                 return int(bool(s))
L673             except Exception:
L674                 return 0
L675
L676         def _has_entries(val) -> bool:
L677             try:
L678                 if isinstance(val, pd.Series):
L679                     return not val.dropna().empty
L680                 if isinstance(val, (list, tuple)):
L681                     return any(pd.notna(v) for v in val)
L682                 return bool(val)
L683             except Exception:
L684                 return False
L685
L686         have_rev = 0
L687         have_eps = 0
L688         rev_lens: list[int] = []
L689         eps_lens: list[int] = []
L690         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L691
L692         for t in tickers:
L693             entry = info.get(t, {})
L694             m = (sec_map or {}).get(t) or {}
L695             if entry is None or not isinstance(entry, dict):
L696                 entry = {}
L697                 info[t] = entry
L698
L699             if m:
L700                 pairs_r = m.get("rev_q_series_pairs") or []
L701                 pairs_e = m.get("eps_q_series_pairs") or []
L702                 if pairs_r:
L703                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L704                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L705                     s = pd.Series(val, index=idx).sort_index()
L706                     entry["SEC_REV_Q_SERIES"] = s
L707                 else:
L708                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L709                 if pairs_e:
L710                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L711                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L712                     s = pd.Series(val, index=idx).sort_index()
L713                     entry["SEC_EPS_Q_SERIES"] = s
L714                 else:
L715                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L716
L717             r = entry.get("SEC_REV_Q_SERIES")
L718             e = entry.get("SEC_EPS_Q_SERIES")
L719             if _has_entries(r):
L720                 have_rev += 1
L721             if _has_entries(e):
L722             
```