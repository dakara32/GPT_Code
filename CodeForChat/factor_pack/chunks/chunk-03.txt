```text
L558                             vals.append(float("nan"))
L559                     return vals
L560
L561                 rev_q_vals = _vals(rev_q_pairs)
L562                 eps_q_vals = _vals(eps_q_pairs)
L563                 rev_a_vals = _vals(rev_a_pairs)
L564                 eps_a_vals = _vals(eps_a_pairs)
L565
L566                 def _first_valid(vals: list[float]) -> float:
L567                     for v in vals:
L568                         if v == v:
L569                             return float(v)
L570                     return float("nan")
L571
L572                 def _nth_valid(vals: list[float], n: int) -> float:
L573                     idx = 0
L574                     for v in vals:
L575                         if v == v:
L576                             if idx == n:
L577                                 return float(v)
L578                             idx += 1
L579                     return float("nan")
L580
L581                 def _quarter_from_annual(vals: list[float]) -> float:
L582                     v = _first_valid(vals)
L583                     return float(v / 4.0) if v == v else float("nan")
L584
L585                 def _quarter_from_annual_prev(vals: list[float]) -> float:
L586                     v = _nth_valid(vals, 1)
L587                     return float(v / 4.0) if v == v else float("nan")
L588
L589                 rev_lastq = _first_valid(rev_q_vals)
L590                 if rev_lastq != rev_lastq:
L591                     rev_lastq = _quarter_from_annual(rev_a_vals)
L592                 eps_lastq = _first_valid(eps_q_vals)
L593                 if eps_lastq != eps_lastq:
L594                     eps_lastq = _quarter_from_annual(eps_a_vals)
L595
L596                 rev_lastq_prev = _nth_valid(rev_q_vals, 4)
L597                 if rev_lastq_prev != rev_lastq_prev:
L598                     rev_lastq_prev = _quarter_from_annual_prev(rev_a_vals)
L599                 eps_lastq_prev = _nth_valid(eps_q_vals, 4)
L600                 if eps_lastq_prev != eps_lastq_prev:
L601                     eps_lastq_prev = _quarter_from_annual_prev(eps_a_vals)
L602
L603                 rev_ttm = self._ttm_from_q_or_a(rev_q_vals, rev_a_vals)
L604                 eps_ttm = self._ttm_from_q_or_a(eps_q_vals, eps_a_vals)
L605                 rev_ttm_prev = self._ttm_from_q_or_a(rev_q_vals[4:], rev_a_vals[1:])
L606                 eps_ttm_prev = self._ttm_from_q_or_a(eps_q_vals[4:], eps_a_vals[1:])
L607
L608                 rev_annual_latest = _first_valid(rev_a_vals)
L609                 rev_annual_prev = _nth_valid(rev_a_vals, 1)
L610                 eps_annual_latest = _first_valid(eps_a_vals)
L611                 eps_annual_prev = _nth_valid(eps_a_vals, 1)
L612
L613                 def _cagr3(vals: list[float]) -> float:
L614                     vals_valid = [v for v in vals if v == v]
L615                     if len(vals_valid) >= 3:
L616                         latest, base = float(vals_valid[0]), float(vals_valid[2])
L617                         if latest > 0 and base > 0:
L618                             try:
L619                                 return float((latest / base) ** (1 / 2) - 1.0)
L620                             except Exception:
L621                                 return float("nan")
L622                     return float("nan")
L623
L624                 rev_cagr3 = _cagr3(rev_a_vals)
L625                 eps_cagr3 = _cagr3(eps_a_vals)
L626
L627                 out[t] = {
L628                     "eps_q_recent": eps_lastq,
L629                     "eps_ttm": eps_ttm,
L630                     "eps_ttm_prev": eps_ttm_prev,
L631                     "eps_lastq_prev": eps_lastq_prev,
L632                     "rev_q_recent": rev_lastq,
L633                     "rev_ttm": rev_ttm,
L634                     "rev_ttm_prev": rev_ttm_prev,
L635                     "rev_lastq_prev": rev_lastq_prev,
L636                     # 後段でDatetimeIndex化できるよう (date,value) を保持。値だけの互換キーも残す。
L637                     # 3年運用に合わせて四半期は直近12本のみ保持（約3年=12Q）
L638                     "eps_q_series_pairs": eps_q_pairs,
L639                     "rev_q_series_pairs": rev_q_pairs,
L640                     "eps_q_series": eps_q_vals,
L641                     "rev_q_series": rev_q_vals,
L642                     "eps_a_series_pairs": eps_a_pairs,
L643                     "rev_a_series_pairs": rev_a_pairs,
L644                     "eps_a_series": eps_a_vals,
L645                     "rev_a_series": rev_a_vals,
L646                     "eps_annual_latest": eps_annual_latest,
L647                     "eps_annual_prev": eps_annual_prev,
L648                     "rev_annual_latest": rev_annual_latest,
L649                     "rev_annual_prev": rev_annual_prev,
L650                     "eps_cagr3": eps_cagr3,
L651                     "rev_cagr3": rev_cagr3,
L652                 }
L653                 n_map += 1
L654                 if any(v == v for v in rev_q_vals) or any(v == v for v in rev_a_vals):
L655                     n_rev += 1
L656                 if any(v == v for v in eps_q_vals) or any(v == v for v in eps_a_vals):
L657                     n_eps += 1
L658             except Exception:
L659                 out[t] = {}
L660                 miss_facts.append(t)
L661             time.sleep(0.30)
L662         # 取得サマリをログ（Actionsで確認しやすいよう print）
L663         try:
L664             total = len(tickers)
L665             print(f"[SEC] map={n_map}/{total}  rev_q_hit={n_rev}  eps_q_hit={n_eps}")
L666             # デバッグ: 取得本数の分布（先頭のみ）
L667             try:
L668                 lens = [len((out.get(t, {}) or {}).get("rev_q_series", [])) for t in tickers]
L669                 print(f"[SEC] rev_q_series length: min={min(lens) if lens else 0} "
L670                       f"p25={np.percentile(lens,25) if lens else 0} median={np.median(lens) if lens else 0} "
L671                       f"p75={np.percentile(lens,75) if lens else 0} max={max(lens) if lens else 0}")
L672             except Exception:
L673                 pass
L674             if miss_map:
L675                 print(f"[SEC] no CIK map: {len(miss_map)} (サンプル例) {miss_map[:20]}")
L676             if miss_facts:
L677                 print(f"[SEC] CIKあり だが対象factなし: {len(miss_facts)} (サンプル例) {miss_facts[:20]}")
L678         except Exception:
L679             pass
L680         return out
L681
L682     def sec_dryrun_sample(self, tickers: list[str] | None = None) -> None:
L683         if not _env_true("SEC_DRYRUN_SAMPLE", False):
L684             return
L685         sample = tickers or ["BRK.B", "BF.B", "GOOGL", "META", "UBER", "PBR.A", "TSM", "NARI", "EVBN", "SWAV"]
L686         print(f"[SEC-DRYRUN] sample tickers: {sample}")
L687         try:
L688             t2cik = self._sec_ticker_map()
L689             hits = 0
L690             for sym in sample:
L691                 candidates: list[str] = []
L692
L693                 def add(key: str) -> None:
L694                     if key and key not in candidates:
L695                         candidates.append(key)
L696
L697                 add((sym or "").upper())
L698                 for alt in self._normalize_ticker(sym):
L699                     add(alt)
L700                 if any(t2cik.get(key) for key in candidates):
L701                     hits += 1
L702             sec_data = self.fetch_eps_rev_from_sec(sample)
L703             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L704             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L705             total = len(sample)
L706             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L707         except Exception as e:
L708             print(f"[SEC-DRYRUN] error: {e}")
L709     @staticmethod
L710     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L711         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L712         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L713         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L714
L715     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L716
L717     @staticmethod
L718     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L719         if df is None or df.empty: return None
L720         idx_lower={str(i).lower():i for i in df.index}
L721         for n in names:
L722             k=n.lower()
L723             if k in idx_lower: return df.loc[idx_lower[k]]
L724         return None
L725
L726     @staticmethod
L727     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L728         if s is None or s.empty: return None
L729         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L730
L731     @staticmethod
L732     def _latest(s: pd.Series|None) -> float|None:
L733         if s is None or s.empty: return None
L734         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L735
L736     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L737         from concurrent.futures import ThreadPoolExecutor, as_completed
L738         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L739
L740         def one(t: str):
L741             try:
L742                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L743                 qcf = tk.quarterly_cashflow
L744                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L745                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L746                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L747                 if any(v is None for v in (cfo, capex, fcf)):
L748                     acf = tk.cashflow
L749                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L750                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L751                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L752             except Exception as e:
L753                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L754             n=np.nan
L755             return {"ticker":t,
L756                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L757                     "capex_ttm_yf": n if capex is None else capex,
L758                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L759
L760         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L761         with ThreadPoolExecutor(max_workers=mw) as ex:
L762             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L763         return pd.DataFrame(rows).set_index("ticker")
L764
L765     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L766     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L767
L768     @staticmethod
L769     def _first_key(d: dict, keys: list[str]):
L770         for k in keys:
L771             if k in d and d[k] is not None: return d[k]
L772         return None
L773
L774     @staticmethod
L775     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L776         for i in range(retries):
L777             r = session.get(url, params=params, timeout=15)
L778             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L779             r.raise_for_status(); return r.json()
L780         r.raise_for_status()
L781
L782     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L783         api_k
```