```text
           "EarningsPerShare",
L574                     "EarningsPerShareBasic",
L575                 ]
L576                 rev_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], rev_tags)
L577                 eps_arr = self._units_for_tags(facts, ["us-gaap", "ifrs-full"], eps_tags)
L578                 rev_q_pairs, rev_a_pairs = self._series_q_and_a(rev_arr)
L579                 eps_q_pairs, eps_a_pairs = self._series_q_and_a(eps_arr)
L580
L581                 rev_q_pairs = rev_q_pairs[:12]
L582                 eps_q_pairs = eps_q_pairs[:12]
L583                 rev_a_pairs = rev_a_pairs[:6]
L584                 eps_a_pairs = eps_a_pairs[:6]
L585
L586                 def _vals(pairs: list[tuple[str, float]]) -> list[float]:
L587                     vals: list[float] = []
L588                     for _d, v in pairs:
L589                         try:
L590                             vals.append(float(v))
L591                         except Exception:
L592                             vals.append(float("nan"))
L593                     return vals
L594
L595                 rev_q_vals = _vals(rev_q_pairs)
L596                 eps_q_vals = _vals(eps_q_pairs)
L597                 rev_a_vals = _vals(rev_a_pairs)
L598                 eps_a_vals = _vals(eps_a_pairs)
L599
L600                 def _first_valid(vals: list[float]) -> float:
L601                     for v in vals:
L602                         if v == v:
L603                             return float(v)
L604                     return float("nan")
L605
L606                 def _nth_valid(vals: list[float], n: int) -> float:
L607                     idx = 0
L608                     for v in vals:
L609                         if v == v:
L610                             if idx == n:
L611                                 return float(v)
L612                             idx += 1
L613                     return float("nan")
L614
L615                 def _quarter_from_annual(vals: list[float]) -> float:
L616                     v = _first_valid(vals)
L617                     return float(v / 4.0) if v == v else float("nan")
L618
L619                 def _quarter_from_annual_prev(vals: list[float]) -> float:
L620                     v = _nth_valid(vals, 1)
L621                     return float(v / 4.0) if v == v else float("nan")
L622
L623                 rev_lastq = _first_valid(rev_q_vals)
L624                 if rev_lastq != rev_lastq:
L625                     rev_lastq = _quarter_from_annual(rev_a_vals)
L626                 eps_lastq = _first_valid(eps_q_vals)
L627                 if eps_lastq != eps_lastq:
L628                     eps_lastq = _quarter_from_annual(eps_a_vals)
L629
L630                 rev_lastq_prev = _nth_valid(rev_q_vals, 4)
L631                 if rev_lastq_prev != rev_lastq_prev:
L632                     rev_lastq_prev = _quarter_from_annual_prev(rev_a_vals)
L633                 eps_lastq_prev = _nth_valid(eps_q_vals, 4)
L634                 if eps_lastq_prev != eps_lastq_prev:
L635                     eps_lastq_prev = _quarter_from_annual_prev(eps_a_vals)
L636
L637                 rev_ttm = self._ttm_from_q_or_a(rev_q_vals, rev_a_vals)
L638                 eps_ttm = self._ttm_from_q_or_a(eps_q_vals, eps_a_vals)
L639                 rev_ttm_prev = self._ttm_from_q_or_a(rev_q_vals[4:], rev_a_vals[1:])
L640                 eps_ttm_prev = self._ttm_from_q_or_a(eps_q_vals[4:], eps_a_vals[1:])
L641
L642                 rev_annual_latest = _first_valid(rev_a_vals)
L643                 rev_annual_prev = _nth_valid(rev_a_vals, 1)
L644                 eps_annual_latest = _first_valid(eps_a_vals)
L645                 eps_annual_prev = _nth_valid(eps_a_vals, 1)
L646
L647                 def _cagr3(vals: list[float]) -> float:
L648                     vals_valid = [v for v in vals if v == v]
L649                     if len(vals_valid) >= 3:
L650                         latest, base = float(vals_valid[0]), float(vals_valid[2])
L651                         if latest > 0 and base > 0:
L652                             try:
L653                                 return float((latest / base) ** (1 / 2) - 1.0)
L654                             except Exception:
L655                                 return float("nan")
L656                     return float("nan")
L657
L658                 rev_cagr3 = _cagr3(rev_a_vals)
L659                 eps_cagr3 = _cagr3(eps_a_vals)
L660
L661                 out[t] = {
L662                     "eps_q_recent": eps_lastq,
L663                     "eps_ttm": eps_ttm,
L664                     "eps_ttm_prev": eps_ttm_prev,
L665                     "eps_lastq_prev": eps_lastq_prev,
L666                     "rev_q_recent": rev_lastq,
L667                     "rev_ttm": rev_ttm,
L668                     "rev_ttm_prev": rev_ttm_prev,
L669                     "rev_lastq_prev": rev_lastq_prev,
L670                     # 後段でDatetimeIndex化できるよう (date,value) を保持。値だけの互換キーも残す。
L671                     # 3年運用に合わせて四半期は直近12本のみ保持（約3年=12Q）
L672                     "eps_q_series_pairs": eps_q_pairs,
L673                     "rev_q_series_pairs": rev_q_pairs,
L674                     "eps_q_series": eps_q_vals,
L675                     "rev_q_series": rev_q_vals,
L676                     "eps_a_series_pairs": eps_a_pairs,
L677                     "rev_a_series_pairs": rev_a_pairs,
L678                     "eps_a_series": eps_a_vals,
L679                     "rev_a_series": rev_a_vals,
L680                     "eps_annual_latest": eps_annual_latest,
L681                     "eps_annual_prev": eps_annual_prev,
L682                     "rev_annual_latest": rev_annual_latest,
L683                     "rev_annual_prev": rev_annual_prev,
L684                     "eps_cagr3": eps_cagr3,
L685                     "rev_cagr3": rev_cagr3,
L686                 }
L687                 n_map += 1
L688                 if any(v == v for v in rev_q_vals) or any(v == v for v in rev_a_vals):
L689                     n_rev += 1
L690                 if any(v == v for v in eps_q_vals) or any(v == v for v in eps_a_vals):
L691                     n_eps += 1
L692             except Exception:
L693                 out[t] = {}
L694                 miss_facts.append(t)
L695             time.sleep(0.30)
L696         # 取得サマリをログ（Actionsで確認しやすいよう print）
L697         try:
L698             total = len(tickers)
L699             print(f"[SEC] map={n_map}/{total}  rev_q_hit={n_rev}  eps_q_hit={n_eps}")
L700             # デバッグ: 取得本数の分布（先頭のみ）
L701             try:
L702                 lens = [len((out.get(t, {}) or {}).get("rev_q_series", [])) for t in tickers]
L703                 print(f"[SEC] rev_q_series length: min={min(lens) if lens else 0} "
L704                       f"p25={np.percentile(lens,25) if lens else 0} median={np.median(lens) if lens else 0} "
L705                       f"p75={np.percentile(lens,75) if lens else 0} max={max(lens) if lens else 0}")
L706             except Exception:
L707                 pass
L708             if miss_map:
L709                 print(f"[SEC] no CIK map: {len(miss_map)} (サンプル例) {miss_map[:20]}")
L710             if miss_facts:
L711                 print(f"[SEC] CIKあり だが対象factなし: {len(miss_facts)} (サンプル例) {miss_facts[:20]}")
L712         except Exception:
L713             pass
L714         return out
L715
L716     def sec_dryrun_sample(self, tickers: list[str] | None = None) -> None:
L717         if not _env_true("SEC_DRYRUN_SAMPLE", False):
L718             return
L719         sample = tickers or ["BRK.B", "BF.B", "GOOGL", "META", "UBER", "PBR.A", "TSM", "NARI", "EVBN", "SWAV"]
L720         print(f"[SEC-DRYRUN] sample tickers: {sample}")
L721         try:
L722             t2cik = self._sec_ticker_map()
L723             hits = 0
L724             for sym in sample:
L725                 candidates: list[str] = []
L726
L727                 def add(key: str) -> None:
L728                     if key and key not in candidates:
L729                         candidates.append(key)
L730
L731                 add((sym or "").upper())
L732                 for alt in self._normalize_ticker(sym):
L733                     add(alt)
L734                 if any(t2cik.get(key) for key in candidates):
L735                     hits += 1
L736             sec_data = self.fetch_eps_rev_from_sec(sample)
L737             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L738             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L739             total = len(sample)
L740             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L741         except Exception as e:
L742             print(f"[SEC-DRYRUN] error: {e}")
L743     @staticmethod
L744     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L745         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L746         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L747         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L748
L749     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L750
L751     @staticmethod
L752     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L753         if df is None or df.empty: return None
L754         idx_lower={str(i).lower():i for i in df.index}
L755         for n in names:
L756             k=n.lower()
L757             if k in idx_lower: return df.loc[idx_lower[k]]
L758         return None
L759
L760     @staticmethod
L761     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L762         if s is None or s.empty: return None
L763         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L764
L765     @staticmethod
L766     def _latest(s: pd.Series|None) -> float|None:
L767         if s is None or s.empty: return None
L768         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L769
L770     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L771         from concurrent.futures import ThreadPoolExecutor, as_completed
L772         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L773
L774         def one(t: str):
L775             try:
L776                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L777                 qcf = tk.quarterly_cashflow
L778                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L779                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L780                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L781                 if any(v is None for v in (cfo, capex, fcf)):
L782                     acf = tk.cashflow
L783                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L784                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L785                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L786             except Exception as e:
L787                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L788             n=np.nan
L789             return {"ticker":t,
L790                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L791                     "capex_ttm_yf": n if capex is None else capex,
L792                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L793
L794         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L795         with ThreadPoolExecutor(max_workers=mw) as ex:
L796             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L797         return pd.DataFrame(rows).set_index("ticker")
L798
L799     _FINN_CFO_KEYS = ["netCashProvidedByOper
```