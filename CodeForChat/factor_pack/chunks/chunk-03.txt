```text
)
L452         data = yf.download(tickers + [self.bench], period="600d", auto_adjust=True, progress=False)
L453         T.log("yf.download done")
L454         px, spx = data["Close"], data["Close"][self.bench]
L455         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L456         if clip_days > 0:
L457             px  = px.tail(clip_days + 1)
L458             spx = spx.tail(clip_days + 1)
L459             print(f"[T] price window clipped by env: {len(px)} rows (PRICE_CLIP_DAYS={clip_days})")
L460         else:
L461             print(f"[T] price window clip skipped; rows={len(px)}")
L462         tickers_bulk, info = yf.Tickers(" ".join(tickers)), {}
L463         for t in tickers:
L464             try: info[t] = tickers_bulk.tickers[t].info
L465             except Exception as e: print(f"{t}: info fetch failed ({e})"); info[t] = {}
L466         eps_df = self._build_eps_df(tickers, tickers_bulk, info)
L467         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L468         T.log("eps/fcf prep done")
L469         returns = px[tickers].pct_change()
L470         T.log("price prep/returns done")
L471         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns)
L472
L473 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L474 class Selector:
L475     # ---- DRRS helpers（Selector専用） ----
L476     @staticmethod
L477     def _z_np(X: np.ndarray) -> np.ndarray:
L478         X = np.asarray(X, dtype=np.float32); m = np.nanmean(X, axis=0, keepdims=True); s = np.nanstd(X, axis=0, keepdims=True)+1e-9
L479         return (np.nan_to_num(X)-m)/s
L480
L481     @classmethod
L482     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L483         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L484         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L485         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L486         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L487         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L488
L489     @classmethod
L490     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L491         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L492         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L493         if k==0: return []
L494         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L495         for _ in range(k):
L496             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L497             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L498             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L499         return sorted(S)
L500
L501     @staticmethod
L502     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L503         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L504         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L505
L506     @classmethod
L507     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L508         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L509         while improved and passes<max_pass:
L510             improved, passes = False, passes+1
L511             for i,out in enumerate(list(S)):
L512                 for inn in range(len(score)):
L513                     if inn in S: continue
L514                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L515                     if v>best+1e-10: S, best, improved = cand, v, True; break
L516                 if improved: break
L517         return S, best
L518
L519     @staticmethod
L520     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L521         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L522         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L523         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L524         return float(s[idx].sum() - lam*within - mu*cross)
L525
L526     @classmethod
L527     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L528         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L529         while improved and passes<max_pass:
L530             improved, passes = False, passes+1
L531             for i,out in enumerate(list(S)):
L532                 for inn in range(N):
L533                     if inn in S: continue
L534                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L535                     if v>best+1e-10: S, best, improved = cand, v, True; break
L536                 if improved: break
L537         return S, best
L538
L539     @staticmethod
L540     def avg_corr(C: np.ndarray, idx) -> float:
L541         k = len(idx); P = C[np.ix_(idx, idx)]
L542         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L543
L544     @classmethod
L545     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L546         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L547         union = [t for t in pool_tickers if t in returns_df.columns]
L548         for t in g_fixed:
L549             if t not in union: union.append(t)
L550         Rdf_all = returns_df[union]; Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all)>=lookback else Rdf_all; Rdf_all = Rdf_all.dropna()
L551         pool_eff, g_eff = [t for t in pool_tickers if t in Rdf_all.columns], [t for t in g_fixed if t in Rdf_all.columns]
L552         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L553         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L554         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L555         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L556         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L557         if len(g_eff)>0 and mu>0.0:
L558             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L559         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L560         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L561         selected_tickers = [pool_eff[i] for i in S]
L562         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L563
L564     # ---- 選定（スコア Series / returns だけを受ける）----
L565 # === Output：出力整形と送信（表示・Slack） ===
L566 class Output:
L567
L568     def __init__(self, debug=False):
L569         self.debug = debug
L570         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L571         self.g_title = self.d_title = ""
L572         self.g_formatters = self.d_formatters = {}
L573         # 低スコア（GSC+DSC）Top10 表示/送信用
L574         self.low10_table = None
L575
L576     # --- 表示（元 display_results のロジックそのまま） ---
L577     def display_results(self, *, exist, bench, df_z, g_score, d_score_all,
L578                         init_G, init_D, top_G, top_D, **kwargs):
L579         pd.set_option('display.float_format','{:.3f}'.format)
L580         print("📈 ファクター分散最適化の結果")
L581         if self.miss_df is not None and not self.miss_df.empty:
L582             print("Missing Data:")
L583             print(self.miss_df.to_string(index=False))
L584
L585         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L586         try:
L587             sc = getattr(self, "_sc", None)
L588             agg_G = getattr(sc, "_agg_G", None)
L589             agg_D = getattr(sc, "_agg_D", None)
L590         except Exception:
L591             sc = agg_G = agg_D = None
L592         class _SeriesProxy:
L593             __slots__ = ("primary", "fallback")
L594             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L595             def get(self, key, default=None):
L596                 try:
L597                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L598                     if v is not None and not (isinstance(v, float) and v != v):
L599                         return v
L600                 except Exception:
L601                     pass
L602                 try:
L603                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L604                 except Exception:
L605                     return default
L606         g_score = _SeriesProxy(agg_G, g_score)
L607         d_score_all = _SeriesProxy(agg_D, d_score_all)
L608         near_G = getattr(sc, "_near_G", []) if sc else []
L609         near_D = getattr(sc, "_near_D", []) if sc else []
L610
L611         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L612         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L613         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L614         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L615         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L616         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L617                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L618         if near_G:
L619             add = [t for t in near_G if t not in set(G_UNI)][:10]
L620             if len(add) < 10:
L621                 try:
L622                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L623                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L624                     used = set(G_UNI + add)
L625                     def _push(lst):
L626                         nonlocal add, used
L627                         for t in lst:
L628                             if len(add) == 10: break
L629                             if t in aggG.index and t not in used:
L630                                 add.append(t); used.add(t)
L631                     _push(out_now)           # ① 今回 OUT を優先
L632                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L633                 except Exception:
L634                     pass
L635             if add:
L636                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L637                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L638         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L639
L640         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L641         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L642         d_disp['QAL
```