```text
alize_ticker(sym):
L547                     add(alt)
L548                 if any(t2cik.get(key) for key in candidates):
L549                     hits += 1
L550             sec_data = self.fetch_eps_rev_from_sec(sample)
L551             rev_hits = sum(1 for v in sec_data.values() if v.get("rev_q_series"))
L552             eps_hits = sum(1 for v in sec_data.values() if v.get("eps_q_series"))
L553             total = len(sample)
L554             print(f"[SEC-DRYRUN] CIK map hit: {hits}/{total}  rev_q_series hits: {rev_hits}  eps_q_series hits: {eps_hits}")
L555         except Exception as e:
L556             print(f"[SEC-DRYRUN] error: {e}")
L557     @staticmethod
L558     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L559         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L560         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L561         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L562
L563     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L564
L565     @staticmethod
L566     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L567         if df is None or df.empty: return None
L568         idx_lower={str(i).lower():i for i in df.index}
L569         for n in names:
L570             k=n.lower()
L571             if k in idx_lower: return df.loc[idx_lower[k]]
L572         return None
L573
L574     @staticmethod
L575     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L576         if s is None or s.empty: return None
L577         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L578
L579     @staticmethod
L580     def _latest(s: pd.Series|None) -> float|None:
L581         if s is None or s.empty: return None
L582         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L583
L584     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L585         from concurrent.futures import ThreadPoolExecutor, as_completed
L586         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L587
L588         def one(t: str):
L589             try:
L590                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L591                 qcf = tk.quarterly_cashflow
L592                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L593                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L594                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L595                 if any(v is None for v in (cfo, capex, fcf)):
L596                     acf = tk.cashflow
L597                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L598                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L599                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L600             except Exception as e:
L601                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L602             n=np.nan
L603             return {"ticker":t,
L604                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L605                     "capex_ttm_yf": n if capex is None else capex,
L606                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L607
L608         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L609         with ThreadPoolExecutor(max_workers=mw) as ex:
L610             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L611         return pd.DataFrame(rows).set_index("ticker")
L612
L613     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L614     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L615
L616     @staticmethod
L617     def _first_key(d: dict, keys: list[str]):
L618         for k in keys:
L619             if k in d and d[k] is not None: return d[k]
L620         return None
L621
L622     @staticmethod
L623     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L624         for i in range(retries):
L625             r = session.get(url, params=params, timeout=15)
L626             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L627             r.raise_for_status(); return r.json()
L628         r.raise_for_status()
L629
L630     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L631         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L632         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L633         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L634         for sym in tickers:
L635             cfo_ttm = capex_ttm = None
L636             try:
L637                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L638                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L639                 for item in arr[:4]:
L640                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L641                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L642                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L643             except Exception: pass
L644             if cfo_ttm is None or capex_ttm is None:
L645                 try:
L646                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L647                     arr = j.get("cashFlow") or []
L648                     if arr:
L649                         item0 = arr[0]
L650                         if cfo_ttm is None:
L651                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L652                             if v is not None: cfo_ttm = float(v)
L653                         if capex_ttm is None:
L654                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L655                             if v is not None: capex_ttm = float(v)
L656                 except Exception: pass
L657             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L658         return pd.DataFrame(rows).set_index("ticker")
L659
L660     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L661         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L662         T.log("financials (yf) done")
L663         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L664         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L665         if need:
L666             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L667             df = yf_df.join(fh_df, how="left")
L668             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L669                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L670             print("[T] financials (finnhub) done (fallback only)")
L671         else:
L672             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L673             print("[T] financials (finnhub) skipped (no missing)")
L674         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L675         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L676         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L677         fcf_calc = cfo - capex
L678         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L679         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L680         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L681         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L682         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L683         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L684         return df[cols].sort_index()
L685
L686     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L687         eps_rows=[]
L688         for t in tickers:
L689             info_t = info[t]
L690             sec_t = (sec_map or {}).get(t, {})
L691             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L692             eps_q = sec_t.get("eps_q_recent", np.nan)
L693             try:
L694                 tk = tickers_bulk.tickers.get(t)
L695                 if tk is None:
L696                     sym = info_t.get("_yf_symbol") if isinstance(info_t, dict) else None
L697                     if sym:
L698                         tk = tickers_bulk.tickers.get(sym)
L699                 qearn = tk.quarterly_earnings if tk is not None else None
L700                 so = info_t.get("sharesOutstanding")
L701                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L702                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L703                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L704                     if pd.isna(eps_q):
L705                         eps_q = qearn["Earnings"].iloc[-1]/so
L706             except Exception: pass
L707             rev_ttm = sec_t.get("rev_ttm", np.nan)
L708             rev_q = sec_t.get("rev_q_recent", np.nan)
L709             if (not sec_t) or pd.isna(rev_ttm):
L710                 try:
L711                     tk = tickers_bulk.tickers.get(t)
L712                     if tk is None and isinstance(info_t, dict):
L713                         sym = info_t.get("_yf_symbol")
L714                         if sym:
L715                             tk = tickers_bulk.tickers.get(sym)
L716                     qfin = getattr(tk, "quarterly_financials", None)
L717                     if qfin is not None and not qfin.empty:
L718                         idx_lower = {str(i).lower(): i for i in qfin.index}
L719                         rev_idx = None
L720                         for name in ("Total Revenue", "TotalRevenue"):
L721                             key = name.lower()
L722                             if key in idx_lower:
L723                                 rev_idx = idx_lower[key]
L724                                 break
L725                         if rev_idx is not None:
L726                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L727                             if not rev_series.empty:
L728                                 rev_ttm_yf = float(rev_series.head(4).sum())
L729                                 if pd.isna(rev_ttm):
L730                                     rev_ttm = rev_ttm_yf
L731                                 if pd.isna(rev_q):
L732                                     rev_q = float(rev_series.iloc[0])
L733       
```