```text
L537
L538     @staticmethod
L539     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L540         if df is None or df.empty: return None
L541         idx_lower={str(i).lower():i for i in df.index}
L542         for n in names:
L543             k=n.lower()
L544             if k in idx_lower: return df.loc[idx_lower[k]]
L545         return None
L546
L547     @staticmethod
L548     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L549         if s is None or s.empty: return None
L550         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L551
L552     @staticmethod
L553     def _latest(s: pd.Series|None) -> float|None:
L554         if s is None or s.empty: return None
L555         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L556
L557     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L558         from concurrent.futures import ThreadPoolExecutor, as_completed
L559         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L560
L561         def one(t: str):
L562             try:
L563                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L564                 qcf = tk.quarterly_cashflow
L565                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L566                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L567                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L568                 if any(v is None for v in (cfo, capex, fcf)):
L569                     acf = tk.cashflow
L570                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L571                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L572                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L573             except Exception as e:
L574                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L575             n=np.nan
L576             return {"ticker":t,
L577                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L578                     "capex_ttm_yf": n if capex is None else capex,
L579                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L580
L581         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L582         with ThreadPoolExecutor(max_workers=mw) as ex:
L583             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L584         return pd.DataFrame(rows).set_index("ticker")
L585
L586     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L587     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L588
L589     @staticmethod
L590     def _first_key(d: dict, keys: list[str]):
L591         for k in keys:
L592             if k in d and d[k] is not None: return d[k]
L593         return None
L594
L595     @staticmethod
L596     def _finn_get(session: requests.Session, url: str, params: dict, retries: int=3, sleep_s: float=0.5):
L597         for i in range(retries):
L598             r = session.get(url, params=params, timeout=15)
L599             if r.status_code==429: time.sleep(min(2**i*sleep_s,4.0)); continue
L600             r.raise_for_status(); return r.json()
L601         r.raise_for_status()
L602
L603     def fetch_cfo_capex_ttm_finnhub(self, tickers: list[str], api_key: str|None=None) -> pd.DataFrame:
L604         api_key = api_key or os.getenv("FINNHUB_API_KEY")
L605         if not api_key: raise ValueError("Finnhub API key not provided. Set FINNHUB_API_KEY or pass api_key=")
L606         base, s, rows = "https://finnhub.io/api/v1", requests.Session(), []
L607         for sym in tickers:
L608             cfo_ttm = capex_ttm = None
L609             try:
L610                 j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"quarterly","limit":8,"token":api_key})
L611                 arr = j.get("cashFlow") or []; cfo_vals, capex_vals = [], []
L612                 for item in arr[:4]:
L613                     cfo_vals.append(self._first_key(item,self._FINN_CFO_KEYS)); capex_vals.append(self._first_key(item,self._FINN_CAPEX_KEYS))
L614                 if any(v is not None for v in cfo_vals): cfo_ttm = float(np.nansum([np.nan if v is None else float(v) for v in cfo_vals]))
L615                 if any(v is not None for v in capex_vals): capex_ttm = float(np.nansum([np.nan if v is None else float(v) for v in capex_vals]))
L616             except Exception: pass
L617             if cfo_ttm is None or capex_ttm is None:
L618                 try:
L619                     j = self._finn_get(s, f"{base}/stock/cash-flow", {"symbol":sym,"frequency":"annual","limit":1,"token":api_key})
L620                     arr = j.get("cashFlow") or []
L621                     if arr:
L622                         item0 = arr[0]
L623                         if cfo_ttm is None:
L624                             v = self._first_key(item0,self._FINN_CFO_KEYS)
L625                             if v is not None: cfo_ttm = float(v)
L626                         if capex_ttm is None:
L627                             v = self._first_key(item0,self._FINN_CAPEX_KEYS)
L628                             if v is not None: capex_ttm = float(v)
L629                 except Exception: pass
L630             rows.append({"ticker":sym,"cfo_ttm_fh":np.nan if cfo_ttm is None else cfo_ttm,"capex_ttm_fh":np.nan if capex_ttm is None else capex_ttm})
L631         return pd.DataFrame(rows).set_index("ticker")
L632
L633     def compute_fcf_with_fallback(self, tickers: list[str], finnhub_api_key: str|None=None) -> pd.DataFrame:
L634         yf_df = self.fetch_cfo_capex_ttm_yf(tickers)
L635         T.log("financials (yf) done")
L636         miss_mask = yf_df[["cfo_ttm_yf","capex_ttm_yf","fcf_ttm_yf_direct"]].isna().any(axis=1)
L637         need = yf_df.index[miss_mask].tolist(); print(f"[T] yf financials missing: {len(need)} {need[:10]}{'...' if len(need)>10 else ''}")
L638         if need:
L639             fh_df = self.fetch_cfo_capex_ttm_finnhub(need, api_key=finnhub_api_key)
L640             df = yf_df.join(fh_df, how="left")
L641             for col_yf, col_fh in [("cfo_ttm_yf","cfo_ttm_fh"),("capex_ttm_yf","capex_ttm_fh")]:
L642                 df[col_yf] = df[col_yf].fillna(df[col_fh])
L643             print("[T] financials (finnhub) done (fallback only)")
L644         else:
L645             df = yf_df.assign(cfo_ttm_fh=np.nan, capex_ttm_fh=np.nan)
L646             print("[T] financials (finnhub) skipped (no missing)")
L647         df["cfo_ttm"]  = df["cfo_ttm_yf"].where(df["cfo_ttm_yf"].notna(), df["cfo_ttm_fh"])
L648         df["capex_ttm"] = df["capex_ttm_yf"].where(df["capex_ttm_yf"].notna(), df["capex_ttm_fh"])
L649         cfo, capex = pd.to_numeric(df["cfo_ttm"], errors="coerce"), pd.to_numeric(df["capex_ttm"], errors="coerce").abs()
L650         fcf_calc = cfo - capex
L651         fcf_direct = pd.to_numeric(df.get("fcf_ttm_yf_direct"), errors="coerce")
L652         df["fcf_ttm"] = fcf_calc.where(fcf_calc.notna(), fcf_direct)
L653         df["cfo_source"]  = np.where(df["cfo_ttm_yf"].notna(),"yfinance",np.where(df["cfo_ttm_fh"].notna(),"finnhub",""))
L654         df["capex_source"] = np.where(df["capex_ttm_yf"].notna(),"yfinance",np.where(df["capex_ttm_fh"].notna(),"finnhub",""))
L655         df["fcf_imputed"] = df[["cfo_ttm","capex_ttm"]].isna().any(axis=1) & df["fcf_ttm"].notna()
L656         cols = ["cfo_ttm_yf","capex_ttm_yf","cfo_ttm_fh","capex_ttm_fh","cfo_ttm","capex_ttm","fcf_ttm","fcf_ttm_yf_direct","cfo_source","capex_source","fcf_imputed"]
L657         return df[cols].sort_index()
L658
L659     def _build_eps_df(self, tickers, tickers_bulk, info, sec_map: dict | None = None):
L660         eps_rows=[]
L661         for t in tickers:
L662             info_t = info[t]
L663             sec_t = (sec_map or {}).get(t, {})
L664             eps_ttm = sec_t.get("eps_ttm", info_t.get("trailingEps", np.nan))
L665             eps_q = sec_t.get("eps_q_recent", np.nan)
L666             try:
L667                 qearn, so = tickers_bulk.tickers[t].quarterly_earnings, info_t.get("sharesOutstanding")
L668                 if so and qearn is not None and not qearn.empty and "Earnings" in qearn.columns:
L669                     eps_ttm_q = qearn["Earnings"].head(4).sum()/so
L670                     if pd.notna(eps_ttm_q) and (pd.isna(eps_ttm) or (abs(eps_ttm)>0 and abs(eps_ttm/eps_ttm_q)>3)): eps_ttm = eps_ttm_q
L671                     if pd.isna(eps_q):
L672                         eps_q = qearn["Earnings"].iloc[-1]/so
L673             except Exception: pass
L674             rev_ttm = sec_t.get("rev_ttm", np.nan)
L675             rev_q = sec_t.get("rev_q_recent", np.nan)
L676             if (not sec_t) or pd.isna(rev_ttm):
L677                 try:
L678                     tk = tickers_bulk.tickers[t]
L679                     qfin = getattr(tk, "quarterly_financials", None)
L680                     if qfin is not None and not qfin.empty:
L681                         idx_lower = {str(i).lower(): i for i in qfin.index}
L682                         rev_idx = None
L683                         for name in ("Total Revenue", "TotalRevenue"):
L684                             key = name.lower()
L685                             if key in idx_lower:
L686                                 rev_idx = idx_lower[key]
L687                                 break
L688                         if rev_idx is not None:
L689                             rev_series = pd.to_numeric(qfin.loc[rev_idx], errors="coerce").dropna()
L690                             if not rev_series.empty:
L691                                 rev_ttm_yf = float(rev_series.head(4).sum())
L692                                 if pd.isna(rev_ttm):
L693                                     rev_ttm = rev_ttm_yf
L694                                 if pd.isna(rev_q):
L695                                     rev_q = float(rev_series.iloc[0])
L696                 except Exception:
L697                     pass
L698             eps_rows.append({"ticker":t,"eps_ttm":eps_ttm,"eps_q_recent":eps_q,"rev_ttm":rev_ttm,"rev_q_recent":rev_q})
L699         return self.impute_eps_ttm(pd.DataFrame(eps_rows).set_index("ticker"))
L700
L701     def prepare_data(self):
L702         """Fetch price and fundamental data for all tickers."""
L703         self.sec_dryrun_sample()
L704         cand_info = yf.Tickers(" ".join(self.cand))
L705
L706         def _price(t: str) -> float:
L707             try:
L708                 return cand_info.tickers[t].fast_info.get("lastPrice", np.inf)
L709             except Exception as e:
L710                 print(f"{t}: price fetch failed ({e})")
L711                 return np.inf
L712
L713         cand_prices = {t: _price(t) for t in self.cand}
L714         cand_f = [t for t, p in cand_prices.items() if p <= self.price_max]
L715         T.log("price cap filter done (CAND_PRICE_MAX)")
L716         # 入力ティッカーの重複を除去し、現行→候補の順序を維持
L717         tickers = list(dict.fromkeys(self.exist + cand_f))
L718         T.log(f"universe prepared: unique={len(tickers)} bench={self.bench}")
L719         data = yf.download(tickers + [self.bench], period="600d",
L720                            auto_adjust=True, progress=False, threads=False)
L721         T.log("yf.download done")
L722         px = data["Close"].dropna(how="all", axis=1).ffill(limit=2)
L723         spx = data["Close"][self.bench].reindex(px.index).ffill()
L724         clip_days = int(os.getenv("PRICE_CLIP_DAYS", "0"))   # 0なら無効（既定）
L725         if clip_days > 0:
L726             px, spx = px.tail(clip_days + 1), spx.tail(clip_days + 1)
L727             logger.info("[T] price window clipped by env: %d rows (PRICE_CLIP_DAYS=%d)", len(px), clip_days)

```