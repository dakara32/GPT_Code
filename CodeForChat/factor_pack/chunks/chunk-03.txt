```text
ket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L435         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L436         union = [t for t in pool_tickers if t in returns_df.columns]
L437         for t in g_fixed:
L438             if t not in union: union.append(t)
L439         Rdf_all = returns_df[union]; Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all)>=lookback else Rdf_all; Rdf_all = Rdf_all.dropna()
L440         pool_eff, g_eff = [t for t in pool_tickers if t in Rdf_all.columns], [t for t in g_fixed if t in Rdf_all.columns]
L441         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L442         score = score_ser.reindex(pool_eff).to_numpy(dtype=np.float32)
L443         C_all = cls.residual_corr(Rdf_all.to_numpy(), n_pc=n_pc, shrink=shrink)
L444         col_pos = {c:i for i,c in enumerate(Rdf_all.columns)}; pool_pos = [col_pos[t] for t in pool_eff]
L445         C_within, C_cross = C_all[np.ix_(pool_pos,pool_pos)], None
L446         if len(g_eff)>0 and mu>0.0:
L447             g_pos = [col_pos[t] for t in g_eff]; C_cross = C_all[np.ix_(pool_pos,g_pos)]
L448         R_pool = Rdf_all[pool_eff].to_numpy(); S0 = cls.rrqr_like_det(R_pool, score, k, gamma=gamma)
L449         S, Jn = (cls.swap_local_det_cross(C_within, C_cross, score, S0, lam=lam, mu=mu, max_pass=15) if C_cross is not None else cls.swap_local_det(C_within, score, S0, lam=lam, max_pass=15))
L450         selected_tickers = [pool_eff[i] for i in S]
L451         return dict(idx=S, tickers=selected_tickers, avg_res_corr=cls.avg_corr(C_within,S), sum_score=float(score[S].sum()), objective=float(Jn))
L452
L453     # ---- 選定（スコア Series / returns だけを受ける）----
L454 # === Output：出力整形と送信（表示・Slack） ===
L455 class Output:
L456
L457     def __init__(self, debug=False):
L458         self.debug = debug
L459         self.miss_df = self.g_table = self.d_table = self.io_table = self.df_metrics_fmt = self.debug_table = None
L460         self.g_title = self.d_title = ""
L461         self.g_formatters = self.d_formatters = {}
L462         # 低スコア（GSC+DSC）Top10 表示/送信用
L463         self.low10_table = None
L464
L465     # --- 表示（元 display_results のロジックそのまま） ---
L466     def display_results(self, *, exist, bench, df_z, g_score, d_score_all,
L467                         init_G, init_D, top_G, top_D, **kwargs):
L468         pd.set_option('display.float_format','{:.3f}'.format)
L469         print("📈 ファクター分散最適化の結果")
L470         if self.miss_df is not None and not self.miss_df.empty:
L471             print("Missing Data:")
L472             print(self.miss_df.to_string(index=False))
L473
L474         # ---- 表示用：Changes/Near-Miss のスコア源を“最終集計”に統一するプロキシ ----
L475         try:
L476             sc = getattr(self, "_sc", None)
L477             agg_G = getattr(sc, "_agg_G", None)
L478             agg_D = getattr(sc, "_agg_D", None)
L479         except Exception:
L480             sc = agg_G = agg_D = None
L481         class _SeriesProxy:
L482             __slots__ = ("primary", "fallback")
L483             def __init__(self, primary, fallback): self.primary, self.fallback = primary, fallback
L484             def get(self, key, default=None):
L485                 try:
L486                     v = self.primary.get(key) if hasattr(self.primary, "get") else None
L487                     if v is not None and not (isinstance(v, float) and v != v):
L488                         return v
L489                 except Exception:
L490                     pass
L491                 try:
L492                     return self.fallback.get(key) if hasattr(self.fallback, "get") else default
L493                 except Exception:
L494                     return default
L495         g_score = _SeriesProxy(agg_G, g_score)
L496         d_score_all = _SeriesProxy(agg_D, d_score_all)
L497         near_G = getattr(sc, "_near_G", []) if sc else []
L498         near_D = getattr(sc, "_near_D", []) if sc else []
L499
L500         extra_G = [t for t in init_G if t not in top_G][:5]; G_UNI = top_G + extra_G
L501         gsc_series = pd.Series({t: g_score.get(t) for t in G_UNI}, name='GSC')
L502         self.g_table = pd.concat([df_z.loc[G_UNI,['GRW','MOM','TRD','VOL']], gsc_series], axis=1)
L503         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L504         self.g_formatters = {col:"{:.2f}".format for col in ['GRW','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L505         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L506                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L507         if near_G:
L508             add = [t for t in near_G if t not in set(G_UNI)][:10]
L509             if len(add) < 10:
L510                 try:
L511                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L512                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L513                     used = set(G_UNI + add)
L514                     def _push(lst):
L515                         nonlocal add, used
L516                         for t in lst:
L517                             if len(add) == 10: break
L518                             if t in aggG.index and t not in used:
L519                                 add.append(t); used.add(t)
L520                     _push(out_now)           # ① 今回 OUT を優先
L521                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L522                 except Exception:
L523                     pass
L524             if add:
L525                 near_tbl = pd.concat([df_z.loc[add,['GRW','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L526                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L527         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L528
L529         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L530         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L531         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L532         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L533         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L534         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L535         import scorer
L536         dw_eff = scorer.D_WEIGHTS_EFF
L537         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L538                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L539         if near_D:
L540             add = [t for t in near_D if t not in set(D_UNI)][:10]
L541             if add:
L542                 d_disp2 = pd.DataFrame(index=add)
L543                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L544                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L545                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L546         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L547
L548         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L549         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L550         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L551
L552         self.io_table = pd.DataFrame({
L553             'IN': pd.Series(in_list),
L554             '/ OUT': pd.Series(out_list)
L555         })
L556         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L557         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L558         self.io_table['GSC'] = pd.Series(g_list)
L559         self.io_table['DSC'] = pd.Series(d_list)
L560
L561         print("Changes:")
L562         print(self.io_table.to_string(index=False))
L563
L564         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False)['Close']
L565         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L566         for name,ticks in portfolios.items():
L567             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L568             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L569             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L570             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L571             if len(ticks)>=2:
L572                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L573                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L574                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L575             else: RAW_rho = RESID_rho = np.nan
L576             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L577         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L578         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L579         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L580         def _fmt_row(s):
L581             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L582         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L583         if self.debug:
L584             self.debug_table = pd.concat([df_z[['TR','EPS','REV','ROE','BETA','DIV','FCF','RS','TR_str','DIV_STREAK']], g_score.rename('GSC'), d_score_all.rename('DSC')], axis=1).round(3)
L585             print("Debug Data:"); print(self.debug_table.to_string())
L586
L587         # === 追加: GSC+DSC が低い順 TOP10 ===
L588         try:
L589             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L590             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L591             all_scores = all_scores.dropna(subset=['G_plus_D'])
L592             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L593             print("Low Score Candidates (GSC+DSC bottom 10):")
L594             print(self.low10_table.to_string())
L595         except Exception as e:
L596             print(f"[warn] low-score ranking failed: {e}")
L597             self.low10_table = None
L598
L599     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L600     def notify_slack(self):
L601         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L602         if not SLACK_WEBHOOK_URL: raise ValueError("SLACK_WEBHOOK_URL not set (環境変数が未設定です)")
L603         def _filt
```