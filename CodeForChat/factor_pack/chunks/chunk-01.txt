```text
# === Chat Paste Pack ===
# Repo: dakara32/GPT_Code @ main
# Files: factor.py, scorer.py, .github/workflows/weekly-report.yml, documents/README.md, documents/factor_design.md
# 使い方: 下のチャンクを順に貼ればこのチャットで全体把握できます。
# 注記: 各ファイルは個別に L1.. で行番号付与。
---

## <factor.py>
```text
L1 '''ROLE: Orchestration ONLY（外部I/O・SSOT・Slack出力）, 計算は scorer.py'''
L2 # === NOTE: 機能・入出力・ログ文言・例外挙動は不変。安全な短縮（import統合/複数代入/内包表記/メソッドチェーン/一行化/空行圧縮など）のみ適用 ===
L3 BONUS_COEFF = 0.4   # 攻め=0.3 / 中庸=0.4 / 守り=0.5
L4 import os, time, requests
L5 from time import perf_counter
L6 from dataclasses import dataclass
L7 from typing import Dict, List
L8 from concurrent.futures import ThreadPoolExecutor
L9 import numpy as np
L10 import pandas as pd
L11 import yfinance as yf
L12 from scipy.stats import zscore  # used via scorer
L13 from scorer import Scorer, ttm_div_yield_portfolio
L14
L15 class T:
L16     t = perf_counter()
L17     log = staticmethod(lambda tag: (lambda now=perf_counter(): (print(f"[T] {tag}: {now - T.t:.2f}s"), setattr(T, "t", now))[-1])())
L18
L19 T.log("start")
L20
L21 # === ユニバースと定数（冒頭に固定） ===
L22 exist, cand = [pd.read_csv(f, header=None)[0].tolist() for f in ("current_tickers.csv","candidate_tickers.csv")]
L23 T.log(f"csv loaded: exist={len(exist)} cand={len(cand)}")
L24 CAND_PRICE_MAX, bench = 450, '^GSPC'  # 価格上限・ベンチマーク
L25 N_G, N_D = 12, 13  # G/D枠サイズ
L26 g_weights = {'GRW':0.40,'MOM':0.45,'VOL':-0.15}
L27 D_BETA_MAX = float(os.environ.get("D_BETA_MAX", "0.8"))
L28 FILTER_SPEC = {"G":{"pre_mask":["trend_template"]},"D":{"pre_filter":{"beta_max":D_BETA_MAX}}}
L29 D_weights = {'QAL':0.15,'YLD':0.15,'VOL':-0.45,'TRD':0.25}
L30 _fmt_w = lambda w: " ".join(f"{k}{int(v*100)}" for k, v in w.items())
L31
L32 # DRRS 初期プール・各種パラメータ
L33 corrM = 45
L34 DRRS_G, DRRS_D = dict(lookback=252,n_pc=3,gamma=1.2,lam=0.68,eta=0.8), dict(lookback=504,n_pc=4,gamma=0.8,lam=0.85,eta=0.5)
L35 DRRS_SHRINK = 0.10  # 残差相関の対角シュリンク（基礎）
L36
L37 # クロス相関ペナルティ（未定義なら設定）
L38 try: CROSS_MU_GD
L39 except NameError: CROSS_MU_GD = 0.40  # 推奨 0.35–0.45（lam=0.85想定）
L40
L41 # 出力関連
L42 RESULTS_DIR = "results"
L43 os.makedirs(RESULTS_DIR, exist_ok=True)
L44
L45 # その他
L46 debug_mode, FINNHUB_API_KEY = False, os.environ.get("FINNHUB_API_KEY")
L47
L48 # === 共有DTO（クラス間I/O契約）＋ Config ===
L49 @dataclass(frozen=True)
L50 class InputBundle:
L51     # Input → Scorer で受け渡す素材（I/O禁止の生データ）
L52     cand: List[str]
L53     tickers: List[str]
L54     bench: str
L55     data: pd.DataFrame              # yfinance download結果（'Close','Volume'等の階層列）
L56     px: pd.DataFrame                # data['Close']
L57     spx: pd.Series                  # data['Close'][bench]
L58     tickers_bulk: object            # yfinance.Tickers
L59     info: Dict[str, dict]           # yfinance info per ticker
L60     eps_df: pd.DataFrame            # ['eps_ttm','eps_q_recent',...]
L61     fcf_df: pd.DataFrame            # ['fcf_ttm', ...]
L62     returns: pd.DataFrame           # px[tickers].pct_change()
L63
L64 @dataclass(frozen=True)
L65 class FeatureBundle:
L66     df: pd.DataFrame
L67     df_z: pd.DataFrame
L68     g_score: pd.Series
L69     d_score_all: pd.Series
L70     missing_logs: pd.DataFrame
L71
L72 @dataclass(frozen=True)
L73 class SelectionBundle:
L74     resG: dict
L75     resD: dict
L76     top_G: List[str]
L77     top_D: List[str]
L78     init_G: List[str]
L79     init_D: List[str]
L80
L81 @dataclass(frozen=True)
L82 class WeightsConfig:
L83     g: Dict[str,float]
L84     d: Dict[str,float]
L85
L86 @dataclass(frozen=True)
L87 class DRRSParams:
L88     corrM: int
L89     shrink: float
L90     G: Dict[str,float]   # lookback, n_pc, gamma, lam, eta
L91     D: Dict[str,float]
L92     cross_mu_gd: float
L93
L94 @dataclass(frozen=True)
L95 class PipelineConfig:
L96     weights: WeightsConfig
L97     drrs: DRRSParams
L98     price_max: float
L99
L100 # === 共通ユーティリティ（複数クラスで使用） ===
L101 # (unused local utils removed – use scorer.py versions if needed)
L102
L103 _env_true = lambda name, default=False: (os.getenv(name) or str(default)).strip().lower() == "true"
L104
L105 def _post_slack(payload: dict):
L106     url = os.getenv("SLACK_WEBHOOK_URL")
L107     if not url: print("⚠️ SLACK_WEBHOOK_URL 未設定"); return
L108     try:
L109         requests.post(url, json=payload).raise_for_status()
L110     except Exception as e:
L111         print(f"⚠️ Slack通知エラー: {e}")
L112
L113 _slack = lambda message, code=False: _post_slack({"text": f"```{message}```" if code else message})
L114
L115 def _slack_debug(text: str, chunk=2800):
L116     i = 0
L117     while i < len(text):
L118         j = min(len(text), i + chunk)
L119         k = text.rfind("\n", i, j)
L120         j = k if k > i + 100 else j
L121         _post_slack({"blocks":[{"type":"section","text":{"type":"mrkdwn","text":f"```{text[i:j]}```"}}]})
L122         i = j
L123
L124 def _compact_debug(fb, sb, prevG, prevD, max_rows=140):
L125     want=["TR","EPS","REV","ROE","BETA_RAW","FCF","RS","TR_str","DIV_STREAK","DSC"]
L126     all_cols = _env_true("DEBUG_ALL_COLS", False)
L127     cols = list(fb.df_z.columns if all_cols else [c for c in want if c in fb.df_z.columns])
L128
L129     Gp, Dp = set(prevG or []), set(prevD or [])
L130     g_new=[t for t in (sb.top_G or []) if t not in Gp]; g_out=[t for t in Gp if t not in (sb.top_G or [])]
L131     d_new=[t for t in (sb.top_D or []) if t not in Dp]; d_out=[t for t in Dp if t not in (sb.top_D or [])]
L132
L133     show_near = _env_true("DEBUG_NEAR5", True)
L134     gs, ds = getattr(fb,"g_score",None), getattr(fb,"d_score_all",None)
L135     gs = (gs.sort_values(ascending=False) if show_near and hasattr(gs,"sort_values") else None)
L136     ds = (ds.sort_values(ascending=False) if show_near and hasattr(ds,"sort_values") else None)
L137     g_miss = ([t for t in gs.index if t not in (sb.top_G or [])][:10]) if gs is not None else []
L138     d_excl = set((sb.top_G or [])+(sb.top_D or []))
L139     d_miss = ([t for t in ds.index if t not in d_excl][:10]) if ds is not None else []
L140
L141     all_rows = _env_true("DEBUG_ALL_ROWS", False)
L142     focus = list(fb.df_z.index) if all_rows else sorted(set(g_new+g_out+d_new+d_out+(sb.top_G or [])+(sb.top_D or [])+g_miss+d_miss))[:max_rows]
L143
L144     def _fmt_near(lbl, ser, lst):
L145         if ser is None: return f"{lbl}: off"
L146         g = ser.get
L147         parts=[f"{t}:{g(t,float('nan')):.3f}" if pd.notna(g(t)) else f"{t}:nan" for t in lst]
L148         return f"{lbl}: " + (", ".join(parts) if parts else "-")
L149
L150     head=[f"G new/out: {len(g_new)}/{len(g_out)}  D new/out: {len(d_new)}/{len(d_out)}",
L151           _fmt_near("G near10", gs, g_miss),
L152           _fmt_near("D near10", ds, d_miss),
L153           f"Filters: G pre_mask=['trend_template'], D pre_filter={{'beta_max': {D_BETA_MAX}}}",
L154           f"Cols={'ALL' if all_cols else 'MIN'}  Rows={'ALL' if all_rows else 'SUBSET'}"]
L155
L156     tbl="(df_z or columns not available)"
L157     if not fb.df_z.empty and cols:
L158         idx=[t for t in focus if t in fb.df_z.index]
L159         tbl=fb.df_z.loc[idx, cols].round(3).to_string(max_rows=None, max_cols=None)
L160
L161     miss_txt=""
L162     if _env_true("DEBUG_MISSING_LOGS", False):
L163         miss=getattr(fb,"missing_logs",None)
L164         if miss is not None and not miss.empty:
L165             miss_txt="\nMissing data (head)\n"+miss.head(10).to_string(index=False)
L166
L167     return "\n".join(head+["\nChanged/Selected (+ Near Miss)", tbl])+miss_txt
L168
L169 def _disjoint_keepG(top_G, top_D, poolD):
L170     """G重複をDから除去し、poolDで順次補充（枯渇時は元銘柄維持）。"""
L171     used, D, i = set(top_G), list(top_D), 0
L172     for j, t in enumerate(D):
L173         if t in used:
L174             while i < len(poolD) and (poolD[i] in used or poolD[i] in D):
L175                 i += 1
L176             if i < len(poolD):
L177                 D[j] = poolD[i]; used.add(D[j]); i += 1
L178     return top_G, D
L179
L180
L181 # === Input：外部I/Oと前処理（CSV/API・欠損補完） ===
L182 class Input:
L183     def __init__(self, cand, exist, bench, price_max, finnhub_api_key=None):
L184         self.cand, self.exist, self.bench, self.price_max = cand, exist, bench, price_max
L185         self.api_key = finnhub_api_key or os.environ.get("FINNHUB_API_KEY")
L186
L187     # ---- （Input専用）EPS補完・FCF算出系 ----
L188     @staticmethod
L189     def impute_eps_ttm(df: pd.DataFrame, ttm_col: str="eps_ttm", q_col: str="eps_q_recent", out_col: str|None=None) -> pd.DataFrame:
L190         out_col = out_col or ttm_col; df = df.copy(); df["eps_imputed"] = False
L191         cand = df[q_col]*4; ok = df[ttm_col].isna() & cand.replace([np.inf,-np.inf], np.nan).notna()
L192         df.loc[ok, out_col], df.loc[ok,"eps_imputed"] = cand[ok], True; return df
L193
L194     _CF_ALIASES = {"cfo":["Operating Cash Flow","Total Cash From Operating Activities"], "capex":["Capital Expenditure","Capital Expenditures"]}
L195
L196     @staticmethod
L197     def _pick_row(df: pd.DataFrame, names: list[str]) -> pd.Series|None:
L198         if df is None or df.empty: return None
L199         idx_lower={str(i).lower():i for i in df.index}
L200         for n in names:
L201             k=n.lower()
L202             if k in idx_lower: return df.loc[idx_lower[k]]
L203         return None
L204
L205     @staticmethod
L206     def _sum_last_n(s: pd.Series|None, n: int) -> float|None:
L207         if s is None or s.empty: return None
L208         v=s.dropna().astype(float); return None if v.empty else v.iloc[:n].sum()
L209
L210     @staticmethod
L211     def _latest(s: pd.Series|None) -> float|None:
L212         if s is None or s.empty: return None
L213         v=s.dropna().astype(float); return v.iloc[0] if not v.empty else None
L214
L215     def fetch_cfo_capex_ttm_yf(self, tickers: list[str]) -> pd.DataFrame:
L216         from concurrent.futures import ThreadPoolExecutor, as_completed
L217         pick, sumn, latest, aliases = self._pick_row, self._sum_last_n, self._latest, self._CF_ALIASES
L218
L219         def one(t: str):
L220             try:
L221                 tk = yf.Ticker(t)  # ★ セッションは渡さない（YFがcurl_cffiで管理）
L222                 qcf = tk.quarterly_cashflow
L223                 cfo_q, capex_q = pick(qcf, aliases["cfo"]), pick(qcf, aliases["capex"])
L224                 fcf_q = pick(qcf, ["Free Cash Flow","FreeCashFlow","Free cash flow"])
L225                 cfo, capex, fcf = sumn(cfo_q,4), sumn(capex_q,4), sumn(fcf_q,4)
L226                 if any(v is None for v in (cfo, capex, fcf)):
L227                     acf = tk.cashflow
L228                     if cfo   is None: cfo   = latest(pick(acf, aliases["cfo"]))
L229                     if capex is None: capex = latest(pick(acf, aliases["capex"]))
L230                     if fcf   is None: fcf   = latest(pick(acf, ["Free Cash Flow","FreeCashFlow","Free cash flow"]))
L231             except Exception as e:
L232                 print(f"[warn] yf financials error: {t}: {e}"); cfo=capex=fcf=None
L233             n=np.nan
L234             return {"ticker":t,
L235                     "cfo_ttm_yf":   n if cfo   is None else cfo,
L236                     "capex_ttm_yf": n if capex is None else capex,
L237                     "fcf_ttm_yf_direct": n if fcf is None else fcf}
L238
L239         rows, mw = [], int(os.getenv("FIN_THREADS","8"))
L240         with ThreadPoolExecutor(max_workers=mw) as ex:
L241             rows=[f.result() for f in as_completed(ex.submit(one,t) for t in tickers)]
L242         return pd.DataFrame(rows).set_index("ticker")
L243
L244     _FINN_CFO_KEYS = ["netCashProvidedByOperatingActivities","netCashFromOperatingActivities","cashFlowFromOperatingActivities","operatingCashFlow"]
L245     _FINN_CAPEX_KEYS = ["capitalExpenditure","capitalExpenditures","purchaseOfPPE","investmentsInPropertyPlantAndEquipment"]
L246
L247     @staticmethod
L248     def _first_key(d: dict, keys: list[str]):
L249         for k in keys:
L250             if k in d and d[k] is not None: return d[k]
L251         return None
L252
L253     @staticmethod
L25
```