```text
.Ticker(ticker)
L182         try:
L183             if not t.dividends.empty: return "has"
L184         except Exception: return "unknown"
L185         try:
L186             a = t.actions
L187             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L188         except Exception: pass
L189         try:
L190             fi = t.fast_info
L191             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L192         except Exception: pass
L193         return "unknown"
L194
L195     @staticmethod
L196     def div_streak(t):
L197         try:
L198             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L199             years, streak = sorted(ann.index), 0
L200             for i in range(len(years)-1,0,-1):
L201                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L202                 else: break
L203             return streak
L204         except Exception: return 0
L205
L206     @staticmethod
L207     def fetch_finnhub_metrics(symbol):
L208         api_key = os.environ.get("FINNHUB_API_KEY")
L209         if not api_key: return {}
L210         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L211         try:
L212             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L213             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L214         except Exception: return {}
L215
L216     @staticmethod
L217     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L218         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L219         n = min(len(r), len(m), lookback)
L220         if n<60: return np.nan
L221         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L222         return np.nan if var==0 else cov/var
L223
L224     @staticmethod
L225     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L226                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L227         """
L228         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L229         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L230         """
L231         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L232         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L233         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L234         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L235         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L236
L237     @staticmethod
L238     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L239         """
L240         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L241         戻り値は降順ソート済み。
L242         """
L243         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L244         cnt, pen = {}, {}
L245         for t in order:
L246             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L247         return (s - pd.Series(pen)).sort_values(ascending=False)
L248
L249     @staticmethod
L250     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L251         """
L252         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L253         """
L254         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L255         if not hard:
L256             return list(eff.head(N).index)
L257         pick, used = [], {}
L258         for t in eff.index:
L259             s = sectors.get(t, "U")
L260             if used.get(s,0) < hard:
L261                 pick.append(t); used[s] = used.get(s,0) + 1
L262             if len(pick) == N: break
L263         return pick
L264
L265     @staticmethod
L266     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L267         """
L268         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L269         - px: 列=ticker（ベンチは含めない）
L270         - spx: ベンチマーク Series（px.index に整列）
L271         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L272         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L273         """
L274         import numpy as np, pandas as pd
L275         if px is None or px.empty:
L276             return pd.Series(dtype=int)
L277         px = px.dropna(how="all", axis=1)
L278         if win_days and win_days > 0:
L279             px = px.tail(win_days)
L280         if px.empty:
L281             return pd.Series(dtype=int)
L282         spx = spx.reindex(px.index).ffill()
L283
L284         ma50  = px.rolling(50).mean()
L285         ma150 = px.rolling(150).mean()
L286         ma200 = px.rolling(200).mean()
L287
L288         tt = (px > ma150)
L289         tt &= (px > ma200)
L290         tt &= (ma150 > ma200)
L291         tt &= (ma200 - ma200.shift(21) > 0)
L292         tt &= (ma50  > ma150)
L293         tt &= (ma50  > ma200)
L294         tt &= (px    > ma50)
L295
L296         lo252 = px.rolling(252).min()
L297         hi252 = px.rolling(252).max()
L298         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L299         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L300
L301         r12  = px.divide(px.shift(252)).sub(1.0)
L302         br12 = spx.divide(spx.shift(252)).sub(1.0)
L303         r1   = px.divide(px.shift(22)).sub(1.0)
L304         br1  = spx.divide(spx.shift(22)).sub(1.0)
L305         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L306         tt &= (rs >= 0.10)
L307
L308         return tt.fillna(False).sum(axis=1).astype(int)
L309
L310     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L311     def aggregate_scores(self, ib: Any, cfg):
L312         if cfg is None:
L313             raise ValueError("cfg is required; pass factor.PipelineConfig")
L314         self._validate_ib_for_scorer(ib)
L315
L316         px, spx, tickers = ib.px, ib.spx, ib.tickers
L317         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L318
L319         df, missing_logs = pd.DataFrame(index=tickers), []
L320         for t in tickers:
L321             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L322             # --- 基本特徴 ---
L323             df.loc[t,'TR']   = self.trend(s)
L324             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L325             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L326             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L327             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L328
L329             # --- 配当（欠損補完含む） ---
L330             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L331             if div is None or pd.isna(div):
L332                 try:
L333                     divs = yf.Ticker(t).dividends
L334                     if divs is not None and not divs.empty:
L335                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L336                         if last_close and last_close>0: div = float(div_1y/last_close)
L337                 except Exception: pass
L338             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L339
L340             # --- FCF/EV ---
L341             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L342             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L343
L344             # --- モメンタム・ボラ関連 ---
L345             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L346             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L347             n = int(min(len(r), len(rm)))
L348
L349             DOWNSIDE_DEV = np.nan
L350             if n>=60:
L351                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L352                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L353             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L354
L355             MDD_1Y = np.nan
L356             try:
L357                 w = s.iloc[-min(len(s),252):].dropna()
L358                 if len(w)>=30:
L359                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L360             except Exception: pass
L361             df.loc[t,'MDD_1Y'] = MDD_1Y
L362
L363             RESID_VOL = np.nan
L364             if n>=120:
L365                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L366                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L367                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L368                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L369             df.loc[t,'RESID_VOL'] = RESID_VOL
L370
L371             DOWN_OUTPERF = np.nan
L372             if n>=60:
L373                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L374                 if mask.sum()>=10:
L375                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L376                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L377             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L378
L379             # --- 長期移動平均/位置 ---
L380             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L381             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L382
L383             # --- 配当の詳細系 ---
L384             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L385             try:
L386                 divs = yf.Ticker(t).dividends.dropna()
L387                 if not divs.empty:
L388                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L389                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L390                     ann = divs.groupby(divs.index.year).sum()
L391                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L392                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L393                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L394                 so = d.get('sharesOutstanding',None)
L395                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L396                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L397             except Exception: pass
L398             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L399
L400             # --- 財務安定性 ---
L401             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L402
L403             # --- EPS 変動 ---
L404             EPS_VAR_8Q = np.nan
L405             try:
L406                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L407                 if qe is not None and not qe.empty and so:
L408                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L409                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(dd
```