```text
last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L436                         if last_close and last_close>0: div = float(div_1y/last_close)
L437                 except Exception: pass
L438             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L439
L440             # --- FCF/EV ---
L441             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L442             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L443
L444             # --- モメンタム・ボラ関連 ---
L445             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L446             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L447             n = int(min(len(r), len(rm)))
L448
L449             DOWNSIDE_DEV = np.nan
L450             if n>=60:
L451                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L452                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L453             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L454
L455             MDD_1Y = np.nan
L456             try:
L457                 w = s.iloc[-min(len(s),252):].dropna()
L458                 if len(w)>=30:
L459                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L460             except Exception: pass
L461             df.loc[t,'MDD_1Y'] = MDD_1Y
L462
L463             RESID_VOL = np.nan
L464             if n>=120:
L465                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L466                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L467                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L468                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L469             df.loc[t,'RESID_VOL'] = RESID_VOL
L470
L471             DOWN_OUTPERF = np.nan
L472             if n>=60:
L473                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L474                 if mask.sum()>=10:
L475                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L476                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L477             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L478
L479             # --- 長期移動平均/位置 ---
L480             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L481             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L482
L483             # --- 配当の詳細系 ---
L484             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L485             try:
L486                 divs = yf.Ticker(t).dividends.dropna()
L487                 if not divs.empty:
L488                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L489                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L490                     ann = divs.groupby(divs.index.year).sum()
L491                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L492                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L493                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L494                 so = d.get('sharesOutstanding',None)
L495                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L496                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L497             except Exception: pass
L498             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L499
L500             # --- 財務安定性 ---
L501             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L502
L503             # --- EPS 変動 ---
L504             EPS_VAR_8Q = np.nan
L505             try:
L506                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L507                 if qe is not None and not qe.empty and so:
L508                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L509                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L510             except Exception: pass
L511             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L512
L513             # --- サイズ/流動性 ---
L514             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L515             try:
L516                 vol_series = ib.data['Volume'][t].dropna()
L517                 if len(vol_series)>=5 and len(s)==len(vol_series):
L518                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L519             except Exception: pass
L520             df.loc[t,'ADV60_USD'] = adv60
L521
L522             # --- 売上/利益の加速度等 ---
L523             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L524             REV_YOY = REV_ANNUAL_STREAK = np.nan
L525             EPS_YOY = np.nan
L526             try:
L527                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L528                 rev_series = None
L529                 if qe is not None and not qe.empty and 'Revenue' in qe.columns:
L530                     rev_series = pd.to_numeric(qe['Revenue'], errors='coerce')
L531                 else:
L532                     qf = tickers_bulk.tickers[t].quarterly_financials
L533                     if qf is not None and not qf.empty and 'Total Revenue' in qf.index:
L534                         rev_series = pd.to_numeric(qf.loc['Total Revenue'], errors='coerce')
L535                         try:
L536                             rev_series = rev_series.sort_index()
L537                         except Exception:
L538                             pass
L539                     if rev_series is None or rev_series.dropna().empty:
L540                         rev_series = _fetch_revenue_quarterly_via_finnhub(t)
L541
L542                 if rev_series is not None and rev_series.dropna().shape[0] >= 2:
L543                     r = rev_series.dropna().astype(float)
L544                     yoy = r.pct_change(4).replace([np.inf, -np.inf], np.nan)
L545                     yoy_valid = yoy.dropna()
L546                     if not yoy_valid.empty:
L547                         REV_Q_YOY = float(yoy_valid.iloc[-1])
L548                         if len(yoy_valid) >= 2:
L549                             yoy_delta = yoy_valid.diff().dropna()
L550                             if not yoy_delta.empty:
L551                                 REV_YOY_ACC = float(yoy_delta.iloc[-1])
L552                             tail_len = min(4, len(yoy_valid))
L553                             tail = yoy_valid.iloc[-tail_len:]
L554                             if len(tail) >= 2:
L555                                 REV_YOY_VAR = float(tail.std(ddof=1))
L556                     if len(r) >= 8:
L557                         annual = r.rolling(4).sum().dropna()
L558                         if len(annual) >= 2:
L559                             prev = annual.iloc[-2]
L560                             if prev not in (None, 0) and not pd.isna(prev):
L561                                 REV_YOY = float((annual.iloc[-1] - prev) / prev)
L562                             streak_series = (annual.diff() > 0).astype(int).rolling(4, min_periods=1).sum()
L563                             if not streak_series.empty and pd.notna(streak_series.iloc[-1]):
L564                                 REV_ANNUAL_STREAK = int(streak_series.iloc[-1])
L565                 if qe is not None and not getattr(qe, "empty", True) and 'Earnings' in qe.columns and so:
L566                     eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L567                     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L568                         EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L569                         try:
L570                             g_eps = eps_series.groupby(eps_series.index.year)
L571                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L572                             ann_eps = ann_eps[cnt_eps >= 4]
L573                             if len(ann_eps) >= 2:
L574                                 eps_yoy = ann_eps.pct_change().dropna()
L575                                 if not eps_yoy.empty:
L576                                     EPS_YOY = float(eps_yoy.iloc[-1])
L577                         except Exception:
L578                             pass
L579             except Exception: pass
L580             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L581             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L582             df.loc[t,'REV_YOY'] = REV_YOY
L583             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L584             df.loc[t,'EPS_YOY'] = EPS_YOY
L585
L586             # --- Rule of 40 や周辺 ---
L587             total_rev_ttm = d.get('totalRevenue',np.nan)
L588             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L589             df.loc[t,'FCF_MGN'] = FCF_MGN
L590             rule40 = np.nan
L591             try:
L592                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L593             except Exception: pass
L594             df.loc[t,'RULE40'] = rule40
L595
L596             # --- トレンド補助 ---
L597             sma50  = s.rolling(50).mean()
L598             sma150 = s.rolling(150).mean()
L599             sma200 = s.rolling(200).mean()
L600             p = _safe_last(s)
L601
L602             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L603                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L604             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L605                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L606
L607             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L608             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L609
L610             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L611             if len(sma200.dropna()) >= 21:
L612                 cur200 = _safe_last(sma200)
L613                 old2001 = float(sma200.iloc[-21])
L614                 if old2001:
L615                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L616
L617             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L618             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L619             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L620             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L621             if len(sma200.dropna())>=105:
L622                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L623                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L624             # NEW: 200日線が連続で上向きの「日数」
L625             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L626             try:
L627                 s200 = sma200.dropna()
L628                 if len(s200) >= 2:
L629                     diff200 = s200.diff()
L630                     up = 0
L631                     for v in diff200.iloc[::-1]:
L632                         if pd.isna(v) or v <= 0:
L633                             break
L634                         up += 1
L635                
```