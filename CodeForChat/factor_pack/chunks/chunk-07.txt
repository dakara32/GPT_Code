```text
%s",
L1373                 debug_mode, True
L1374             )
L1375
L1376     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1377     def notify_slack(self):
L1378         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1379
L1380         if not SLACK_WEBHOOK_URL:
L1381             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1382             return
L1383
L1384         def _filter_suffix_from(spec: dict, group: str) -> str:
L1385             g = spec.get(group, {})
L1386             parts = [str(m) for m in g.get("pre_mask", [])]
L1387             for k, v in (g.get("pre_filter", {}) or {}).items():
L1388                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L1389                 name = {"beta": "β"}.get(base, base)
L1390                 try:
L1391                     val = f"{float(v):g}"
L1392                 except Exception:
L1393                     val = str(v)
L1394                 parts.append(f"{name}{op}{val}")
L1395             return "" if not parts else " / filter:" + " & ".join(parts)
L1396
L1397         def _inject_filter_suffix(title: str, group: str) -> str:
L1398             suf = _filter_suffix_from(FILTER_SPEC, group)
L1399             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1400
L1401         def _blk(title, tbl, fmt=None, drop=()):
L1402             if tbl is None or getattr(tbl, 'empty', False):
L1403                 return f"{title}\n(選定なし)\n"
L1404             if drop and hasattr(tbl, 'columns'):
L1405                 keep = [c for c in tbl.columns if c not in drop]
L1406                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1407             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1408
L1409         message = "📈 ファクター分散最適化の結果\n"
L1410         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1411         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1412         message += "Changes\n" + ("(変更なし)\n" if self._changes_empty else f"```{self._changes_text}```\n")
L1413         message += "Performance Comparison:\n```" + self._performance_text + "```"
L1414
L1415         try:
L1416             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1417             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1418             if r is not None:
L1419                 r.raise_for_status()
L1420         except Exception as e:
L1421             print(f"[ERR] main_post_failed: {e}")
L1422
L1423 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1424
L1425 def io_build_input_bundle() -> InputBundle:
L1426     """
L1427     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1428     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1429     """
L1430     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1431     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"], missing_logs=state["missing_logs"])
L1432
L1433 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1434               n_target: int) -> tuple[list, float, float, float]:
L1435     """
L1436     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1437     戻り値：(pick, avg_res_corr, sum_score, objective)
L1438     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1439     """
L1440     sc.cfg = cfg
L1441
L1442     if hasattr(sc, "score_build_features"):
L1443         feat = sc.score_build_features(inb)
L1444         if not hasattr(sc, "_feat_logged"):
L1445             _tlog("features built (scorer)")
L1446             sc._feat_logged = True
L1447         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1448     else:
L1449         if not hasattr(sc, "_feat"):
L1450             fb = sc.aggregate_scores(inb, cfg)
L1451             sc._feat = fb
L1452         else:
L1453             fb = sc._feat
L1454         if not hasattr(sc, "_feat_logged"):
L1455             _tlog("features built (scorer)")
L1456             sc._feat_logged = True
L1457         agg = fb.g_score if group == "G" else fb.d_score_all
L1458         if group == "D" and hasattr(fb, "df"):
L1459             beta_raw = fb.df['BETA'].astype(float)
L1460             if D_BETA_MODE == "z":
L1461                 beta_for_filter = _zscore_series(beta_raw)
L1462             else:
L1463                 beta_for_filter = beta_raw
L1464
L1465             beta_mask = (beta_for_filter <= D_BETA_CUTOFF).reindex(agg.index, fill_value=False)
L1466             agg = agg[beta_mask]
L1467
L1468             if isinstance(agg, pd.Series):
L1469                 _min = agg.min(skipna=True)
L1470                 floor = (0.0 if not np.isfinite(_min) else float(_min)) - 1e6
L1471                 agg = agg.fillna(floor)
L1472
L1473             try:
L1474                 logger.info(
L1475                     "D-filter mode=%s cutoff=%s | pass=%d raw[mean=%.3f std=%.3f] z[mean≈0 std≈1]",
L1476                     D_BETA_MODE,
L1477                     D_BETA_CUTOFF,
L1478                     int(beta_mask.sum()),
L1479                     float(beta_raw.mean(skipna=True)),
L1480                     float(beta_raw.std(skipna=True, ddof=0)),
L1481                 )
L1482             except Exception:
L1483                 pass
L1484
L1485     if hasattr(sc, "filter_candidates"):
L1486         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1487
L1488     if isinstance(agg, pd.Series):
L1489         agg = _as_numeric_series(agg)
L1490
L1491     selector = Selector()
L1492     if hasattr(sc, "select_diversified"):
L1493         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1494             selector=selector, prev_tickers=None,
L1495             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1496             cross_mu=cfg.drrs.cross_mu_gd)
L1497     else:
L1498         if group == "G":
L1499             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1500             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1501                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1502                 lam=cfg.drrs.G.get("lam", 0.68),
L1503                 lookback=cfg.drrs.G.get("lookback", 252),
L1504                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1505         else:
L1506             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1507             g_fixed = getattr(sc, "_top_G", None)
L1508             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1509                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1510                 lam=cfg.drrs.D.get("lam", 0.85),
L1511                 lookback=cfg.drrs.D.get("lookback", 504),
L1512                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1513                 mu=cfg.drrs.cross_mu_gd)
L1514         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1515         sum_sc = res["sum_score"]; obj = res["objective"]
L1516         if group == "D":
L1517             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1518             _tlog("selection finalized (G/D)")
L1519     try:
L1520         inc = [t for t in exist if t in agg.index]
L1521         pick = _sticky_keep_current(
L1522             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1523             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1524         )
L1525     except Exception as _e:
L1526         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1527     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1528     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1529     try:
L1530         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1531         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1532         setattr(sc, f"_near_{group}", near10)
L1533         setattr(sc, f"_agg_{group}", agg)
L1534     except Exception:
L1535         pass
L1536
L1537     if group == "D":
L1538         _tlog("save done")
L1539     if group == "G":
L1540         sc._top_G = pick
L1541     return pick, avg_r, sum_sc, obj
L1542
L1543 def run_pipeline() -> SelectionBundle:
L1544     """
L1545     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1546     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1547     """
L1548     inb = io_build_input_bundle()
L1549     cfg = PipelineConfig(
L1550         weights=WeightsConfig(g=g_weights, d=D_weights),
L1551         drrs=DRRSParams(
L1552             corrM=corrM, shrink=DRRS_SHRINK,
L1553             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1554         ),
L1555         price_max=CAND_PRICE_MAX,
L1556         debug_mode=debug_mode
L1557     )
L1558     sc = Scorer()
L1559     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1560     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1561     alpha = Scorer.spx_to_alpha(inb.spx)
L1562     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1563     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1564     sc._top_G = top_G
L1565     try:
L1566         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1567         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1568     except Exception:
L1569         pass
L1570     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1571     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1572     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1573     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1574     fb = getattr(sc, "_feat", None)
L1575     out = Output()
L1576     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1577     try:
L1578         out._sc = sc
L1579     except Exception:
L1580         pass
L1581     if hasattr(sc, "_feat"):
L1582         try:
L1583             fb = sc._feat
L1584             out.display_results(
L1585                 exist=exist,
L1586                 bench=bench,
L1587                 df_raw=fb.df,
L1588                 df_z=fb.df_z,
L1589                 g_score=fb.g_score,
L1590                 d_score_all=fb.d_score_all,
L1591                 init_G=top_G,
L1592                 init_D=top_D,
L1593                 top_G=top_G,
L1594                 top_D=top_D,
L1595                 df_full_z=getattr(fb, "df_full_z", None),
L1596                 prev_G=getattr(sc, "_prev_G", exist),
L1597                 prev_D=getattr(sc, "_prev_D", exist),
L1598             )
L1599         except Exception:
L1600             pass
L1601     out.notify_slack()
L1602     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1603               "sum_score": sumG, "objective": objG},
L1604         resD={"tickers": top_D, "avg_res_corr": avgD,
L1605               "sum_score": sumD, "objective": objD},
L1606         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1607
L1608     # [MOD] 選定確定後に current_tickers.csv の bucket を「全部紐づけ」で最新化
L1609     try:
L1610         # 追加対象（候補群も反映）: resG['tickers'], resD['tickers'], init_G, init_D
L1611         extra_G, extra_D = [], []
L1612         try:
L1613             extra_G += list((sb.resG or {}).get("tickers", []) or [])
L1614             extra_D += list((sb.resD or {}).get("tickers", []) or [])
L1615         except Exception:
L1616             pass
L1617      
```