```text
e (k, "="))
L1370                 name = {"beta": "β"}.get(base, base)
L1371                 try:
L1372                     val = f"{float(v):g}"
L1373                 except Exception:
L1374                     val = str(v)
L1375                 parts.append(f"{name}{op}{val}")
L1376             return "" if not parts else " / filter:" + " & ".join(parts)
L1377
L1378         def _inject_filter_suffix(title: str, group: str) -> str:
L1379             suf = _filter_suffix_from(FILTER_SPEC, group)
L1380             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1381
L1382         def _blk(title, tbl, fmt=None, drop=()):
L1383             if tbl is None or getattr(tbl, 'empty', False):
L1384                 return f"{title}\n(選定なし)\n"
L1385             if drop and hasattr(tbl, 'columns'):
L1386                 keep = [c for c in tbl.columns if c not in drop]
L1387                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1388             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1389
L1390         message = "📈 ファクター分散最適化の結果\n"
L1391         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1392         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1393         message += "Changes\n" + ("(変更なし)\n" if self._changes_empty else f"```{self._changes_text}```\n")
L1394         message += "Performance Comparison:\n```" + self._performance_text + "```"
L1395
L1396         try:
L1397             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1398             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1399             if r is not None:
L1400                 r.raise_for_status()
L1401         except Exception as e:
L1402             print(f"[ERR] main_post_failed: {e}")
L1403
L1404 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1405
L1406 def io_build_input_bundle() -> InputBundle:
L1407     """
L1408     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1409     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1410     """
L1411     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1412     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"], missing_logs=state["missing_logs"])
L1413
L1414 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1415               n_target: int) -> tuple[list, float, float, float]:
L1416     """
L1417     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1418     戻り値：(pick, avg_res_corr, sum_score, objective)
L1419     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1420     """
L1421     sc.cfg = cfg
L1422
L1423     if hasattr(sc, "score_build_features"):
L1424         feat = sc.score_build_features(inb)
L1425         if not hasattr(sc, "_feat_logged"):
L1426             _tlog("features built (scorer)")
L1427             sc._feat_logged = True
L1428         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1429     else:
L1430         if not hasattr(sc, "_feat"):
L1431             fb = sc.aggregate_scores(inb, cfg)
L1432             sc._feat = fb
L1433         else:
L1434             fb = sc._feat
L1435         if not hasattr(sc, "_feat_logged"):
L1436             _tlog("features built (scorer)")
L1437             sc._feat_logged = True
L1438         agg = fb.g_score if group == "G" else fb.d_score_all
L1439         if group == "D" and hasattr(fb, "df"):
L1440             beta_raw = fb.df['BETA'].astype(float)
L1441             if D_BETA_MODE == "z":
L1442                 beta_for_filter = _zscore_series(beta_raw)
L1443             else:
L1444                 beta_for_filter = beta_raw
L1445
L1446             beta_mask = (beta_for_filter <= D_BETA_CUTOFF).reindex(agg.index, fill_value=False)
L1447             agg = agg[beta_mask]
L1448
L1449             if isinstance(agg, pd.Series):
L1450                 _min = agg.min(skipna=True)
L1451                 floor = (0.0 if not np.isfinite(_min) else float(_min)) - 1e6
L1452                 agg = agg.fillna(floor)
L1453
L1454             try:
L1455                 logger.info(
L1456                     "D-filter mode=%s cutoff=%s | pass=%d raw[mean=%.3f std=%.3f] z[mean≈0 std≈1]",
L1457                     D_BETA_MODE,
L1458                     D_BETA_CUTOFF,
L1459                     int(beta_mask.sum()),
L1460                     float(beta_raw.mean(skipna=True)),
L1461                     float(beta_raw.std(skipna=True, ddof=0)),
L1462                 )
L1463             except Exception:
L1464                 pass
L1465
L1466     if hasattr(sc, "filter_candidates"):
L1467         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1468
L1469     if isinstance(agg, pd.Series):
L1470         agg = _as_numeric_series(agg)
L1471
L1472     selector = Selector()
L1473     if hasattr(sc, "select_diversified"):
L1474         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1475             selector=selector, prev_tickers=None,
L1476             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1477             cross_mu=cfg.drrs.cross_mu_gd)
L1478     else:
L1479         if group == "G":
L1480             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1481             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1482                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1483                 lam=cfg.drrs.G.get("lam", 0.68),
L1484                 lookback=cfg.drrs.G.get("lookback", 252),
L1485                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1486         else:
L1487             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1488             g_fixed = getattr(sc, "_top_G", None)
L1489             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1490                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1491                 lam=cfg.drrs.D.get("lam", 0.85),
L1492                 lookback=cfg.drrs.D.get("lookback", 504),
L1493                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1494                 mu=cfg.drrs.cross_mu_gd)
L1495         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1496         sum_sc = res["sum_score"]; obj = res["objective"]
L1497         if group == "D":
L1498             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1499             _tlog("selection finalized (G/D)")
L1500     try:
L1501         inc = [t for t in exist if t in agg.index]
L1502         pick = _sticky_keep_current(
L1503             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1504             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1505         )
L1506     except Exception as _e:
L1507         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1508     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1509     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1510     try:
L1511         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1512         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1513         setattr(sc, f"_near_{group}", near10)
L1514         setattr(sc, f"_agg_{group}", agg)
L1515     except Exception:
L1516         pass
L1517
L1518     if group == "D":
L1519         _tlog("save done")
L1520     if group == "G":
L1521         sc._top_G = pick
L1522     return pick, avg_r, sum_sc, obj
L1523
L1524 def run_pipeline() -> SelectionBundle:
L1525     """
L1526     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1527     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1528     """
L1529     inb = io_build_input_bundle()
L1530     cfg = PipelineConfig(
L1531         weights=WeightsConfig(g=g_weights, d=D_weights),
L1532         drrs=DRRSParams(
L1533             corrM=corrM, shrink=DRRS_SHRINK,
L1534             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1535         ),
L1536         price_max=CAND_PRICE_MAX,
L1537         debug_mode=debug_mode
L1538     )
L1539     sc = Scorer()
L1540     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1541     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1542     alpha = Scorer.spx_to_alpha(inb.spx)
L1543     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1544     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1545     sc._top_G = top_G
L1546     try:
L1547         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1548         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1549     except Exception:
L1550         pass
L1551     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1552     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1553     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1554     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1555     fb = getattr(sc, "_feat", None)
L1556     out = Output()
L1557     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1558     try:
L1559         out._sc = sc
L1560     except Exception:
L1561         pass
L1562     if hasattr(sc, "_feat"):
L1563         try:
L1564             fb = sc._feat
L1565             out.display_results(
L1566                 exist=exist,
L1567                 bench=bench,
L1568                 df_raw=fb.df,
L1569                 df_z=fb.df_z,
L1570                 g_score=fb.g_score,
L1571                 d_score_all=fb.d_score_all,
L1572                 init_G=top_G,
L1573                 init_D=top_D,
L1574                 top_G=top_G,
L1575                 top_D=top_D,
L1576                 df_full_z=getattr(fb, "df_full_z", None),
L1577                 prev_G=getattr(sc, "_prev_G", exist),
L1578                 prev_D=getattr(sc, "_prev_D", exist),
L1579             )
L1580         except Exception:
L1581             pass
L1582     out.notify_slack()
L1583     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1584               "sum_score": sumG, "objective": objG},
L1585         resD={"tickers": top_D, "avg_res_corr": avgD,
L1586               "sum_score": sumD, "objective": objD},
L1587         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1588
L1589     # [ADD] 選定確定後に current_tickers.csv の bucket を最新化
L1590     try:
L1591         _update_bucket_by_selection("current_tickers.csv", sb.top_G, sb.top_D)
L1592     except Exception as e:
L1593         logging.warning("bucket update failed: %s", e)
L1594
L1595     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1596     try:
L1597         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1598               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1599               .sort_values("G_plus_D")
L1600               .head(10)
L1601               .round(3))
L1602         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1603         _post_slack({"text": f"```{low_msg}```"})
L1604     except Exception as _e:
L1605         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1606
L1607     return sb
L1608
L1609
L1610 # --- Slack / warning helpers (relocated without logic changes) ---
L1611
L1612
L1613 def _post_slack(payload: dict):
L1614     url = os.getenv("SLACK_WEBHOOK_URL")
L1615     if not url:
L1616         print("⚠️ SLACK_WEBHOOK_URL 未設定")

```