```text
      r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L354             n = int(min(len(r), len(rm)))
L355
L356             DOWNSIDE_DEV = np.nan
L357             if n>=60:
L358                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L359                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L360             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L361
L362             MDD_1Y = np.nan
L363             try:
L364                 w = s.iloc[-min(len(s),252):].dropna()
L365                 if len(w)>=30:
L366                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L367             except Exception: pass
L368             df.loc[t,'MDD_1Y'] = MDD_1Y
L369
L370             RESID_VOL = np.nan
L371             if n>=120:
L372                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L373                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L374                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L375                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L376             df.loc[t,'RESID_VOL'] = RESID_VOL
L377
L378             DOWN_OUTPERF = np.nan
L379             if n>=60:
L380                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L381                 if mask.sum()>=10:
L382                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L383                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L384             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L385
L386             # --- 長期移動平均/位置 ---
L387             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L388             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L389
L390             # --- 配当の詳細系 ---
L391             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L392             try:
L393                 divs = yf.Ticker(t).dividends.dropna()
L394                 if not divs.empty:
L395                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L396                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L397                     ann = divs.groupby(divs.index.year).sum()
L398                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L399                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L400                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L401                 so = d.get('sharesOutstanding',None)
L402                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L403                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L404             except Exception: pass
L405             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L406
L407             # --- 財務安定性 ---
L408             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L409
L410             # --- EPS 変動 ---
L411             EPS_VAR_8Q = np.nan
L412             try:
L413                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L414                 if qe is not None and not qe.empty and so:
L415                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L416                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L417             except Exception: pass
L418             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L419
L420             # --- サイズ/流動性 ---
L421             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L422             try:
L423                 vol_series = ib.data['Volume'][t].dropna()
L424                 if len(vol_series)>=5 and len(s)==len(vol_series):
L425                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L426             except Exception: pass
L427             df.loc[t,'ADV60_USD'] = adv60
L428
L429             # --- 売上/利益の加速度等 ---
L430             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L431             REV_ANNUAL_STREAK = np.nan
L432             try:
L433                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L434                 if qe is not None and not qe.empty:
L435                     if 'Revenue' in qe.columns:
L436                         rev = qe['Revenue'].dropna().astype(float)
L437                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L438                         if len(rev)>=6:
L439                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L440                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L441                         yoy_list=[]
L442                         for k in range(1,5):
L443                             if len(rev)>=4+k:
L444                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L445                                 if pd.notna(y): yoy_list.append(y)
L446                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L447                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L448                         try:
L449                             g = rev.groupby(rev.index.year)
L450                             ann_sum, cnt = g.sum(), g.count()
L451                             ann_sum = ann_sum[cnt >= 4]
L452                             if len(ann_sum) >= 3:
L453                                 yoy = ann_sum.pct_change().dropna()
L454                                 streak = 0
L455                                 for v in yoy.iloc[::-1]:
L456                                     if pd.isna(v) or v <= 0:
L457                                         break
L458                                     streak += 1
L459                                 REV_ANNUAL_STREAK = float(streak)
L460                         except Exception:
L461                             pass
L462                     if 'Earnings' in qe.columns and so:
L463                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L464                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L465                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L466             except Exception: pass
L467             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'], df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_Q_YOY, EPS_Q_YOY, REV_YOY_ACC, REV_YOY_VAR
L468             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L469
L470             # --- Rule of 40 や周辺 ---
L471             total_rev_ttm = d.get('totalRevenue',np.nan)
L472             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L473             df.loc[t,'FCF_MGN'] = FCF_MGN
L474             rule40 = np.nan
L475             try:
L476                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L477             except Exception: pass
L478             df.loc[t,'RULE40'] = rule40
L479
L480             # --- トレンド補助 ---
L481             sma50  = s.rolling(50).mean()
L482             sma150 = s.rolling(150).mean()
L483             sma200 = s.rolling(200).mean()
L484             p = _safe_last(s)
L485
L486             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L487                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L488             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L489                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L490
L491             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L492             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L493
L494             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L495             if len(sma200.dropna()) >= 21:
L496                 cur200 = _safe_last(sma200)
L497                 old2001 = float(sma200.iloc[-21])
L498                 if old2001:
L499                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L500
L501             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L502             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L503             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L504             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L505             if len(sma200.dropna())>=105:
L506                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L507                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L508             # NEW: 200日線が連続で上向きの「日数」
L509             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L510             try:
L511                 s200 = sma200.dropna()
L512                 if len(s200) >= 2:
L513                     diff200 = s200.diff()
L514                     up = 0
L515                     for v in diff200.iloc[::-1]:
L516                         if pd.isna(v) or v <= 0:
L517                             break
L518                         up += 1
L519                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L520             except Exception:
L521                 pass
L522             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L523             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L524             if hi52 and hi52>0 and pd.notna(p):
L525                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L526             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L527             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L528
L529             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L530
L531             # --- 欠損メモ ---
L532             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L533             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L534             if need_finnhub:
L535                 fin_data = self.fetch_finnhub_metrics(t)
L536                 for col in need_finnhub:
L537                     val = fin_data.get(col)
L538                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L539             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L540                 if pd.isna(df.loc[t,col]):
L541                     if col=='DIV':
L542                         status = self.dividend_status(t)
L543                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L544                     else:
L545                         missing_logs.append({'Ticker':t,'Column':col})
L546
L547         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L548             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L549             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L550             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L551             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L552             c5 = (row.get('TR_str', np.nan) > 0)
L553     
```