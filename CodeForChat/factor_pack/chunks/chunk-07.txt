```text
x[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L459             # --- 基本特徴 ---
L460             df.loc[t,'TR']   = self.trend(s)
L461             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L462             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L463             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L464             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L465
L466             # --- 配当（欠損補完含む） ---
L467             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L468             if div is None or pd.isna(div):
L469                 try:
L470                     divs = yf.Ticker(t).dividends
L471                     if divs is not None and not divs.empty:
L472                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L473                         if last_close and last_close>0: div = float(div_1y/last_close)
L474                 except Exception: pass
L475             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L476
L477             # --- FCF/EV ---
L478             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L479             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L480
L481             # --- モメンタム・ボラ関連 ---
L482             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L483             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L484             n = int(min(len(r), len(rm)))
L485
L486             DOWNSIDE_DEV = np.nan
L487             if n>=60:
L488                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L489                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L490             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L491
L492             MDD_1Y = np.nan
L493             try:
L494                 w = s.iloc[-min(len(s),252):].dropna()
L495                 if len(w)>=30:
L496                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L497             except Exception: pass
L498             df.loc[t,'MDD_1Y'] = MDD_1Y
L499
L500             RESID_VOL = np.nan
L501             if n>=120:
L502                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L503                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L504                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L505                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L506             df.loc[t,'RESID_VOL'] = RESID_VOL
L507
L508             DOWN_OUTPERF = np.nan
L509             if n>=60:
L510                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L511                 if mask.sum()>=10:
L512                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L513                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L514             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L515
L516             # --- 長期移動平均/位置 ---
L517             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L518             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L519
L520             # --- 配当の詳細系 ---
L521             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L522             try:
L523                 divs = yf.Ticker(t).dividends.dropna()
L524                 if not divs.empty:
L525                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L526                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L527                     ann = divs.groupby(divs.index.year).sum()
L528                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L529                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L530                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L531                 so = d.get('sharesOutstanding',None)
L532                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L533                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L534             except Exception: pass
L535             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L536
L537             # --- 財務安定性 ---
L538             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L539
L540             # --- EPS 変動 ---
L541             EPS_VAR_8Q = np.nan
L542             try:
L543                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L544                 if qe is not None and not qe.empty and so:
L545                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L546                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L547             except Exception: pass
L548             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L549
L550             # --- サイズ/流動性 ---
L551             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L552             try:
L553                 vol_series = ib.data['Volume'][t].dropna()
L554                 if len(vol_series)>=5 and len(s)==len(vol_series):
L555                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L556             except Exception: pass
L557             df.loc[t,'ADV60_USD'] = adv60
L558
L559             # --- 売上/利益の加速度等 ---
L560             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L561             REV_YOY = REV_ANNUAL_STREAK = np.nan
L562             EPS_YOY = np.nan
L563             try:
L564                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L565                 rev_series = None
L566                 if qe is not None and not qe.empty and 'Revenue' in qe.columns:
L567                     rev_series = pd.to_numeric(qe['Revenue'], errors='coerce')
L568                 else:
L569                     qf = tickers_bulk.tickers[t].quarterly_financials
L570                     if qf is not None and not qf.empty and 'Total Revenue' in qf.index:
L571                         rev_series = pd.to_numeric(qf.loc['Total Revenue'], errors='coerce')
L572                         try:
L573                             rev_series = rev_series.sort_index()
L574                         except Exception:
L575                             pass
L576                     if rev_series is None or getattr(
L577                         rev_series, "dropna", lambda: pd.Series(dtype=float)
L578                     )().empty:
L579                         rev_series = _fetch_revenue_quarterly_via_finnhub(t)
L580
L581                 if rev_series is not None and rev_series.dropna().shape[0] >= 2:
L582                     r = rev_series.dropna().astype(float)
L583                     yoy = r.pct_change(4).replace([np.inf, -np.inf], np.nan)
L584                     yoy_valid = yoy.dropna()
L585                     if not yoy_valid.empty:
L586                         REV_Q_YOY = float(yoy_valid.iloc[-1])
L587                         if len(yoy_valid) >= 2:
L588                             yoy_delta = yoy_valid.diff().dropna()
L589                             if not yoy_delta.empty:
L590                                 REV_YOY_ACC = float(yoy_delta.iloc[-1])
L591                             tail_len = min(4, len(yoy_valid))
L592                             tail = yoy_valid.iloc[-tail_len:]
L593                             if len(tail) >= 2:
L594                                 REV_YOY_VAR = float(tail.std(ddof=1))
L595                     if len(r) >= 8:
L596                         annual = r.rolling(4).sum().dropna()
L597                         if len(annual) >= 2:
L598                             prev = annual.iloc[-2]
L599                             if prev not in (None, 0) and not pd.isna(prev):
L600                                 REV_YOY = float((annual.iloc[-1] - prev) / prev)
L601                             streak_series = (annual.diff() > 0).astype(int).rolling(4, min_periods=1).sum()
L602                             if not streak_series.empty and pd.notna(streak_series.iloc[-1]):
L603                                 REV_ANNUAL_STREAK = int(streak_series.iloc[-1])
L604                 if qe is not None and not getattr(qe, "empty", True) and 'Earnings' in qe.columns and so:
L605                     eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L606                     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L607                         EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L608                         try:
L609                             g_eps = eps_series.groupby(eps_series.index.year)
L610                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L611                             ann_eps = ann_eps[cnt_eps >= 4]
L612                             if len(ann_eps) >= 2:
L613                                 eps_yoy = ann_eps.pct_change().dropna()
L614                                 if not eps_yoy.empty:
L615                                     EPS_YOY = float(eps_yoy.iloc[-1])
L616                         except Exception:
L617                             pass
L618             except Exception: pass
L619             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L620             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L621             df.loc[t,'REV_YOY'] = REV_YOY
L622             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L623             df.loc[t,'EPS_YOY'] = EPS_YOY
L624
L625             # --- Rule of 40 や周辺 ---
L626             total_rev_ttm = d.get('totalRevenue',np.nan)
L627             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L628             df.loc[t,'FCF_MGN'] = FCF_MGN
L629             rule40 = np.nan
L630             try:
L631                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L632             except Exception: pass
L633             df.loc[t,'RULE40'] = rule40
L634
L635             # --- トレンド補助 ---
L636             sma50  = s.rolling(50).mean()
L637             sma150 = s.rolling(150).mean()
L638             sma200 = s.rolling(200).mean()
L639             p = _safe_last(s)
L640
L641             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L642                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L643             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L644                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L645
L646             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L647             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L648
L649             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L650             if len(sma200.dropna()) >= 21:
L651                 cur200 = _safe_last(sma200)
L652                 old2001 = float(sma200.iloc[-21])
L653                 if old2001:
L654                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L655
L656             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L657             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L658             df
```