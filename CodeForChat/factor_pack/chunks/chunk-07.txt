```text
      ann = divs.groupby(divs.index.year).sum()
L426                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L427                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L428                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L429                 so = d.get('sharesOutstanding',None)
L430                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L431                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L432             except Exception: pass
L433             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L434
L435             # --- 財務安定性 ---
L436             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L437
L438             # --- EPS 変動 ---
L439             EPS_VAR_8Q = np.nan
L440             try:
L441                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L442                 if qe is not None and not qe.empty and so:
L443                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L444                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L445             except Exception: pass
L446             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L447
L448             # --- サイズ/流動性 ---
L449             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L450             try:
L451                 vol_series = ib.data['Volume'][t].dropna()
L452                 if len(vol_series)>=5 and len(s)==len(vol_series):
L453                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L454             except Exception: pass
L455             df.loc[t,'ADV60_USD'] = adv60
L456
L457             # --- 売上/利益の加速度等 ---
L458             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L459             REV_ANNUAL_STREAK = REV_YOY = np.nan
L460             EPS_YOY = np.nan
L461             try:
L462                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L463                 if qe is not None and not qe.empty:
L464                     if 'Revenue' in qe.columns:
L465                         rev = qe['Revenue'].dropna().astype(float)
L466                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L467                         if len(rev)>=6:
L468                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L469                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L470                         yoy_list=[]
L471                         for k in range(1,5):
L472                             if len(rev)>=4+k:
L473                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L474                                 if pd.notna(y): yoy_list.append(y)
L475                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L476                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L477                         try:
L478                             g = rev.groupby(rev.index.year)
L479                             ann_sum, cnt = g.sum(), g.count()
L480                             ann_sum = ann_sum[cnt >= 4]
L481                             if len(ann_sum) >= 2:
L482                                 yoy = ann_sum.pct_change().dropna()
L483                                 if not yoy.empty:
L484                                     REV_YOY = float(yoy.iloc[-1])
L485                                 streak = 0
L486                                 for v in yoy.iloc[::-1]:
L487                                     if pd.isna(v) or v <= 0:
L488                                         break
L489                                     streak += 1
L490                                 REV_ANNUAL_STREAK = float(streak)
L491                         except Exception:
L492                             pass
L493                     if 'Earnings' in qe.columns and so:
L494                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L495                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L496                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L497                         try:
L498                             g_eps = eps_series.groupby(eps_series.index.year)
L499                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L500                             ann_eps = ann_eps[cnt_eps >= 4]
L501                             if len(ann_eps) >= 2:
L502                                 eps_yoy = ann_eps.pct_change().dropna()
L503                                 if not eps_yoy.empty:
L504                                     EPS_YOY = float(eps_yoy.iloc[-1])
L505                         except Exception:
L506                             pass
L507             except Exception: pass
L508             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L509             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L510             df.loc[t,'REV_YOY'] = REV_YOY
L511             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L512             df.loc[t,'EPS_YOY'] = EPS_YOY
L513
L514             # --- Rule of 40 や周辺 ---
L515             total_rev_ttm = d.get('totalRevenue',np.nan)
L516             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L517             df.loc[t,'FCF_MGN'] = FCF_MGN
L518             rule40 = np.nan
L519             try:
L520                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L521             except Exception: pass
L522             df.loc[t,'RULE40'] = rule40
L523
L524             # --- トレンド補助 ---
L525             sma50  = s.rolling(50).mean()
L526             sma150 = s.rolling(150).mean()
L527             sma200 = s.rolling(200).mean()
L528             p = _safe_last(s)
L529
L530             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L531                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L532             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L533                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L534
L535             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L536             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L537
L538             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L539             if len(sma200.dropna()) >= 21:
L540                 cur200 = _safe_last(sma200)
L541                 old2001 = float(sma200.iloc[-21])
L542                 if old2001:
L543                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L544
L545             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L546             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L547             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L548             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L549             if len(sma200.dropna())>=105:
L550                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L551                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L552             # NEW: 200日線が連続で上向きの「日数」
L553             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L554             try:
L555                 s200 = sma200.dropna()
L556                 if len(s200) >= 2:
L557                     diff200 = s200.diff()
L558                     up = 0
L559                     for v in diff200.iloc[::-1]:
L560                         if pd.isna(v) or v <= 0:
L561                             break
L562                         up += 1
L563                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L564             except Exception:
L565                 pass
L566             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L567             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L568             if hi52 and hi52>0 and pd.notna(p):
L569                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L570             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L571             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L572
L573             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L574
L575             # --- 欠損メモ ---
L576             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L577             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L578             if need_finnhub:
L579                 fin_data = self.fetch_finnhub_metrics(t)
L580                 for col in need_finnhub:
L581                     val = fin_data.get(col)
L582                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L583             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L584                 if pd.isna(df.loc[t,col]):
L585                     if col=='DIV':
L586                         status = self.dividend_status(t)
L587                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L588                     else:
L589                         missing_logs.append({'Ticker':t,'Column':col})
L590
L591         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L592             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L593             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L594             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L595             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L596             c5 = (row.get('TR_str', np.nan) > 0)
L597             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L598             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L599             c8 = (row.get('RS', np.nan) >= 0.10)
L600             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L601
L602         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L603         assert 'trend_template' in df.columns
L604
L605         # === Z化と合成 ===
L606         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L607
L608         df_z = pd.DataFrame(index=df.index)
L609         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L610         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L611         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L612
L613         # === Growth深掘り系（欠損保持z + RAW併載） ===
L614         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L615         for col in grw_cols:
L616             if col in df.columns:
L617                 raw = pd.to_numeric(df[col],
```