```text
DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L376                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L377             except Exception: pass
L378             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L379
L380             # --- 財務安定性 ---
L381             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L382
L383             # --- EPS 変動 ---
L384             EPS_VAR_8Q = np.nan
L385             try:
L386                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L387                 if qe is not None and not qe.empty and so:
L388                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L389                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L390             except Exception: pass
L391             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L392
L393             # --- サイズ/流動性 ---
L394             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L395             try:
L396                 vol_series = ib.data['Volume'][t].dropna()
L397                 if len(vol_series)>=5 and len(s)==len(vol_series):
L398                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L399             except Exception: pass
L400             df.loc[t,'ADV60_USD'] = adv60
L401
L402             # --- 売上/利益の加速度等 ---
L403             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L404             REV_ANNUAL_STREAK = REV_YOY = np.nan
L405             EPS_YOY = np.nan
L406             try:
L407                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L408                 if qe is not None and not qe.empty:
L409                     if 'Revenue' in qe.columns:
L410                         rev = qe['Revenue'].dropna().astype(float)
L411                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L412                         if len(rev)>=6:
L413                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L414                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L415                         yoy_list=[]
L416                         for k in range(1,5):
L417                             if len(rev)>=4+k:
L418                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L419                                 if pd.notna(y): yoy_list.append(y)
L420                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L421                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L422                         try:
L423                             g = rev.groupby(rev.index.year)
L424                             ann_sum, cnt = g.sum(), g.count()
L425                             ann_sum = ann_sum[cnt >= 4]
L426                             if len(ann_sum) >= 2:
L427                                 yoy = ann_sum.pct_change().dropna()
L428                                 if not yoy.empty:
L429                                     REV_YOY = float(yoy.iloc[-1])
L430                                 streak = 0
L431                                 for v in yoy.iloc[::-1]:
L432                                     if pd.isna(v) or v <= 0:
L433                                         break
L434                                     streak += 1
L435                                 REV_ANNUAL_STREAK = float(streak)
L436                         except Exception:
L437                             pass
L438                     if 'Earnings' in qe.columns and so:
L439                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L440                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L441                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L442                         try:
L443                             g_eps = eps_series.groupby(eps_series.index.year)
L444                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L445                             ann_eps = ann_eps[cnt_eps >= 4]
L446                             if len(ann_eps) >= 2:
L447                                 eps_yoy = ann_eps.pct_change().dropna()
L448                                 if not eps_yoy.empty:
L449                                     EPS_YOY = float(eps_yoy.iloc[-1])
L450                         except Exception:
L451                             pass
L452             except Exception: pass
L453             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L454             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L455             df.loc[t,'REV_YOY'] = REV_YOY
L456             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L457             df.loc[t,'EPS_YOY'] = EPS_YOY
L458
L459             # --- Rule of 40 や周辺 ---
L460             total_rev_ttm = d.get('totalRevenue',np.nan)
L461             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L462             df.loc[t,'FCF_MGN'] = FCF_MGN
L463             rule40 = np.nan
L464             try:
L465                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L466             except Exception: pass
L467             df.loc[t,'RULE40'] = rule40
L468
L469             # --- トレンド補助 ---
L470             sma50  = s.rolling(50).mean()
L471             sma150 = s.rolling(150).mean()
L472             sma200 = s.rolling(200).mean()
L473             p = _safe_last(s)
L474
L475             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L476                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L477             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L478                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L479
L480             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L481             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L482
L483             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L484             if len(sma200.dropna()) >= 21:
L485                 cur200 = _safe_last(sma200)
L486                 old2001 = float(sma200.iloc[-21])
L487                 if old2001:
L488                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L489
L490             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L491             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L492             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L493             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L494             if len(sma200.dropna())>=105:
L495                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L496                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L497             # NEW: 200日線が連続で上向きの「日数」
L498             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L499             try:
L500                 s200 = sma200.dropna()
L501                 if len(s200) >= 2:
L502                     diff200 = s200.diff()
L503                     up = 0
L504                     for v in diff200.iloc[::-1]:
L505                         if pd.isna(v) or v <= 0:
L506                             break
L507                         up += 1
L508                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L509             except Exception:
L510                 pass
L511             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L512             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L513             if hi52 and hi52>0 and pd.notna(p):
L514                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L515             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L516             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L517
L518             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L519
L520             # --- 欠損メモ ---
L521             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L522             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L523             if need_finnhub:
L524                 fin_data = self.fetch_finnhub_metrics(t)
L525                 for col in need_finnhub:
L526                     val = fin_data.get(col)
L527                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L528             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L529                 if pd.isna(df.loc[t,col]):
L530                     if col=='DIV':
L531                         status = self.dividend_status(t)
L532                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L533                     else:
L534                         missing_logs.append({'Ticker':t,'Column':col})
L535
L536         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L537             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L538             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L539             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L540             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L541             c5 = (row.get('TR_str', np.nan) > 0)
L542             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L543             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L544             c8 = (row.get('RS', np.nan) >= 0.10)
L545             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L546
L547         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L548         assert 'trend_template' in df.columns
L549
L550         # === Z化と合成 ===
L551         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L552
L553         df_z = pd.DataFrame(index=df.index)
L554         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L555         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L556         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L557         # 主要YoY/加速度など…（既存）
L558         for col in ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']:
L559             df_z[col] = robust_z(df[col])
L560         # ★ TREND_SLOPE 系を df_z に必ず入れる（デバッグ・スコア双方で利用）
L561         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L562             if k in df.columns:
L563                 df_z[k] = robust_z(df[k])
L564         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L565
L566         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log
```