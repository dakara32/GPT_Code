```text
200)
L460         tt &= (ma150 > ma200)
L461         tt &= (ma200 - ma200.shift(21) > 0)
L462         tt &= (ma50  > ma150)
L463         tt &= (ma50  > ma200)
L464         tt &= (px    > ma50)
L465
L466         lo252 = px.rolling(252).min()
L467         hi252 = px.rolling(252).max()
L468         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L469         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L470
L471         r12  = px.divide(px.shift(252)).sub(1.0)
L472         br12 = spx.divide(spx.shift(252)).sub(1.0)
L473         r1   = px.divide(px.shift(22)).sub(1.0)
L474         br1  = spx.divide(spx.shift(22)).sub(1.0)
L475         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L476         tt &= (rs >= 0.10)
L477
L478         return tt.fillna(False).sum(axis=1).astype(int)
L479
L480     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L481     def aggregate_scores(self, ib: Any, cfg):
L482         if cfg is None:
L483             raise ValueError("cfg is required; pass factor.PipelineConfig")
L484         self._validate_ib_for_scorer(ib)
L485
L486         px, spx, tickers = ib.px, ib.spx, ib.tickers
L487         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L488
L489         debug_mode = bool(getattr(cfg, "debug_mode", False))
L490         raw_key = os.environ.get("FINNHUB_API_KEY")
L491         finnhub_api_key = raw_key.strip() if isinstance(raw_key, str) else ""
L492         if debug_mode and not getattr(self, "_rev_fallback_key_logged", False):
L493             if not finnhub_api_key:
L494                 logger.info("[REV Fallback] FINNHUB_API_KEY missing -> fallback不実行")
L495             self._rev_fallback_key_logged = True
L496
L497         df, missing_logs = pd.DataFrame(index=tickers), []
L498         for t in tickers:
L499             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L500             # --- 基本特徴 ---
L501             df.loc[t,'TR']   = self.trend(s)
L502             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L503             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L504             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L505             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L506
L507             # --- 配当（欠損補完含む） ---
L508             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L509             if div is None or pd.isna(div):
L510                 try:
L511                     divs = yf.Ticker(t).dividends
L512                     if divs is not None and not divs.empty:
L513                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L514                         if last_close and last_close>0: div = float(div_1y/last_close)
L515                 except Exception: pass
L516             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L517
L518             # --- FCF/EV ---
L519             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L520             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L521
L522             # --- モメンタム・ボラ関連 ---
L523             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L524             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L525             n = int(min(len(r), len(rm)))
L526
L527             DOWNSIDE_DEV = np.nan
L528             if n>=60:
L529                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L530                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L531             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L532
L533             MDD_1Y = np.nan
L534             try:
L535                 w = s.iloc[-min(len(s),252):].dropna()
L536                 if len(w)>=30:
L537                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L538             except Exception: pass
L539             df.loc[t,'MDD_1Y'] = MDD_1Y
L540
L541             RESID_VOL = np.nan
L542             if n>=120:
L543                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L544                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L545                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L546                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L547             df.loc[t,'RESID_VOL'] = RESID_VOL
L548
L549             DOWN_OUTPERF = np.nan
L550             if n>=60:
L551                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L552                 if mask.sum()>=10:
L553                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L554                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L555             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L556
L557             # --- 長期移動平均/位置 ---
L558             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L559             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L560
L561             # --- 配当の詳細系 ---
L562             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L563             try:
L564                 divs = yf.Ticker(t).dividends.dropna()
L565                 if not divs.empty:
L566                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L567                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L568                     ann = divs.groupby(divs.index.year).sum()
L569                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L570                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L571                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L572                 so = d.get('sharesOutstanding',None)
L573                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L574                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L575             except Exception: pass
L576             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L577
L578             # --- 財務安定性 ---
L579             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L580
L581             # --- EPS 変動 ---
L582             EPS_VAR_8Q = np.nan
L583             try:
L584                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L585                 if qe is not None and not qe.empty and so:
L586                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L587                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L588             except Exception: pass
L589             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L590
L591             # --- サイズ/流動性 ---
L592             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L593             try:
L594                 vol_series = ib.data['Volume'][t].dropna()
L595                 if len(vol_series)>=5 and len(s)==len(vol_series):
L596                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L597             except Exception: pass
L598             df.loc[t,'ADV60_USD'] = adv60
L599
L600             # --- 売上/利益の加速度等 ---
L601             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L602             REV_YOY = REV_ANNUAL_STREAK = np.nan
L603             EPS_YOY = np.nan
L604             try:
L605                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L606                 rev_series = None
L607                 if qe is not None and not qe.empty and 'Revenue' in qe.columns:
L608                     rev_series = pd.to_numeric(qe['Revenue'], errors='coerce')
L609                 else:
L610                     qf = tickers_bulk.tickers[t].quarterly_financials
L611                     if qf is not None and not qf.empty and 'Total Revenue' in qf.index:
L612                         rev_series = pd.to_numeric(qf.loc['Total Revenue'], errors='coerce')
L613                         try:
L614                             rev_series = rev_series.sort_index()
L615                         except Exception:
L616                             pass
L617                     if (
L618                         rev_series is None
L619                         or getattr(rev_series, "dropna", lambda: pd.Series(dtype=float))().empty
L620                     ) and finnhub_api_key:
L621                         rev_series = _fetch_rev_quarterly_with_retry(
L622                             t, finnhub_api_key, debug=debug_mode
L623                         )
L624
L625                 if rev_series is not None and rev_series.dropna().shape[0] >= 2:
L626                     r = rev_series.dropna().astype(float)
L627                     yoy = r.pct_change(4).replace([np.inf, -np.inf], np.nan)
L628                     yoy_valid = yoy.dropna()
L629                     if not yoy_valid.empty:
L630                         REV_Q_YOY = float(yoy_valid.iloc[-1])
L631                         if len(yoy_valid) >= 2:
L632                             yoy_delta = yoy_valid.diff().dropna()
L633                             if not yoy_delta.empty:
L634                                 REV_YOY_ACC = float(yoy_delta.iloc[-1])
L635                             tail_len = min(4, len(yoy_valid))
L636                             tail = yoy_valid.iloc[-tail_len:]
L637                             if len(tail) >= 2:
L638                                 REV_YOY_VAR = float(tail.std(ddof=1))
L639                     if len(r) >= 8:
L640                         annual = r.rolling(4).sum().dropna()
L641                         if len(annual) >= 2:
L642                             prev = annual.iloc[-2]
L643                             if prev not in (None, 0) and not pd.isna(prev):
L644                                 REV_YOY = float((annual.iloc[-1] - prev) / prev)
L645                             streak_series = (annual.diff() > 0).astype(int).rolling(4, min_periods=1).sum()
L646                             if not streak_series.empty and pd.notna(streak_series.iloc[-1]):
L647                                 REV_ANNUAL_STREAK = int(streak_series.iloc[-1])
L648                 if qe is not None and not getattr(qe, "empty", True) and 'Earnings' in qe.columns and so:
L649                     eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L650                     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L651                         EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L652                         try:
L653                             g_eps = eps_series.groupby(eps_series.index.year)
L654                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L655                             ann_eps = ann_eps[cnt_eps >= 4]
L656                             if len(ann_eps) >= 2:
L657                                 eps_yoy = ann_eps.pct_change().dropna()
L658                                 if not eps_yoy.empty:
L659                                     EPS_YOY = float(eps_yoy.iloc[-1])
L660                         except Exception:
L661                             pass
L662             except Exception: pass
L663             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L664             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L665             df.loc[t,'REV_YOY'] = RE
```