```text
ys=365))].sum())
L391                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L392                     ann = divs.groupby(divs.index.year).sum()
L393                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L394                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L395                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L396                 so = d.get('sharesOutstanding',None)
L397                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L398                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L399             except Exception: pass
L400             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L401
L402             # --- 財務安定性 ---
L403             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L404
L405             # --- EPS 変動 ---
L406             EPS_VAR_8Q = np.nan
L407             try:
L408                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L409                 if qe is not None and not qe.empty and so:
L410                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L411                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L412             except Exception: pass
L413             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L414
L415             # --- サイズ/流動性 ---
L416             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L417             try:
L418                 vol_series = ib.data['Volume'][t].dropna()
L419                 if len(vol_series)>=5 and len(s)==len(vol_series):
L420                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L421             except Exception: pass
L422             df.loc[t,'ADV60_USD'] = adv60
L423
L424             # --- 売上/利益の加速度等 ---
L425             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L426             REV_ANNUAL_STREAK = np.nan
L427             try:
L428                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L429                 if qe is not None and not qe.empty:
L430                     if 'Revenue' in qe.columns:
L431                         rev = qe['Revenue'].dropna().astype(float)
L432                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L433                         if len(rev)>=6:
L434                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L435                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L436                         yoy_list=[]
L437                         for k in range(1,5):
L438                             if len(rev)>=4+k:
L439                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L440                                 if pd.notna(y): yoy_list.append(y)
L441                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L442                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L443                         try:
L444                             g = rev.groupby(rev.index.year)
L445                             ann_sum, cnt = g.sum(), g.count()
L446                             ann_sum = ann_sum[cnt >= 4]
L447                             if len(ann_sum) >= 3:
L448                                 yoy = ann_sum.pct_change().dropna()
L449                                 streak = 0
L450                                 for v in yoy.iloc[::-1]:
L451                                     if pd.isna(v) or v <= 0:
L452                                         break
L453                                     streak += 1
L454                                 REV_ANNUAL_STREAK = float(streak)
L455                         except Exception:
L456                             pass
L457                     if 'Earnings' in qe.columns and so:
L458                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L459                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L460                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L461             except Exception: pass
L462             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'], df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_Q_YOY, EPS_Q_YOY, REV_YOY_ACC, REV_YOY_VAR
L463             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L464
L465             # --- Rule of 40 や周辺 ---
L466             total_rev_ttm = d.get('totalRevenue',np.nan)
L467             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L468             df.loc[t,'FCF_MGN'] = FCF_MGN
L469             rule40 = np.nan
L470             try:
L471                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L472             except Exception: pass
L473             df.loc[t,'RULE40'] = rule40
L474
L475             # --- トレンド補助 ---
L476             sma50  = s.rolling(50).mean()
L477             sma150 = s.rolling(150).mean()
L478             sma200 = s.rolling(200).mean()
L479             p = _safe_last(s)
L480
L481             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L482                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L483             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L484                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L485
L486             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L487             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L488
L489             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L490             if len(sma200.dropna()) >= 21:
L491                 cur200 = _safe_last(sma200)
L492                 old2001 = float(sma200.iloc[-21])
L493                 if old2001:
L494                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L495
L496             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L497             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L498             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L499             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L500             if len(sma200.dropna())>=105:
L501                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L502                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L503             # NEW: 200日線が連続で上向きの「日数」
L504             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L505             try:
L506                 s200 = sma200.dropna()
L507                 if len(s200) >= 2:
L508                     diff200 = s200.diff()
L509                     up = 0
L510                     for v in diff200.iloc[::-1]:
L511                         if pd.isna(v) or v <= 0:
L512                             break
L513                         up += 1
L514                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L515             except Exception:
L516                 pass
L517             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L518             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L519             if hi52 and hi52>0 and pd.notna(p):
L520                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L521             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L522             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L523
L524             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L525
L526             # --- 欠損メモ ---
L527             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L528             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L529             if need_finnhub:
L530                 fin_data = self.fetch_finnhub_metrics(t)
L531                 for col in need_finnhub:
L532                     val = fin_data.get(col)
L533                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L534             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L535                 if pd.isna(df.loc[t,col]):
L536                     if col=='DIV':
L537                         status = self.dividend_status(t)
L538                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L539                     else:
L540                         missing_logs.append({'Ticker':t,'Column':col})
L541
L542         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L543             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L544             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L545             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L546             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L547             c5 = (row.get('TR_str', np.nan) > 0)
L548             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L549             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L550             c8 = (row.get('RS', np.nan) >= 0.10)
L551             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L552
L553         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L554         assert 'trend_template' in df.columns
L555
L556         # === Z化と合成 ===
L557         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L558
L559         for _c in ('DIV_TTM_PS', 'DIV_FCF_COVER'):
L560             if _c in df.columns:
L561                 df[_c] = df[_c].fillna(0.0)
L562
L563         df_z = pd.DataFrame(index=df.index)
L564         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']:
L565             df_z[col] = robust_z(df[col])
L566         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L567         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L568         for col in ['REV_Q_YOY','EPS_Q_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']: df_z[col] = robust_z(df[col])
L569         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L570
L571         # --- Dividend handling: penalize non-payers ---
L572         df['HAS_DIV'] = (df['DIV_TTM_PS'] > 0).astype(int)
L573         y = df['DIV_TTM_PS'].where(df['HAS_DIV'] == 1, np.nan)
L574         y_non = y.dropna()
L575         z_yld = pd.Series(robust_z(y_non), index=y_non.index).reindex(df.index)
L576         penalty = (np.nanmin(z_yld) - 1.0) if len(z_yld.dropna()) else -1.0
L577         z_yld = z_yld.fillna(penalty)
L578         z_streak = pd.Series(robust_z(df['DIV_STREAK'].where(df['HAS_DIV'] == 1, 0)), index=df.index)
L579        
```