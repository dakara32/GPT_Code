```text
=0 else np.nan
L428             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L429
L430             # --- 長期移動平均/位置 ---
L431             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L432             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L433
L434             # --- 配当の詳細系 ---
L435             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L436             try:
L437                 divs = yf.Ticker(t).dividends.dropna()
L438                 if not divs.empty:
L439                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L440                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L441                     ann = divs.groupby(divs.index.year).sum()
L442                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L443                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L444                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L445                 so = d.get('sharesOutstanding',None)
L446                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L447                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L448             except Exception: pass
L449             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L450
L451             # --- 財務安定性 ---
L452             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L453
L454             # --- EPS 変動 ---
L455             EPS_VAR_8Q = np.nan
L456             try:
L457                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L458                 if qe is not None and not qe.empty and so:
L459                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L460                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L461             except Exception: pass
L462             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L463
L464             # --- サイズ/流動性 ---
L465             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L466             try:
L467                 vol_series = ib.data['Volume'][t].dropna()
L468                 if len(vol_series)>=5 and len(s)==len(vol_series):
L469                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L470             except Exception: pass
L471             df.loc[t,'ADV60_USD'] = adv60
L472
L473             # --- 売上/利益の加速度等 ---
L474             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L475             REV_ANNUAL_STREAK = REV_YOY = np.nan
L476             EPS_YOY = np.nan
L477             try:
L478                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L479                 if qe is not None and not qe.empty:
L480                     if 'Revenue' in qe.columns:
L481                         rev = qe['Revenue'].dropna().astype(float)
L482                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L483                         if len(rev)>=6:
L484                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L485                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L486                         yoy_list=[]
L487                         for k in range(1,5):
L488                             if len(rev)>=4+k:
L489                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L490                                 if pd.notna(y): yoy_list.append(y)
L491                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L492                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L493                         try:
L494                             g = rev.groupby(rev.index.year)
L495                             ann_sum, cnt = g.sum(), g.count()
L496                             ann_sum = ann_sum[cnt >= 4]
L497                             if len(ann_sum) >= 2:
L498                                 yoy = ann_sum.pct_change().dropna()
L499                                 if not yoy.empty:
L500                                     REV_YOY = float(yoy.iloc[-1])
L501                                 streak = 0
L502                                 for v in yoy.iloc[::-1]:
L503                                     if pd.isna(v) or v <= 0:
L504                                         break
L505                                     streak += 1
L506                                 REV_ANNUAL_STREAK = float(streak)
L507                         except Exception:
L508                             pass
L509                     if 'Earnings' in qe.columns and so:
L510                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L511                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L512                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L513                         try:
L514                             g_eps = eps_series.groupby(eps_series.index.year)
L515                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L516                             ann_eps = ann_eps[cnt_eps >= 4]
L517                             if len(ann_eps) >= 2:
L518                                 eps_yoy = ann_eps.pct_change().dropna()
L519                                 if not eps_yoy.empty:
L520                                     EPS_YOY = float(eps_yoy.iloc[-1])
L521                         except Exception:
L522                             pass
L523             except Exception: pass
L524             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L525             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L526             df.loc[t,'REV_YOY'] = REV_YOY
L527             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L528             df.loc[t,'EPS_YOY'] = EPS_YOY
L529
L530             # --- Rule of 40 や周辺 ---
L531             total_rev_ttm = d.get('totalRevenue',np.nan)
L532             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L533             df.loc[t,'FCF_MGN'] = FCF_MGN
L534             rule40 = np.nan
L535             try:
L536                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L537             except Exception: pass
L538             df.loc[t,'RULE40'] = rule40
L539
L540             # --- トレンド補助 ---
L541             sma50  = s.rolling(50).mean()
L542             sma150 = s.rolling(150).mean()
L543             sma200 = s.rolling(200).mean()
L544             p = _safe_last(s)
L545
L546             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L547                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L548             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L549                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L550
L551             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L552             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L553
L554             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L555             if len(sma200.dropna()) >= 21:
L556                 cur200 = _safe_last(sma200)
L557                 old2001 = float(sma200.iloc[-21])
L558                 if old2001:
L559                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L560
L561             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L562             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L563             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L564             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L565             if len(sma200.dropna())>=105:
L566                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L567                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L568             # NEW: 200日線が連続で上向きの「日数」
L569             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L570             try:
L571                 s200 = sma200.dropna()
L572                 if len(s200) >= 2:
L573                     diff200 = s200.diff()
L574                     up = 0
L575                     for v in diff200.iloc[::-1]:
L576                         if pd.isna(v) or v <= 0:
L577                             break
L578                         up += 1
L579                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L580             except Exception:
L581                 pass
L582             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L583             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L584             if hi52 and hi52>0 and pd.notna(p):
L585                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L586             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L587             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L588
L589             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L590
L591             # --- 欠損メモ ---
L592             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L593             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L594             if need_finnhub:
L595                 fin_data = self.fetch_finnhub_metrics(t)
L596                 for col in need_finnhub:
L597                     val = fin_data.get(col)
L598                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L599             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L600                 if pd.isna(df.loc[t,col]):
L601                     if col=='DIV':
L602                         status = self.dividend_status(t)
L603                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L604                     else:
L605                         missing_logs.append({'Ticker':t,'Column':col})
L606
L607         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L608             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L609             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L610             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L611             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L612             c5 = (row.get('TR_str', np.nan) > 0)
L613             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L614             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L615             c8 = (row.get('RS', np.nan) >= 0.10)
L616             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L617
L618         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L619         assert 'trend_template' in df.columns
L620
L621         # === Z化と合成 ===
L622         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L623
L624         df_z = pd
```