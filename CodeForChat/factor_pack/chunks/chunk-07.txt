```text
Exception: pass
L407             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L408
L409             # --- サイズ/流動性 ---
L410             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L411             try:
L412                 vol_series = ib.data['Volume'][t].dropna()
L413                 if len(vol_series)>=5 and len(s)==len(vol_series):
L414                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L415             except Exception: pass
L416             df.loc[t,'ADV60_USD'] = adv60
L417
L418             # --- 売上/利益の加速度等 ---
L419             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L420             REV_ANNUAL_STREAK = np.nan
L421             try:
L422                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L423                 if qe is not None and not qe.empty:
L424                     if 'Revenue' in qe.columns:
L425                         rev = qe['Revenue'].dropna().astype(float)
L426                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L427                         if len(rev)>=6:
L428                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L429                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L430                         yoy_list=[]
L431                         for k in range(1,5):
L432                             if len(rev)>=4+k:
L433                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L434                                 if pd.notna(y): yoy_list.append(y)
L435                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L436                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L437                         try:
L438                             g = rev.groupby(rev.index.year)
L439                             ann_sum, cnt = g.sum(), g.count()
L440                             ann_sum = ann_sum[cnt >= 4]
L441                             if len(ann_sum) >= 3:
L442                                 yoy = ann_sum.pct_change().dropna()
L443                                 streak = 0
L444                                 for v in yoy.iloc[::-1]:
L445                                     if pd.isna(v) or v <= 0:
L446                                         break
L447                                     streak += 1
L448                                 REV_ANNUAL_STREAK = float(streak)
L449                         except Exception:
L450                             pass
L451                     if 'Earnings' in qe.columns and so:
L452                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L453                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L454                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L455             except Exception: pass
L456             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'], df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_Q_YOY, EPS_Q_YOY, REV_YOY_ACC, REV_YOY_VAR
L457             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L458
L459             # --- Rule of 40 や周辺 ---
L460             total_rev_ttm = d.get('totalRevenue',np.nan)
L461             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L462             df.loc[t,'FCF_MGN'] = FCF_MGN
L463             rule40 = np.nan
L464             try:
L465                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L466             except Exception: pass
L467             df.loc[t,'RULE40'] = rule40
L468
L469             # --- トレンド補助 ---
L470             sma50  = s.rolling(50).mean()
L471             sma150 = s.rolling(150).mean()
L472             sma200 = s.rolling(200).mean()
L473             p = _safe_last(s)
L474
L475             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L476                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L477             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L478                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L479
L480             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L481             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L482
L483             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L484             if len(sma200.dropna()) >= 21:
L485                 cur200 = _safe_last(sma200)
L486                 old2001 = float(sma200.iloc[-21])
L487                 if old2001:
L488                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L489
L490             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L491             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L492             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L493             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L494             if len(sma200.dropna())>=105:
L495                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L496                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L497             # NEW: 200日線が連続で上向きの「日数」
L498             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L499             try:
L500                 s200 = sma200.dropna()
L501                 if len(s200) >= 2:
L502                     diff200 = s200.diff()
L503                     up = 0
L504                     for v in diff200.iloc[::-1]:
L505                         if pd.isna(v) or v <= 0:
L506                             break
L507                         up += 1
L508                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L509             except Exception:
L510                 pass
L511             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L512             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L513             if hi52 and hi52>0 and pd.notna(p):
L514                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L515             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L516             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L517
L518             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L519
L520             # --- 欠損メモ ---
L521             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L522             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L523             if need_finnhub:
L524                 fin_data = self.fetch_finnhub_metrics(t)
L525                 for col in need_finnhub:
L526                     val = fin_data.get(col)
L527                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L528             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L529                 if pd.isna(df.loc[t,col]):
L530                     if col=='DIV':
L531                         status = self.dividend_status(t)
L532                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L533                     else:
L534                         missing_logs.append({'Ticker':t,'Column':col})
L535
L536         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L537             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L538             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L539             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L540             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L541             c5 = (row.get('TR_str', np.nan) > 0)
L542             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L543             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L544             c8 = (row.get('RS', np.nan) >= 0.10)
L545             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L546
L547         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L548         assert 'trend_template' in df.columns
L549
L550         # === Z化と合成 ===
L551         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L552
L553         for _c in ('DIV_TTM_PS', 'DIV_FCF_COVER'):
L554             if _c in df.columns:
L555                 df[_c] = df[_c].fillna(0.0)
L556
L557         df_z = pd.DataFrame(index=df.index)
L558         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L559         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L560         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L561         for col in ['REV_Q_YOY','EPS_Q_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']: df_z[col] = robust_z(df[col])
L562         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L563
L564         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L565         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L566         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L567         df_z['GROWTH_F']  = robust_z(0.25*df_z['REV']          # ↓0.30→0.25
L568             + 0.20*df_z['EPS_Q_YOY']
L569             + 0.15*df_z['REV_Q_YOY']
L570             + 0.15*df_z['REV_YOY_ACC']
L571             + 0.10*df_z['RULE40']
L572             + 0.10*df_z['FCF_MGN']
L573             + 0.10*df_z['EPS']          # ★追加：黒字優遇／赤字減点
L574             + 0.05*df_z['REV_ANN_STREAK']
L575             - 0.05*df_z['REV_YOY_VAR']).clip(-3.0,3.0)
L576         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L577             + 0.15*df_z['TR_str']
L578             + 0.15*df_z['RS_SLOPE_6W']
L579             + 0.15*df_z['RS_SLOPE_13W']
L580             + 0.10*df_z['MA200_SLOPE_5M']
L581             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L582         df_z['VOL'] = robust_z(df['BETA'])
L583         df_z.rename(columns={'GROWTH_F':'GRW','MOM_F':'MOM','QUALITY_F':'QAL','YIELD_F':'YLD'}, inplace=True)
L584
L585         # === begin: BIO LOSS PENALTY =====================================
L586         try:
L587             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L588         except Exception:
L589             penalty_z = 0.8
L590
L591         def _is_bio_like(t: str) -> bool:
L592             inf = info.get(t, {}) if isinstance(info, dict) else {}
L593             sec = str(inf.get("sector", "")).lower()
L594             ind = str(inf.get("industry", "")).lower()
L595             if "health" not in sec:
L596                 return False
L597             keys = ("biotech", "biopharma", "pharma")
L598             return any(k in ind for k in keys)
L599
L600         tickers_s = pd.Index(df_z.index)
L601         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L602         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L603         m
```