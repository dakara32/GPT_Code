```text
_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L388
L389             # --- 財務安定性 ---
L390             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L391
L392             # --- EPS 変動 ---
L393             EPS_VAR_8Q = np.nan
L394             try:
L395                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L396                 if qe is not None and not qe.empty and so:
L397                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L398                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L399             except Exception: pass
L400             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L401
L402             # --- サイズ/流動性 ---
L403             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L404             try:
L405                 vol_series = ib.data['Volume'][t].dropna()
L406                 if len(vol_series)>=5 and len(s)==len(vol_series):
L407                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L408             except Exception: pass
L409             df.loc[t,'ADV60_USD'] = adv60
L410
L411             # --- 売上/利益の加速度等 ---
L412             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L413             REV_ANNUAL_STREAK = np.nan
L414             try:
L415                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L416                 if qe is not None and not qe.empty:
L417                     if 'Revenue' in qe.columns:
L418                         rev = qe['Revenue'].dropna().astype(float)
L419                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L420                         if len(rev)>=6:
L421                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L422                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L423                         yoy_list=[]
L424                         for k in range(1,5):
L425                             if len(rev)>=4+k:
L426                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L427                                 if pd.notna(y): yoy_list.append(y)
L428                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L429                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L430                         try:
L431                             g = rev.groupby(rev.index.year)
L432                             ann_sum, cnt = g.sum(), g.count()
L433                             ann_sum = ann_sum[cnt >= 4]
L434                             if len(ann_sum) >= 3:
L435                                 yoy = ann_sum.pct_change().dropna()
L436                                 streak = 0
L437                                 for v in yoy.iloc[::-1]:
L438                                     if pd.isna(v) or v <= 0:
L439                                         break
L440                                     streak += 1
L441                                 REV_ANNUAL_STREAK = float(streak)
L442                         except Exception:
L443                             pass
L444                     if 'Earnings' in qe.columns and so:
L445                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L446                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L447                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L448             except Exception: pass
L449             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'], df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_Q_YOY, EPS_Q_YOY, REV_YOY_ACC, REV_YOY_VAR
L450             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L451
L452             # --- Rule of 40 や周辺 ---
L453             total_rev_ttm = d.get('totalRevenue',np.nan)
L454             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L455             df.loc[t,'FCF_MGN'] = FCF_MGN
L456             rule40 = np.nan
L457             try:
L458                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L459             except Exception: pass
L460             df.loc[t,'RULE40'] = rule40
L461
L462             # --- トレンド補助 ---
L463             sma50  = s.rolling(50).mean()
L464             sma150 = s.rolling(150).mean()
L465             sma200 = s.rolling(200).mean()
L466             p = _safe_last(s)
L467
L468             df.loc[t,'MA50_OVER_150'] = (
L469                 _safe_last(sma50)/_safe_last(sma150) - 1
L470                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L471             )
L472             df.loc[t,'MA150_OVER_200'] = (
L473                 _safe_last(sma150)/_safe_last(sma200) - 1
L474                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L475             )
L476
L477             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L478             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L479
L480             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L481             if len(sma200.dropna()) >= 21:
L482                 cur200 = _safe_last(sma200)
L483                 old2001 = float(sma200.iloc[-21])
L484                 if old2001:
L485                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L486
L487             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L488             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L489             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L490             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L491             if len(sma200.dropna())>=105:
L492                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L493                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L494             # NEW: 200日線が連続で上向きの「日数」
L495             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L496             try:
L497                 s200 = sma200.dropna()
L498                 if len(s200) >= 2:
L499                     diff200 = s200.diff()
L500                     up = 0
L501                     for v in diff200.iloc[::-1]:
L502                         if pd.isna(v) or v <= 0:
L503                             break
L504                         up += 1
L505                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L506             except Exception:
L507                 pass
L508             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L509             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L510             if hi52 and hi52>0 and pd.notna(p):
L511                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L512             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L513             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L514
L515             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L516
L517             # --- 欠損メモ ---
L518             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L519             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L520             if need_finnhub:
L521                 fin_data = self.fetch_finnhub_metrics(t)
L522                 for col in need_finnhub:
L523                     val = fin_data.get(col)
L524                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L525             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L526                 if pd.isna(df.loc[t,col]):
L527                     if col=='DIV':
L528                         status = self.dividend_status(t)
L529                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L530                     else:
L531                         missing_logs.append({'Ticker':t,'Column':col})
L532
L533         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L534             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L535             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L536             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L537             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L538             c5 = (row.get('TR_str', np.nan) > 0)
L539             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L540             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L541             c8 = (row.get('RS', np.nan) >= 0.10)
L542             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L543
L544         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L545         assert 'trend_template' in df.columns
L546
L547         # === Z化と合成 ===
L548         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L549
L550         df_z = pd.DataFrame(index=df.index)
L551         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L552         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L553         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L554         for col in ['REV_Q_YOY','EPS_Q_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']: df_z[col] = robust_z(df[col])
L555         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L556
L557         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L558         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L559         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L560         df_z['GROWTH_F']  = robust_z(
L561               0.25*df_z['REV']          # ↓0.30→0.25
L562             + 0.20*df_z['EPS_Q_YOY']
L563             + 0.15*df_z['REV_Q_YOY']
L564             + 0.15*df_z['REV_YOY_ACC']
L565             + 0.10*df_z['RULE40']
L566             + 0.10*df_z['FCF_MGN']
L567             + 0.10*df_z['EPS']          # ★追加：黒字優遇／赤字減点
L568             + 0.05*df_z['REV_ANN_STREAK']
L569             - 0.05*df_z['REV_YOY_VAR']
L570         ).clip(-3.0,3.0)
L571         df_z['MOM_F'] = robust_z(
L572               0.40*df_z['RS']
L573             + 0.15*df_z['TR_str']
L574             + 0.15*df_z['RS_SLOPE_6W']
L575             + 0.15*df_z['RS_SLOPE_13W']
L576             + 0.10*df_z['MA200_SLOPE_5M']
L577             + 0.10*df_z['MA200_UP_STREAK_D']
L578         ).clip(-3.0,3.0)
L579         df_z['VOL'] = robust_z(df['BETA'])
L580         df_z.rename(columns={'GROWTH_F':'GRW','MOM_F':'MOM','QUALITY_F':'QAL','YIELD_F':'YLD'}, inplace=True)
L581
L582         # === begin: BIO LOSS PENALTY =====================================
L583         try:
L584             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L585       
```