```text
suf = _filter_suffix_from(FILTER_SPEC, group)
L1366             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1367
L1368         def _blk(title, tbl, fmt=None, drop=()):
L1369             if tbl is None or getattr(tbl, 'empty', False):
L1370                 return f"{title}\n(選定なし)\n"
L1371             if drop and hasattr(tbl, 'columns'):
L1372                 keep = [c for c in tbl.columns if c not in drop]
L1373                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1374             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1375
L1376         message = "📈 ファクター分散最適化の結果\n"
L1377         if self.miss_df is not None and not self.miss_df.empty:
L1378             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L1379         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1380         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1381         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L1382         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L1383
L1384         try:
L1385             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1386             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1387             if r is not None:
L1388                 r.raise_for_status()
L1389         except Exception as e:
L1390             print(f"[ERR] main_post_failed: {e}")
L1391
L1392 def _infer_g_universe(feature_df, selected12=None, near5=None):
L1393     try:
L1394         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1395         if out: return out
L1396     except Exception:
L1397         pass
L1398     base = set()
L1399     for lst in (selected12 or []), (near5 or []):
L1400         for x in (lst or []): base.add(x)
L1401     return list(base) if base else list(feature_df.index)
L1402
L1403 def _fmt_with_fire_mark(tickers, feature_df):
L1404     out = []
L1405     for t in tickers or []:
L1406         try:
L1407             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L1408             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L1409             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L1410         except Exception:
L1411             out.append(t)
L1412     return out
L1413
L1414 def _label_recent_event(t, feature_df):
L1415     try:
L1416         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L1417         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L1418         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L1419         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L1420         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L1421     except Exception:
L1422         pass
L1423     return t
L1424
L1425 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1426
L1427 def io_build_input_bundle() -> InputBundle:
L1428     """
L1429     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1430     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1431     """
L1432     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1433     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L1434
L1435 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1436               n_target: int) -> tuple[list, float, float, float]:
L1437     """
L1438     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1439     戻り値：(pick, avg_res_corr, sum_score, objective)
L1440     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1441     """
L1442     sc.cfg = cfg
L1443
L1444     if hasattr(sc, "score_build_features"):
L1445         feat = sc.score_build_features(inb)
L1446         if not hasattr(sc, "_feat_logged"):
L1447             T.log("features built (scorer)")
L1448             sc._feat_logged = True
L1449         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1450     else:
L1451         fb = sc.aggregate_scores(inb, cfg)
L1452         if not hasattr(sc, "_feat_logged"):
L1453             T.log("features built (scorer)")
L1454             sc._feat_logged = True
L1455         sc._feat = fb
L1456         agg = fb.g_score if group == "G" else fb.d_score_all
L1457         if group == "D" and hasattr(fb, "df"):
L1458             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L1459
L1460     if hasattr(sc, "filter_candidates"):
L1461         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1462
L1463     if isinstance(agg, pd.Series):
L1464         agg = _as_numeric_series(agg)
L1465
L1466     selector = Selector()
L1467     if hasattr(sc, "select_diversified"):
L1468         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1469             selector=selector, prev_tickers=None,
L1470             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1471             cross_mu=cfg.drrs.cross_mu_gd)
L1472     else:
L1473         if group == "G":
L1474             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1475             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1476                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1477                 lam=cfg.drrs.G.get("lam", 0.68),
L1478                 lookback=cfg.drrs.G.get("lookback", 252),
L1479                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1480         else:
L1481             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1482             g_fixed = getattr(sc, "_top_G", None)
L1483             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1484                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1485                 lam=cfg.drrs.D.get("lam", 0.85),
L1486                 lookback=cfg.drrs.D.get("lookback", 504),
L1487                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1488                 mu=cfg.drrs.cross_mu_gd)
L1489         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1490         sum_sc = res["sum_score"]; obj = res["objective"]
L1491         if group == "D":
L1492             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1493             T.log("selection finalized (G/D)")
L1494     try:
L1495         inc = [t for t in exist if t in agg.index]
L1496         pick = _sticky_keep_current(
L1497             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1498             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1499         )
L1500     except Exception as _e:
L1501         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1502     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1503     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1504     try:
L1505         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1506         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1507         setattr(sc, f"_near_{group}", near10)
L1508         setattr(sc, f"_agg_{group}", agg)
L1509     except Exception:
L1510         pass
L1511
L1512     if group == "D":
L1513         T.log("save done")
L1514     if group == "G":
L1515         sc._top_G = pick
L1516     return pick, avg_r, sum_sc, obj
L1517
L1518 def run_pipeline() -> SelectionBundle:
L1519     """
L1520     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1521     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1522     """
L1523     inb = io_build_input_bundle()
L1524     cfg = PipelineConfig(
L1525         weights=WeightsConfig(g=g_weights, d=D_weights),
L1526         drrs=DRRSParams(
L1527             corrM=corrM, shrink=DRRS_SHRINK,
L1528             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1529         ),
L1530         price_max=CAND_PRICE_MAX,
L1531         debug_mode=debug_mode
L1532     )
L1533     sc = Scorer()
L1534     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1535     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L1536     alpha = Scorer.spx_to_alpha(inb.spx)
L1537     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1538     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1539     sc._top_G = top_G
L1540     try:
L1541         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1542         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1543     except Exception:
L1544         pass
L1545     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1546     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1547     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1548     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1549     fb = getattr(sc, "_feat", None)
L1550     near_G = getattr(sc, "_near_G", [])
L1551     selected12 = list(top_G)
L1552     df = fb.df if fb is not None else pd.DataFrame()
L1553     guni = _infer_g_universe(df, selected12, near_G)
L1554     try:
L1555         fire_recent = [t for t in guni
L1556                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1557                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1558     except Exception: fire_recent = []
L1559
L1560     lines = [
L1561         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1562         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1563         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1564         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1565
L1566     if fire_recent:
L1567         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1568         lines.append(f"過去5営業日の検知: {fire_list}")
L1569     else:
L1570         lines.append("過去5営業日の検知: なし")
L1571
L1572     try:
L1573         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1574         if webhook:
L1575             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1576     except Exception:
L1577         pass
L1578
L1579     out = Output()
L1580     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1581     try: out._sc = sc
L1582     except Exception: pass
L1583     if hasattr(sc, "_feat"):
L1584         try:
L1585             fb = sc._feat
L1586             out.miss_df = fb.missing_logs
L1587             out.display_results(
L1588                 exist=exist,
L1589                 bench=bench,
L1590                 df_z=fb.df_z,
L1591                 g_score=fb.g_score,
L1592                 d_score_all=fb.d_score_all,
L1593                 init_G=top_G,
L1594                 init_D=top_D,
L1595                 top_G=top_G,
L1596                 top_D=top_D,
L1597                 df_full_z=getattr(fb, "df_full_z", None),
L1598                 prev_G=getattr(sc, "_prev_G", exist),
L1599                 prev_D=getattr(sc, "_prev_D", exist),
L1600             )
L1601         except Exception:
L1602             pass
L1603     out.notify_slack()
L1604     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1605               "sum_score": sumG, "objective": objG},
L1606         resD={"tickers": top_D, "avg_res_corr":
```