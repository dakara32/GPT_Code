```text
）
L321         - spx: ベンチマーク Series（px.index に整列）
L322         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L323         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L324         """
L325         import numpy as np, pandas as pd
L326         if px is None or px.empty:
L327             return pd.Series(dtype=int)
L328         px = px.dropna(how="all", axis=1)
L329         if win_days and win_days > 0:
L330             px = px.tail(win_days)
L331         if px.empty:
L332             return pd.Series(dtype=int)
L333         spx = spx.reindex(px.index).ffill()
L334
L335         ma50  = px.rolling(50).mean()
L336         ma150 = px.rolling(150).mean()
L337         ma200 = px.rolling(200).mean()
L338
L339         tt = (px > ma150)
L340         tt &= (px > ma200)
L341         tt &= (ma150 > ma200)
L342         tt &= (ma200 - ma200.shift(21) > 0)
L343         tt &= (ma50  > ma150)
L344         tt &= (ma50  > ma200)
L345         tt &= (px    > ma50)
L346
L347         lo252 = px.rolling(252).min()
L348         hi252 = px.rolling(252).max()
L349         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L350         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L351
L352         r12  = px.divide(px.shift(252)).sub(1.0)
L353         br12 = spx.divide(spx.shift(252)).sub(1.0)
L354         r1   = px.divide(px.shift(22)).sub(1.0)
L355         br1  = spx.divide(spx.shift(22)).sub(1.0)
L356         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L357         tt &= (rs >= 0.10)
L358
L359         return tt.fillna(False).sum(axis=1).astype(int)
L360
L361     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L362     def aggregate_scores(self, ib: Any, cfg):
L363         if cfg is None:
L364             raise ValueError("cfg is required; pass factor.PipelineConfig")
L365         self._validate_ib_for_scorer(ib)
L366
L367         px, spx, tickers = ib.px, ib.spx, ib.tickers
L368         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L369
L370         df, missing_logs = pd.DataFrame(index=tickers), []
L371         for t in tickers:
L372             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L373             # --- 基本特徴 ---
L374             df.loc[t,'TR']   = self.trend(s)
L375             df.loc[t,'EPS']  = eps_df.loc[t,'EPS_TTM'] if t in eps_df.index else np.nan
L376             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L377             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L378             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L379
L380             # --- 配当（欠損補完含む） ---
L381             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L382             if div is None or pd.isna(div):
L383                 try:
L384                     divs = yf.Ticker(t).dividends
L385                     if divs is not None and not divs.empty:
L386                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L387                         if last_close and last_close>0: div = float(div_1y/last_close)
L388                 except Exception: pass
L389             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L390
L391             # --- FCF/EV ---
L392             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L393             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L394
L395             # --- モメンタム・ボラ関連 ---
L396             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L397             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L398             n = int(min(len(r), len(rm)))
L399
L400             DOWNSIDE_DEV = np.nan
L401             if n>=60:
L402                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L403                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L404             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L405
L406             MDD_1Y = np.nan
L407             try:
L408                 w = s.iloc[-min(len(s),252):].dropna()
L409                 if len(w)>=30:
L410                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L411             except Exception: pass
L412             df.loc[t,'MDD_1Y'] = MDD_1Y
L413
L414             RESID_VOL = np.nan
L415             if n>=120:
L416                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L417                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L418                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L419                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L420             df.loc[t,'RESID_VOL'] = RESID_VOL
L421
L422             DOWN_OUTPERF = np.nan
L423             if n>=60:
L424                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L425                 if mask.sum()>=10:
L426                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L427                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L428             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L429
L430             # --- 長期移動平均/位置 ---
L431             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L432             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L433
L434             # --- 配当の詳細系 ---
L435             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L436             try:
L437                 divs = yf.Ticker(t).dividends.dropna()
L438                 if not divs.empty:
L439                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L440                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L441                     ann = divs.groupby(divs.index.year).sum()
L442                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L443                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L444                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L445                 so = d.get('sharesOutstanding',None)
L446                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L447                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L448             except Exception: pass
L449             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L450
L451             # --- 財務安定性 ---
L452             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L453
L454             # --- EPS 変動 ---
L455             EPS_VAR_8Q = np.nan
L456             try:
L457                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L458                 if qe is not None and not qe.empty and so:
L459                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L460                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L461             except Exception: pass
L462             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L463
L464             # --- サイズ/流動性 ---
L465             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L466             try:
L467                 vol_series = ib.data['Volume'][t].dropna()
L468                 if len(vol_series)>=5 and len(s)==len(vol_series):
L469                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L470             except Exception: pass
L471             df.loc[t,'ADV60_USD'] = adv60
L472
L473             # --- 売上/利益の加速度等 ---
L474             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L475             REV_ANNUAL_STREAK = REV_YOY = np.nan
L476             EPS_YOY = np.nan
L477             try:
L478                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L479                 sec_rev_series = (d.get('SEC_REV_Q_SERIES') or [])
L480                 if sec_rev_series:
L481                     rev = pd.Series(sec_rev_series, dtype=float).dropna()
L482                 elif qe is not None and not qe.empty and 'Revenue' in qe.columns:
L483                     rev = qe['Revenue'].dropna().astype(float)
L484                 else:
L485                     rev = pd.Series([], dtype=float)
L486                 if not rev.empty:
L487                     if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L488                     if len(rev)>=6:
L489                         yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L490                         if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L491                     yoy_list=[]
L492                     for k in range(1,5):
L493                         if len(rev)>=4+k:
L494                             y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L495                             if pd.notna(y): yoy_list.append(y)
L496                     if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L497                     # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L498                     try:
L499                         if isinstance(rev.index, pd.DatetimeIndex):
L500                             g = rev.groupby(rev.index.year)
L501                             ann_sum, cnt = g.sum(), g.count()
L502                             ann_sum = ann_sum[cnt >= 4]
L503                             if len(ann_sum) >= 2:
L504                                 yoy = ann_sum.pct_change().dropna()
L505                                 if not yoy.empty:
L506                                     REV_YOY = float(yoy.iloc[-1])
L507                                 streak = 0
L508                                 for v in yoy.iloc[::-1]:
L509                                     if pd.isna(v) or v <= 0:
L510                                         break
L511                                     streak += 1
L512                                 REV_ANNUAL_STREAK = float(streak)
L513                     except Exception:
L514                         pass
L515                 sec_eps_series = (d.get('SEC_EPS_Q_SERIES') or [])
L516                 if sec_eps_series:
L517                     eps_series = pd.Series(sec_eps_series, dtype=float).replace([np.inf,-np.inf],np.nan)
L518                 elif qe is not None and not qe.empty and 'Earnings' in qe.columns and so:
L519                     eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L520                 else:
L521                     eps_series = pd.Series([], dtype=float)
L522                 if not eps_series.empty:
L523                     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L524                         EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L525                     try:
L526                         if isinstance(eps_series.index, pd.DatetimeIndex):
L527                             g_eps = eps_series.groupby(eps_series.index.year)
L528                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L529                             ann_eps = ann_eps[cnt_eps >= 4]
L530                             if len(ann_eps) >= 2:
L531                                 eps_yoy = ann_eps.pct_change().dropna()
L532                                 if not eps_yoy.empty:
L533                                     EPS_YOY = float(eps_yoy.iloc[-1])
L534                     except
```