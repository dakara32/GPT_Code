```text
=0 else np.nan
L428             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L429
L430             # --- 長期移動平均/位置 ---
L431             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L432             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L433
L434             # --- 配当の詳細系 ---
L435             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L436             try:
L437                 divs = yf.Ticker(t).dividends.dropna()
L438                 if not divs.empty:
L439                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L440                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L441                     ann = divs.groupby(divs.index.year).sum()
L442                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L443                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L444                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L445                 so = d.get('sharesOutstanding',None)
L446                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L447                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L448             except Exception: pass
L449             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L450
L451             # --- 財務安定性 ---
L452             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L453
L454             # --- EPS 変動 ---
L455             EPS_VAR_8Q = np.nan
L456             try:
L457                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L458                 if qe is not None and not qe.empty and so:
L459                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L460                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L461             except Exception: pass
L462             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L463
L464             # --- サイズ/流動性 ---
L465             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L466             try:
L467                 vol_series = ib.data['Volume'][t].dropna()
L468                 if len(vol_series)>=5 and len(s)==len(vol_series):
L469                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L470             except Exception: pass
L471             df.loc[t,'ADV60_USD'] = adv60
L472
L473             # --- 売上/利益の加速度等 ---
L474             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L475             REV_YOY = REV_ANNUAL_STREAK = np.nan
L476             EPS_YOY = np.nan
L477             try:
L478                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L479                 rev_series = None
L480                 if qe is not None and not qe.empty and 'Revenue' in qe.columns:
L481                     rev_series = pd.to_numeric(qe['Revenue'], errors='coerce')
L482                 else:
L483                     qf = tickers_bulk.tickers[t].quarterly_financials
L484                     if qf is not None and not qf.empty and 'Total Revenue' in qf.index:
L485                         rev_series = pd.to_numeric(qf.loc['Total Revenue'], errors='coerce')
L486                         try:
L487                             rev_series = rev_series.sort_index()
L488                         except Exception:
L489                             pass
L490
L491                 if rev_series is not None and rev_series.dropna().shape[0] >= 2:
L492                     r = rev_series.dropna().astype(float)
L493                     yoy = r.pct_change(4).replace([np.inf, -np.inf], np.nan)
L494                     yoy_valid = yoy.dropna()
L495                     if not yoy_valid.empty:
L496                         REV_Q_YOY = float(yoy_valid.iloc[-1])
L497                         if len(yoy_valid) >= 2:
L498                             yoy_delta = yoy_valid.diff().dropna()
L499                             if not yoy_delta.empty:
L500                                 REV_YOY_ACC = float(yoy_delta.iloc[-1])
L501                             tail_len = min(4, len(yoy_valid))
L502                             tail = yoy_valid.iloc[-tail_len:]
L503                             if len(tail) >= 2:
L504                                 REV_YOY_VAR = float(tail.std(ddof=1))
L505                     if len(r) >= 8:
L506                         annual = r.rolling(4).sum().dropna()
L507                         if len(annual) >= 2:
L508                             prev = annual.iloc[-2]
L509                             if prev not in (None, 0) and not pd.isna(prev):
L510                                 REV_YOY = float((annual.iloc[-1] - prev) / prev)
L511                             streak_series = (annual.diff() > 0).astype(int).rolling(4, min_periods=1).sum()
L512                             if not streak_series.empty and pd.notna(streak_series.iloc[-1]):
L513                                 REV_ANNUAL_STREAK = int(streak_series.iloc[-1])
L514                 if qe is not None and not getattr(qe, "empty", True) and 'Earnings' in qe.columns and so:
L515                     eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L516                     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L517                         EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L518                         try:
L519                             g_eps = eps_series.groupby(eps_series.index.year)
L520                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L521                             ann_eps = ann_eps[cnt_eps >= 4]
L522                             if len(ann_eps) >= 2:
L523                                 eps_yoy = ann_eps.pct_change().dropna()
L524                                 if not eps_yoy.empty:
L525                                     EPS_YOY = float(eps_yoy.iloc[-1])
L526                         except Exception:
L527                             pass
L528             except Exception: pass
L529             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L530             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L531             df.loc[t,'REV_YOY'] = REV_YOY
L532             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L533             df.loc[t,'EPS_YOY'] = EPS_YOY
L534
L535             # --- Rule of 40 や周辺 ---
L536             total_rev_ttm = d.get('totalRevenue',np.nan)
L537             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L538             df.loc[t,'FCF_MGN'] = FCF_MGN
L539             rule40 = np.nan
L540             try:
L541                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L542             except Exception: pass
L543             df.loc[t,'RULE40'] = rule40
L544
L545             # --- トレンド補助 ---
L546             sma50  = s.rolling(50).mean()
L547             sma150 = s.rolling(150).mean()
L548             sma200 = s.rolling(200).mean()
L549             p = _safe_last(s)
L550
L551             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L552                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L553             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L554                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L555
L556             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L557             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L558
L559             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L560             if len(sma200.dropna()) >= 21:
L561                 cur200 = _safe_last(sma200)
L562                 old2001 = float(sma200.iloc[-21])
L563                 if old2001:
L564                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L565
L566             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L567             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L568             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L569             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L570             if len(sma200.dropna())>=105:
L571                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L572                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L573             # NEW: 200日線が連続で上向きの「日数」
L574             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L575             try:
L576                 s200 = sma200.dropna()
L577                 if len(s200) >= 2:
L578                     diff200 = s200.diff()
L579                     up = 0
L580                     for v in diff200.iloc[::-1]:
L581                         if pd.isna(v) or v <= 0:
L582                             break
L583                         up += 1
L584                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L585             except Exception:
L586                 pass
L587             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L588             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L589             if hi52 and hi52>0 and pd.notna(p):
L590                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L591             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L592             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L593
L594             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L595
L596             # --- 欠損メモ ---
L597             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L598             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L599             if need_finnhub:
L600                 fin_data = self.fetch_finnhub_metrics(t)
L601                 for col in need_finnhub:
L602                     val = fin_data.get(col)
L603                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L604             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L605                 if pd.isna(df.loc[t,col]):
L606                     if col=='DIV':
L607                         status = self.dividend_status(t)
L608                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L609                     else:
L610                         missing_logs.append({'Ticker':t,'Column':col})
L611
L612         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L613             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L614             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L615             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L616             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L617             c5 = (row.get('TR_str', np.nan) > 0)
L618             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L619             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L620             c8 = (row.get('RS', np.nan) >= 0.10)
L621             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L622
L623         if '
```