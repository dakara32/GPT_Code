```text
sr - mr)/abs(mr) if mr!=0 else np.nan
L370             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L371
L372             # --- 長期移動平均/位置 ---
L373             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L374             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L375
L376             # --- 配当の詳細系 ---
L377             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L378             try:
L379                 divs = yf.Ticker(t).dividends.dropna()
L380                 if not divs.empty:
L381                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L382                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L383                     ann = divs.groupby(divs.index.year).sum()
L384                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L385                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L386                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L387                 so = d.get('sharesOutstanding',None)
L388                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L389                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L390             except Exception: pass
L391             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L392
L393             # --- 財務安定性 ---
L394             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L395
L396             # --- EPS 変動 ---
L397             EPS_VAR_8Q = np.nan
L398             try:
L399                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L400                 if qe is not None and not qe.empty and so:
L401                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L402                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L403             except Exception: pass
L404             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L405
L406             # --- サイズ/流動性 ---
L407             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L408             try:
L409                 vol_series = ib.data['Volume'][t].dropna()
L410                 if len(vol_series)>=5 and len(s)==len(vol_series):
L411                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L412             except Exception: pass
L413             df.loc[t,'ADV60_USD'] = adv60
L414
L415             # --- 売上/利益の加速度等 ---
L416             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L417             REV_ANNUAL_STREAK = REV_YOY = np.nan
L418             EPS_YOY = np.nan
L419             try:
L420                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L421                 if qe is not None and not qe.empty:
L422                     if 'Revenue' in qe.columns:
L423                         rev = qe['Revenue'].dropna().astype(float)
L424                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L425                         if len(rev)>=6:
L426                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L427                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L428                         yoy_list=[]
L429                         for k in range(1,5):
L430                             if len(rev)>=4+k:
L431                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L432                                 if pd.notna(y): yoy_list.append(y)
L433                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L434                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L435                         try:
L436                             g = rev.groupby(rev.index.year)
L437                             ann_sum, cnt = g.sum(), g.count()
L438                             ann_sum = ann_sum[cnt >= 4]
L439                             if len(ann_sum) >= 2:
L440                                 yoy = ann_sum.pct_change().dropna()
L441                                 if not yoy.empty:
L442                                     REV_YOY = float(yoy.iloc[-1])
L443                                 streak = 0
L444                                 for v in yoy.iloc[::-1]:
L445                                     if pd.isna(v) or v <= 0:
L446                                         break
L447                                     streak += 1
L448                                 REV_ANNUAL_STREAK = float(streak)
L449                         except Exception:
L450                             pass
L451                     if 'Earnings' in qe.columns and so:
L452                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L453                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L454                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L455                         try:
L456                             g_eps = eps_series.groupby(eps_series.index.year)
L457                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L458                             ann_eps = ann_eps[cnt_eps >= 4]
L459                             if len(ann_eps) >= 2:
L460                                 eps_yoy = ann_eps.pct_change().dropna()
L461                                 if not eps_yoy.empty:
L462                                     EPS_YOY = float(eps_yoy.iloc[-1])
L463                         except Exception:
L464                             pass
L465             except Exception: pass
L466             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L467             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L468             df.loc[t,'REV_YOY'] = REV_YOY
L469             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L470             df.loc[t,'EPS_YOY'] = EPS_YOY
L471
L472             # --- Rule of 40 や周辺 ---
L473             total_rev_ttm = d.get('totalRevenue',np.nan)
L474             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L475             df.loc[t,'FCF_MGN'] = FCF_MGN
L476             rule40 = np.nan
L477             try:
L478                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L479             except Exception: pass
L480             df.loc[t,'RULE40'] = rule40
L481
L482             # --- トレンド補助 ---
L483             sma50  = s.rolling(50).mean()
L484             sma150 = s.rolling(150).mean()
L485             sma200 = s.rolling(200).mean()
L486             p = _safe_last(s)
L487
L488             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L489                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L490             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L491                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L492
L493             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L494             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L495
L496             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L497             if len(sma200.dropna()) >= 21:
L498                 cur200 = _safe_last(sma200)
L499                 old2001 = float(sma200.iloc[-21])
L500                 if old2001:
L501                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L502
L503             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L504             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L505             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L506             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L507             if len(sma200.dropna())>=105:
L508                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L509                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L510             # NEW: 200日線が連続で上向きの「日数」
L511             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L512             try:
L513                 s200 = sma200.dropna()
L514                 if len(s200) >= 2:
L515                     diff200 = s200.diff()
L516                     up = 0
L517                     for v in diff200.iloc[::-1]:
L518                         if pd.isna(v) or v <= 0:
L519                             break
L520                         up += 1
L521                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L522             except Exception:
L523                 pass
L524             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L525             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L526             if hi52 and hi52>0 and pd.notna(p):
L527                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L528             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L529             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L530
L531             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L532
L533             # --- 欠損メモ ---
L534             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L535             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L536             if need_finnhub:
L537                 fin_data = self.fetch_finnhub_metrics(t)
L538                 for col in need_finnhub:
L539                     val = fin_data.get(col)
L540                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L541             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L542                 if pd.isna(df.loc[t,col]):
L543                     if col=='DIV':
L544                         status = self.dividend_status(t)
L545                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L546                     else:
L547                         missing_logs.append({'Ticker':t,'Column':col})
L548
L549         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L550             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L551             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L552             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L553             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L554             c5 = (row.get('TR_str', np.nan) > 0)
L555             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L556             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L557             c8 = (row.get('RS', np.nan) >= 0.10)
L558             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L559
L560         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L561         assert 'trend_template' in df.columns
L562
L563         # === Z化と合成 ===
L564         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L565
```