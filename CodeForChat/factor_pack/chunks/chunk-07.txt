```text
     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L421                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L422             except Exception: pass
L423             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'], df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_Q_YOY, EPS_Q_YOY, REV_YOY_ACC, REV_YOY_VAR
L424             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L425
L426             # --- Rule of 40 や周辺 ---
L427             total_rev_ttm = d.get('totalRevenue',np.nan)
L428             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L429             df.loc[t,'FCF_MGN'] = FCF_MGN
L430             rule40 = np.nan
L431             try:
L432                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L433             except Exception: pass
L434             df.loc[t,'RULE40'] = rule40
L435
L436             # --- トレンド補助 ---
L437             sma50  = s.rolling(50).mean()
L438             sma150 = s.rolling(150).mean()
L439             sma200 = s.rolling(200).mean()
L440             p = _safe_last(s)
L441
L442             df.loc[t,'MA50_OVER_150'] = (
L443                 _safe_last(sma50)/_safe_last(sma150) - 1
L444                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L445             )
L446             df.loc[t,'MA150_OVER_200'] = (
L447                 _safe_last(sma150)/_safe_last(sma200) - 1
L448                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L449             )
L450
L451             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L452             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L453
L454             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L455             if len(sma200.dropna()) >= 21:
L456                 cur200 = _safe_last(sma200)
L457                 old2001 = float(sma200.iloc[-21])
L458                 if old2001:
L459                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L460
L461             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L462             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L463             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L464             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L465             if len(sma200.dropna())>=105:
L466                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L467                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L468             # NEW: 200日線が連続で上向きの「日数」
L469             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L470             try:
L471                 s200 = sma200.dropna()
L472                 if len(s200) >= 2:
L473                     diff200 = s200.diff()
L474                     up = 0
L475                     for v in diff200.iloc[::-1]:
L476                         if pd.isna(v) or v <= 0:
L477                             break
L478                         up += 1
L479                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L480             except Exception:
L481                 pass
L482             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L483             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L484             if hi52 and hi52>0 and pd.notna(p):
L485                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L486             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L487             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L488
L489             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L490
L491             # --- 欠損メモ ---
L492             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L493             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L494             if need_finnhub:
L495                 fin_data = self.fetch_finnhub_metrics(t)
L496                 for col in need_finnhub:
L497                     val = fin_data.get(col)
L498                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L499             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L500                 if pd.isna(df.loc[t,col]):
L501                     if col=='DIV':
L502                         status = self.dividend_status(t)
L503                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L504                     else:
L505                         missing_logs.append({'Ticker':t,'Column':col})
L506
L507         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L508             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L509             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L510             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L511             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L512             c5 = (row.get('TR_str', np.nan) > 0)
L513             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L514             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L515             c8 = (row.get('RS', np.nan) >= 0.10)
L516             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L517
L518         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L519         assert 'trend_template' in df.columns
L520
L521         # === Z化と合成 ===
L522         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L523
L524         df_z = pd.DataFrame(index=df.index)
L525         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L526         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L527         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L528         for col in ['REV_Q_YOY','EPS_Q_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']: df_z[col] = robust_z(df[col])
L529         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L530
L531         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L532         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L533         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L534         df_z['GROWTH_F']  = robust_z(
L535               0.25*df_z['REV']          # ↓0.30→0.25
L536             + 0.20*df_z['EPS_Q_YOY']
L537             + 0.15*df_z['REV_Q_YOY']
L538             + 0.15*df_z['REV_YOY_ACC']
L539             + 0.10*df_z['RULE40']
L540             + 0.10*df_z['FCF_MGN']
L541             + 0.10*df_z['EPS']          # ★追加：黒字優遇／赤字減点
L542             + 0.05*df_z['REV_ANN_STREAK']
L543             - 0.05*df_z['REV_YOY_VAR']
L544         ).clip(-3.0,3.0)
L545         df_z['MOM_F'] = robust_z(
L546               0.40*df_z['RS']
L547             + 0.15*df_z['TR_str']
L548             + 0.15*df_z['RS_SLOPE_6W']
L549             + 0.15*df_z['RS_SLOPE_13W']
L550             + 0.10*df_z['MA200_SLOPE_5M']
L551             + 0.10*df_z['MA200_UP_STREAK_D']
L552         ).clip(-3.0,3.0)
L553         df_z['VOL'] = robust_z(df['BETA'])
L554         df_z.rename(columns={'GROWTH_F':'GRW','MOM_F':'MOM','QUALITY_F':'QAL','YIELD_F':'YLD'}, inplace=True)
L555         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L556         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L557
L558         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L559         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L560         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L561         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L562
L563         # --- 重みは cfg を優先（外部があればそれを使用） ---
L564         # ① 全銘柄で G/D スコアを算出（unmasked）
L565         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L566
L567         d_comp = pd.concat({
L568             'QAL': df_z['D_QAL'],
L569             'YLD': df_z['D_YLD'],
L570             'VOL': df_z['D_VOL_RAW'],
L571             'TRD': df_z['D_TRD']
L572         }, axis=1)
L573         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L574         globals()['D_WEIGHTS_EFF'] = dw.copy()
L575         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L576
L577         # ② テンプレ判定（既存ロジックそのまま）
L578         mask = df['trend_template']
L579         if not bool(mask.any()):
L580             mask = (
L581                 (df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L582                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L583                 (df.get('RS', np.nan) >= 0.08) &
L584                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L585                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L586                 (df.get('MA150_OVER_200', np.nan) > 0) &
L587                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L588                 (df.get('TR_str', np.nan) > 0)
L589             ).fillna(False)
L590             df['trend_template'] = mask
L591
L592         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L593         g_score = g_score_all.loc[mask]
L594         Scorer.g_score = g_score
L595         df_z['GSC'] = g_score_all
L596         df_z['DSC'] = d_score_all
L597
L598         try:
L599             current = (
L600                 pd.read_csv("current_tickers.csv")
L601                   .iloc[:, 0]
L602                   .str.upper()
L603                   .tolist()
L604             )
L605         except FileNotFoundError:
L606             warnings.warn("current_tickers.csv not found — bonus skipped")
L607             current = []
L608
L609         mask_bonus = g_score.index.isin(current)
L610         if mask_bonus.any():
L611             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L612             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L613             # 2) g 側の σ を取り、NaN なら 0 に丸める
L614             sigma_g = g_score.std()
L615             if pd.isna(sigma_g):
L616                 sigma_g = 0.0
L617             bonus_g = round(k * sigma_g, 3)
L618             g_score.loc[mask_bonus] += bonus_g
L619             Scorer.g_score = g_score
L620             # 3) D 側も同様に σ の NaN をケア
L621             sigma_d = d_score_all.std()
L622             if pd.isna(sigma_d):
L623                 sigma_d = 0.0
L624             bonus_d = round(k * sigma_d, 3)
L625             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L626
L627         try:
L628             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L629         except Exception:
L630             pass
L631
L632     
```