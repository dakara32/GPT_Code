```text
'G_plus_D'])
L1372             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L1373             print("Low Score Candidates (GSC+DSC bottom 10):")
L1374             print(self.low10_table.to_string())
L1375         except Exception as e:
L1376             print(f"[warn] low-score ranking failed: {e}")
L1377             self.low10_table = None
L1378         if debug_mode:
L1379             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L1380         else:
L1381             logger.debug(
L1382                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L1383                 debug_mode, True
L1384             )
L1385
L1386     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1387     def notify_slack(self):
L1388         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1389
L1390         if not SLACK_WEBHOOK_URL:
L1391             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1392             return
L1393
L1394         def _filter_suffix_from(spec: dict, group: str) -> str:
L1395             g = spec.get(group, {})
L1396             parts = [str(m) for m in g.get("pre_mask", [])]
L1397             for k, v in (g.get("pre_filter", {}) or {}).items():
L1398                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L1399                 name = {"beta": "β"}.get(base, base)
L1400                 try:
L1401                     val = f"{float(v):g}"
L1402                 except Exception:
L1403                     val = str(v)
L1404                 parts.append(f"{name}{op}{val}")
L1405             return "" if not parts else " / filter:" + " & ".join(parts)
L1406
L1407         def _inject_filter_suffix(title: str, group: str) -> str:
L1408             suf = _filter_suffix_from(FILTER_SPEC, group)
L1409             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1410
L1411         def _blk(title, tbl, fmt=None, drop=()):
L1412             if tbl is None or getattr(tbl, 'empty', False):
L1413                 return f"{title}\n(選定なし)\n"
L1414             if drop and hasattr(tbl, 'columns'):
L1415                 keep = [c for c in tbl.columns if c not in drop]
L1416                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1417             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1418
L1419         message = "📈 ファクター分散最適化の結果\n"
L1420         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1421         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1422         message += "Changes\n" + ("(変更なし)\n" if self._changes_empty else f"```{self._changes_text}```\n")
L1423         message += "Performance Comparison:\n```" + self._performance_text + "```"
L1424
L1425         try:
L1426             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1427             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1428             if r is not None:
L1429                 r.raise_for_status()
L1430         except Exception as e:
L1431             print(f"[ERR] main_post_failed: {e}")
L1432
L1433 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1434
L1435 def io_build_input_bundle() -> InputBundle:
L1436     """
L1437     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1438     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1439     """
L1440     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1441     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"], missing_logs=state["missing_logs"])
L1442
L1443 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1444               n_target: int) -> tuple[list, float, float, float]:
L1445     """
L1446     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1447     戻り値：(pick, avg_res_corr, sum_score, objective)
L1448     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1449     """
L1450     sc.cfg = cfg
L1451
L1452     if hasattr(sc, "score_build_features"):
L1453         feat = sc.score_build_features(inb)
L1454         if not hasattr(sc, "_feat_logged"):
L1455             _tlog("features built (scorer)")
L1456             sc._feat_logged = True
L1457         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1458     else:
L1459         if not hasattr(sc, "_feat"):
L1460             fb = sc.aggregate_scores(inb, cfg)
L1461             sc._feat = fb
L1462         else:
L1463             fb = sc._feat
L1464         if not hasattr(sc, "_feat_logged"):
L1465             _tlog("features built (scorer)")
L1466             sc._feat_logged = True
L1467         agg = fb.g_score if group == "G" else fb.d_score_all
L1468         if group == "D" and hasattr(fb, "df"):
L1469             beta_raw = fb.df['BETA'].astype(float)
L1470             if D_BETA_MODE == "z":
L1471                 beta_for_filter = _zscore_series(beta_raw)
L1472             else:
L1473                 beta_for_filter = beta_raw
L1474
L1475             beta_mask = (beta_for_filter <= D_BETA_CUTOFF).reindex(agg.index, fill_value=False)
L1476             agg = agg[beta_mask]
L1477
L1478             if isinstance(agg, pd.Series):
L1479                 _min = agg.min(skipna=True)
L1480                 floor = (0.0 if not np.isfinite(_min) else float(_min)) - 1e6
L1481                 agg = agg.fillna(floor)
L1482
L1483             try:
L1484                 logger.info(
L1485                     "D-filter mode=%s cutoff=%s | pass=%d raw[mean=%.3f std=%.3f] z[mean≈0 std≈1]",
L1486                     D_BETA_MODE,
L1487                     D_BETA_CUTOFF,
L1488                     int(beta_mask.sum()),
L1489                     float(beta_raw.mean(skipna=True)),
L1490                     float(beta_raw.std(skipna=True, ddof=0)),
L1491                 )
L1492             except Exception:
L1493                 pass
L1494
L1495     if hasattr(sc, "filter_candidates"):
L1496         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1497
L1498     if isinstance(agg, pd.Series):
L1499         agg = _as_numeric_series(agg)
L1500
L1501     selector = Selector()
L1502     if hasattr(sc, "select_diversified"):
L1503         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1504             selector=selector, prev_tickers=None,
L1505             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1506             cross_mu=cfg.drrs.cross_mu_gd)
L1507     else:
L1508         if group == "G":
L1509             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1510             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1511                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1512                 lam=cfg.drrs.G.get("lam", 0.68),
L1513                 lookback=cfg.drrs.G.get("lookback", 252),
L1514                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1515         else:
L1516             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1517             g_fixed = getattr(sc, "_top_G", None)
L1518             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1519                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1520                 lam=cfg.drrs.D.get("lam", 0.85),
L1521                 lookback=cfg.drrs.D.get("lookback", 504),
L1522                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1523                 mu=cfg.drrs.cross_mu_gd)
L1524         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1525         sum_sc = res["sum_score"]; obj = res["objective"]
L1526         if group == "D":
L1527             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1528             _tlog("selection finalized (G/D)")
L1529     try:
L1530         inc = [t for t in exist if t in agg.index]
L1531         pick = _sticky_keep_current(
L1532             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1533             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1534         )
L1535     except Exception as _e:
L1536         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1537     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1538     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1539     try:
L1540         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1541         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1542         setattr(sc, f"_near_{group}", near10)
L1543         setattr(sc, f"_agg_{group}", agg)
L1544     except Exception:
L1545         pass
L1546
L1547     if group == "D":
L1548         _tlog("save done")
L1549     if group == "G":
L1550         sc._top_G = pick
L1551     return pick, avg_r, sum_sc, obj
L1552
L1553 def run_pipeline() -> SelectionBundle:
L1554     """
L1555     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1556     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1557     """
L1558     inb = io_build_input_bundle()
L1559     cfg = PipelineConfig(
L1560         weights=WeightsConfig(g=g_weights, d=D_weights),
L1561         drrs=DRRSParams(
L1562             corrM=corrM, shrink=DRRS_SHRINK,
L1563             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1564         ),
L1565         price_max=CAND_PRICE_MAX,
L1566         debug_mode=debug_mode
L1567     )
L1568     sc = Scorer()
L1569     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1570     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1571     alpha = Scorer.spx_to_alpha(inb.spx)
L1572     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1573     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1574     sc._top_G = top_G
L1575     try:
L1576         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1577         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1578     except Exception:
L1579         pass
L1580     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1581     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1582     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1583     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1584     fb = getattr(sc, "_feat", None)
L1585     out = Output()
L1586     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1587     try:
L1588         out._sc = sc
L1589     except Exception:
L1590         pass
L1591     if hasattr(sc, "_feat"):
L1592         try:
L1593             fb = sc._feat
L1594             out.display_results(
L1595                 exist=exist,
L1596                 bench=bench,
L1597                 df_raw=fb.df,
L1598                 df_z=fb.df_z,
L1599                 g_score=fb.g_score,
L1600                 d_score_all=fb.d_score_all,
L1601                 init_G=top_G,
L1602                 init_D=top_D,
L1603                 top_G=top_G,
L1604                 top_D=top_D,
L1605                 df_full_z=getattr(fb, "df_full_z", None),
L1606                 prev_G=getattr(sc, "_prev_G", exist),
L1607                 prev_D=getattr(sc, "_prev_D", exist),
L1608             )
L1609         except Exception:
L1610             pass
L1611     out.notify_slack()
L1612     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1613               "sum_score": sumG, "
```