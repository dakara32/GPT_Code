```text
   if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L383                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L384                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L385                 so = d.get('sharesOutstanding',None)
L386                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L387                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L388             except Exception: pass
L389             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L390
L391             # --- 財務安定性 ---
L392             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L393
L394             # --- EPS 変動 ---
L395             EPS_VAR_8Q = np.nan
L396             try:
L397                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L398                 if qe is not None and not qe.empty and so:
L399                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L400                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L401             except Exception: pass
L402             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L403
L404             # --- サイズ/流動性 ---
L405             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L406             try:
L407                 vol_series = ib.data['Volume'][t].dropna()
L408                 if len(vol_series)>=5 and len(s)==len(vol_series):
L409                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L410             except Exception: pass
L411             df.loc[t,'ADV60_USD'] = adv60
L412
L413             # --- 売上/利益の加速度等 ---
L414             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L415             REV_ANNUAL_STREAK = np.nan
L416             try:
L417                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L418                 if qe is not None and not qe.empty:
L419                     if 'Revenue' in qe.columns:
L420                         rev = qe['Revenue'].dropna().astype(float)
L421                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L422                         if len(rev)>=6:
L423                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L424                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L425                         yoy_list=[]
L426                         for k in range(1,5):
L427                             if len(rev)>=4+k:
L428                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L429                                 if pd.notna(y): yoy_list.append(y)
L430                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L431                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L432                         try:
L433                             g = rev.groupby(rev.index.year)
L434                             ann_sum, cnt = g.sum(), g.count()
L435                             ann_sum = ann_sum[cnt >= 4]
L436                             if len(ann_sum) >= 3:
L437                                 yoy = ann_sum.pct_change().dropna()
L438                                 streak = 0
L439                                 for v in yoy.iloc[::-1]:
L440                                     if pd.isna(v) or v <= 0:
L441                                         break
L442                                     streak += 1
L443                                 REV_ANNUAL_STREAK = float(streak)
L444                         except Exception:
L445                             pass
L446                     if 'Earnings' in qe.columns and so:
L447                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L448                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L449                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L450             except Exception: pass
L451             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'], df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_Q_YOY, EPS_Q_YOY, REV_YOY_ACC, REV_YOY_VAR
L452             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L453
L454             # --- Rule of 40 や周辺 ---
L455             total_rev_ttm = d.get('totalRevenue',np.nan)
L456             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L457             df.loc[t,'FCF_MGN'] = FCF_MGN
L458             rule40 = np.nan
L459             try:
L460                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L461             except Exception: pass
L462             df.loc[t,'RULE40'] = rule40
L463
L464             # --- トレンド補助 ---
L465             sma50  = s.rolling(50).mean()
L466             sma150 = s.rolling(150).mean()
L467             sma200 = s.rolling(200).mean()
L468             p = _safe_last(s)
L469
L470             df.loc[t,'MA50_OVER_150'] = (
L471                 _safe_last(sma50)/_safe_last(sma150) - 1
L472                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L473             )
L474             df.loc[t,'MA150_OVER_200'] = (
L475                 _safe_last(sma150)/_safe_last(sma200) - 1
L476                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L477             )
L478
L479             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L480             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L481
L482             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L483             if len(sma200.dropna()) >= 21:
L484                 cur200 = _safe_last(sma200)
L485                 old2001 = float(sma200.iloc[-21])
L486                 if old2001:
L487                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L488
L489             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L490             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L491             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L492             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L493             if len(sma200.dropna())>=105:
L494                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L495                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L496             # NEW: 200日線が連続で上向きの「日数」
L497             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L498             try:
L499                 s200 = sma200.dropna()
L500                 if len(s200) >= 2:
L501                     diff200 = s200.diff()
L502                     up = 0
L503                     for v in diff200.iloc[::-1]:
L504                         if pd.isna(v) or v <= 0:
L505                             break
L506                         up += 1
L507                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L508             except Exception:
L509                 pass
L510             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L511             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L512             if hi52 and hi52>0 and pd.notna(p):
L513                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L514             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L515             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L516
L517             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L518
L519             # --- 欠損メモ ---
L520             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L521             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L522             if need_finnhub:
L523                 fin_data = self.fetch_finnhub_metrics(t)
L524                 for col in need_finnhub:
L525                     val = fin_data.get(col)
L526                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L527             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L528                 if pd.isna(df.loc[t,col]):
L529                     if col=='DIV':
L530                         status = self.dividend_status(t)
L531                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L532                     else:
L533                         missing_logs.append({'Ticker':t,'Column':col})
L534
L535         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L536             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L537             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L538             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L539             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L540             c5 = (row.get('TR_str', np.nan) > 0)
L541             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L542             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L543             c8 = (row.get('RS', np.nan) >= 0.10)
L544             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L545
L546         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L547         assert 'trend_template' in df.columns
L548
L549         # === Z化と合成 ===
L550         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L551
L552         df_z = pd.DataFrame(index=df.index)
L553         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L554         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L555         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L556         for col in ['REV_Q_YOY','EPS_Q_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']: df_z[col] = robust_z(df[col])
L557         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L558
L559         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L560         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L561         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L562         df_z['GROWTH_F']  = robust_z(
L563               0.25*df_z['REV']          # ↓0.30→0.25
L564             + 0.20*df_z['EPS_Q_YOY']
L565             + 0.15*df_z['REV_Q_YOY']
L566             + 0.15*df_z['REV_YOY_ACC']
L567             + 0.10*df_z['RULE40']
L568             + 0.10*df_z['FCF_MGN']
L569             + 0.10*df_z['EPS']          # ★追加：黒字優遇／赤字減点
L570             + 0.05*df_z['REV_ANN_STREAK']
L571             - 0.05*df_z['REV_YOY_VAR']
L572         ).clip(-3.0,3.0)
L573         df_z['MOM_F'] = robust_z(
L574
```