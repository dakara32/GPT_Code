```text
roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L368             except Exception: pass
L369             df.loc[t,'MDD_1Y'] = MDD_1Y
L370
L371             RESID_VOL = np.nan
L372             if n>=120:
L373                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L374                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L375                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L376                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L377             df.loc[t,'RESID_VOL'] = RESID_VOL
L378
L379             DOWN_OUTPERF = np.nan
L380             if n>=60:
L381                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L382                 if mask.sum()>=10:
L383                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L384                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L385             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L386
L387             # --- 長期移動平均/位置 ---
L388             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L389             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L390
L391             # --- 配当の詳細系 ---
L392             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L393             try:
L394                 divs = yf.Ticker(t).dividends.dropna()
L395                 if not divs.empty:
L396                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L397                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L398                     ann = divs.groupby(divs.index.year).sum()
L399                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L400                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L401                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L402                 so = d.get('sharesOutstanding',None)
L403                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L404                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L405             except Exception: pass
L406             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L407
L408             # --- 財務安定性 ---
L409             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L410
L411             # --- EPS 変動 ---
L412             EPS_VAR_8Q = np.nan
L413             try:
L414                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L415                 if qe is not None and not qe.empty and so:
L416                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L417                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L418             except Exception: pass
L419             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L420
L421             # --- サイズ/流動性 ---
L422             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L423             try:
L424                 vol_series = ib.data['Volume'][t].dropna()
L425                 if len(vol_series)>=5 and len(s)==len(vol_series):
L426                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L427             except Exception: pass
L428             df.loc[t,'ADV60_USD'] = adv60
L429
L430             # --- 売上/利益の加速度等 ---
L431             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L432             REV_ANNUAL_STREAK = np.nan
L433             try:
L434                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L435                 if qe is not None and not qe.empty:
L436                     if 'Revenue' in qe.columns:
L437                         rev = qe['Revenue'].dropna().astype(float)
L438                         if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L439                         if len(rev)>=6:
L440                             yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L441                             if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L442                         yoy_list=[]
L443                         for k in range(1,5):
L444                             if len(rev)>=4+k:
L445                                 y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L446                                 if pd.notna(y): yoy_list.append(y)
L447                         if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L448                         # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L449                         try:
L450                             g = rev.groupby(rev.index.year)
L451                             ann_sum, cnt = g.sum(), g.count()
L452                             ann_sum = ann_sum[cnt >= 4]
L453                             if len(ann_sum) >= 3:
L454                                 yoy = ann_sum.pct_change().dropna()
L455                                 streak = 0
L456                                 for v in yoy.iloc[::-1]:
L457                                     if pd.isna(v) or v <= 0:
L458                                         break
L459                                     streak += 1
L460                                 REV_ANNUAL_STREAK = float(streak)
L461                         except Exception:
L462                             pass
L463                     if 'Earnings' in qe.columns and so:
L464                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L465                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L466                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L467             except Exception: pass
L468             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'], df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_Q_YOY, EPS_Q_YOY, REV_YOY_ACC, REV_YOY_VAR
L469             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L470
L471             # --- Rule of 40 や周辺 ---
L472             total_rev_ttm = d.get('totalRevenue',np.nan)
L473             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L474             df.loc[t,'FCF_MGN'] = FCF_MGN
L475             rule40 = np.nan
L476             try:
L477                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L478             except Exception: pass
L479             df.loc[t,'RULE40'] = rule40
L480
L481             # --- トレンド補助 ---
L482             sma50  = s.rolling(50).mean()
L483             sma150 = s.rolling(150).mean()
L484             sma200 = s.rolling(200).mean()
L485             p = _safe_last(s)
L486
L487             df.loc[t,'MA50_OVER_150'] = (
L488                 _safe_last(sma50)/_safe_last(sma150) - 1
L489                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L490             )
L491             df.loc[t,'MA150_OVER_200'] = (
L492                 _safe_last(sma150)/_safe_last(sma200) - 1
L493                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L494             )
L495
L496             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L497             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L498
L499             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L500             if len(sma200.dropna()) >= 21:
L501                 cur200 = _safe_last(sma200)
L502                 old2001 = float(sma200.iloc[-21])
L503                 if old2001:
L504                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L505
L506             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L507             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L508             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L509             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L510             if len(sma200.dropna())>=105:
L511                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L512                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L513             # NEW: 200日線が連続で上向きの「日数」
L514             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L515             try:
L516                 s200 = sma200.dropna()
L517                 if len(s200) >= 2:
L518                     diff200 = s200.diff()
L519                     up = 0
L520                     for v in diff200.iloc[::-1]:
L521                         if pd.isna(v) or v <= 0:
L522                             break
L523                         up += 1
L524                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L525             except Exception:
L526                 pass
L527             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L528             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L529             if hi52 and hi52>0 and pd.notna(p):
L530                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L531             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L532             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L533
L534             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L535
L536             # --- 欠損メモ ---
L537             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L538             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L539             if need_finnhub:
L540                 fin_data = self.fetch_finnhub_metrics(t)
L541                 for col in need_finnhub:
L542                     val = fin_data.get(col)
L543                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L544             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L545                 if pd.isna(df.loc[t,col]):
L546                     if col=='DIV':
L547                         status = self.dividend_status(t)
L548                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L549                     else:
L550                         missing_logs.append({'Ticker':t,'Column':col})
L551
L552         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L553             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L554             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L555             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L556             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L557             c5 = (row.get('TR_str', np.nan) > 0)
L558             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L559             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L560             c8 = (row.get('RS', np.nan) >= 0.10)
L561             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L562
L563         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L564         assert 'trend_template' in df.columns
L565
L566         # === Z化と合成 ===
L567         for col in
```