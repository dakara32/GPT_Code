```text
else np.nan
L455             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L456             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L457             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L458
L459             # --- 配当（欠損補完含む） ---
L460             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L461             if div is None or pd.isna(div):
L462                 try:
L463                     divs = yf.Ticker(t).dividends
L464                     if divs is not None and not divs.empty:
L465                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L466                         if last_close and last_close>0: div = float(div_1y/last_close)
L467                 except Exception: pass
L468             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L469
L470             # --- FCF/EV ---
L471             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L472             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L473
L474             # --- モメンタム・ボラ関連 ---
L475             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L476             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L477             n = int(min(len(r), len(rm)))
L478
L479             DOWNSIDE_DEV = np.nan
L480             if n>=60:
L481                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L482                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L483             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L484
L485             MDD_1Y = np.nan
L486             try:
L487                 w = s.iloc[-min(len(s),252):].dropna()
L488                 if len(w)>=30:
L489                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L490             except Exception: pass
L491             df.loc[t,'MDD_1Y'] = MDD_1Y
L492
L493             RESID_VOL = np.nan
L494             if n>=120:
L495                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L496                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L497                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L498                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L499             df.loc[t,'RESID_VOL'] = RESID_VOL
L500
L501             DOWN_OUTPERF = np.nan
L502             if n>=60:
L503                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L504                 if mask.sum()>=10:
L505                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L506                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L507             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L508
L509             # --- 長期移動平均/位置 ---
L510             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L511             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L512
L513             # --- 配当の詳細系 ---
L514             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L515             try:
L516                 divs = yf.Ticker(t).dividends.dropna()
L517                 if not divs.empty:
L518                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L519                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L520                     ann = divs.groupby(divs.index.year).sum()
L521                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L522                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L523                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L524                 so = d.get('sharesOutstanding',None)
L525                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L526                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L527             except Exception: pass
L528             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L529
L530             # --- 財務安定性 ---
L531             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L532
L533             # --- EPS 変動 ---
L534             EPS_VAR_8Q = np.nan
L535             try:
L536                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L537                 if qe is not None and not qe.empty and so:
L538                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L539                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L540             except Exception: pass
L541             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L542
L543             # --- サイズ/流動性 ---
L544             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L545             try:
L546                 vol_series = ib.data['Volume'][t].dropna()
L547                 if len(vol_series)>=5 and len(s)==len(vol_series):
L548                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L549             except Exception: pass
L550             df.loc[t,'ADV60_USD'] = adv60
L551
L552             # --- 売上/利益の加速度等 ---
L553             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L554             REV_YOY = REV_ANNUAL_STREAK = np.nan
L555             EPS_YOY = np.nan
L556             try:
L557                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L558                 rev_series = None
L559                 if qe is not None and not qe.empty and 'Revenue' in qe.columns:
L560                     rev_series = pd.to_numeric(qe['Revenue'], errors='coerce')
L561                 else:
L562                     qf = tickers_bulk.tickers[t].quarterly_financials
L563                     if qf is not None and not qf.empty and 'Total Revenue' in qf.index:
L564                         rev_series = pd.to_numeric(qf.loc['Total Revenue'], errors='coerce')
L565                         try:
L566                             rev_series = rev_series.sort_index()
L567                         except Exception:
L568                             pass
L569                     needs_fallback = True
L570                     if isinstance(rev_series, pd.Series):
L571                         needs_fallback = rev_series.dropna().empty
L572                     if needs_fallback:
L573                         fallback = _fetch_revenue_quarterly_via_finnhub(t)
L574                         if isinstance(fallback, pd.Series) and not fallback.dropna().empty:
L575                             rev_series = fallback
L576
L577                 if rev_series is not None and rev_series.dropna().shape[0] >= 2:
L578                     r = rev_series.dropna().astype(float)
L579                     yoy = r.pct_change(4).replace([np.inf, -np.inf], np.nan)
L580                     yoy_valid = yoy.dropna()
L581                     if not yoy_valid.empty:
L582                         REV_Q_YOY = float(yoy_valid.iloc[-1])
L583                         if len(yoy_valid) >= 2:
L584                             yoy_delta = yoy_valid.diff().dropna()
L585                             if not yoy_delta.empty:
L586                                 REV_YOY_ACC = float(yoy_delta.iloc[-1])
L587                             tail_len = min(4, len(yoy_valid))
L588                             tail = yoy_valid.iloc[-tail_len:]
L589                             if len(tail) >= 2:
L590                                 REV_YOY_VAR = float(tail.std(ddof=1))
L591                     if len(r) >= 8:
L592                         annual = r.rolling(4).sum().dropna()
L593                         if len(annual) >= 2:
L594                             prev = annual.iloc[-2]
L595                             if prev not in (None, 0) and not pd.isna(prev):
L596                                 REV_YOY = float((annual.iloc[-1] - prev) / prev)
L597                             streak_series = (annual.diff() > 0).astype(int).rolling(4, min_periods=1).sum()
L598                             if not streak_series.empty and pd.notna(streak_series.iloc[-1]):
L599                                 REV_ANNUAL_STREAK = int(streak_series.iloc[-1])
L600                 if qe is not None and not getattr(qe, "empty", True) and 'Earnings' in qe.columns and so:
L601                     eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L602                     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L603                         EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L604                         try:
L605                             g_eps = eps_series.groupby(eps_series.index.year)
L606                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L607                             ann_eps = ann_eps[cnt_eps >= 4]
L608                             if len(ann_eps) >= 2:
L609                                 eps_yoy = ann_eps.pct_change().dropna()
L610                                 if not eps_yoy.empty:
L611                                     EPS_YOY = float(eps_yoy.iloc[-1])
L612                         except Exception:
L613                             pass
L614             except Exception: pass
L615             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L616             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L617             df.loc[t,'REV_YOY'] = REV_YOY
L618             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L619             df.loc[t,'EPS_YOY'] = EPS_YOY
L620
L621             # --- Rule of 40 や周辺 ---
L622             total_rev_ttm = d.get('totalRevenue',np.nan)
L623             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L624             df.loc[t,'FCF_MGN'] = FCF_MGN
L625             rule40 = np.nan
L626             try:
L627                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L628             except Exception: pass
L629             df.loc[t,'RULE40'] = rule40
L630
L631             # --- トレンド補助 ---
L632             sma50  = s.rolling(50).mean()
L633             sma150 = s.rolling(150).mean()
L634             sma200 = s.rolling(200).mean()
L635             p = _safe_last(s)
L636
L637             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L638                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L639             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L640                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L641
L642             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L643             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L644
L645             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L646             if len(sma200.dropna()) >= 21:
L647                 cur200 = _safe_last(sma200)
L648                 old2001 = float(sma200.iloc[-21])
L649                 if old2001:
L650                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L651
L652             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L653             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L654             df.loc[t,'MA50_OVER_20
```