```text
ries = d.get("SEC_REV_Q_SERIES")
L978                 eps_series = d.get("SEC_EPS_Q_SERIES")
L979                 fallback_qearn = False
L980                 try:
L981                     qe = tickers_bulk.tickers[t].quarterly_earnings
L982                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L983                 except Exception:
L984                     qe = None
L985
L986                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L987                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L988                 r_raw = _ensure_series(r_src)
L989                 e_raw = _ensure_series(e_src)
L990
L991                 r_q = _to_quarterly(r_raw)
L992                 e_q = _to_quarterly(e_raw)
L993
L994                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L995                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L996
L997                 def _q_yoy(qs):
L998                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L999
L1000                 rev_q_yoy = _q_yoy(r_q)
L1001                 eps_q_yoy = _q_yoy(e_q)
L1002
L1003                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L1004                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L1005                         ann = qs.groupby(qs.index.year).last().pct_change()
L1006                         ann_dn = ann.dropna()
L1007                         if not ann_dn.empty:
L1008                             y = float(ann_dn.iloc[-1])
L1009                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L1010                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L1011                             return y, acc, var
L1012                     yoy_dn = yoy_ttm.dropna()
L1013                     if yoy_dn.empty:
L1014                         return np.nan, np.nan, np.nan
L1015                     return (
L1016                         float(yoy_dn.iloc[-1]),
L1017                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L1018                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L1019                     )
L1020
L1021                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L1022                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L1023
L1024                 def _pos_streak(s: pd.Series):
L1025                     s = s.dropna()
L1026                     if s.empty:
L1027                         return np.nan
L1028                     b = (s > 0).astype(int).to_numpy()[::-1]
L1029                     k = 0
L1030                     for v in b:
L1031                         if v == 1:
L1032                             k += 1
L1033                         else:
L1034                             break
L1035                     return float(k)
L1036
L1037                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L1038
L1039                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L1040                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L1041                 df.loc[t, "REV_YOY"] = rev_yoy
L1042                 df.loc[t, "EPS_YOY"] = eps_yoy
L1043                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L1044                 df.loc[t, "REV_YOY_VAR"] = rev_var
L1045                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L1046
L1047             except Exception as e:
L1048                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L1049
L1050         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1051             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1052             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1053             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1054             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1055             c5 = (row.get('TR_str', np.nan) > 0)
L1056             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1057             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1058             c8 = (row.get('RS', np.nan) >= 0.10)
L1059             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1060
L1061         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1062         assert 'trend_template' in df.columns
L1063
L1064         # === Z化と合成 ===
L1065         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1066
L1067         df_z = pd.DataFrame(index=df.index)
L1068         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1069         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1070         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1071
L1072         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1073         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1074         for col in grw_cols:
L1075             if col in df.columns:
L1076                 raw = pd.to_numeric(df[col], errors="coerce")
L1077                 df_z[col] = robust_z_keepnan(raw)
L1078         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1079             if k in df.columns and k not in df_z.columns:
L1080                 raw = pd.to_numeric(df[k], errors="coerce")
L1081                 df_z[k] = robust_z_keepnan(raw)
L1082         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1083
L1084         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1085         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1086         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1087
L1088         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1089         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1090         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1091
L1092         # ===== トレンドスロープ算出 =====
L1093         def zpos(x):
L1094             arr = robust_z(x)
L1095             idx = getattr(x, 'index', df_z.index)
L1096             return pd.Series(arr, index=idx).fillna(0.0)
L1097
L1098         def relu(x):
L1099             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1100             return ser.clip(lower=0).fillna(0.0)
L1101
L1102         # 売上トレンドスロープ（四半期）
L1103         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1104         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1105         slope_rev_combo = slope_rev - 0.25*noise_rev
L1106         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1107
L1108         # EPSトレンドスロープ（四半期）
L1109         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1110         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1111
L1112         # 年次トレンド（サブ）
L1113         slope_rev_yr = zpos(df_z['REV_YOY'])
L1114         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1115         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1116         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1117         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1118         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1119         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1120
L1121         # ===== GRW flexible score (variable data paths) =====
L1122         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1123         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1124         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1125         if debug_mode:
L1126             dbg_cols = [c for c in df.columns if isinstance(c, str) and c.startswith("DBG_GRW.")]
L1127             for col in dbg_cols:
L1128                 df_z[col] = df[col]
L1129
L1130         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1131         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1132             try:
L1133                 cols = ['GROWTH_F', 'GRW_FLEX_WEIGHT']
L1134                 use_cols = [c for c in cols if c in df_z.columns]
L1135                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1136                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1137                 limit = max(0, min(40, len(i)))
L1138                 print("[DEBUG: GRW]")
L1139                 for t in i.index[:limit]:
L1140                     row = i.loc[t]
L1141                     parts = []
L1142                     if pd.notna(row.get('GROWTH_F')):
L1143                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1144                     raw_val = grw_raw.get(t) if isinstance(grw_raw, pd.Series) else np.nan
L1145                     if pd.notna(raw_val):
L1146                         parts.append(f"GRW_FLEX_SCORE={raw_val:.3f}")
L1147                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1148                     if pd.notna(weight_val):
L1149                         parts.append(f"w={weight_val:.2f}")
L1150                     path_val = None
L1151                     try:
L1152                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1153                     except Exception:
L1154                         path_val = None
L1155                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1156                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1157                     if path_val:
L1158                         parts.append(f"PATH={path_val}")
L1159                     parts_json = None
L1160                     try:
L1161                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1162                     except Exception:
L1163                         parts_json = None
L1164                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1165                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1166                     if parts_json:
L1167                         parts.append(f"PARTS={parts_json}")
L1168                     if not parts:
L1169                         parts.append('no-data')
L1170                     print(f"Ticker: {t} | " + " ".join(parts))
L1171                 print()
L1172             except Exception as exc:
L1173                 print(f"[ERR] GRW debug dump failed: {exc}")
L1174
L1175         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1176             + 0.15*df_z['TR_str']
L1177             + 0.15*df_z['RS_SLOPE_6W']
L1178             + 0.15*df_z['RS_SLOPE_13W']
L1179             + 0.10*df_z['MA200_SLOPE_5M']
L1180             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1181         df_z['VOL'] = robust_z(df['BETA'])
L1182         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1183         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1184
L1185         # df_z 全明細をページングしてログ出力（最小版）
L1186         if getattr(cfg, "debug_mode", False):
L1187             pd.set_option("display.max_columns", None)
L1188             pd.set_option("display.max_colwidth", None)
L1189             pd.set_option("display.width", None)
L1190             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L1191             n = len(df_z)
L1192             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=
```