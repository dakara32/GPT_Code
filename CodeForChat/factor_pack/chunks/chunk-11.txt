```text
= info.get(t, {}) or {}
L1169                 rev_series = d.get("SEC_REV_Q_SERIES")
L1170                 eps_series = d.get("SEC_EPS_Q_SERIES")
L1171                 fallback_qearn = False
L1172                 try:
L1173                     qe = tickers_bulk.tickers[t].quarterly_earnings
L1174                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L1175                 except Exception:
L1176                     qe = None
L1177                 logger.debug(
L1178                     "[DERIV] %s: rev_q_len=%s eps_q_len=%s fallback_qearn=%s",
L1179                     t,
L1180                     _series_len(rev_series),
L1181                     _series_len(eps_series),
L1182                     fallback_qearn,
L1183                 )
L1184
L1185                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L1186                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L1187                 r_raw = _ensure_series(r_src)
L1188                 e_raw = _ensure_series(e_src)
L1189                 _log("DERIV_SRC", f"{t} rev_raw_len={r_raw.size} eps_raw_len={e_raw.size}")
L1190
L1191                 r_q = _to_quarterly(r_raw)
L1192                 e_q = _to_quarterly(e_raw)
L1193                 _log("DERIV_Q", f"{t} rev_q_len={r_q.size} eps_q_len={e_q.size}")
L1194                 if r_q.size >= 5:
L1195                     rev_q_ge5 += 1
L1196
L1197                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L1198                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L1199                 has_ttm = int(not r_yoy_ttm.dropna().empty)
L1200                 ttm_yoy_avail += has_ttm
L1201                 _log("DERIV_TTM", f"{t} rev_ttm_yoy_len={r_yoy_ttm.dropna().size} eps_ttm_yoy_len={e_yoy_ttm.dropna().size}")
L1202
L1203                 def _q_yoy(qs):
L1204                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L1205
L1206                 rev_q_yoy = _q_yoy(r_q)
L1207                 eps_q_yoy = _q_yoy(e_q)
L1208
L1209                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L1210                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L1211                         ann = qs.groupby(qs.index.year).last().pct_change()
L1212                         ann_dn = ann.dropna()
L1213                         if not ann_dn.empty:
L1214                             y = float(ann_dn.iloc[-1])
L1215                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L1216                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L1217                             return y, acc, var
L1218                     yoy_dn = yoy_ttm.dropna()
L1219                     if yoy_dn.empty:
L1220                         return np.nan, np.nan, np.nan
L1221                     return (
L1222                         float(yoy_dn.iloc[-1]),
L1223                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L1224                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L1225                     )
L1226
L1227                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L1228                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L1229
L1230                 def _pos_streak(s: pd.Series):
L1231                     s = s.dropna()
L1232                     if s.empty:
L1233                         return np.nan
L1234                     b = (s > 0).astype(int).to_numpy()[::-1]
L1235                     k = 0
L1236                     for v in b:
L1237                         if v == 1:
L1238                             k += 1
L1239                         else:
L1240                             break
L1241                     return float(k)
L1242
L1243                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L1244
L1245                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L1246                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L1247                 df.loc[t, "REV_YOY"] = rev_yoy
L1248                 df.loc[t, "EPS_YOY"] = eps_yoy
L1249                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L1250                 df.loc[t, "REV_YOY_VAR"] = rev_var
L1251                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L1252
L1253                 wrote_growth += 1
L1254                 _log(
L1255                     "DERIV_WRITE",
L1256                     f"{t} wrote: Q_YOY(rev={rev_q_yoy}, eps={eps_q_yoy}) ANN(rev_yoy={rev_yoy}, acc={rev_acc}, var={rev_var}) streak={rev_ann_streak}",
L1257                 )
L1258
L1259             except Exception as e:
L1260                 logger.warning("[DERIV_WARN] %s growth-derivatives failed: %s", t, e)
L1261                 _log("DERIV_WARN", f"{t} {type(e).__name__}: {e}")
L1262
L1263         _log("DERIV_SUMMARY", f"rev_q_len>=5: {rev_q_ge5}/{len(tickers)}  ttm_yoy_available: {ttm_yoy_avail}  wrote_growth_for: {wrote_growth}")
L1264
L1265         try:
L1266             cols = [
L1267                 "REV_Q_YOY",
L1268                 "EPS_Q_YOY",
L1269                 "REV_YOY",
L1270                 "EPS_YOY",
L1271                 "REV_YOY_ACC",
L1272                 "REV_YOY_VAR",
L1273                 "REV_ANN_STREAK",
L1274             ]
L1275             cnt = {c: int(df[c].count()) for c in cols if c in df.columns}
L1276             _log("DERIV_NONNAN_COUNTS", str(cnt))
L1277         except Exception as e:
L1278             _log("DERIV_NONNAN_COUNTS", f"error: {e}")
L1279
L1280         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1281             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1282             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1283             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1284             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1285             c5 = (row.get('TR_str', np.nan) > 0)
L1286             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1287             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1288             c8 = (row.get('RS', np.nan) >= 0.10)
L1289             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1290
L1291         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1292         assert 'trend_template' in df.columns
L1293
L1294         # === Z化と合成 ===
L1295         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1296
L1297         df_z = pd.DataFrame(index=df.index)
L1298         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1299         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1300         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1301
L1302         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1303         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1304         for col in grw_cols:
L1305             if col in df.columns:
L1306                 raw = pd.to_numeric(df[col], errors="coerce")
L1307                 df_z[col] = robust_z_keepnan(raw)
L1308                 df_z[f'{col}_RAW'] = raw
L1309         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1310             if k in df.columns and k not in df_z.columns:
L1311                 raw = pd.to_numeric(df[k], errors="coerce")
L1312                 df_z[k] = robust_z_keepnan(raw)
L1313                 df_z[f'{k}_RAW'] = raw
L1314         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1315
L1316         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1317         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1318         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1319
L1320         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1321         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1322         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1323
L1324         # ===== トレンドスロープ算出 =====
L1325         def zpos(x):
L1326             arr = robust_z(x)
L1327             idx = getattr(x, 'index', df_z.index)
L1328             return pd.Series(arr, index=idx).fillna(0.0)
L1329
L1330         def relu(x):
L1331             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1332             return ser.clip(lower=0).fillna(0.0)
L1333
L1334         # 売上トレンドスロープ（四半期）
L1335         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1336         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1337         slope_rev_combo = slope_rev - 0.25*noise_rev
L1338         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L1339         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1340
L1341         # EPSトレンドスロープ（四半期）
L1342         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1343         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L1344         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1345
L1346         # 年次トレンド（サブ）
L1347         slope_rev_yr = zpos(df_z['REV_YOY'])
L1348         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1349         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1350         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1351         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1352         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L1353         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1354         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L1355         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1356
L1357         # ===== GRW flexible score (variable data paths) =====
L1358         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1359         df_z['GRW_FLEX_SCORE_RAW'] = grw_raw
L1360         df_z['GROWTH_F_RAW'] = grw_raw
L1361         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1362         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1363         df_z['GRW_FLEX_CORE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_CORE'), errors="coerce")
L1364         df_z['GRW_FLEX_PRICE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_PRICE'), errors="coerce")
L1365
L1366         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1367         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1368             try:
L1369                 cols = ['GROWTH_F', 'GROWTH_F_RAW', 'GRW_FLEX_WEIGHT']
L1370                 use_cols = [c for c in cols if c in df_z.columns]
L1371                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1372                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1373                 limit = max(0, min(40, len(i)))
L1374                 print("[DEBUG: GRW]")
L1375                 for t in i.index[:limit]:
L1376                     row = i.loc[t]
L1377                     parts = []
L1378                     if pd.notna(row.get('GROWTH_F')):
L1379                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1380                     raw_val = row.get('GROWTH_F_RAW')
L1381                     if pd.notna(raw_val):
L1382                         parts.append(f"GROWTH_F_RAW={raw_val:.3f}")
L1383                     weight_val = row.get('GRW_FLEX_WEIGH
```