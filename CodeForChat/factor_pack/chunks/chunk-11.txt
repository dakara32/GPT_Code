```text
eric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1083         df_z['GRW_FLEX_SCORE_RAW'] = grw_raw
L1084         df_z['GROWTH_F_RAW'] = grw_raw
L1085         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1086         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1087         df_z['GRW_FLEX_CORE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_CORE'), errors="coerce")
L1088         df_z['GRW_FLEX_PRICE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_PRICE'), errors="coerce")
L1089
L1090         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1091         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1092             try:
L1093                 cols = ['GROWTH_F', 'GROWTH_F_RAW', 'GRW_FLEX_WEIGHT']
L1094                 use_cols = [c for c in cols if c in df_z.columns]
L1095                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1096                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1097                 limit = max(0, min(40, len(i)))
L1098                 print("[DEBUG: GRW]")
L1099                 for t in i.index[:limit]:
L1100                     row = i.loc[t]
L1101                     parts = []
L1102                     if pd.notna(row.get('GROWTH_F')):
L1103                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1104                     raw_val = row.get('GROWTH_F_RAW')
L1105                     if pd.notna(raw_val):
L1106                         parts.append(f"GROWTH_F_RAW={raw_val:.3f}")
L1107                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1108                     if pd.notna(weight_val):
L1109                         parts.append(f"w={weight_val:.2f}")
L1110                     path_val = None
L1111                     try:
L1112                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1113                     except Exception:
L1114                         path_val = None
L1115                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1116                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1117                     if path_val:
L1118                         parts.append(f"PATH={path_val}")
L1119                     parts_json = None
L1120                     try:
L1121                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1122                     except Exception:
L1123                         parts_json = None
L1124                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1125                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1126                     if parts_json:
L1127                         parts.append(f"PARTS={parts_json}")
L1128                     if not parts:
L1129                         parts.append('no-data')
L1130                     print(f"Ticker: {t} | " + " ".join(parts))
L1131                 print()
L1132             except Exception as exc:
L1133                 print(f"[ERR] GRW debug dump failed: {exc}")
L1134
L1135         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1136             + 0.15*df_z['TR_str']
L1137             + 0.15*df_z['RS_SLOPE_6W']
L1138             + 0.15*df_z['RS_SLOPE_13W']
L1139             + 0.10*df_z['MA200_SLOPE_5M']
L1140             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1141         df_z['VOL'] = robust_z(df['BETA'])
L1142         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1143         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1144
L1145         # df_z 全明細をページングしてログ出力（最小版）
L1146         if getattr(cfg, "debug_mode", False):
L1147             pd.set_option("display.max_columns", None)
L1148             pd.set_option("display.max_colwidth", None)
L1149             pd.set_option("display.width", None)
L1150             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L1151             n = len(df_z)
L1152             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1153             for i in range(0, n, page):
L1154                 j = min(i + page, n)
L1155                 try:
L1156                     chunk_str = df_z.iloc[i:j].to_string()
L1157                 except Exception:
L1158                     chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1159                 logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1160             logger.info("=== df_z FULL DUMP end ===")
L1161
L1162         # === begin: BIO LOSS PENALTY =====================================
L1163         try:
L1164             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1165         except Exception:
L1166             penalty_z = 0.8
L1167
L1168         def _is_bio_like(t: str) -> bool:
L1169             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1170             sec = str(inf.get("sector", "")).lower()
L1171             ind = str(inf.get("industry", "")).lower()
L1172             if "health" not in sec:
L1173                 return False
L1174             keys = ("biotech", "biopharma", "pharma")
L1175             return any(k in ind for k in keys)
L1176
L1177         tickers_s = pd.Index(df_z.index)
L1178         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1179         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1180         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1181
L1182         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1183             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1184             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1185         # === end: BIO LOSS PENALTY =======================================
L1186
L1187         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1188         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1189
L1190         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1191         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1192         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1193         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1194
L1195         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1196         # ① 全銘柄で G/D スコアを算出（unmasked）
L1197         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1198
L1199         d_comp = pd.concat({
L1200             'QAL': df_z['D_QAL'],
L1201             'YLD': df_z['D_YLD'],
L1202             'VOL': df_z['D_VOL_RAW'],
L1203             'TRD': df_z['D_TRD']
L1204         }, axis=1)
L1205         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1206         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1207         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1208
L1209         # ② テンプレ判定（既存ロジックそのまま）
L1210         mask = df['trend_template']
L1211         if not bool(mask.any()):
L1212             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1213                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1214                 (df.get('RS', np.nan) >= 0.08) &
L1215                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1216                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1217                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1218                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1219                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1220             df['trend_template'] = mask
L1221
L1222         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1223         g_score = g_score_all.loc[mask]
L1224         Scorer.g_score = g_score
L1225         df_z['GSC'] = g_score_all
L1226         df_z['DSC'] = d_score_all
L1227
L1228         try:
L1229             current = (pd.read_csv("current_tickers.csv")
L1230                   .iloc[:, 0]
L1231                   .str.upper()
L1232                   .tolist())
L1233         except FileNotFoundError:
L1234             warnings.warn("current_tickers.csv not found — bonus skipped")
L1235             current = []
L1236
L1237         mask_bonus = g_score.index.isin(current)
L1238         if mask_bonus.any():
L1239             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1240             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1241             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1242             sigma_g = g_score.std()
L1243             if pd.isna(sigma_g):
L1244                 sigma_g = 0.0
L1245             bonus_g = round(k * sigma_g, 3)
L1246             g_score.loc[mask_bonus] += bonus_g
L1247             Scorer.g_score = g_score
L1248             # 3) D 側も同様に σ の NaN をケア
L1249             sigma_d = d_score_all.std()
L1250             if pd.isna(sigma_d):
L1251                 sigma_d = 0.0
L1252             bonus_d = round(k * sigma_d, 3)
L1253             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1254
L1255         try:
L1256             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1257         except Exception:
L1258             pass
L1259
L1260         df_full = df.copy()
L1261         df_full_z = df_z.copy()
L1262
L1263         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1264         return FeatureBundle(df=df,
L1265             df_z=df_z,
L1266             g_score=g_score,
L1267             d_score_all=d_score_all,
L1268             missing_logs=pd.DataFrame(missing_logs),
L1269             df_full=df_full,
L1270             df_full_z=df_full_z,
L1271             scaler=None)
L1272
L1273 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1274     """
L1275     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1276     次の列を feature_df に追加する（index=ticker）。
L1277       - G_BREAKOUT_recent_5d : bool
L1278       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1279       - G_PULLBACK_recent_5d : bool
L1280       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1281       - G_PIVOT_price        : float
L1282     失敗しても例外は握り潰し、既存処理を阻害しない。
L1283     """
L1284     try:
L1285         px   = bundle.px                      # 終値 DataFrame
L1286         hi   = bundle.data['High']
L1287         lo   = bundle.data['Low']
L1288         vol  = bundle.data['Volume']
L1289         bench= bundle.spx                     # ベンチマーク Series
L1290
L1291         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1292         g_universe = getattr(self_obj, "g_universe", None)
L1293         if g_universe is None:
L1294             try:
L1295                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1296             except Exception:
L1297                 g_universe = list(feature_df.index)
L1298         if not g_universe:
L1299             return feature_df
L1300
L1301         # 指標
L1302         px = px.ffill(limit=2)
L1303         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1304         ma50  = px[g_universe].rolling(50).mean()
L1305         ma150 = px[g_universe].rolling(150).mean()
L1306         ma200 = px[g_universe].rolling(200).mean()
L1307         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1308         vol20 = vol[g_universe].rolling(20).mean()
L1309         vol50 = vol[g_universe].rolling(50).mean()
L1310
L1311         # トレンドテンプレート合格
L1312         trend_template_ok = (px[g
```