```text
)
L998             idx = getattr(x, 'index', df_z.index)
L999             return pd.Series(arr, index=idx).fillna(0.0)
L1000
L1001         def relu(x):
L1002             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1003             return ser.clip(lower=0).fillna(0.0)
L1004
L1005         # 売上トレンドスロープ（四半期）
L1006         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1007         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1008         slope_rev_combo = slope_rev - 0.25*noise_rev
L1009         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1010
L1011         # EPSトレンドスロープ（四半期）
L1012         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1013         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1014
L1015         # 年次トレンド（サブ）
L1016         slope_rev_yr = zpos(df_z['REV_YOY'])
L1017         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1018         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1019         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1020         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1021         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1022         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1023
L1024         # ===== GRW flexible score (variable data paths) =====
L1025         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1026         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1027         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1028
L1029         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1030         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1031             try:
L1032                 cols = ['GROWTH_F', 'GRW_FLEX_WEIGHT']
L1033                 use_cols = [c for c in cols if c in df_z.columns]
L1034                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1035                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1036                 limit = max(0, min(40, len(i)))
L1037                 print("[DEBUG: GRW]")
L1038                 for t in i.index[:limit]:
L1039                     row = i.loc[t]
L1040                     parts = []
L1041                     if pd.notna(row.get('GROWTH_F')):
L1042                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1043                     raw_val = grw_raw.get(t) if isinstance(grw_raw, pd.Series) else np.nan
L1044                     if pd.notna(raw_val):
L1045                         parts.append(f"GRW_FLEX_SCORE={raw_val:.3f}")
L1046                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1047                     if pd.notna(weight_val):
L1048                         parts.append(f"w={weight_val:.2f}")
L1049                     path_val = None
L1050                     try:
L1051                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1052                     except Exception:
L1053                         path_val = None
L1054                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1055                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1056                     if path_val:
L1057                         parts.append(f"PATH={path_val}")
L1058                     parts_json = None
L1059                     try:
L1060                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1061                     except Exception:
L1062                         parts_json = None
L1063                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1064                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1065                     if parts_json:
L1066                         parts.append(f"PARTS={parts_json}")
L1067                     if not parts:
L1068                         parts.append('no-data')
L1069                     print(f"Ticker: {t} | " + " ".join(parts))
L1070                 print()
L1071             except Exception as exc:
L1072                 print(f"[ERR] GRW debug dump failed: {exc}")
L1073
L1074         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1075             + 0.15*df_z['TR_str']
L1076             + 0.15*df_z['RS_SLOPE_6W']
L1077             + 0.15*df_z['RS_SLOPE_13W']
L1078             + 0.10*df_z['MA200_SLOPE_5M']
L1079             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1080         df_z['VOL'] = robust_z(df['BETA'])
L1081         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1082         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1083
L1084         # df_z 全明細をページングしてログ出力（最小版）
L1085         if getattr(cfg, "debug_mode", False):
L1086             pd.set_option("display.max_columns", None)
L1087             pd.set_option("display.max_colwidth", None)
L1088             pd.set_option("display.width", None)
L1089             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L1090             n = len(df_z)
L1091             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1092             for i in range(0, n, page):
L1093                 j = min(i + page, n)
L1094                 try:
L1095                     chunk_str = df_z.iloc[i:j].to_string()
L1096                 except Exception:
L1097                     chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1098                 logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1099             logger.info("=== df_z FULL DUMP end ===")
L1100
L1101         # === begin: BIO LOSS PENALTY =====================================
L1102         try:
L1103             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1104         except Exception:
L1105             penalty_z = 0.8
L1106
L1107         def _is_bio_like(t: str) -> bool:
L1108             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1109             sec = str(inf.get("sector", "")).lower()
L1110             ind = str(inf.get("industry", "")).lower()
L1111             if "health" not in sec:
L1112                 return False
L1113             keys = ("biotech", "biopharma", "pharma")
L1114             return any(k in ind for k in keys)
L1115
L1116         tickers_s = pd.Index(df_z.index)
L1117         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1118         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1119         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1120
L1121         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1122             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1123             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1124         # === end: BIO LOSS PENALTY =======================================
L1125
L1126         assert not any(c.endswith("_RAW") for c in df_z.columns)
L1127         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L1128             assert c not in df_z.columns
L1129
L1130         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1131         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1132
L1133         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1134         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1135         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1136         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1137
L1138         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1139         # ① 全銘柄で G/D スコアを算出（unmasked）
L1140         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1141
L1142         d_comp = pd.concat({
L1143             'QAL': df_z['D_QAL'],
L1144             'YLD': df_z['D_YLD'],
L1145             'VOL': df_z['D_VOL_RAW'],
L1146             'TRD': df_z['D_TRD']
L1147         }, axis=1)
L1148         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1149         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1150         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1151
L1152         # ② テンプレ判定（既存ロジックそのまま）
L1153         mask = df['trend_template']
L1154         if not bool(mask.any()):
L1155             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1156                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1157                 (df.get('RS', np.nan) >= 0.08) &
L1158                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1159                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1160                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1161                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1162                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1163             df['trend_template'] = mask
L1164
L1165         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1166         g_score = g_score_all.loc[mask]
L1167         Scorer.g_score = g_score
L1168         df_z['GSC'] = g_score_all
L1169         df_z['DSC'] = d_score_all
L1170
L1171         try:
L1172             current = (pd.read_csv("current_tickers.csv")
L1173                   .iloc[:, 0]
L1174                   .str.upper()
L1175                   .tolist())
L1176         except FileNotFoundError:
L1177             warnings.warn("current_tickers.csv not found — bonus skipped")
L1178             current = []
L1179
L1180         mask_bonus = g_score.index.isin(current)
L1181         if mask_bonus.any():
L1182             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1183             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1184             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1185             sigma_g = g_score.std()
L1186             if pd.isna(sigma_g):
L1187                 sigma_g = 0.0
L1188             bonus_g = round(k * sigma_g, 3)
L1189             g_score.loc[mask_bonus] += bonus_g
L1190             Scorer.g_score = g_score
L1191             # 3) D 側も同様に σ の NaN をケア
L1192             sigma_d = d_score_all.std()
L1193             if pd.isna(sigma_d):
L1194                 sigma_d = 0.0
L1195             bonus_d = round(k * sigma_d, 3)
L1196             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1197
L1198         try:
L1199             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1200         except Exception:
L1201             pass
L1202
L1203         df_full = df.copy()
L1204         df_full_z = df_z.copy()
L1205
L1206         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1207         return FeatureBundle(df=df,
L1208             df_z=df_z,
L1209             g_score=g_score,
L1210             d_score_all=d_score_all,
L1211             missing_logs=pd.DataFrame(missing_logs),
L1212             df_full=df_full,
L1213             df_full_z=df_full_z,
L1214             scaler=None)
L1215
L1216 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1217     """
L1218     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1219     次の列を feature_df に追加する（index=ticker）。
L1220       - G_BREAKOUT_recent_5d : bool
L1221       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1222       - G_PULLBACK_recent_5d : bool
L1223       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1224       - G_PIVOT_price     
```