```text
                 else:
L723                             break
L724                     return float(k)
L725
L726                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L727
L728                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L729                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L730                 df.loc[t, "REV_YOY"] = rev_yoy
L731                 df.loc[t, "EPS_YOY"] = eps_yoy
L732                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L733                 df.loc[t, "REV_YOY_VAR"] = rev_var
L734                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L735
L736             except Exception as e:
L737                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L738
L739         def _pct_change(new, old):
L740             try:
L741                 if np.isfinite(new) and np.isfinite(old) and float(old) != 0:
L742                     return float((new - old) / abs(old))
L743             except Exception:
L744                 pass
L745             return np.nan
L746
L747         def _pct_series(a: pd.Series, b: pd.Series) -> list[float]:
L748             a_vals = pd.to_numeric(a, errors="coerce") if a is not None else pd.Series(np.nan, index=df.index)
L749             b_vals = pd.to_numeric(b, errors="coerce") if b is not None else pd.Series(np.nan, index=df.index)
L750             return [_pct_change(x, y) for x, y in zip(a_vals.reindex(df.index), b_vals.reindex(df.index))]
L751
L752         def _mean_valid(vals: list[float]) -> float:
L753             arr = [float(v) for v in vals if np.isfinite(v)]
L754             return float(np.mean(arr)) if arr else np.nan
L755
L756         grw_q_eps_last = _pct_series(df['EPS_Q'], df.get('EPS_Q_PREV', pd.Series(np.nan, index=df.index)))
L757         grw_q_rev_last = _pct_series(df['REV_Q'], df.get('REV_Q_PREV', pd.Series(np.nan, index=df.index)))
L758         grw_q_eps_ttm = _pct_series(df['EPS'], df.get('EPS_TTM_PREV', pd.Series(np.nan, index=df.index)))
L759         grw_q_rev_ttm = _pct_series(df['REV_TTM'], df.get('REV_TTM_PREV', pd.Series(np.nan, index=df.index)))
L760
L761         grw_a_eps_yoy = _pct_series(df.get('EPS_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('EPS_A_PREV', pd.Series(np.nan, index=df.index)))
L762         grw_a_rev_yoy = _pct_series(df.get('REV_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('REV_A_PREV', pd.Series(np.nan, index=df.index)))
L763         grw_a_eps_cagr = pd.to_numeric(df.get('EPS_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L764         grw_a_rev_cagr = pd.to_numeric(df.get('REV_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L765
L766         grw_q_combined = [
L767             _mean_valid([a, b, c, d])
L768             for a, b, c, d in zip(grw_q_eps_last, grw_q_rev_last, grw_q_eps_ttm, grw_q_rev_ttm)
L769         ]
L770         grw_a_combined = [
L771             _mean_valid([a, b, c, d])
L772             for a, b, c, d in zip(grw_a_eps_yoy, grw_a_rev_yoy, grw_a_eps_cagr, grw_a_rev_cagr)
L773         ]
L774
L775         df['GRW_Q_RAW'] = pd.Series(grw_q_combined, index=df.index, dtype=float)
L776         df['GRW_A_RAW'] = pd.Series(grw_a_combined, index=df.index, dtype=float)
L777
L778         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L779             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L780             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L781             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L782             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L783             c5 = (row.get('TR_str', np.nan) > 0)
L784             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L785             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L786             c8 = (row.get('RS', np.nan) >= 0.10)
L787             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L788
L789         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L790         assert 'trend_template' in df.columns
L791
L792         def _calc_eps_abs_slope(eps_series, n=12):
L793             try:
L794                 if isinstance(eps_series, pd.Series):
L795                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L796                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L797                     series = pd.Series(eps_series, dtype=float).dropna()
L798                 else:
L799                     return 0.0
L800             except Exception:
L801                 return 0.0
L802
L803             if series.empty:
L804                 return 0.0
L805
L806             tail = series.tail(n).to_numpy(dtype=float)
L807             if tail.size < 2:
L808                 return 0.0
L809
L810             x = np.arange(tail.size, dtype=float)
L811             x = x - x.mean()
L812             y = tail - tail.mean()
L813             denom = np.dot(x, x)
L814             if denom == 0:
L815                 return 0.0
L816             slope = float(np.dot(x, y) / denom)
L817             return slope
L818
L819         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L820         df.drop(columns=['EPS_SERIES'], inplace=True)
L821
L822         # === Z化と合成 ===
L823         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L824
L825         df_z = pd.DataFrame(index=df.index)
L826         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L827         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L828         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L829
L830         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L831
L832         # === Growth深掘り系（欠損保持z + RAW併載） ===
L833         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L834         for col in grw_cols:
L835             if col in df.columns:
L836                 raw = pd.to_numeric(df[col], errors="coerce")
L837                 df_z[col] = robust_z_keepnan(raw)
L838         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L839             if k in df.columns and k not in df_z.columns:
L840                 raw = pd.to_numeric(df[k], errors="coerce")
L841                 df_z[k] = robust_z_keepnan(raw)
L842         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L843
L844         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L845         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L846         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L847
L848         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L849         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L850         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L851
L852         # ===== トレンドスロープ算出 =====
L853         def zpos(x):
L854             arr = robust_z(x)
L855             idx = getattr(x, 'index', df_z.index)
L856             return pd.Series(arr, index=idx).fillna(0.0)
L857
L858         def relu(x):
L859             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L860             return ser.clip(lower=0).fillna(0.0)
L861
L862         # 売上トレンドスロープ（四半期）
L863         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L864         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L865         slope_rev_combo = slope_rev - 0.25*noise_rev
L866         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L867
L868         # EPSトレンドスロープ（四半期）
L869         slope_eps = (
L870             0.40*zpos(df_z['EPS_Q_YOY']) +
L871             0.20*zpos(df_z['EPS_POS']) +
L872             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L873         )
L874         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L875
L876         # 年次トレンド（サブ）
L877         slope_rev_yr = zpos(df_z['REV_YOY'])
L878         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L879         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L880         streak_yr = streak_base / (streak_base.abs() + 1.0)
L881         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L882         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L883         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L884
L885         grw_q_z = robust_z_keepnan(df['GRW_Q_RAW']).clip(-3.0, 3.0)
L886         grw_a_z = robust_z_keepnan(df['GRW_A_RAW']).clip(-3.0, 3.0)
L887         df_z['GRW_Q'] = grw_q_z
L888         df_z['GRW_A'] = grw_a_z
L889
L890         try:
L891             mix = float(os.environ.get("GRW_Q_ANNUAL_MIX", "0.7"))
L892         except Exception:
L893             mix = 0.7
L894         if not np.isfinite(mix):
L895             mix = 0.7
L896         mix = float(np.clip(mix, 0.0, 1.0))
L897
L898         weights_q: list[float] = []
L899         weights_a: list[float] = []
L900         grw_mix: list[float] = []
L901         for idx in df.index:
L902             q_val = grw_q_z.get(idx, np.nan)
L903             a_val = grw_a_z.get(idx, np.nan)
L904             q_ok = np.isfinite(q_val)
L905             a_ok = np.isfinite(a_val)
L906             if q_ok and a_ok:
L907                 wq, wa = mix, 1.0 - mix
L908             elif q_ok:
L909                 wq, wa = 1.0, 0.0
L910             elif a_ok:
L911                 wq, wa = 0.0, 1.0
L912             else:
L913                 wq = wa = np.nan
L914                 grw_mix.append(np.nan)
L915                 weights_q.append(wq)
L916                 weights_a.append(wa)
L917                 continue
L918             weights_q.append(wq)
L919             weights_a.append(wa)
L920             grw_mix.append(q_val * wq + a_val * wa)
L921
L922         wq_series = pd.Series(weights_q, index=df.index, dtype=float)
L923         wa_series = pd.Series(weights_a, index=df.index, dtype=float)
L924         grw_series = pd.Series(grw_mix, index=df.index, dtype=float).clip(-3.0, 3.0)
L925
L926         df_z['GROWTH_F'] = grw_series
L927         df_z['GRW_FLEX_WEIGHT'] = 1.0  # 現状は固定（SECの可用性に依らず）
L928
L929         if str(os.environ.get("GRW_DBG_DETAIL", "0")).strip().lower() in {"1", "true", "yes", "on"}:
L930             df_z['GRW_Q_DBG'] = pd.Series(df['GRW_Q_RAW'], index=df.index, dtype=float)
L931             df_z['GRW_A_DBG'] = pd.Series(df['GRW_A_RAW'], index=df.index, dtype=float)
L932             df_z['GRW_WQ_DBG'] = wq_series
L933             df_z['GRW_WA_DBG'] = wa_series
L934
L935         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L936             + 0.15*df_z['TR_str']
L937             + 0.15*df_z['RS_SLOPE_6W']
L938             + 0.15*df_z['RS_SLOPE_13W']
L939             + 0.10*df_z['MA200_SLOPE_5M']
L940             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L941         df_z['VOL'] = robust_z(df['BETA'])
L942         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L943         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L944
L945         # df_z 全明細をページングしてログ出力（最小版）
L946         if getattr(cfg, "debug_mode", False):
L947             pd.set_option("display.max_columns", None)
L948             pd.set_option("display.max_colwidth", None)
L949             pd.set_option("display.width", None)
L950             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L951             n = len(df_z)
L952             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z
```