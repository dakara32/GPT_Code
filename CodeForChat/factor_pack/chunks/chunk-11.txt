```text
n
L924             if hi52 and hi52>0 and pd.notna(p):
L925                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L926             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L927             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L928
L929             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L930
L931             # --- 欠損メモ ---
L932             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L933             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L934             if need_finnhub:
L935                 fin_data = self.fetch_finnhub_metrics(t)
L936                 for col in need_finnhub:
L937                     val = fin_data.get(col)
L938                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L939             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L940                 if pd.isna(df.loc[t,col]):
L941                     if col=='DIV':
L942                         status = self.dividend_status(t)
L943                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L944                     else:
L945                         missing_logs.append({'Ticker':t,'Column':col})
L946
L947         def _pick_series(entry: dict, keys: list[str]):
L948             for k in keys:
L949                 val = entry.get(k) if isinstance(entry, dict) else None
L950                 if val is None:
L951                     continue
L952                 try:
L953                     if hasattr(val, "empty") and getattr(val, "empty"):
L954                         continue
L955                 except Exception:
L956                     pass
L957                 if isinstance(val, (list, tuple)) and len(val) == 0:
L958                     continue
L959                 return val
L960             return None
L961
L962         def _has_sec_series(val) -> bool:
L963             try:
L964                 if isinstance(val, pd.Series):
L965                     return not val.dropna().empty
L966                 if isinstance(val, (list, tuple)):
L967                     return any(pd.notna(v) for v in val)
L968                 return bool(val)
L969             except Exception:
L970                 return False
L971
L972         def _series_len(val) -> int:
L973             try:
L974                 if isinstance(val, pd.Series):
L975                     return int(val.dropna().size)
L976                 if isinstance(val, (list, tuple)):
L977                     return len(val)
L978                 return int(bool(val))
L979             except Exception:
L980                 return 0
L981
L982         for t in tickers:
L983             try:
L984                 d = info.get(t, {}) or {}
L985                 rev_series = d.get("SEC_REV_Q_SERIES")
L986                 eps_series = d.get("SEC_EPS_Q_SERIES")
L987                 fallback_qearn = False
L988                 try:
L989                     qe = tickers_bulk.tickers[t].quarterly_earnings
L990                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L991                 except Exception:
L992                     qe = None
L993
L994                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L995                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L996                 r_raw = _ensure_series(r_src)
L997                 e_raw = _ensure_series(e_src)
L998
L999                 r_q = _to_quarterly(r_raw)
L1000                 e_q = _to_quarterly(e_raw)
L1001
L1002                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L1003                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L1004
L1005                 def _q_yoy(qs):
L1006                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L1007
L1008                 rev_q_yoy = _q_yoy(r_q)
L1009                 eps_q_yoy = _q_yoy(e_q)
L1010
L1011                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L1012                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L1013                         ann = qs.groupby(qs.index.year).last().pct_change()
L1014                         ann_dn = ann.dropna()
L1015                         if not ann_dn.empty:
L1016                             y = float(ann_dn.iloc[-1])
L1017                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L1018                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L1019                             return y, acc, var
L1020                     yoy_dn = yoy_ttm.dropna()
L1021                     if yoy_dn.empty:
L1022                         return np.nan, np.nan, np.nan
L1023                     return (
L1024                         float(yoy_dn.iloc[-1]),
L1025                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L1026                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L1027                     )
L1028
L1029                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L1030                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L1031
L1032                 def _pos_streak(s: pd.Series):
L1033                     s = s.dropna()
L1034                     if s.empty:
L1035                         return np.nan
L1036                     b = (s > 0).astype(int).to_numpy()[::-1]
L1037                     k = 0
L1038                     for v in b:
L1039                         if v == 1:
L1040                             k += 1
L1041                         else:
L1042                             break
L1043                     return float(k)
L1044
L1045                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L1046
L1047                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L1048                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L1049                 df.loc[t, "REV_YOY"] = rev_yoy
L1050                 df.loc[t, "EPS_YOY"] = eps_yoy
L1051                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L1052                 df.loc[t, "REV_YOY_VAR"] = rev_var
L1053                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L1054
L1055             except Exception as e:
L1056                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L1057
L1058         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1059             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1060             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1061             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1062             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1063             c5 = (row.get('TR_str', np.nan) > 0)
L1064             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1065             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1066             c8 = (row.get('RS', np.nan) >= 0.10)
L1067             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1068
L1069         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1070         assert 'trend_template' in df.columns
L1071
L1072         # === Z化と合成 ===
L1073         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1074
L1075         df_z = pd.DataFrame(index=df.index)
L1076         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1077         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1078         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1079
L1080         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1081         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1082         for col in grw_cols:
L1083             if col in df.columns:
L1084                 raw = pd.to_numeric(df[col], errors="coerce")
L1085                 df_z[col] = robust_z_keepnan(raw)
L1086         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1087             if k in df.columns and k not in df_z.columns:
L1088                 raw = pd.to_numeric(df[k], errors="coerce")
L1089                 df_z[k] = robust_z_keepnan(raw)
L1090         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1091
L1092         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1093         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1094         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1095
L1096         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1097         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1098         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1099
L1100         # ===== トレンドスロープ算出 =====
L1101         def zpos(x):
L1102             arr = robust_z(x)
L1103             idx = getattr(x, 'index', df_z.index)
L1104             return pd.Series(arr, index=idx).fillna(0.0)
L1105
L1106         def relu(x):
L1107             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1108             return ser.clip(lower=0).fillna(0.0)
L1109
L1110         # 売上トレンドスロープ（四半期）
L1111         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1112         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1113         slope_rev_combo = slope_rev - 0.25*noise_rev
L1114         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1115
L1116         # EPSトレンドスロープ（四半期）
L1117         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1118         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1119
L1120         # 年次トレンド（サブ）
L1121         slope_rev_yr = zpos(df_z['REV_YOY'])
L1122         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1123         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1124         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1125         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1126         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1127         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1128
L1129         # ===== GRW flexible score (variable data paths) =====
L1130         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1131         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1132         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1133         if debug_mode:
L1134             dbg_cols = [c for c in df.columns if isinstance(c, str) and c.startswith("DBG_GRW.")]
L1135             for col in dbg_cols:
L1136                 df_z[col] = df[col]
L1137
L1138         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1139         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1140             try:
L1141                 cols = ['GROWTH_F', 'GRW_FLEX_WEIGHT']
L1142                 use_cols = [c for c in cols if c in df_z.columns]
L1143                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1144                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1145                 limit = max(0, min(40, len(i)))
L1146                 print("[DEBUG: GRW]")
L1147                 for t in i.index[:limit]:
L1148                     row = i.loc[t]
L1149                     parts = []
L1150                     if pd.notna(row.
```