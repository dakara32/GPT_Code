```text
(df[k], errors="coerce")
L1085                 df_z[k] = robust_z_keepnan(raw)
L1086                 df_z[f'{k}_RAW'] = raw
L1087         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1088
L1089         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1090         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1091         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1092
L1093         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1094         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1095         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1096
L1097         # ===== トレンドスロープ算出 =====
L1098         def zpos(x):
L1099             arr = robust_z(x)
L1100             idx = getattr(x, 'index', df_z.index)
L1101             return pd.Series(arr, index=idx).fillna(0.0)
L1102
L1103         def relu(x):
L1104             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1105             return ser.clip(lower=0).fillna(0.0)
L1106
L1107         # 売上トレンドスロープ（四半期）
L1108         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1109         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1110         slope_rev_combo = slope_rev - 0.25*noise_rev
L1111         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L1112         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1113
L1114         # EPSトレンドスロープ（四半期）
L1115         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1116         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L1117         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1118
L1119         # 年次トレンド（サブ）
L1120         slope_rev_yr = zpos(df_z['REV_YOY'])
L1121         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1122         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1123         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1124         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1125         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L1126         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1127         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L1128         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1129
L1130         # ===== GRW flexible score (variable data paths) =====
L1131         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1132         df_z['GRW_FLEX_SCORE_RAW'] = grw_raw
L1133         df_z['GROWTH_F_RAW'] = grw_raw
L1134         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1135         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1136         df_z['GRW_FLEX_CORE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_CORE'), errors="coerce")
L1137         df_z['GRW_FLEX_PRICE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_PRICE'), errors="coerce")
L1138
L1139         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1140         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1141             try:
L1142                 cols = ['GROWTH_F', 'GROWTH_F_RAW', 'GRW_FLEX_WEIGHT']
L1143                 use_cols = [c for c in cols if c in df_z.columns]
L1144                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1145                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1146                 limit = max(0, min(40, len(i)))
L1147                 print("[DEBUG: GRW]")
L1148                 for t in i.index[:limit]:
L1149                     row = i.loc[t]
L1150                     parts = []
L1151                     if pd.notna(row.get('GROWTH_F')):
L1152                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1153                     raw_val = row.get('GROWTH_F_RAW')
L1154                     if pd.notna(raw_val):
L1155                         parts.append(f"GROWTH_F_RAW={raw_val:.3f}")
L1156                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1157                     if pd.notna(weight_val):
L1158                         parts.append(f"w={weight_val:.2f}")
L1159                     path_val = None
L1160                     try:
L1161                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1162                     except Exception:
L1163                         path_val = None
L1164                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1165                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1166                     if path_val:
L1167                         parts.append(f"PATH={path_val}")
L1168                     parts_json = None
L1169                     try:
L1170                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1171                     except Exception:
L1172                         parts_json = None
L1173                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1174                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1175                     if parts_json:
L1176                         parts.append(f"PARTS={parts_json}")
L1177                     if not parts:
L1178                         parts.append('no-data')
L1179                     print(f"Ticker: {t} | " + " ".join(parts))
L1180                 print()
L1181             except Exception as exc:
L1182                 print(f"[ERR] GRW debug dump failed: {exc}")
L1183
L1184         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1185             + 0.15*df_z['TR_str']
L1186             + 0.15*df_z['RS_SLOPE_6W']
L1187             + 0.15*df_z['RS_SLOPE_13W']
L1188             + 0.10*df_z['MA200_SLOPE_5M']
L1189             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1190         df_z['VOL'] = robust_z(df['BETA'])
L1191         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1192         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1193
L1194         _dump_dfz(df_z=df_z, debug_mode=getattr(cfg, "debug_mode", False))
L1195
L1196         # === begin: BIO LOSS PENALTY =====================================
L1197         try:
L1198             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1199         except Exception:
L1200             penalty_z = 0.8
L1201
L1202         def _is_bio_like(t: str) -> bool:
L1203             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1204             sec = str(inf.get("sector", "")).lower()
L1205             ind = str(inf.get("industry", "")).lower()
L1206             if "health" not in sec:
L1207                 return False
L1208             keys = ("biotech", "biopharma", "pharma")
L1209             return any(k in ind for k in keys)
L1210
L1211         tickers_s = pd.Index(df_z.index)
L1212         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1213         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1214         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1215
L1216         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1217             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1218             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1219         # === end: BIO LOSS PENALTY =======================================
L1220
L1221         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1222         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1223
L1224         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1225         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1226         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1227         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1228
L1229         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1230         # ① 全銘柄で G/D スコアを算出（unmasked）
L1231         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1232
L1233         d_comp = pd.concat({
L1234             'QAL': df_z['D_QAL'],
L1235             'YLD': df_z['D_YLD'],
L1236             'VOL': df_z['D_VOL_RAW'],
L1237             'TRD': df_z['D_TRD']
L1238         }, axis=1)
L1239         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1240         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1241         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1242
L1243         # ② テンプレ判定（既存ロジックそのまま）
L1244         mask = df['trend_template']
L1245         if not bool(mask.any()):
L1246             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1247                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1248                 (df.get('RS', np.nan) >= 0.08) &
L1249                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1250                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1251                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1252                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1253                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1254             df['trend_template'] = mask
L1255
L1256         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1257         g_score = g_score_all.loc[mask]
L1258         Scorer.g_score = g_score
L1259         df_z['GSC'] = g_score_all
L1260         df_z['DSC'] = d_score_all
L1261
L1262         try:
L1263             current = (pd.read_csv("current_tickers.csv")
L1264                   .iloc[:, 0]
L1265                   .str.upper()
L1266                   .tolist())
L1267         except FileNotFoundError:
L1268             warnings.warn("current_tickers.csv not found — bonus skipped")
L1269             current = []
L1270
L1271         mask_bonus = g_score.index.isin(current)
L1272         if mask_bonus.any():
L1273             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1274             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1275             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1276             sigma_g = g_score.std()
L1277             if pd.isna(sigma_g):
L1278                 sigma_g = 0.0
L1279             bonus_g = round(k * sigma_g, 3)
L1280             g_score.loc[mask_bonus] += bonus_g
L1281             Scorer.g_score = g_score
L1282             # 3) D 側も同様に σ の NaN をケア
L1283             sigma_d = d_score_all.std()
L1284             if pd.isna(sigma_d):
L1285                 sigma_d = 0.0
L1286             bonus_d = round(k * sigma_d, 3)
L1287             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1288
L1289         try:
L1290             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1291         except Exception:
L1292             pass
L1293
L1294         df_full = df.copy()
L1295         df_full_z = df_z.copy()
L1296
L1297         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1298         return FeatureBundle(df=df,
L1299             df_z=df_z,
L1300             g_score=g_score,
L1301             d_score_all=d_score_all,
L1302             missing_logs=pd.DataFrame(missing_logs),
L1303             df_full=df_full,
L1304             df_full_z=df_full_z,
L1305             scaler=None)
L1306
L1307 def _apply_growth_entry_flags(feature_df, bundle, s
```