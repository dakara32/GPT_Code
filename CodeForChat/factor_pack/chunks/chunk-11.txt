```text
len(vol_series) >= 5:
L542                         aligned_px = s.reindex(vol_series.index).dropna()
L543                         if len(aligned_px) == len(vol_series):
L544                             dv = (vol_series*aligned_px).rolling(60).mean()
L545                             if not dv.dropna().empty:
L546                                 adv60 = float(dv.dropna().iloc[-1])
L547             except Exception:
L548                 pass
L549             df.loc[t,'ADV60_USD'] = adv60
L550
L551             # --- Rule of 40 や周辺 ---
L552             total_rev_ttm = d.get('totalRevenue',np.nan)
L553             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L554             df.loc[t,'FCF_MGN'] = FCF_MGN
L555             rule40 = np.nan
L556             try:
L557                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L558             except Exception: pass
L559             df.loc[t,'RULE40'] = rule40
L560
L561             # --- トレンド補助 ---
L562             sma50  = s.rolling(50).mean()
L563             sma150 = s.rolling(150).mean()
L564             sma200 = s.rolling(200).mean()
L565             p = _safe_last(s)
L566
L567             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L568                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L569             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L570                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L571
L572             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L573             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L574
L575             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L576             if len(sma200.dropna()) >= 21:
L577                 cur200 = _safe_last(sma200)
L578                 old2001 = float(sma200.iloc[-21])
L579                 if old2001:
L580                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L581
L582             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L583             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L584             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L585             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L586             if len(sma200.dropna())>=105:
L587                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L588                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L589             # NEW: 200日線が連続で上向きの「日数」
L590             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L591             try:
L592                 s200 = sma200.dropna()
L593                 if len(s200) >= 2:
L594                     diff200 = s200.diff()
L595                     up = 0
L596                     for v in diff200.iloc[::-1]:
L597                         if pd.isna(v) or v <= 0:
L598                             break
L599                         up += 1
L600                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L601             except Exception:
L602                 pass
L603             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L604             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L605             if hi52 and hi52>0 and pd.notna(p):
L606                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L607             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L608             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L609
L610             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L611
L612             # --- 欠損メモ ---
L613             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L614             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L615             if need_finnhub:
L616                 fin_data = self.fetch_finnhub_metrics(t)
L617                 for col in need_finnhub:
L618                     val = fin_data.get(col)
L619                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L620             # 欠損ログは factor 側で補完後に集約する（ここでは検知のみ）
L621
L622         def _pick_series(entry: dict, keys: list[str]):
L623             for k in keys:
L624                 val = entry.get(k) if isinstance(entry, dict) else None
L625                 if val is None:
L626                     continue
L627                 try:
L628                     if hasattr(val, "empty") and getattr(val, "empty"):
L629                         continue
L630                 except Exception:
L631                     pass
L632                 if isinstance(val, (list, tuple)) and len(val) == 0:
L633                     continue
L634                 return val
L635             return None
L636
L637         def _has_sec_series(val) -> bool:
L638             try:
L639                 if isinstance(val, pd.Series):
L640                     return not val.dropna().empty
L641                 if isinstance(val, (list, tuple)):
L642                     return any(pd.notna(v) for v in val)
L643                 return bool(val)
L644             except Exception:
L645                 return False
L646
L647         def _series_len(val) -> int:
L648             try:
L649                 if isinstance(val, pd.Series):
L650                     return int(val.dropna().size)
L651                 if isinstance(val, (list, tuple)):
L652                     return len(val)
L653                 return int(bool(val))
L654             except Exception:
L655                 return 0
L656
L657         for t in tickers:
L658             try:
L659                 d = info.get(t, {}) or {}
L660                 rev_series = d.get("SEC_REV_Q_SERIES")
L661                 eps_series = d.get("SEC_EPS_Q_SERIES")
L662                 fallback_qearn = False
L663                 try:
L664                     qe = tickers_bulk.tickers[t].quarterly_earnings
L665                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L666                 except Exception:
L667                     qe = None
L668
L669                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L670                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L671                 r_raw = _ensure_series(r_src)
L672                 e_raw = _ensure_series(e_src)
L673
L674                 r_q = _to_quarterly(r_raw)
L675                 e_q = _to_quarterly(e_raw)
L676
L677                 df.at[t, "EPS_SERIES"] = e_q
L678
L679                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L680                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L681
L682                 def _q_yoy(qs):
L683                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L684
L685                 rev_q_yoy = _q_yoy(r_q)
L686                 eps_q_yoy = _q_yoy(e_q)
L687
L688                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L689                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L690                         ann = qs.groupby(qs.index.year).last().pct_change()
L691                         ann_dn = ann.dropna()
L692                         if not ann_dn.empty:
L693                             y = float(ann_dn.iloc[-1])
L694                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L695                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L696                             return y, acc, var
L697                     yoy_dn = yoy_ttm.dropna()
L698                     if yoy_dn.empty:
L699                         return np.nan, np.nan, np.nan
L700                     return (
L701                         float(yoy_dn.iloc[-1]),
L702                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L703                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L704                     )
L705
L706                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L707                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L708
L709                 def _pos_streak(s: pd.Series):
L710                     s = s.dropna()
L711                     if s.empty:
L712                         return np.nan
L713                     b = (s > 0).astype(int).to_numpy()[::-1]
L714                     k = 0
L715                     for v in b:
L716                         if v == 1:
L717                             k += 1
L718                         else:
L719                             break
L720                     return float(k)
L721
L722                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L723
L724                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L725                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L726                 df.loc[t, "REV_YOY"] = rev_yoy
L727                 df.loc[t, "EPS_YOY"] = eps_yoy
L728                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L729                 df.loc[t, "REV_YOY_VAR"] = rev_var
L730                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L731
L732             except Exception as e:
L733                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L734
L735         def _pct_change(new, old):
L736             try:
L737                 if np.isfinite(new) and np.isfinite(old) and float(old) != 0:
L738                     return float((new - old) / abs(old))
L739             except Exception:
L740                 pass
L741             return np.nan
L742
L743         def _pct_series(a: pd.Series, b: pd.Series) -> list[float]:
L744             a_vals = pd.to_numeric(a, errors="coerce") if a is not None else pd.Series(np.nan, index=df.index)
L745             b_vals = pd.to_numeric(b, errors="coerce") if b is not None else pd.Series(np.nan, index=df.index)
L746             return [_pct_change(x, y) for x, y in zip(a_vals.reindex(df.index), b_vals.reindex(df.index))]
L747
L748         def _mean_valid(vals: list[float]) -> float:
L749             arr = [float(v) for v in vals if np.isfinite(v)]
L750             return float(np.mean(arr)) if arr else np.nan
L751
L752         grw_q_eps_last = _pct_series(df['EPS_Q'], df.get('EPS_Q_PREV', pd.Series(np.nan, index=df.index)))
L753         grw_q_rev_last = _pct_series(df['REV_Q'], df.get('REV_Q_PREV', pd.Series(np.nan, index=df.index)))
L754         grw_q_eps_ttm = _pct_series(df['EPS'], df.get('EPS_TTM_PREV', pd.Series(np.nan, index=df.index)))
L755         grw_q_rev_ttm = _pct_series(df['REV_TTM'], df.get('REV_TTM_PREV', pd.Series(np.nan, index=df.index)))
L756
L757         grw_a_eps_yoy = _pct_series(df.get('EPS_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('EPS_A_PREV', pd.Series(np.nan, index=df.index)))
L758         grw_a_rev_yoy = _pct_series(df.get('REV_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('REV_A_PREV', pd.Series(np.nan, index=df.index)))
L759         grw_a_eps_cagr = pd.to_numeric(df.get('EPS_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L760         grw_a_rev_cagr = pd.to_numeric(df.get('REV_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L761
L762         grw_q_combined = [
L763             _mean_valid([a, b, c, d])
L764             for a, b, c, d in zip(grw_q_eps_last, grw_q_rev_last, grw_q_eps_ttm, grw_q_rev_ttm)
L765         ]
L766         grw_a_combined = [
L767             _mean_valid([a, b, c, d])
L768             for a, b, c, d in zip(grw_a_
```