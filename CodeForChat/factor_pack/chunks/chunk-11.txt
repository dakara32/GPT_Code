```text
       eps_series = d.get("SEC_EPS_Q_SERIES")
L676                 fallback_qearn = False
L677                 try:
L678                     qe = tickers_bulk.tickers[t].quarterly_earnings
L679                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L680                 except Exception:
L681                     qe = None
L682
L683                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L684                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L685                 r_raw = _ensure_series(r_src)
L686                 e_raw = _ensure_series(e_src)
L687
L688                 r_q = _to_quarterly(r_raw)
L689                 e_q = _to_quarterly(e_raw)
L690
L691                 df.at[t, "EPS_SERIES"] = e_q
L692
L693                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L694                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L695
L696                 def _q_yoy(qs):
L697                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L698
L699                 rev_q_yoy = _q_yoy(r_q)
L700                 eps_q_yoy = _q_yoy(e_q)
L701
L702                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L703                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L704                         ann = qs.groupby(qs.index.year).last().pct_change()
L705                         ann_dn = ann.dropna()
L706                         if not ann_dn.empty:
L707                             y = float(ann_dn.iloc[-1])
L708                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L709                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L710                             return y, acc, var
L711                     yoy_dn = yoy_ttm.dropna()
L712                     if yoy_dn.empty:
L713                         return np.nan, np.nan, np.nan
L714                     return (
L715                         float(yoy_dn.iloc[-1]),
L716                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L717                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L718                     )
L719
L720                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L721                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L722
L723                 def _pos_streak(s: pd.Series):
L724                     s = s.dropna()
L725                     if s.empty:
L726                         return np.nan
L727                     b = (s > 0).astype(int).to_numpy()[::-1]
L728                     k = 0
L729                     for v in b:
L730                         if v == 1:
L731                             k += 1
L732                         else:
L733                             break
L734                     return float(k)
L735
L736                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L737
L738                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L739                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L740                 df.loc[t, "REV_YOY"] = rev_yoy
L741                 df.loc[t, "EPS_YOY"] = eps_yoy
L742                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L743                 df.loc[t, "REV_YOY_VAR"] = rev_var
L744                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L745
L746             except Exception as e:
L747                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L748
L749         def _pct_change(new, old):
L750             try:
L751                 if np.isfinite(new) and np.isfinite(old) and float(old) != 0:
L752                     return float((new - old) / abs(old))
L753             except Exception:
L754                 pass
L755             return np.nan
L756
L757         def _pct_series(a: pd.Series, b: pd.Series) -> list[float]:
L758             a_vals = pd.to_numeric(a, errors="coerce") if a is not None else pd.Series(np.nan, index=df.index)
L759             b_vals = pd.to_numeric(b, errors="coerce") if b is not None else pd.Series(np.nan, index=df.index)
L760             return [_pct_change(x, y) for x, y in zip(a_vals.reindex(df.index), b_vals.reindex(df.index))]
L761
L762         def _mean_valid(vals: list[float]) -> float:
L763             arr = [float(v) for v in vals if np.isfinite(v)]
L764             return float(np.mean(arr)) if arr else np.nan
L765
L766         grw_q_eps_last = _pct_series(df['EPS_Q'], df.get('EPS_Q_PREV', pd.Series(np.nan, index=df.index)))
L767         grw_q_rev_last = _pct_series(df['REV_Q'], df.get('REV_Q_PREV', pd.Series(np.nan, index=df.index)))
L768         grw_q_eps_ttm = _pct_series(df['EPS'], df.get('EPS_TTM_PREV', pd.Series(np.nan, index=df.index)))
L769         grw_q_rev_ttm = _pct_series(df['REV_TTM'], df.get('REV_TTM_PREV', pd.Series(np.nan, index=df.index)))
L770
L771         grw_a_eps_yoy = _pct_series(df.get('EPS_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('EPS_A_PREV', pd.Series(np.nan, index=df.index)))
L772         grw_a_rev_yoy = _pct_series(df.get('REV_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('REV_A_PREV', pd.Series(np.nan, index=df.index)))
L773         grw_a_eps_cagr = pd.to_numeric(df.get('EPS_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L774         grw_a_rev_cagr = pd.to_numeric(df.get('REV_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L775
L776         grw_q_combined = [
L777             _mean_valid([a, b, c, d])
L778             for a, b, c, d in zip(grw_q_eps_last, grw_q_rev_last, grw_q_eps_ttm, grw_q_rev_ttm)
L779         ]
L780         grw_a_combined = [
L781             _mean_valid([a, b, c, d])
L782             for a, b, c, d in zip(grw_a_eps_yoy, grw_a_rev_yoy, grw_a_eps_cagr, grw_a_rev_cagr)
L783         ]
L784
L785         df['GRW_Q_RAW'] = pd.Series(grw_q_combined, index=df.index, dtype=float)
L786         df['GRW_A_RAW'] = pd.Series(grw_a_combined, index=df.index, dtype=float)
L787
L788         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L789             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L790             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L791             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L792             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L793             c5 = (row.get('TR_str', np.nan) > 0)
L794             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L795             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L796             c8 = (row.get('RS', np.nan) >= 0.10)
L797             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L798
L799         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L800         assert 'trend_template' in df.columns
L801
L802         def _calc_eps_abs_slope(eps_series, n=12):
L803             try:
L804                 if isinstance(eps_series, pd.Series):
L805                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L806                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L807                     series = pd.Series(eps_series, dtype=float).dropna()
L808                 else:
L809                     return 0.0
L810             except Exception:
L811                 return 0.0
L812
L813             if series.empty:
L814                 return 0.0
L815
L816             tail = series.tail(n).to_numpy(dtype=float)
L817             if tail.size < 2:
L818                 return 0.0
L819
L820             x = np.arange(tail.size, dtype=float)
L821             x = x - x.mean()
L822             y = tail - tail.mean()
L823             denom = np.dot(x, x)
L824             if denom == 0:
L825                 return 0.0
L826             slope = float(np.dot(x, y) / denom)
L827             return slope
L828
L829         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L830         df.drop(columns=['EPS_SERIES'], inplace=True)
L831
L832         # === Z化と合成 ===
L833         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L834
L835         df_z = pd.DataFrame(index=df.index)
L836         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L837         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L838         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L839
L840         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L841
L842         # === Growth深掘り系（欠損保持z + RAW併載） ===
L843         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L844         for col in grw_cols:
L845             if col in df.columns:
L846                 raw = pd.to_numeric(df[col], errors="coerce")
L847                 df_z[col] = robust_z_keepnan(raw)
L848         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L849             if k in df.columns and k not in df_z.columns:
L850                 raw = pd.to_numeric(df[k], errors="coerce")
L851                 df_z[k] = robust_z_keepnan(raw)
L852         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L853
L854         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L855         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L856         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L857
L858         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L859         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L860         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L861
L862         # ===== トレンドスロープ算出 =====
L863         def zpos(x):
L864             arr = robust_z(x)
L865             idx = getattr(x, 'index', df_z.index)
L866             return pd.Series(arr, index=idx).fillna(0.0)
L867
L868         def relu(x):
L869             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L870             return ser.clip(lower=0).fillna(0.0)
L871
L872         # 売上トレンドスロープ（四半期）
L873         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L874         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L875         slope_rev_combo = slope_rev - 0.25*noise_rev
L876         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L877
L878         # EPSトレンドスロープ（四半期）
L879         slope_eps = (
L880             0.40*zpos(df_z['EPS_Q_YOY']) +
L881             0.20*zpos(df_z['EPS_POS']) +
L882             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L883         )
L884         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L885
L886         # 年次トレンド（サブ）
L887         slope_rev_yr = zpos(df_z['REV_YOY'])
L888         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L889         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L890         streak_yr = streak_base / (streak_base.abs() + 1.0)
L891         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L892         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L893         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L894
L895         grw_q_z = robust_z_keepnan(df['GRW_Q_RAW']).clip(-3.0, 3.0)
L896         grw_a_z = robust_z_keepnan(df['GRW_A_RAW']).clip(-3.0, 3.0)
L897         df_z['GRW_Q'] = grw_q_z
L898         df_z['GRW_A'] = grw_a_z
L899
L900         try:
L901             mix = float(os.environ.get("GRW_Q_ANNUAL_
```