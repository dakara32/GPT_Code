```text
et('NEAR_52W_HIGH', np.nan) >= -0.25)
L715             c8 = (row.get('RS', np.nan) >= 0.10)
L716             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L717
L718         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L719         assert 'trend_template' in df.columns
L720
L721         def _calc_eps_abs_slope(eps_series, n=12):
L722             try:
L723                 if isinstance(eps_series, pd.Series):
L724                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L725                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L726                     series = pd.Series(eps_series, dtype=float).dropna()
L727                 else:
L728                     return 0.0
L729             except Exception:
L730                 return 0.0
L731
L732             if series.empty:
L733                 return 0.0
L734
L735             tail = series.tail(n).to_numpy(dtype=float)
L736             if tail.size < 2:
L737                 return 0.0
L738
L739             x = np.arange(tail.size, dtype=float)
L740             x = x - x.mean()
L741             y = tail - tail.mean()
L742             denom = np.dot(x, x)
L743             if denom == 0:
L744                 return 0.0
L745             slope = float(np.dot(x, y) / denom)
L746             return slope
L747
L748         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L749         df.drop(columns=['EPS_SERIES'], inplace=True)
L750
L751         # === Z化と合成 ===
L752         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L753
L754         df_z = pd.DataFrame(index=df.index)
L755         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L756         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L757         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L758
L759         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L760
L761         # === Growth深掘り系（欠損保持z + RAW併載） ===
L762         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L763         for col in grw_cols:
L764             if col in df.columns:
L765                 raw = pd.to_numeric(df[col], errors="coerce")
L766                 df_z[col] = robust_z_keepnan(raw)
L767         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L768             if k in df.columns and k not in df_z.columns:
L769                 raw = pd.to_numeric(df[k], errors="coerce")
L770                 df_z[k] = robust_z_keepnan(raw)
L771         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L772
L773         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L774         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L775         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L776
L777         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L778         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L779         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L780
L781         # ===== トレンドスロープ算出 =====
L782         def zpos(x):
L783             arr = robust_z(x)
L784             idx = getattr(x, 'index', df_z.index)
L785             return pd.Series(arr, index=idx).fillna(0.0)
L786
L787         def relu(x):
L788             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L789             return ser.clip(lower=0).fillna(0.0)
L790
L791         # 売上トレンドスロープ（四半期）
L792         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L793         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L794         slope_rev_combo = slope_rev - 0.25*noise_rev
L795         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L796
L797         # EPSトレンドスロープ（四半期）
L798         slope_eps = (
L799             0.40*zpos(df_z['EPS_Q_YOY']) +
L800             0.20*zpos(df_z['EPS_POS']) +
L801             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L802         )
L803         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L804
L805         # 年次トレンド（サブ）
L806         slope_rev_yr = zpos(df_z['REV_YOY'])
L807         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L808         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L809         streak_yr = streak_base / (streak_base.abs() + 1.0)
L810         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L811         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L812         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L813
L814         grw_q_z = robust_z_keepnan(df['GRW_Q_RAW']).clip(-3.0, 3.0)
L815         grw_a_z = robust_z_keepnan(df['GRW_A_RAW']).clip(-3.0, 3.0)
L816         df_z['GRW_Q'] = grw_q_z
L817         df_z['GRW_A'] = grw_a_z
L818
L819         try:
L820             mix = float(os.environ.get("GRW_Q_ANNUAL_MIX", "0.7"))
L821         except Exception:
L822             mix = 0.7
L823         if not np.isfinite(mix):
L824             mix = 0.7
L825         mix = float(np.clip(mix, 0.0, 1.0))
L826
L827         weights_q: list[float] = []
L828         weights_a: list[float] = []
L829         grw_mix: list[float] = []
L830         for idx in df.index:
L831             q_val = grw_q_z.get(idx, np.nan)
L832             a_val = grw_a_z.get(idx, np.nan)
L833             q_ok = np.isfinite(q_val)
L834             a_ok = np.isfinite(a_val)
L835             if q_ok and a_ok:
L836                 wq, wa = mix, 1.0 - mix
L837             elif q_ok:
L838                 wq, wa = 1.0, 0.0
L839             elif a_ok:
L840                 wq, wa = 0.0, 1.0
L841             else:
L842                 wq = wa = np.nan
L843                 grw_mix.append(np.nan)
L844                 weights_q.append(wq)
L845                 weights_a.append(wa)
L846                 continue
L847             weights_q.append(wq)
L848             weights_a.append(wa)
L849             grw_mix.append(q_val * wq + a_val * wa)
L850
L851         wq_series = pd.Series(weights_q, index=df.index, dtype=float)
L852         wa_series = pd.Series(weights_a, index=df.index, dtype=float)
L853         grw_series = pd.Series(grw_mix, index=df.index, dtype=float).clip(-3.0, 3.0)
L854
L855         df_z['GROWTH_F'] = grw_series
L856         df_z['GRW_FLEX_WEIGHT'] = 1.0  # 現状は固定（SECの可用性に依らず）
L857
L858         if 'GRW_Q_RAW' in df.columns:
L859             df_z['GRW_Q_DBG'] = pd.Series(df['GRW_Q_RAW'], index=df.index, dtype=float)
L860         if 'GRW_A_RAW' in df.columns:
L861             df_z['GRW_A_DBG'] = pd.Series(df['GRW_A_RAW'], index=df.index, dtype=float)
L862         df_z['GRW_WQ_DBG'] = wq_series
L863         df_z['GRW_WA_DBG'] = wa_series
L864
L865         # --- breakout features (常時寄与) ---
L866         # NEW_HIGH_20D: (終値 / 直近20日終値の最高値) - 1 → 0未満は0
L867         # VOL_RATIO_20D: 出来高(直近5日平均) / 出来高(直近20日平均)
L868         try:
L869             _px = px.copy()
L870             _vol = vol.copy() if vol is not None else None
L871             if _vol is None:
L872                 raise ValueError('volume data missing')
L873             _hi20 = _px.rolling(20, min_periods=10).max()
L874             _br = (_px / _hi20) - 1.0
L875             _new_high_20d = _br.iloc[-1].clip(lower=0)
L876             _vol5 = _vol.rolling(5, min_periods=3).mean()
L877             _vol20 = _vol.rolling(20, min_periods=10).mean()
L878             _vol_ratio_20d = (_vol5 / _vol20).iloc[-1]
L879             # Z化（NaNは保持系）→ df_z に整列
L880             df_z['NEW_HIGH_20D'] = robust_z_keepnan(pd.to_numeric(_new_high_20d, errors='coerce').reindex(df_z.index))
L881             df_z['VOL_RATIO_20D'] = robust_z_keepnan(pd.to_numeric(_vol_ratio_20d, errors='coerce').reindex(df_z.index))
L882         except Exception:
L883             # フォールバック（計算不能時は0寄与とする）
L884             df_z['NEW_HIGH_20D'] = 0.0
L885             df_z['VOL_RATIO_20D'] = 0.0
L886
L887         df_z['MOM_F'] = robust_z(
L888               0.30*df_z['RS']
L889             + 0.10*df_z['TR_str']
L890             + 0.15*df_z['RS_SLOPE_6W']
L891             + 0.15*df_z['RS_SLOPE_13W']
L892             + 0.10*df_z['MA200_SLOPE_5M']
L893             + 0.05*df_z['MA200_UP_STREAK_D']
L894             + 0.10*df_z['NEW_HIGH_20D']
L895             + 0.05*df_z['VOL_RATIO_20D']
L896         ).clip(-3.0, 3.0)
L897         df_z['VOL'] = robust_z(df['BETA'])
L898         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L899         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L900
L901         # df_z 全明細をページングしてログ出力（最小版）
L902         if getattr(cfg, "debug_mode", False):
L903             beta_debug_cols = []
L904             if isinstance(df, pd.DataFrame):
L905                 try:
L906                     beta_raw = df.get('BETA') if 'BETA' in df.columns else None
L907                     if beta_raw is not None:
L908                         beta_raw = pd.to_numeric(beta_raw, errors="coerce")
L909                         df_z['BETA_RAW'] = beta_raw.reindex(df_z.index)
L910                         df_z['BETA_Z'] = _plain_zscore_series(df_z['BETA_RAW'])
L911                         beta_debug_cols.extend(['BETA_RAW', 'BETA_Z'])
L912                 except Exception:
L913                     beta_debug_cols.clear()
L914             pd.set_option("display.max_columns", None)
L915             pd.set_option("display.max_colwidth", None)
L916             pd.set_option("display.width", None)
L917             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L918             n = len(df_z)
L919             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L920             try:
L921                 for i in range(0, n, page):
L922                     j = min(i + page, n)
L923                     try:
L924                         chunk_str = df_z.iloc[i:j].to_string()
L925                     except Exception:
L926                         chunk_str = df_z.iloc[i:j].astype(str).to_string()
L927                     logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L928             finally:
L929                 if beta_debug_cols:
L930                     df_z.drop(columns=[c for c in beta_debug_cols if c in df_z.columns], inplace=True)
L931             logger.info("=== df_z FULL DUMP end ===")
L932
L933         # === begin: BIO LOSS PENALTY =====================================
L934         try:
L935             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L936         except Exception:
L937             penalty_z = 0.8
L938
L939         def _is_bio_like(t: str) -> bool:
L940             inf = info.get(t, {}) if isinstance(info, dict) else {}
L941             sec = str(inf.get("sector", "")).lower()
L942             ind = str(inf.get("industry", "")).lower()
L943             if "health" not in sec:
L944                 return False
L945             keys = ("biotech", "biopharma", "pharma")
L946             return any(k in ind for k in keys)
L947
L948         tickers_s = pd.Index(df_z.index)
L949         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L950         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L951         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L952
L953         if bool(mask_bio_loss.any()) and penalty_z > 0:
L954             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L955   
```