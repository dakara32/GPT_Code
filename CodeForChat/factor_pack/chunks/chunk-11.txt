```text
ev_combo.clip(-3.0, 3.0)
L1085
L1086         # EPSトレンドスロープ（四半期）
L1087         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1088         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L1089         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1090
L1091         # 年次トレンド（サブ）
L1092         slope_rev_yr = zpos(df_z['REV_YOY'])
L1093         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1094         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1095         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1096         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1097         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L1098         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1099         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L1100         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1101
L1102         # ===== GRW flexible score (variable data paths) =====
L1103         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1104         df_z['GRW_FLEX_SCORE_RAW'] = grw_raw
L1105         df_z['GROWTH_F_RAW'] = grw_raw
L1106         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1107         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1108         df_z['GRW_FLEX_CORE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_CORE'), errors="coerce")
L1109         df_z['GRW_FLEX_PRICE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_PRICE'), errors="coerce")
L1110
L1111         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1112         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1113             try:
L1114                 cols = ['GROWTH_F', 'GROWTH_F_RAW', 'GRW_FLEX_WEIGHT']
L1115                 use_cols = [c for c in cols if c in df_z.columns]
L1116                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1117                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1118                 limit = max(0, min(40, len(i)))
L1119                 print("[DEBUG: GRW]")
L1120                 for t in i.index[:limit]:
L1121                     row = i.loc[t]
L1122                     parts = []
L1123                     if pd.notna(row.get('GROWTH_F')):
L1124                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1125                     raw_val = row.get('GROWTH_F_RAW')
L1126                     if pd.notna(raw_val):
L1127                         parts.append(f"GROWTH_F_RAW={raw_val:.3f}")
L1128                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1129                     if pd.notna(weight_val):
L1130                         parts.append(f"w={weight_val:.2f}")
L1131                     path_val = None
L1132                     try:
L1133                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1134                     except Exception:
L1135                         path_val = None
L1136                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1137                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1138                     if path_val:
L1139                         parts.append(f"PATH={path_val}")
L1140                     parts_json = None
L1141                     try:
L1142                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1143                     except Exception:
L1144                         parts_json = None
L1145                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1146                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1147                     if parts_json:
L1148                         parts.append(f"PARTS={parts_json}")
L1149                     if not parts:
L1150                         parts.append('no-data')
L1151                     print(f"Ticker: {t} | " + " ".join(parts))
L1152                 print()
L1153             except Exception as exc:
L1154                 print(f"[ERR] GRW debug dump failed: {exc}")
L1155
L1156         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1157             + 0.15*df_z['TR_str']
L1158             + 0.15*df_z['RS_SLOPE_6W']
L1159             + 0.15*df_z['RS_SLOPE_13W']
L1160             + 0.10*df_z['MA200_SLOPE_5M']
L1161             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1162         df_z['VOL'] = robust_z(df['BETA'])
L1163         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1164         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1165
L1166         if getattr(cfg, "debug_mode", False):
L1167             _dump_dfz(df_z, topk=20, logger=logger)
L1168
L1169         # === begin: BIO LOSS PENALTY =====================================
L1170         try:
L1171             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1172         except Exception:
L1173             penalty_z = 0.8
L1174
L1175         def _is_bio_like(t: str) -> bool:
L1176             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1177             sec = str(inf.get("sector", "")).lower()
L1178             ind = str(inf.get("industry", "")).lower()
L1179             if "health" not in sec:
L1180                 return False
L1181             keys = ("biotech", "biopharma", "pharma")
L1182             return any(k in ind for k in keys)
L1183
L1184         tickers_s = pd.Index(df_z.index)
L1185         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1186         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1187         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1188
L1189         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1190             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1191             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1192         # === end: BIO LOSS PENALTY =======================================
L1193
L1194         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1195         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1196
L1197         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1198         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1199         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1200         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1201
L1202         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1203         # ① 全銘柄で G/D スコアを算出（unmasked）
L1204         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1205
L1206         d_comp = pd.concat({
L1207             'QAL': df_z['D_QAL'],
L1208             'YLD': df_z['D_YLD'],
L1209             'VOL': df_z['D_VOL_RAW'],
L1210             'TRD': df_z['D_TRD']
L1211         }, axis=1)
L1212         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1213         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1214         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1215
L1216         # ② テンプレ判定（既存ロジックそのまま）
L1217         mask = df['trend_template']
L1218         if not bool(mask.any()):
L1219             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1220                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1221                 (df.get('RS', np.nan) >= 0.08) &
L1222                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1223                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1224                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1225                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1226                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1227             df['trend_template'] = mask
L1228
L1229         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1230         g_score = g_score_all.loc[mask]
L1231         Scorer.g_score = g_score
L1232         df_z['GSC'] = g_score_all
L1233         df_z['DSC'] = d_score_all
L1234
L1235         try:
L1236             current = (pd.read_csv("current_tickers.csv")
L1237                   .iloc[:, 0]
L1238                   .str.upper()
L1239                   .tolist())
L1240         except FileNotFoundError:
L1241             warnings.warn("current_tickers.csv not found — bonus skipped")
L1242             current = []
L1243
L1244         mask_bonus = g_score.index.isin(current)
L1245         if mask_bonus.any():
L1246             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1247             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1248             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1249             sigma_g = g_score.std()
L1250             if pd.isna(sigma_g):
L1251                 sigma_g = 0.0
L1252             bonus_g = round(k * sigma_g, 3)
L1253             g_score.loc[mask_bonus] += bonus_g
L1254             Scorer.g_score = g_score
L1255             # 3) D 側も同様に σ の NaN をケア
L1256             sigma_d = d_score_all.std()
L1257             if pd.isna(sigma_d):
L1258                 sigma_d = 0.0
L1259             bonus_d = round(k * sigma_d, 3)
L1260             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1261
L1262         try:
L1263             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1264         except Exception:
L1265             pass
L1266
L1267         df_full = df.copy()
L1268         df_full_z = df_z.copy()
L1269
L1270         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1271         return FeatureBundle(df=df,
L1272             df_z=df_z,
L1273             g_score=g_score,
L1274             d_score_all=d_score_all,
L1275             missing_logs=pd.DataFrame(missing_logs),
L1276             df_full=df_full,
L1277             df_full_z=df_full_z,
L1278             scaler=None)
L1279
L1280 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1281     """
L1282     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1283     次の列を feature_df に追加する（index=ticker）。
L1284       - G_BREAKOUT_recent_5d : bool
L1285       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1286       - G_PULLBACK_recent_5d : bool
L1287       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1288       - G_PIVOT_price        : float
L1289     失敗しても例外は握り潰し、既存処理を阻害しない。
L1290     """
L1291     try:
L1292         px   = bundle.px                      # 終値 DataFrame
L1293         hi   = bundle.data['High']
L1294         lo   = bundle.data['Low']
L1295         vol  = bundle.data['Volume']
L1296         bench= bundle.spx                     # ベンチマーク Series
L1297
L1298         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1299         g_universe = getattr(self_obj, "g_universe", None)
L1300         if g_universe is None:
L1301             try:
L1302                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1303             except Exception:
L1304                 g_universe = list(feature_df.index)
L1305         if not g_universe:
L1306             return feature_df
L1307
L1308         # 指標
L1309         px = px.ffill(limit=2)
L1310         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1311         ma50  = px[g_universe].rolling(50).mean()
L1312         ma150 = px[g_universe].rolling(150).mean()
L1313         ma200 = px[g_universe].rolling(200).mean()
L1314         atr20 = (hi[g_universe] - lo[g_universe]).rol
```