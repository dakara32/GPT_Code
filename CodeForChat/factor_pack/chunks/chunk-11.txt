```text
.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L856             logger.info("=== df_z FULL DUMP end ===")
L857
L858         # === begin: BIO LOSS PENALTY =====================================
L859         try:
L860             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L861         except Exception:
L862             penalty_z = 0.8
L863
L864         def _is_bio_like(t: str) -> bool:
L865             inf = info.get(t, {}) if isinstance(info, dict) else {}
L866             sec = str(inf.get("sector", "")).lower()
L867             ind = str(inf.get("industry", "")).lower()
L868             if "health" not in sec:
L869                 return False
L870             keys = ("biotech", "biopharma", "pharma")
L871             return any(k in ind for k in keys)
L872
L873         tickers_s = pd.Index(df_z.index)
L874         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L875         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L876         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L877
L878         if bool(mask_bio_loss.any()) and penalty_z > 0:
L879             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L880             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L881         # === end: BIO LOSS PENALTY =======================================
L882
L883         assert not any(c.endswith("_RAW") for c in df_z.columns)
L884         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L885             assert c not in df_z.columns
L886
L887         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L888         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L889
L890         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L891         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L892         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L893         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L894
L895         # --- 重みは cfg を優先（外部があればそれを使用） ---
L896         # ① 全銘柄で G/D スコアを算出（unmasked）
L897         g_score_all = _as_numeric_series(df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1))
L898
L899         d_comp = pd.concat({
L900             'QAL': df_z['D_QAL'],
L901             'YLD': df_z['D_YLD'],
L902             'VOL': df_z['D_VOL_RAW'],
L903             'TRD': df_z['D_TRD']
L904         }, axis=1)
L905         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L906         globals()['D_WEIGHTS_EFF'] = dw.copy()
L907         d_score_all = _as_numeric_series(d_comp.mul(dw, axis=1).sum(axis=1))
L908
L909         # ② テンプレ判定（既存ロジックそのまま）
L910         mask = df['trend_template']
L911         if not bool(mask.any()):
L912             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L913                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L914                 (df.get('RS', np.nan) >= 0.08) &
L915                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L916                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L917                 (df.get('MA150_OVER_200', np.nan) > 0) &
L918                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L919                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L920             df['trend_template'] = mask
L921
L922         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L923         g_score = _as_numeric_series(g_score_all.loc[mask])
L924         Scorer.g_score = g_score
L925         df_z['GSC'] = g_score_all
L926         df_z['DSC'] = d_score_all
L927
L928         try:
L929             current = (pd.read_csv("current_tickers.csv")
L930                   .iloc[:, 0]
L931                   .str.upper()
L932                   .tolist())
L933         except FileNotFoundError:
L934             warnings.warn("current_tickers.csv not found — bonus skipped")
L935             current = []
L936
L937         mask_bonus = g_score.index.isin(current)
L938         if mask_bonus.any():
L939             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L940             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L941             # 2) g 側の σ を取り、NaN なら 0 に丸める
L942             sigma_g = g_score.std()
L943             if pd.isna(sigma_g):
L944                 sigma_g = 0.0
L945             bonus_g = round(k * sigma_g, 3)
L946             g_score.loc[mask_bonus] += bonus_g
L947             Scorer.g_score = g_score
L948             # 3) D 側も同様に σ の NaN をケア
L949             sigma_d = d_score_all.std()
L950             if pd.isna(sigma_d):
L951                 sigma_d = 0.0
L952             bonus_d = round(k * sigma_d, 3)
L953             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L954
L955         try:
L956             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L957         except Exception:
L958             pass
L959
L960         df_full = df.copy()
L961         df_full_z = df_z.copy()
L962
L963         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L964         return FeatureBundle(df=df,
L965             df_z=df_z,
L966             g_score=g_score,
L967             d_score_all=d_score_all,
L968             missing_logs=pd.DataFrame(missing_logs),
L969             df_full=df_full,
L970             df_full_z=df_full_z,
L971             scaler=None)
L972
L973 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L974     """
L975     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L976     次の列を feature_df に追加する（index=ticker）。
L977       - G_BREAKOUT_recent_5d : bool
L978       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L979       - G_PULLBACK_recent_5d : bool
L980       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L981       - G_PIVOT_price        : float
L982     失敗しても例外は握り潰し、既存処理を阻害しない。
L983     """
L984     try:
L985         px   = bundle.px                      # 終値 DataFrame
L986         hi   = bundle.data['High']
L987         lo   = bundle.data['Low']
L988         vol  = bundle.data['Volume']
L989         bench= bundle.spx                     # ベンチマーク Series
L990
L991         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L992         g_universe = getattr(self_obj, "g_universe", None)
L993         if g_universe is None:
L994             try:
L995                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L996             except Exception:
L997                 g_universe = list(feature_df.index)
L998         if not g_universe:
L999             return feature_df
L1000
L1001         # 指標
L1002         px = px.ffill(limit=2)
L1003         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1004         ma50  = px[g_universe].rolling(50).mean()
L1005         ma150 = px[g_universe].rolling(150).mean()
L1006         ma200 = px[g_universe].rolling(200).mean()
L1007         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1008         vol20 = vol[g_universe].rolling(20).mean()
L1009         vol50 = vol[g_universe].rolling(50).mean()
L1010
L1011         # トレンドテンプレート合格
L1012         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1013                             & (ma150 > ma200) & (ma200.diff() > 0)
L1014
L1015         # 汎用ピボット：直近65営業日の高値（当日除外）
L1016         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1017
L1018         # 相対力：年内高値更新
L1019         bench_aligned = bench.reindex(px.index).ffill()
L1020         rs = px[g_universe].div(bench_aligned, axis=0)
L1021         rs_high = rs.rolling(252).max().shift(1)
L1022
L1023         # ブレイクアウト「発生日」：条件立ち上がり
L1024         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1025                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1026         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1027
L1028         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1029         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1030         volume_dryup = (vol20 / vol50) <= 1.0
L1031         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1032         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1033         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1034
L1035         # 直近N営業日内の発火 / 最終発生日
L1036         rows = []
L1037         for t in g_universe:
L1038             def _recent_and_date(s, win):
L1039                 sw = s[t].iloc[-win:]
L1040                 if sw.any():
L1041                     d = sw[sw].index[-1]
L1042                     return True, d.strftime("%Y-%m-%d")
L1043                 return False, ""
L1044             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1045             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1046             rows.append((t, {
L1047                 "G_BREAKOUT_recent_5d": br_recent,
L1048                 "G_BREAKOUT_last_date": br_date,
L1049                 "G_PULLBACK_recent_5d": pb_recent,
L1050                 "G_PULLBACK_last_date": pb_date,
L1051                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1052             }))
L1053         flags = pd.DataFrame({k: v for k, v in rows}).T
L1054
L1055         # 列を作成・上書き
L1056         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1057         for c in cols:
L1058             if c not in feature_df.columns:
L1059                 feature_df[c] = np.nan
L1060         feature_df.loc[flags.index, flags.columns] = flags
L1061
L1062     except Exception:
L1063         pass
L1064     return feature_df
L1065
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）

```