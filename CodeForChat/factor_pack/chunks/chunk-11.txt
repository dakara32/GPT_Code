```text
  return any(k in ind for k in keys)
L1097
L1098         tickers_s = pd.Index(df_z.index)
L1099         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1100         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1101         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1102
L1103         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1104             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1105             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1106         # === end: BIO LOSS PENALTY =======================================
L1107
L1108         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1109         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1110
L1111         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1112         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1113         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1114         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1115
L1116         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1117         # ① 全銘柄で G/D スコアを算出（unmasked）
L1118         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1119
L1120         d_comp = pd.concat({
L1121             'QAL': df_z['D_QAL'],
L1122             'YLD': df_z['D_YLD'],
L1123             'VOL': df_z['D_VOL_RAW'],
L1124             'TRD': df_z['D_TRD']
L1125         }, axis=1)
L1126         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1127         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1128         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1129
L1130         # ② テンプレ判定（既存ロジックそのまま）
L1131         mask = df['trend_template']
L1132         if not bool(mask.any()):
L1133             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1134                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1135                 (df.get('RS', np.nan) >= 0.08) &
L1136                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1137                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1138                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1139                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1140                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1141             df['trend_template'] = mask
L1142
L1143         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1144         g_score = g_score_all.loc[mask]
L1145         Scorer.g_score = g_score
L1146         df_z['GSC'] = g_score_all
L1147         df_z['DSC'] = d_score_all
L1148
L1149         try:
L1150             current = (pd.read_csv("current_tickers.csv")
L1151                   .iloc[:, 0]
L1152                   .str.upper()
L1153                   .tolist())
L1154         except FileNotFoundError:
L1155             warnings.warn("current_tickers.csv not found — bonus skipped")
L1156             current = []
L1157
L1158         mask_bonus = g_score.index.isin(current)
L1159         if mask_bonus.any():
L1160             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1161             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1162             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1163             sigma_g = g_score.std()
L1164             if pd.isna(sigma_g):
L1165                 sigma_g = 0.0
L1166             bonus_g = round(k * sigma_g, 3)
L1167             g_score.loc[mask_bonus] += bonus_g
L1168             Scorer.g_score = g_score
L1169             # 3) D 側も同様に σ の NaN をケア
L1170             sigma_d = d_score_all.std()
L1171             if pd.isna(sigma_d):
L1172                 sigma_d = 0.0
L1173             bonus_d = round(k * sigma_d, 3)
L1174             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1175
L1176         try:
L1177             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1178         except Exception:
L1179             pass
L1180
L1181         df_full = df.copy()
L1182         df_full_z = df_z.copy()
L1183
L1184         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1185         return FeatureBundle(df=df,
L1186             df_z=df_z,
L1187             g_score=g_score,
L1188             d_score_all=d_score_all,
L1189             missing_logs=pd.DataFrame(missing_logs),
L1190             df_full=df_full,
L1191             df_full_z=df_full_z,
L1192             scaler=None)
L1193
L1194 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1195     """
L1196     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1197     次の列を feature_df に追加する（index=ticker）。
L1198       - G_BREAKOUT_recent_5d : bool
L1199       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1200       - G_PULLBACK_recent_5d : bool
L1201       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1202       - G_PIVOT_price        : float
L1203     失敗しても例外は握り潰し、既存処理を阻害しない。
L1204     """
L1205     try:
L1206         px   = bundle.px                      # 終値 DataFrame
L1207         hi   = bundle.data['High']
L1208         lo   = bundle.data['Low']
L1209         vol  = bundle.data['Volume']
L1210         bench= bundle.spx                     # ベンチマーク Series
L1211
L1212         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1213         g_universe = getattr(self_obj, "g_universe", None)
L1214         if g_universe is None:
L1215             try:
L1216                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1217             except Exception:
L1218                 g_universe = list(feature_df.index)
L1219         if not g_universe:
L1220             return feature_df
L1221
L1222         # 指標
L1223         px = px.ffill(limit=2)
L1224         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1225         ma50  = px[g_universe].rolling(50).mean()
L1226         ma150 = px[g_universe].rolling(150).mean()
L1227         ma200 = px[g_universe].rolling(200).mean()
L1228         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1229         vol20 = vol[g_universe].rolling(20).mean()
L1230         vol50 = vol[g_universe].rolling(50).mean()
L1231
L1232         # トレンドテンプレート合格
L1233         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1234                             & (ma150 > ma200) & (ma200.diff() > 0)
L1235
L1236         # 汎用ピボット：直近65営業日の高値（当日除外）
L1237         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1238
L1239         # 相対力：年内高値更新
L1240         bench_aligned = bench.reindex(px.index).ffill()
L1241         rs = px[g_universe].div(bench_aligned, axis=0)
L1242         rs_high = rs.rolling(252).max().shift(1)
L1243
L1244         # ブレイクアウト「発生日」：条件立ち上がり
L1245         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1246                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1247         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1248
L1249         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1250         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1251         volume_dryup = (vol20 / vol50) <= 1.0
L1252         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1253         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1254         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1255
L1256         # 直近N営業日内の発火 / 最終発生日
L1257         rows = []
L1258         for t in g_universe:
L1259             def _recent_and_date(s, win):
L1260                 sw = s[t].iloc[-win:]
L1261                 if sw.any():
L1262                     d = sw[sw].index[-1]
L1263                     return True, d.strftime("%Y-%m-%d")
L1264                 return False, ""
L1265             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1266             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1267             rows.append((t, {
L1268                 "G_BREAKOUT_recent_5d": br_recent,
L1269                 "G_BREAKOUT_last_date": br_date,
L1270                 "G_PULLBACK_recent_5d": pb_recent,
L1271                 "G_PULLBACK_last_date": pb_date,
L1272                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1273             }))
L1274         flags = pd.DataFrame({k: v for k, v in rows}).T
L1275
L1276         # 列を作成・上書き
L1277         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1278         for c in cols:
L1279             if c not in feature_df.columns:
L1280                 feature_df[c] = np.nan
L1281         feature_df.loc[flags.index, flags.columns] = flags
L1282
L1283     except Exception:
L1284         pass
L1285     return feature_df
L1286
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=12）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 12本)`（= N_G）
L17   - 緊急解除: `max(q20, 18本)`（= ceil(1.5×12)）
L18   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **14%**
L24  - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（20×5%に全戻しのみ）
L25
L26 ## モード別の推奨“保有銘柄数”（MMF≒現金）
L27 *各枠=5%（20銘柄均等）。モード移行時は**Gの枠数のみ**調整し、外した枠は現金として保持。*
L28
L29 - **NORMAL:** G **12** / D **8** / 現金化枠 **0**  
L30 - **CAUTION:** G **10** / D **8** / 現金化枠 **2**（= 10%）  
L31 - **EMERG:** G **8**  / D **8** / 現金化枠 **4**（= 20%）  
L32
L33 > 実運用：⭐️低スコアのGから順に外す。解除時はfactor上位から補充。
L34
L35 ## トレーリングストップ
L36 - **基本TS (モード別):** NORMAL **15%** / CAUTION **13%*
```