```text
      hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L925             if hi52 and hi52>0 and pd.notna(p):
L926                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L927             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L928             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L929
L930             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L931
L932             # --- 欠損メモ ---
L933             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L934             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L935             if need_finnhub:
L936                 fin_data = self.fetch_finnhub_metrics(t)
L937                 for col in need_finnhub:
L938                     val = fin_data.get(col)
L939                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L940             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L941                 if pd.isna(df.loc[t,col]):
L942                     if col=='DIV':
L943                         status = self.dividend_status(t)
L944                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L945                     else:
L946                         missing_logs.append({'Ticker':t,'Column':col})
L947
L948         def _pick_series(entry: dict, keys: list[str]):
L949             for k in keys:
L950                 val = entry.get(k) if isinstance(entry, dict) else None
L951                 if val is None:
L952                     continue
L953                 try:
L954                     if hasattr(val, "empty") and getattr(val, "empty"):
L955                         continue
L956                 except Exception:
L957                     pass
L958                 if isinstance(val, (list, tuple)) and len(val) == 0:
L959                     continue
L960                 return val
L961             return None
L962
L963         def _has_sec_series(val) -> bool:
L964             try:
L965                 if isinstance(val, pd.Series):
L966                     return not val.dropna().empty
L967                 if isinstance(val, (list, tuple)):
L968                     return any(pd.notna(v) for v in val)
L969                 return bool(val)
L970             except Exception:
L971                 return False
L972
L973         def _series_len(val) -> int:
L974             try:
L975                 if isinstance(val, pd.Series):
L976                     return int(val.dropna().size)
L977                 if isinstance(val, (list, tuple)):
L978                     return len(val)
L979                 return int(bool(val))
L980             except Exception:
L981                 return 0
L982
L983         for t in tickers:
L984             try:
L985                 d = info.get(t, {}) or {}
L986                 rev_series = d.get("SEC_REV_Q_SERIES")
L987                 eps_series = d.get("SEC_EPS_Q_SERIES")
L988                 fallback_qearn = False
L989                 try:
L990                     qe = tickers_bulk.tickers[t].quarterly_earnings
L991                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L992                 except Exception:
L993                     qe = None
L994
L995                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L996                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L997                 r_raw = _ensure_series(r_src)
L998                 e_raw = _ensure_series(e_src)
L999
L1000                 r_q = _to_quarterly(r_raw)
L1001                 e_q = _to_quarterly(e_raw)
L1002
L1003                 df.at[t, "EPS_SERIES"] = e_q
L1004
L1005                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L1006                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L1007
L1008                 def _q_yoy(qs):
L1009                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L1010
L1011                 rev_q_yoy = _q_yoy(r_q)
L1012                 eps_q_yoy = _q_yoy(e_q)
L1013
L1014                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L1015                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L1016                         ann = qs.groupby(qs.index.year).last().pct_change()
L1017                         ann_dn = ann.dropna()
L1018                         if not ann_dn.empty:
L1019                             y = float(ann_dn.iloc[-1])
L1020                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L1021                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L1022                             return y, acc, var
L1023                     yoy_dn = yoy_ttm.dropna()
L1024                     if yoy_dn.empty:
L1025                         return np.nan, np.nan, np.nan
L1026                     return (
L1027                         float(yoy_dn.iloc[-1]),
L1028                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L1029                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L1030                     )
L1031
L1032                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L1033                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L1034
L1035                 def _pos_streak(s: pd.Series):
L1036                     s = s.dropna()
L1037                     if s.empty:
L1038                         return np.nan
L1039                     b = (s > 0).astype(int).to_numpy()[::-1]
L1040                     k = 0
L1041                     for v in b:
L1042                         if v == 1:
L1043                             k += 1
L1044                         else:
L1045                             break
L1046                     return float(k)
L1047
L1048                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L1049
L1050                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L1051                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L1052                 df.loc[t, "REV_YOY"] = rev_yoy
L1053                 df.loc[t, "EPS_YOY"] = eps_yoy
L1054                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L1055                 df.loc[t, "REV_YOY_VAR"] = rev_var
L1056                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L1057
L1058             except Exception as e:
L1059                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L1060
L1061         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1062             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1063             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1064             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1065             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1066             c5 = (row.get('TR_str', np.nan) > 0)
L1067             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1068             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1069             c8 = (row.get('RS', np.nan) >= 0.10)
L1070             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1071
L1072         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1073         assert 'trend_template' in df.columns
L1074
L1075         def _calc_eps_abs_slope(eps_series, n=12):
L1076             try:
L1077                 if isinstance(eps_series, pd.Series):
L1078                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L1079                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L1080                     series = pd.Series(eps_series, dtype=float).dropna()
L1081                 else:
L1082                     return 0.0
L1083             except Exception:
L1084                 return 0.0
L1085
L1086             if series.empty:
L1087                 return 0.0
L1088
L1089             tail = series.tail(n).to_numpy(dtype=float)
L1090             if tail.size < 2:
L1091                 return 0.0
L1092
L1093             x = np.arange(tail.size, dtype=float)
L1094             x = x - x.mean()
L1095             y = tail - tail.mean()
L1096             denom = np.dot(x, x)
L1097             if denom == 0:
L1098                 return 0.0
L1099             slope = float(np.dot(x, y) / denom)
L1100             return slope
L1101
L1102         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L1103         df.drop(columns=['EPS_SERIES'], inplace=True)
L1104
L1105         # === Z化と合成 ===
L1106         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1107
L1108         df_z = pd.DataFrame(index=df.index)
L1109         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1110         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1111         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1112
L1113         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L1114
L1115         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1116         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1117         for col in grw_cols:
L1118             if col in df.columns:
L1119                 raw = pd.to_numeric(df[col], errors="coerce")
L1120                 df_z[col] = robust_z_keepnan(raw)
L1121         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1122             if k in df.columns and k not in df_z.columns:
L1123                 raw = pd.to_numeric(df[k], errors="coerce")
L1124                 df_z[k] = robust_z_keepnan(raw)
L1125         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1126
L1127         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1128         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1129         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1130
L1131         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1132         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1133         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1134
L1135         # ===== トレンドスロープ算出 =====
L1136         def zpos(x):
L1137             arr = robust_z(x)
L1138             idx = getattr(x, 'index', df_z.index)
L1139             return pd.Series(arr, index=idx).fillna(0.0)
L1140
L1141         def relu(x):
L1142             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1143             return ser.clip(lower=0).fillna(0.0)
L1144
L1145         # 売上トレンドスロープ（四半期）
L1146         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1147         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1148         slope_rev_combo = slope_rev - 0.25*noise_rev
L1149         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1150
L1151         # EPSトレンドスロープ（四半期）
L1152         slope_eps = (
L1153             0.40*zpos(df_z['EPS_Q_YOY']) +
L1154             0.20*zpos(df_z['EPS_POS']) +
L1155             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L1156         )
L1157         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1158
L1159         # 年次トレンド（サブ）
L1160         slope_rev_yr = zpos(df_z['REV_YOY'])
L1161         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1162         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1163      
```