```text
tor 側で補完後に集約する（ここでは検知のみ）
L621
L622         def _pick_series(entry: dict, keys: list[str]):
L623             for k in keys:
L624                 val = entry.get(k) if isinstance(entry, dict) else None
L625                 if val is None:
L626                     continue
L627                 try:
L628                     if hasattr(val, "empty") and getattr(val, "empty"):
L629                         continue
L630                 except Exception:
L631                     pass
L632                 if isinstance(val, (list, tuple)) and len(val) == 0:
L633                     continue
L634                 return val
L635             return None
L636
L637         def _has_sec_series(val) -> bool:
L638             try:
L639                 if isinstance(val, pd.Series):
L640                     return not val.dropna().empty
L641                 if isinstance(val, (list, tuple)):
L642                     return any(pd.notna(v) for v in val)
L643                 return bool(val)
L644             except Exception:
L645                 return False
L646
L647         def _series_len(val) -> int:
L648             try:
L649                 if isinstance(val, pd.Series):
L650                     return int(val.dropna().size)
L651                 if isinstance(val, (list, tuple)):
L652                     return len(val)
L653                 return int(bool(val))
L654             except Exception:
L655                 return 0
L656
L657         for t in tickers:
L658             try:
L659                 d = info.get(t, {}) or {}
L660                 rev_series = d.get("SEC_REV_Q_SERIES")
L661                 eps_series = d.get("SEC_EPS_Q_SERIES")
L662                 fallback_qearn = False
L663                 try:
L664                     qe = tickers_bulk.tickers[t].quarterly_earnings
L665                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L666                 except Exception:
L667                     qe = None
L668
L669                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L670                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L671                 r_raw = _ensure_series(r_src)
L672                 e_raw = _ensure_series(e_src)
L673
L674                 r_q = _to_quarterly(r_raw)
L675                 e_q = _to_quarterly(e_raw)
L676
L677                 df.at[t, "EPS_SERIES"] = e_q
L678
L679                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L680                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L681
L682                 def _q_yoy(qs):
L683                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L684
L685                 rev_q_yoy = _q_yoy(r_q)
L686                 eps_q_yoy = _q_yoy(e_q)
L687
L688                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L689                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L690                         ann = qs.groupby(qs.index.year).last().pct_change()
L691                         ann_dn = ann.dropna()
L692                         if not ann_dn.empty:
L693                             y = float(ann_dn.iloc[-1])
L694                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L695                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L696                             return y, acc, var
L697                     yoy_dn = yoy_ttm.dropna()
L698                     if yoy_dn.empty:
L699                         return np.nan, np.nan, np.nan
L700                     return (
L701                         float(yoy_dn.iloc[-1]),
L702                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L703                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L704                     )
L705
L706                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L707                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L708
L709                 def _pos_streak(s: pd.Series):
L710                     s = s.dropna()
L711                     if s.empty:
L712                         return np.nan
L713                     b = (s > 0).astype(int).to_numpy()[::-1]
L714                     k = 0
L715                     for v in b:
L716                         if v == 1:
L717                             k += 1
L718                         else:
L719                             break
L720                     return float(k)
L721
L722                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L723
L724                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L725                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L726                 df.loc[t, "REV_YOY"] = rev_yoy
L727                 df.loc[t, "EPS_YOY"] = eps_yoy
L728                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L729                 df.loc[t, "REV_YOY_VAR"] = rev_var
L730                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L731
L732             except Exception as e:
L733                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L734
L735         def _pct_change(new, old):
L736             try:
L737                 if np.isfinite(new) and np.isfinite(old) and float(old) != 0:
L738                     return float((new - old) / abs(old))
L739             except Exception:
L740                 pass
L741             return np.nan
L742
L743         def _pct_series(a: pd.Series, b: pd.Series) -> list[float]:
L744             a_vals = pd.to_numeric(a, errors="coerce") if a is not None else pd.Series(np.nan, index=df.index)
L745             b_vals = pd.to_numeric(b, errors="coerce") if b is not None else pd.Series(np.nan, index=df.index)
L746             return [_pct_change(x, y) for x, y in zip(a_vals.reindex(df.index), b_vals.reindex(df.index))]
L747
L748         def _mean_valid(vals: list[float]) -> float:
L749             arr = [float(v) for v in vals if np.isfinite(v)]
L750             return float(np.mean(arr)) if arr else np.nan
L751
L752         grw_q_eps_last = _pct_series(df['EPS_Q'], df.get('EPS_Q_PREV', pd.Series(np.nan, index=df.index)))
L753         grw_q_rev_last = _pct_series(df['REV_Q'], df.get('REV_Q_PREV', pd.Series(np.nan, index=df.index)))
L754         grw_q_eps_ttm = _pct_series(df['EPS'], df.get('EPS_TTM_PREV', pd.Series(np.nan, index=df.index)))
L755         grw_q_rev_ttm = _pct_series(df['REV_TTM'], df.get('REV_TTM_PREV', pd.Series(np.nan, index=df.index)))
L756
L757         grw_a_eps_yoy = _pct_series(df.get('EPS_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('EPS_A_PREV', pd.Series(np.nan, index=df.index)))
L758         grw_a_rev_yoy = _pct_series(df.get('REV_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('REV_A_PREV', pd.Series(np.nan, index=df.index)))
L759         grw_a_eps_cagr = pd.to_numeric(df.get('EPS_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L760         grw_a_rev_cagr = pd.to_numeric(df.get('REV_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L761
L762         grw_q_combined = [
L763             _mean_valid([a, b, c, d])
L764             for a, b, c, d in zip(grw_q_eps_last, grw_q_rev_last, grw_q_eps_ttm, grw_q_rev_ttm)
L765         ]
L766         grw_a_combined = [
L767             _mean_valid([a, b, c, d])
L768             for a, b, c, d in zip(grw_a_eps_yoy, grw_a_rev_yoy, grw_a_eps_cagr, grw_a_rev_cagr)
L769         ]
L770
L771         df['GRW_Q_RAW'] = pd.Series(grw_q_combined, index=df.index, dtype=float)
L772         df['GRW_A_RAW'] = pd.Series(grw_a_combined, index=df.index, dtype=float)
L773
L774         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L775             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L776             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L777             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L778             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L779             c5 = (row.get('TR_str', np.nan) > 0)
L780             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L781             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L782             c8 = (row.get('RS', np.nan) >= 0.10)
L783             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L784
L785         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L786         assert 'trend_template' in df.columns
L787
L788         def _calc_eps_abs_slope(eps_series, n=12):
L789             try:
L790                 if isinstance(eps_series, pd.Series):
L791                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L792                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L793                     series = pd.Series(eps_series, dtype=float).dropna()
L794                 else:
L795                     return 0.0
L796             except Exception:
L797                 return 0.0
L798
L799             if series.empty:
L800                 return 0.0
L801
L802             tail = series.tail(n).to_numpy(dtype=float)
L803             if tail.size < 2:
L804                 return 0.0
L805
L806             x = np.arange(tail.size, dtype=float)
L807             x = x - x.mean()
L808             y = tail - tail.mean()
L809             denom = np.dot(x, x)
L810             if denom == 0:
L811                 return 0.0
L812             slope = float(np.dot(x, y) / denom)
L813             return slope
L814
L815         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L816         df.drop(columns=['EPS_SERIES'], inplace=True)
L817
L818         # === Z化と合成 ===
L819         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L820
L821         df_z = pd.DataFrame(index=df.index)
L822         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L823         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L824         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L825
L826         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L827
L828         # === Growth深掘り系（欠損保持z + RAW併載） ===
L829         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L830         for col in grw_cols:
L831             if col in df.columns:
L832                 raw = pd.to_numeric(df[col], errors="coerce")
L833                 df_z[col] = robust_z_keepnan(raw)
L834         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L835             if k in df.columns and k not in df_z.columns:
L836                 raw = pd.to_numeric(df[k], errors="coerce")
L837                 df_z[k] = robust_z_keepnan(raw)
L838         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L839
L840         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L841         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L842         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L843
L844         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L845         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L846         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L847
L848         # ===== トレンドスロープ算出 =====
L849         def zpos(x):
L850             arr = robust_z(x)
L851             idx = getattr(x, 'index', df_z.index)
L852             return pd.Series(arr, index=idx).fi
```