```text
               e_raw = _ensure_series(e_src)
L1128                 _log("DERIV_SRC", f"{t} rev_raw_len={r_raw.size} eps_raw_len={e_raw.size}")
L1129
L1130                 r_q = _to_quarterly(r_raw)
L1131                 e_q = _to_quarterly(e_raw)
L1132                 _log("DERIV_Q", f"{t} rev_q_len={r_q.size} eps_q_len={e_q.size}")
L1133                 if r_q.size >= 5:
L1134                     rev_q_ge5 += 1
L1135
L1136                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L1137                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L1138                 has_ttm = int(not r_yoy_ttm.dropna().empty)
L1139                 ttm_yoy_avail += has_ttm
L1140                 _log("DERIV_TTM", f"{t} rev_ttm_yoy_len={r_yoy_ttm.dropna().size} eps_ttm_yoy_len={e_yoy_ttm.dropna().size}")
L1141
L1142                 def _q_yoy(qs):
L1143                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L1144
L1145                 rev_q_yoy = _q_yoy(r_q)
L1146                 eps_q_yoy = _q_yoy(e_q)
L1147
L1148                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L1149                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L1150                         ann = qs.groupby(qs.index.year).last().pct_change()
L1151                         ann_dn = ann.dropna()
L1152                         if not ann_dn.empty:
L1153                             y = float(ann_dn.iloc[-1])
L1154                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L1155                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L1156                             return y, acc, var
L1157                     yoy_dn = yoy_ttm.dropna()
L1158                     if yoy_dn.empty:
L1159                         return np.nan, np.nan, np.nan
L1160                     return (
L1161                         float(yoy_dn.iloc[-1]),
L1162                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L1163                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L1164                     )
L1165
L1166                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L1167                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L1168
L1169                 def _pos_streak(s: pd.Series):
L1170                     s = s.dropna()
L1171                     if s.empty:
L1172                         return np.nan
L1173                     b = (s > 0).astype(int).to_numpy()[::-1]
L1174                     k = 0
L1175                     for v in b:
L1176                         if v == 1:
L1177                             k += 1
L1178                         else:
L1179                             break
L1180                     return float(k)
L1181
L1182                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L1183
L1184                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L1185                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L1186                 df.loc[t, "REV_YOY"] = rev_yoy
L1187                 df.loc[t, "EPS_YOY"] = eps_yoy
L1188                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L1189                 df.loc[t, "REV_YOY_VAR"] = rev_var
L1190                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L1191
L1192                 wrote_growth += 1
L1193                 _log(
L1194                     "DERIV_WRITE",
L1195                     f"{t} wrote: Q_YOY(rev={rev_q_yoy}, eps={eps_q_yoy}) ANN(rev_yoy={rev_yoy}, acc={rev_acc}, var={rev_var}) streak={rev_ann_streak}",
L1196                 )
L1197
L1198             except Exception as e:
L1199                 logger.warning("[DERIV_WARN] %s growth-derivatives failed: %s", t, e)
L1200                 _log("DERIV_WARN", f"{t} {type(e).__name__}: {e}")
L1201
L1202         _log("DERIV_SUMMARY", f"rev_q_len>=5: {rev_q_ge5}/{len(tickers)}  ttm_yoy_available: {ttm_yoy_avail}  wrote_growth_for: {wrote_growth}")
L1203
L1204         try:
L1205             cols = [
L1206                 "REV_Q_YOY",
L1207                 "EPS_Q_YOY",
L1208                 "REV_YOY",
L1209                 "EPS_YOY",
L1210                 "REV_YOY_ACC",
L1211                 "REV_YOY_VAR",
L1212                 "REV_ANN_STREAK",
L1213             ]
L1214             cnt = {c: int(df[c].count()) for c in cols if c in df.columns}
L1215             _log("DERIV_NONNAN_COUNTS", str(cnt))
L1216         except Exception as e:
L1217             _log("DERIV_NONNAN_COUNTS", f"error: {e}")
L1218
L1219         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1220             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1221             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1222             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1223             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1224             c5 = (row.get('TR_str', np.nan) > 0)
L1225             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1226             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1227             c8 = (row.get('RS', np.nan) >= 0.10)
L1228             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1229
L1230         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1231         assert 'trend_template' in df.columns
L1232
L1233         # === Z化と合成 ===
L1234         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1235
L1236         df_z = pd.DataFrame(index=df.index)
L1237         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1238         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1239         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1240
L1241         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1242         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1243         for col in grw_cols:
L1244             if col in df.columns:
L1245                 raw = pd.to_numeric(df[col], errors="coerce")
L1246                 df_z[col] = robust_z_keepnan(raw)
L1247                 df_z[f'{col}_RAW'] = raw
L1248         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1249             if k in df.columns and k not in df_z.columns:
L1250                 raw = pd.to_numeric(df[k], errors="coerce")
L1251                 df_z[k] = robust_z_keepnan(raw)
L1252                 df_z[f'{k}_RAW'] = raw
L1253         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1254
L1255         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1256         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1257         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1258
L1259         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1260         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1261         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1262
L1263         # ===== トレンドスロープ算出 =====
L1264         def zpos(x):
L1265             arr = robust_z(x)
L1266             idx = getattr(x, 'index', df_z.index)
L1267             return pd.Series(arr, index=idx).fillna(0.0)
L1268
L1269         def relu(x):
L1270             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1271             return ser.clip(lower=0).fillna(0.0)
L1272
L1273         # 売上トレンドスロープ（四半期）
L1274         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1275         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1276         slope_rev_combo = slope_rev - 0.25*noise_rev
L1277         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L1278         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1279
L1280         # EPSトレンドスロープ（四半期）
L1281         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1282         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L1283         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1284
L1285         # 年次トレンド（サブ）
L1286         slope_rev_yr = zpos(df_z['REV_YOY'])
L1287         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1288         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1289         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1290         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1291         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L1292         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1293         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L1294         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1295
L1296         # ===== GRW flexible score (variable data paths) =====
L1297         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1298         df_z['GRW_FLEX_SCORE_RAW'] = grw_raw
L1299         df_z['GROWTH_F_RAW'] = grw_raw
L1300         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1301         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1302         df_z['GRW_FLEX_CORE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_CORE'), errors="coerce")
L1303         df_z['GRW_FLEX_PRICE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_PRICE'), errors="coerce")
L1304
L1305         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1306         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1307             try:
L1308                 cols = ['GROWTH_F', 'GROWTH_F_RAW', 'GRW_FLEX_WEIGHT']
L1309                 use_cols = [c for c in cols if c in df_z.columns]
L1310                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1311                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1312                 limit = max(0, min(40, len(i)))
L1313                 print("[DEBUG: GRW]")
L1314                 for t in i.index[:limit]:
L1315                     row = i.loc[t]
L1316                     parts = []
L1317                     if pd.notna(row.get('GROWTH_F')):
L1318                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1319                     raw_val = row.get('GROWTH_F_RAW')
L1320                     if pd.notna(raw_val):
L1321                         parts.append(f"GROWTH_F_RAW={raw_val:.3f}")
L1322                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1323                     if pd.notna(weight_val):
L1324                         parts.append(f"w={weight_val:.2f}")
L1325                     path_val = None
L1326                     try:
L1327                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1328                     except Exception:
L1329                         path_val = None
L1330                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1331                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1332                     if path_val:
L1333                         parts.append(f"PATH={path_val}")
L1334                     parts_json = None
L1335                     try:
L1336                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1337                     except Exception:
L1338                         parts_json = None
L1339                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1340                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1341                     if parts_json:
L1342    
```