```text
LOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1025
L1026         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1027         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1028         for col in grw_cols:
L1029             if col in df.columns:
L1030                 raw = pd.to_numeric(df[col], errors="coerce")
L1031                 df_z[col] = robust_z_keepnan(raw)
L1032                 df_z[f'{col}_RAW'] = raw
L1033         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1034             if k in df.columns and k not in df_z.columns:
L1035                 raw = pd.to_numeric(df[k], errors="coerce")
L1036                 df_z[k] = robust_z_keepnan(raw)
L1037                 df_z[f'{k}_RAW'] = raw
L1038         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1039
L1040         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1041         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1042         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1043
L1044         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1045         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1046         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1047
L1048         # ===== トレンドスロープ算出 =====
L1049         def zpos(x):
L1050             arr = robust_z(x)
L1051             idx = getattr(x, 'index', df_z.index)
L1052             return pd.Series(arr, index=idx).fillna(0.0)
L1053
L1054         def relu(x):
L1055             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1056             return ser.clip(lower=0).fillna(0.0)
L1057
L1058         # 売上トレンドスロープ（四半期）
L1059         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1060         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1061         slope_rev_combo = slope_rev - 0.25*noise_rev
L1062         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L1063         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1064
L1065         # EPSトレンドスロープ（四半期）
L1066         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1067         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L1068         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1069
L1070         # 年次トレンド（サブ）
L1071         slope_rev_yr = zpos(df_z['REV_YOY'])
L1072         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1073         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1074         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1075         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1076         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L1077         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1078         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L1079         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1080
L1081         # ===== GRW flexible score (variable data paths) =====
L1082         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1083         df_z['GRW_FLEX_SCORE_RAW'] = grw_raw
L1084         df_z['GROWTH_F_RAW'] = grw_raw
L1085         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1086         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1087         df_z['GRW_FLEX_CORE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_CORE'), errors="coerce")
L1088         df_z['GRW_FLEX_PRICE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_PRICE'), errors="coerce")
L1089
L1090         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1091         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1092             try:
L1093                 cols = ['GROWTH_F', 'GROWTH_F_RAW', 'GRW_FLEX_WEIGHT']
L1094                 use_cols = [c for c in cols if c in df_z.columns]
L1095                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1096                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1097                 limit = max(0, min(40, len(i)))
L1098                 print("[DEBUG: GRW]")
L1099                 for t in i.index[:limit]:
L1100                     row = i.loc[t]
L1101                     parts = []
L1102                     if pd.notna(row.get('GROWTH_F')):
L1103                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1104                     raw_val = row.get('GROWTH_F_RAW')
L1105                     if pd.notna(raw_val):
L1106                         parts.append(f"GROWTH_F_RAW={raw_val:.3f}")
L1107                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1108                     if pd.notna(weight_val):
L1109                         parts.append(f"w={weight_val:.2f}")
L1110                     path_val = None
L1111                     try:
L1112                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1113                     except Exception:
L1114                         path_val = None
L1115                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1116                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1117                     if path_val:
L1118                         parts.append(f"PATH={path_val}")
L1119                     parts_json = None
L1120                     try:
L1121                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1122                     except Exception:
L1123                         parts_json = None
L1124                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1125                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1126                     if parts_json:
L1127                         parts.append(f"PARTS={parts_json}")
L1128                     if not parts:
L1129                         parts.append('no-data')
L1130                     print(f"Ticker: {t} | " + " ".join(parts))
L1131                 print()
L1132             except Exception as exc:
L1133                 print(f"[ERR] GRW debug dump failed: {exc}")
L1134
L1135         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1136             + 0.15*df_z['TR_str']
L1137             + 0.15*df_z['RS_SLOPE_6W']
L1138             + 0.15*df_z['RS_SLOPE_13W']
L1139             + 0.10*df_z['MA200_SLOPE_5M']
L1140             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1141         df_z['VOL'] = robust_z(df['BETA'])
L1142         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1143         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1144
L1145         # df_z 全明細をページングしてログ出力（最小版）
L1146         if getattr(cfg, "debug_mode", False):
L1147             pd.set_option("display.max_columns", None)
L1148             pd.set_option("display.max_colwidth", None)
L1149             pd.set_option("display.width", None)
L1150             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L1151             n = len(df_z)
L1152             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1153             for i in range(0, n, page):
L1154                 j = min(i + page, n)
L1155                 try:
L1156                     chunk_str = df_z.iloc[i:j].to_string()
L1157                 except Exception:
L1158                     chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1159                 logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1160             logger.info("=== df_z FULL DUMP end ===")
L1161
L1162         # === begin: BIO LOSS PENALTY =====================================
L1163         try:
L1164             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1165         except Exception:
L1166             penalty_z = 0.8
L1167
L1168         def _is_bio_like(t: str) -> bool:
L1169             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1170             sec = str(inf.get("sector", "")).lower()
L1171             ind = str(inf.get("industry", "")).lower()
L1172             if "health" not in sec:
L1173                 return False
L1174             keys = ("biotech", "biopharma", "pharma")
L1175             return any(k in ind for k in keys)
L1176
L1177         tickers_s = pd.Index(df_z.index)
L1178         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1179         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1180         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1181
L1182         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1183             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1184             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1185         # === end: BIO LOSS PENALTY =======================================
L1186
L1187         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1188         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1189
L1190         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1191         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1192         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1193         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1194
L1195         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1196         # ① 全銘柄で G/D スコアを算出（unmasked）
L1197         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1198
L1199         d_comp = pd.concat({
L1200             'QAL': df_z['D_QAL'],
L1201             'YLD': df_z['D_YLD'],
L1202             'VOL': df_z['D_VOL_RAW'],
L1203             'TRD': df_z['D_TRD']
L1204         }, axis=1)
L1205         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1206         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1207         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1208
L1209         # ② テンプレ判定（既存ロジックそのまま）
L1210         mask = df['trend_template']
L1211         if not bool(mask.any()):
L1212             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1213                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1214                 (df.get('RS', np.nan) >= 0.08) &
L1215                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1216                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1217                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1218                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1219                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1220             df['trend_template'] = mask
L1221
L1222         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1223         g_score = g_score_all.loc[mask]
L1224         Scorer.g_score = g_score
L1225         df_z['GSC'] = g_score_all
L1226         df_z['DSC'] = d_score_all
L1227
L1228         try:
L1229             current = (pd.read_csv("current_tickers.csv")
L1230                   .iloc[:, 0]
L1231                   .str.upper()
L1232                   .tolist())
L1233         except FileNotFoundError:
L1234             warnings.warn("current_tickers.csv not found — bonus skipped")
L1235  
```