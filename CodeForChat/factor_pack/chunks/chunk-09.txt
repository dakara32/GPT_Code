```text
            print(f"[ERR] GRW debug dump failed: {exc}")
L868
L869         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L870             + 0.15*df_z['TR_str']
L871             + 0.15*df_z['RS_SLOPE_6W']
L872             + 0.15*df_z['RS_SLOPE_13W']
L873             + 0.10*df_z['MA200_SLOPE_5M']
L874             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L875         df_z['VOL'] = robust_z(df['BETA'])
L876         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L877         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L878
L879         _dump_dfz(df_z=df_z, debug_mode=getattr(cfg, "debug_mode", False))
L880
L881         # === begin: BIO LOSS PENALTY =====================================
L882         try:
L883             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L884         except Exception:
L885             penalty_z = 0.8
L886
L887         def _is_bio_like(t: str) -> bool:
L888             inf = info.get(t, {}) if isinstance(info, dict) else {}
L889             sec = str(inf.get("sector", "")).lower()
L890             ind = str(inf.get("industry", "")).lower()
L891             if "health" not in sec:
L892                 return False
L893             keys = ("biotech", "biopharma", "pharma")
L894             return any(k in ind for k in keys)
L895
L896         tickers_s = pd.Index(df_z.index)
L897         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L898         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L899         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L900
L901         if bool(mask_bio_loss.any()) and penalty_z > 0:
L902             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L903             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L904         # === end: BIO LOSS PENALTY =======================================
L905
L906         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L907         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L908
L909         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L910         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L911         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L912         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L913
L914         # --- 重みは cfg を優先（外部があればそれを使用） ---
L915         # ① 全銘柄で G/D スコアを算出（unmasked）
L916         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L917
L918         d_comp = pd.concat({
L919             'QAL': df_z['D_QAL'],
L920             'YLD': df_z['D_YLD'],
L921             'VOL': df_z['D_VOL_RAW'],
L922             'TRD': df_z['D_TRD']
L923         }, axis=1)
L924         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L925         globals()['D_WEIGHTS_EFF'] = dw.copy()
L926         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L927
L928         # ② テンプレ判定（既存ロジックそのまま）
L929         mask = df['trend_template']
L930         if not bool(mask.any()):
L931             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L932                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L933                 (df.get('RS', np.nan) >= 0.08) &
L934                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L935                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L936                 (df.get('MA150_OVER_200', np.nan) > 0) &
L937                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L938                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L939             df['trend_template'] = mask
L940
L941         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L942         g_score = g_score_all.loc[mask]
L943         Scorer.g_score = g_score
L944         df_z['GSC'] = g_score_all
L945         df_z['DSC'] = d_score_all
L946
L947         try:
L948             current = (pd.read_csv("current_tickers.csv")
L949                   .iloc[:, 0]
L950                   .str.upper()
L951                   .tolist())
L952         except FileNotFoundError:
L953             warnings.warn("current_tickers.csv not found — bonus skipped")
L954             current = []
L955
L956         mask_bonus = g_score.index.isin(current)
L957         if mask_bonus.any():
L958             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L959             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L960             # 2) g 側の σ を取り、NaN なら 0 に丸める
L961             sigma_g = g_score.std()
L962             if pd.isna(sigma_g):
L963                 sigma_g = 0.0
L964             bonus_g = round(k * sigma_g, 3)
L965             g_score.loc[mask_bonus] += bonus_g
L966             Scorer.g_score = g_score
L967             # 3) D 側も同様に σ の NaN をケア
L968             sigma_d = d_score_all.std()
L969             if pd.isna(sigma_d):
L970                 sigma_d = 0.0
L971             bonus_d = round(k * sigma_d, 3)
L972             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L973
L974         try:
L975             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L976         except Exception:
L977             pass
L978
L979         df_full = df.copy()
L980         df_full_z = df_z.copy()
L981
L982         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L983         return FeatureBundle(df=df,
L984             df_z=df_z,
L985             g_score=g_score,
L986             d_score_all=d_score_all,
L987             missing_logs=pd.DataFrame(missing_logs),
L988             df_full=df_full,
L989             df_full_z=df_full_z,
L990             scaler=None)
L991
L992 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L993     """
L994     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L995     次の列を feature_df に追加する（index=ticker）。
L996       - G_BREAKOUT_recent_5d : bool
L997       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L998       - G_PULLBACK_recent_5d : bool
L999       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1000       - G_PIVOT_price        : float
L1001     失敗しても例外は握り潰し、既存処理を阻害しない。
L1002     """
L1003     try:
L1004         px   = bundle.px                      # 終値 DataFrame
L1005         hi   = bundle.data['High']
L1006         lo   = bundle.data['Low']
L1007         vol  = bundle.data['Volume']
L1008         bench= bundle.spx                     # ベンチマーク Series
L1009
L1010         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1011         g_universe = getattr(self_obj, "g_universe", None)
L1012         if g_universe is None:
L1013             try:
L1014                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1015             except Exception:
L1016                 g_universe = list(feature_df.index)
L1017         if not g_universe:
L1018             return feature_df
L1019
L1020         # 指標
L1021         px = px.ffill(limit=2)
L1022         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1023         ma50  = px[g_universe].rolling(50).mean()
L1024         ma150 = px[g_universe].rolling(150).mean()
L1025         ma200 = px[g_universe].rolling(200).mean()
L1026         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1027         vol20 = vol[g_universe].rolling(20).mean()
L1028         vol50 = vol[g_universe].rolling(50).mean()
L1029
L1030         # トレンドテンプレート合格
L1031         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1032                             & (ma150 > ma200) & (ma200.diff() > 0)
L1033
L1034         # 汎用ピボット：直近65営業日の高値（当日除外）
L1035         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1036
L1037         # 相対力：年内高値更新
L1038         bench_aligned = bench.reindex(px.index).ffill()
L1039         rs = px[g_universe].div(bench_aligned, axis=0)
L1040         rs_high = rs.rolling(252).max().shift(1)
L1041
L1042         # ブレイクアウト「発生日」：条件立ち上がり
L1043         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1044                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1045         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1046
L1047         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1048         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1049         volume_dryup = (vol20 / vol50) <= 1.0
L1050         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1051         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1052         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1053
L1054         # 直近N営業日内の発火 / 最終発生日
L1055         rows = []
L1056         for t in g_universe:
L1057             def _recent_and_date(s, win):
L1058                 sw = s[t].iloc[-win:]
L1059                 if sw.any():
L1060                     d = sw[sw].index[-1]
L1061                     return True, d.strftime("%Y-%m-%d")
L1062                 return False, ""
L1063             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1064             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1065             rows.append((t, {
L1066                 "G_BREAKOUT_recent_5d": br_recent,
L1067                 "G_BREAKOUT_last_date": br_date,
L1068                 "G_PULLBACK_recent_5d": pb_recent,
L1069                 "G_PULLBACK_last_date": pb_date,
L1070                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1071             }))
L1072         flags = pd.DataFrame({k: v for k, v in rows}).T
L1073
L1074         # 列を作成・上書き
L1075         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1076         for c in cols:
L1077             if c not in feature_df.columns:
L1078                 feature_df[c] = np.nan
L1079         feature_df.loc[flags.index, flags.columns] = flags
L1080
L1081     except Exception:
L1082         pass
L1083     return feature_df
L1084
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
```

## <documents/README.md>
```text
```