```text
 if hi_52>lo_52 else np.nan
L488         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L489         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L490         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L491         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L492         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L493         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L494         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L495         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L496
L497     @staticmethod
L498     def rs(s, b):
L499         n, nb = len(s), len(b)
L500         if n<60 or nb<60: return np.nan
L501         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L502         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L503         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L504
L505     @staticmethod
L506     def tr_str(s):
L507         if s is None:
L508             return np.nan
L509         s = s.ffill(limit=2).dropna()
L510         if len(s) < 50:
L511             return np.nan
L512         ma50 = s.rolling(50, min_periods=50).mean()
L513         last_ma = ma50.iloc[-1]
L514         last_px = s.iloc[-1]
L515         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L516
L517     @staticmethod
L518     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L519         r = (s/b).dropna()
L520         if len(r) < win: return np.nan
L521         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L522         try: return float(np.polyfit(x, y, 1)[0])
L523         except Exception: return np.nan
L524
L525     @staticmethod
L526     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L527         ev = info_t.get('enterpriseValue', np.nan)
L528         if pd.notna(ev) and ev>0: return float(ev)
L529         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L530         try:
L531             bs = tk.quarterly_balance_sheet
L532             if bs is not None and not bs.empty:
L533                 c = bs.columns[0]
L534                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L535                     if k in bs.index: debt = float(bs.loc[k,c]); break
L536                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L537                     if k in bs.index: cash = float(bs.loc[k,c]); break
L538         except Exception: pass
L539         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L540         return np.nan
L541
L542     @staticmethod
L543     def dividend_status(ticker: str) -> str:
L544         t = yf.Ticker(ticker)
L545         try:
L546             if not t.dividends.empty: return "has"
L547         except Exception: return "unknown"
L548         try:
L549             a = t.actions
L550             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L551         except Exception: pass
L552         try:
L553             fi = t.fast_info
L554             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L555         except Exception: pass
L556         return "unknown"
L557
L558     @staticmethod
L559     def div_streak(t):
L560         try:
L561             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L562             years, streak = sorted(ann.index), 0
L563             for i in range(len(years)-1,0,-1):
L564                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L565                 else: break
L566             return streak
L567         except Exception: return 0
L568
L569     @staticmethod
L570     def fetch_finnhub_metrics(symbol):
L571         api_key = os.environ.get("FINNHUB_API_KEY")
L572         if not api_key: return {}
L573         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L574         try:
L575             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L576             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L577         except Exception: return {}
L578
L579     @staticmethod
L580     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L581         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L582         n = min(len(r), len(m), lookback)
L583         if n<60: return np.nan
L584         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L585         return np.nan if var==0 else cov/var
L586
L587     @staticmethod
L588     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L589                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L590         """
L591         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L592         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L593         """
L594         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L595         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L596         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L597         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L598         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L599
L600     @staticmethod
L601     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L602         """
L603         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L604         戻り値は降順ソート済み。
L605         """
L606         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L607         cnt, pen = {}, {}
L608         for t in order:
L609             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L610         return (s - pd.Series(pen)).sort_values(ascending=False)
L611
L612     @staticmethod
L613     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L614         """
L615         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L616         """
L617         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L618         if not hard:
L619             return list(eff.head(N).index)
L620         pick, used = [], {}
L621         for t in eff.index:
L622             s = sectors.get(t, "U")
L623             if used.get(s,0) < hard:
L624                 pick.append(t); used[s] = used.get(s,0) + 1
L625             if len(pick) == N: break
L626         return pick
L627
L628     @staticmethod
L629     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L630         """
L631         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L632         - px: 列=ticker（ベンチは含めない）
L633         - spx: ベンチマーク Series（px.index に整列）
L634         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L635         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L636         """
L637         import numpy as np, pandas as pd
L638         if px is None or px.empty:
L639             return pd.Series(dtype=int)
L640         px = px.dropna(how="all", axis=1)
L641         if win_days and win_days > 0:
L642             px = px.tail(win_days)
L643         if px.empty:
L644             return pd.Series(dtype=int)
L645         spx = spx.reindex(px.index).ffill()
L646
L647         ma50  = px.rolling(50).mean()
L648         ma150 = px.rolling(150).mean()
L649         ma200 = px.rolling(200).mean()
L650
L651         tt = (px > ma150)
L652         tt &= (px > ma200)
L653         tt &= (ma150 > ma200)
L654         tt &= (ma200 - ma200.shift(21) > 0)
L655         tt &= (ma50  > ma150)
L656         tt &= (ma50  > ma200)
L657         tt &= (px    > ma50)
L658
L659         lo252 = px.rolling(252).min()
L660         hi252 = px.rolling(252).max()
L661         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L662         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L663
L664         r12  = px.divide(px.shift(252)).sub(1.0)
L665         br12 = spx.divide(spx.shift(252)).sub(1.0)
L666         r1   = px.divide(px.shift(22)).sub(1.0)
L667         br1  = spx.divide(spx.shift(22)).sub(1.0)
L668         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L669         tt &= (rs >= 0.10)
L670
L671         return tt.fillna(False).sum(axis=1).astype(int)
L672
L673     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L674     def aggregate_scores(self, ib: Any, cfg):
L675         if cfg is None:
L676             raise ValueError("cfg is required; pass factor.PipelineConfig")
L677         self._validate_ib_for_scorer(ib)
L678
L679         px, spx, tickers = ib.px, ib.spx, ib.tickers
L680         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L681
L682         df, missing_logs = pd.DataFrame(index=tickers), []
L683         df['EPS_SERIES'] = pd.Series([None] * len(df), index=df.index, dtype=object)
L684         debug_mode = bool(getattr(cfg, "debug_mode", False))
L685         for t in tickers:
L686             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L687             try:
L688                 volume_series_full = ib.data['Volume'][t]
L689             except Exception:
L690                 volume_series_full = None
L691
L692             grw_result = _calc_grw_flexible(t, d, s, volume_series_full)
L693             grw_score = grw_result.get('score')
L694             try:
L695                 grw_score_val = float(grw_score)
L696             except Exception:
L697                 grw_score_val = np.nan
L698             df.loc[t,'GRW_FLEX_SCORE'] = grw_score
L699             df.loc[t,'GRW_FLEX_WEIGHT'] = grw_result.get('weight')
L700             df.loc[t,'GRW_FLEX_CORE'] = grw_result.get('core')
L701             df.loc[t,'GRW_FLEX_PRICE'] = grw_result.get('price_proxy')
L702             df.loc[t,'DEBUG_GRW_PATH'] = grw_result.get('path')
L703             df.loc[t,'DEBUG_GRW_PARTS'] = grw_result.get('parts')
L704
L705             if debug_mode:
L706                 try:
L707                     parts_dict = grw_result.get('parts_dict')
L708                     flat = _flatten_for_debug(parts_dict, "DBG_GRW") if parts_dict else {}
L709                     if grw_result.get('path') is not None:
L710                         flat.setdefault("DBG_GRW.path", grw_result.get('path'))
L711                     if grw_result.get('weight') is not None:
L712                         flat.setdefault("DBG_GRW.w", grw_result.get('weight'))
L713                     for key, value in flat.items():
L714                         df.loc[t, key] = value
L715
L716                     series_rev_q = _ensure_series(d.get("SEC_REV_Q_SERIES"))
L717                     series_eps_q = _ensure_series(d.get("SEC_EPS_Q_SERIES"))
L718                     if isinstance(series_rev_q, pd.Series) and series_rev_q.size >= 8:
L719                         rev_yoy = (series_rev_q / series_rev_q.shift(4) - 1).dropna()
L720                         if not rev_yoy.empty:
L721                             df.loc[t, "DBG_GRW.rev_yoy_last4"] = list(rev_yoy.tail(4).round(4))
L722                             df.loc[t, "DBG_GRW.rev_yoy_mean"] = float(np.n
```