```text
89             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L690             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L691             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L692             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L693
L694             # --- 配当（欠損補完含む） ---
L695             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L696             if div is None or pd.isna(div):
L697                 try:
L698                     divs = yf.Ticker(t).dividends
L699                     if divs is not None and not divs.empty:
L700                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L701                         if last_close and last_close>0: div = float(div_1y/last_close)
L702                 except Exception: pass
L703             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L704
L705             # --- FCF/EV ---
L706             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L707             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L708
L709             # --- モメンタム・ボラ関連 ---
L710             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L711             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L712             n = int(min(len(r), len(rm)))
L713
L714             DOWNSIDE_DEV = np.nan
L715             if n>=60:
L716                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L717                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L718             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L719
L720             MDD_1Y = np.nan
L721             try:
L722                 w = s.iloc[-min(len(s),252):].dropna()
L723                 if len(w)>=30:
L724                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L725             except Exception: pass
L726             df.loc[t,'MDD_1Y'] = MDD_1Y
L727
L728             RESID_VOL = np.nan
L729             if n>=120:
L730                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L731                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L732                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L733                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L734             df.loc[t,'RESID_VOL'] = RESID_VOL
L735
L736             DOWN_OUTPERF = np.nan
L737             if n>=60:
L738                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L739                 if mask.sum()>=10:
L740                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L741                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L742             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L743
L744             # --- 長期移動平均/位置 ---
L745             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L746             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L747
L748             # --- 配当の詳細系 ---
L749             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L750             try:
L751                 divs = yf.Ticker(t).dividends.dropna()
L752                 if not divs.empty:
L753                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L754                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L755                     ann = divs.groupby(divs.index.year).sum()
L756                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L757                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L758                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L759                 so = d.get('sharesOutstanding',None)
L760                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L761                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L762             except Exception: pass
L763             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L764
L765             # --- 財務安定性 ---
L766             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L767
L768             # --- EPS 変動 ---
L769             EPS_VAR_8Q = np.nan
L770             try:
L771                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L772                 if qe is not None and not qe.empty and so:
L773                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L774                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L775             except Exception: pass
L776             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L777
L778             # --- サイズ/流動性 ---
L779             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L780             try:
L781                 if isinstance(volume_series_full, pd.Series):
L782                     vol_series = volume_series_full.reindex(s.index).dropna()
L783                     if len(vol_series) >= 5:
L784                         aligned_px = s.reindex(vol_series.index).dropna()
L785                         if len(aligned_px) == len(vol_series):
L786                             dv = (vol_series*aligned_px).rolling(60).mean()
L787                             if not dv.dropna().empty:
L788                                 adv60 = float(dv.dropna().iloc[-1])
L789             except Exception:
L790                 pass
L791             df.loc[t,'ADV60_USD'] = adv60
L792
L793             # --- 売上/利益の加速度等 ---
L794             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L795             REV_ANNUAL_STREAK = REV_YOY = np.nan
L796             EPS_YOY = np.nan
L797             try:
L798                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L799                 sec_rev_series = (d.get('SEC_REV_Q_SERIES') or [])
L800                 if sec_rev_series:
L801                     rev = pd.Series(sec_rev_series, dtype=float).dropna()
L802                 elif qe is not None and not qe.empty and 'Revenue' in qe.columns:
L803                     rev = qe['Revenue'].dropna().astype(float)
L804                 else:
L805                     rev = pd.Series([], dtype=float)
L806                 if not rev.empty:
L807                     if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L808                     if len(rev)>=6:
L809                         yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L810                         if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L811                     yoy_list=[]
L812                     for k in range(1,5):
L813                         if len(rev)>=4+k:
L814                             y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L815                             if pd.notna(y): yoy_list.append(y)
L816                     if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L817                     # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L818                     try:
L819                         if isinstance(rev.index, pd.DatetimeIndex):
L820                             g = rev.groupby(rev.index.year)
L821                             ann_sum, cnt = g.sum(), g.count()
L822                             ann_sum = ann_sum[cnt >= 4]
L823                             if len(ann_sum) >= 2:
L824                                 yoy = ann_sum.pct_change().dropna()
L825                                 if not yoy.empty:
L826                                     REV_YOY = float(yoy.iloc[-1])
L827                                 streak = 0
L828                                 for v in yoy.iloc[::-1]:
L829                                     if pd.isna(v) or v <= 0:
L830                                         break
L831                                     streak += 1
L832                                 REV_ANNUAL_STREAK = float(streak)
L833                     except Exception:
L834                         pass
L835                 sec_eps_series = (d.get('SEC_EPS_Q_SERIES') or [])
L836                 if sec_eps_series:
L837                     eps_series = pd.Series(sec_eps_series, dtype=float).replace([np.inf,-np.inf],np.nan)
L838                 elif qe is not None and not qe.empty and 'Earnings' in qe.columns and so:
L839                     eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L840                 else:
L841                     eps_series = pd.Series([], dtype=float)
L842                 if not eps_series.empty:
L843                     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L844                         EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L845                     try:
L846                         if isinstance(eps_series.index, pd.DatetimeIndex):
L847                             g_eps = eps_series.groupby(eps_series.index.year)
L848                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L849                             ann_eps = ann_eps[cnt_eps >= 4]
L850                             if len(ann_eps) >= 2:
L851                                 eps_yoy = ann_eps.pct_change().dropna()
L852                                 if not eps_yoy.empty:
L853                                     EPS_YOY = float(eps_yoy.iloc[-1])
L854                     except Exception:
L855                         pass
L856             except Exception: pass
L857             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L858             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L859             df.loc[t,'REV_YOY'] = REV_YOY
L860             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L861             df.loc[t,'EPS_YOY'] = EPS_YOY
L862
L863             # --- Rule of 40 や周辺 ---
L864             total_rev_ttm = d.get('totalRevenue',np.nan)
L865             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L866             df.loc[t,'FCF_MGN'] = FCF_MGN
L867             rule40 = np.nan
L868             try:
L869                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L870             except Exception: pass
L871             df.loc[t,'RULE40'] = rule40
L872
L873             # --- トレンド補助 ---
L874             sma50  = s.rolling(50).mean()
L875             sma150 = s.rolling(150).mean()
L876             sma200 = s.rolling(200).mean()
L877             p = _safe_last(s)
L878
L879             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L880                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L881             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L882                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L883
L884             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L885             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L886
L887             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L888             if len(sma200.dropna()) >= 21:
L889                 cur200 = _safe_last(sma200)
L890                 old2001 = float(sma200.iloc
```