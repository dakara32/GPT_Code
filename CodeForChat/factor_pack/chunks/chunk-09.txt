```text
b.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L217         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L218
L219     # ----（Scorer専用）テクニカル・指標系 ----
L220     @staticmethod
L221     def trend(s: pd.Series):
L222         if len(s)<200: return np.nan
L223         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L224         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L225         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L226         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L227         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L228         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L229         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L230         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L231         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L232         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L233         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L234         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L235
L236     @staticmethod
L237     def rs(s, b):
L238         n, nb = len(s), len(b)
L239         if n<60 or nb<60: return np.nan
L240         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L241         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L242         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L243
L244     @staticmethod
L245     def tr_str(s):
L246         if s is None:
L247             return np.nan
L248         s = s.ffill(limit=2).dropna()
L249         if len(s) < 50:
L250             return np.nan
L251         ma50 = s.rolling(50, min_periods=50).mean()
L252         last_ma = ma50.iloc[-1]
L253         last_px = s.iloc[-1]
L254         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L255
L256     @staticmethod
L257     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L258         r = (s/b).dropna()
L259         if len(r) < win: return np.nan
L260         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L261         try: return float(np.polyfit(x, y, 1)[0])
L262         except Exception: return np.nan
L263
L264     @staticmethod
L265     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L266         ev = info_t.get('enterpriseValue', np.nan)
L267         if pd.notna(ev) and ev>0: return float(ev)
L268         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L269         try:
L270             bs = tk.quarterly_balance_sheet
L271             if bs is not None and not bs.empty:
L272                 c = bs.columns[0]
L273                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L274                     if k in bs.index: debt = float(bs.loc[k,c]); break
L275                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L276                     if k in bs.index: cash = float(bs.loc[k,c]); break
L277         except Exception: pass
L278         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L279         return np.nan
L280
L281     @staticmethod
L282     def dividend_status(ticker: str) -> str:
L283         t = yf.Ticker(ticker)
L284         try:
L285             if not t.dividends.empty: return "has"
L286         except Exception: return "unknown"
L287         try:
L288             a = t.actions
L289             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L290         except Exception: pass
L291         try:
L292             fi = t.fast_info
L293             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L294         except Exception: pass
L295         return "unknown"
L296
L297     @staticmethod
L298     def div_streak(t):
L299         try:
L300             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L301             years, streak = sorted(ann.index), 0
L302             for i in range(len(years)-1,0,-1):
L303                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L304                 else: break
L305             return streak
L306         except Exception: return 0
L307
L308     @staticmethod
L309     def fetch_finnhub_metrics(symbol):
L310         api_key = os.environ.get("FINNHUB_API_KEY")
L311         if not api_key: return {}
L312         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L313         try:
L314             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L315             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L316         except Exception: return {}
L317
L318     @staticmethod
L319     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L320         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L321         n = min(len(r), len(m), lookback)
L322         if n<60: return np.nan
L323         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L324         return np.nan if var==0 else cov/var
L325
L326     @staticmethod
L327     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L328                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L329         """
L330         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L331         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L332         """
L333         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L334         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L335         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L336         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L337         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L338
L339     @staticmethod
L340     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L341         """
L342         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L343         戻り値は降順ソート済み。
L344         """
L345         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L346         cnt, pen = {}, {}
L347         for t in order:
L348             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L349         return (s - pd.Series(pen)).sort_values(ascending=False)
L350
L351     @staticmethod
L352     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L353         """
L354         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L355         """
L356         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L357         eff = eff.dropna()
L358         if not hard:
L359             return list(eff.head(N).index)
L360         pick, used = [], {}
L361         for t in eff.index:
L362             s = sectors.get(t, "U")
L363             if used.get(s,0) < hard:
L364                 pick.append(t); used[s] = used.get(s,0) + 1
L365             if len(pick) == N: break
L366         return pick
L367
L368     @staticmethod
L369     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L370         """
L371         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L372         - px: 列=ticker（ベンチは含めない）
L373         - spx: ベンチマーク Series（px.index に整列）
L374         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L375         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L376         """
L377         import numpy as np, pandas as pd
L378         if px is None or px.empty:
L379             return pd.Series(dtype=int)
L380         px = px.dropna(how="all", axis=1)
L381         if win_days and win_days > 0:
L382             px = px.tail(win_days)
L383         if px.empty:
L384             return pd.Series(dtype=int)
L385         spx = spx.reindex(px.index).ffill()
L386
L387         ma50  = px.rolling(50).mean()
L388         ma150 = px.rolling(150).mean()
L389         ma200 = px.rolling(200).mean()
L390
L391         tt = (px > ma150)
L392         tt &= (px > ma200)
L393         tt &= (ma150 > ma200)
L394         tt &= (ma200 - ma200.shift(21) > 0)
L395         tt &= (ma50  > ma150)
L396         tt &= (ma50  > ma200)
L397         tt &= (px    > ma50)
L398
L399         lo252 = px.rolling(252).min()
L400         hi252 = px.rolling(252).max()
L401         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L402         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L403
L404         r12  = px.divide(px.shift(252)).sub(1.0)
L405         br12 = spx.divide(spx.shift(252)).sub(1.0)
L406         r1   = px.divide(px.shift(22)).sub(1.0)
L407         br1  = spx.divide(spx.shift(22)).sub(1.0)
L408         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L409         tt &= (rs >= 0.10)
L410
L411         return tt.fillna(False).sum(axis=1).astype(int)
L412
L413     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L414     def aggregate_scores(self, ib: Any, cfg):
L415         if cfg is None:
L416             raise ValueError("cfg is required; pass factor.PipelineConfig")
L417         self._validate_ib_for_scorer(ib)
L418
L419         px, spx, tickers = ib.px, ib.spx, ib.tickers
L420         try:
L421             vol = ib.data['Volume']
L422         except Exception:
L423             vol = getattr(ib, 'vol', None)
L424         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L425
L426         df = pd.DataFrame(index=tickers)
L427         df['EPS_SERIES'] = pd.Series([None] * len(df), index=df.index, dtype=object)
L428         debug_mode = bool(getattr(cfg, "debug_mode", False))
L429         eps_cols = set(getattr(eps_df, "columns", []))
L430         for t in tickers:
L431             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L432             try:
L433                 volume_series_full = ib.data['Volume'][t]
L434             except Exception:
L435                 volume_series_full = None
L436
L437             # --- 基本特徴 ---
L438             df.loc[t,'TR']   = self.trend(s)
L439
L440             def _eps_value(col: str) -> float:
L441                 if col not in eps_cols:
L442                     return np.nan
L443                 try:
L444                     return _scalar(eps_df[col].get(t, np.nan))
L445                 except Exception:
L446                     return np.nan
L447
L448             df.loc[t,'EPS']  = _eps_value('EPS_TTM')
L449             df.loc[t,'EPS_Q'] = _eps_value('EPS_Q_LastQ')
L450             df.loc[t,'REV_TTM'] = _eps_value('REV_TTM')
L451             df.loc[t,'REV_Q']   = _eps_value('REV_Q_LastQ')
L452             df.loc[t,'EPS_TTM_PREV'] = _eps_value('EPS_TTM_PREV')
L453             df.loc[t,'REV_TTM_PREV'] = _eps_value('REV_TTM_PREV')
L454             df.loc[t,'EPS_Q_PREV'] = _eps_value('EPS_Q_Prev')
L455             df
```