```text
み。
L563         """
L564         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L565         cnt, pen = {}, {}
L566         for t in order:
L567             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L568         return (s - pd.Series(pen)).sort_values(ascending=False)
L569
L570     @staticmethod
L571     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L572         """
L573         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L574         """
L575         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L576         if not hard:
L577             return list(eff.head(N).index)
L578         pick, used = [], {}
L579         for t in eff.index:
L580             s = sectors.get(t, "U")
L581             if used.get(s,0) < hard:
L582                 pick.append(t); used[s] = used.get(s,0) + 1
L583             if len(pick) == N: break
L584         return pick
L585
L586     @staticmethod
L587     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L588         """
L589         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L590         - px: 列=ticker（ベンチは含めない）
L591         - spx: ベンチマーク Series（px.index に整列）
L592         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L593         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L594         """
L595         import numpy as np, pandas as pd
L596         if px is None or px.empty:
L597             return pd.Series(dtype=int)
L598         px = px.dropna(how="all", axis=1)
L599         if win_days and win_days > 0:
L600             px = px.tail(win_days)
L601         if px.empty:
L602             return pd.Series(dtype=int)
L603         spx = spx.reindex(px.index).ffill()
L604
L605         ma50  = px.rolling(50).mean()
L606         ma150 = px.rolling(150).mean()
L607         ma200 = px.rolling(200).mean()
L608
L609         tt = (px > ma150)
L610         tt &= (px > ma200)
L611         tt &= (ma150 > ma200)
L612         tt &= (ma200 - ma200.shift(21) > 0)
L613         tt &= (ma50  > ma150)
L614         tt &= (ma50  > ma200)
L615         tt &= (px    > ma50)
L616
L617         lo252 = px.rolling(252).min()
L618         hi252 = px.rolling(252).max()
L619         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L620         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L621
L622         r12  = px.divide(px.shift(252)).sub(1.0)
L623         br12 = spx.divide(spx.shift(252)).sub(1.0)
L624         r1   = px.divide(px.shift(22)).sub(1.0)
L625         br1  = spx.divide(spx.shift(22)).sub(1.0)
L626         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L627         tt &= (rs >= 0.10)
L628
L629         return tt.fillna(False).sum(axis=1).astype(int)
L630
L631     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L632     def aggregate_scores(self, ib: Any, cfg):
L633         if cfg is None:
L634             raise ValueError("cfg is required; pass factor.PipelineConfig")
L635         self._validate_ib_for_scorer(ib)
L636
L637         px, spx, tickers = ib.px, ib.spx, ib.tickers
L638         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L639
L640         df, missing_logs = pd.DataFrame(index=tickers), []
L641         for t in tickers:
L642             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L643             try:
L644                 volume_series_full = ib.data['Volume'][t]
L645             except Exception:
L646                 volume_series_full = None
L647
L648             grw_result = _calc_grw_flexible(t, d, s, volume_series_full)
L649             df.loc[t,'GRW_FLEX_SCORE'] = grw_result.get('score')
L650             df.loc[t,'GRW_FLEX_WEIGHT'] = grw_result.get('weight')
L651             df.loc[t,'GRW_FLEX_CORE'] = grw_result.get('core')
L652             df.loc[t,'GRW_FLEX_PRICE'] = grw_result.get('price_proxy')
L653             df.loc[t,'DEBUG_GRW_PATH'] = grw_result.get('path')
L654             df.loc[t,'DEBUG_GRW_PARTS'] = grw_result.get('parts')
L655
L656             # --- 基本特徴 ---
L657             df.loc[t,'TR']   = self.trend(s)
L658             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L659             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L660             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L661             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L662             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L663             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L664             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L665
L666             # --- 配当（欠損補完含む） ---
L667             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L668             if div is None or pd.isna(div):
L669                 try:
L670                     divs = yf.Ticker(t).dividends
L671                     if divs is not None and not divs.empty:
L672                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L673                         if last_close and last_close>0: div = float(div_1y/last_close)
L674                 except Exception: pass
L675             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L676
L677             # --- FCF/EV ---
L678             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L679             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L680
L681             # --- モメンタム・ボラ関連 ---
L682             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L683             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L684             n = int(min(len(r), len(rm)))
L685
L686             DOWNSIDE_DEV = np.nan
L687             if n>=60:
L688                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L689                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L690             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L691
L692             MDD_1Y = np.nan
L693             try:
L694                 w = s.iloc[-min(len(s),252):].dropna()
L695                 if len(w)>=30:
L696                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L697             except Exception: pass
L698             df.loc[t,'MDD_1Y'] = MDD_1Y
L699
L700             RESID_VOL = np.nan
L701             if n>=120:
L702                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L703                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L704                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L705                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L706             df.loc[t,'RESID_VOL'] = RESID_VOL
L707
L708             DOWN_OUTPERF = np.nan
L709             if n>=60:
L710                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L711                 if mask.sum()>=10:
L712                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L713                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L714             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L715
L716             # --- 長期移動平均/位置 ---
L717             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L718             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L719
L720             # --- 配当の詳細系 ---
L721             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L722             try:
L723                 divs = yf.Ticker(t).dividends.dropna()
L724                 if not divs.empty:
L725                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L726                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L727                     ann = divs.groupby(divs.index.year).sum()
L728                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L729                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L730                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L731                 so = d.get('sharesOutstanding',None)
L732                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L733                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L734             except Exception: pass
L735             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L736
L737             # --- 財務安定性 ---
L738             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L739
L740             # --- EPS 変動 ---
L741             EPS_VAR_8Q = np.nan
L742             try:
L743                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L744                 if qe is not None and not qe.empty and so:
L745                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L746                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L747             except Exception: pass
L748             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L749
L750             # --- サイズ/流動性 ---
L751             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L752             try:
L753                 if isinstance(volume_series_full, pd.Series):
L754                     vol_series = volume_series_full.reindex(s.index).dropna()
L755                     if len(vol_series) >= 5:
L756                         aligned_px = s.reindex(vol_series.index).dropna()
L757                         if len(aligned_px) == len(vol_series):
L758                             dv = (vol_series*aligned_px).rolling(60).mean()
L759                             if not dv.dropna().empty:
L760                                 adv60 = float(dv.dropna().iloc[-1])
L761             except Exception:
L762                 pass
L763             df.loc[t,'ADV60_USD'] = adv60
L764
L765             # --- Rule of 40 や周辺 ---
L766             total_rev_ttm = d.get('totalRevenue',np.nan)
L767             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L768             df.loc[t,'FCF_MGN'] = FCF_MGN
L769             rule40 = np.nan
L770             try:
L771                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L772             except Exception: pass
L773             df.loc[t,'RULE40'] = rule40
L774
L775             # --- トレンド補助 ---
L776             sma50  = s.rolling(50).mean()
L777             sma150 = s.rolling(150).mean()
L778             sma200 = s.rolling(200).mean()
L779             p = _safe_last(s)
L780
L781             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L782                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L783             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L784                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L785
L786             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L787             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L788
L789             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L790             if len(sma200.
```