```text
L395                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L396                         if last_close and last_close>0: div = float(div_1y/last_close)
L397                 except Exception: pass
L398             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L399
L400             # --- FCF/EV ---
L401             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L402             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L403
L404             # --- モメンタム・ボラ関連 ---
L405             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L406             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L407             n = int(min(len(r), len(rm)))
L408
L409             DOWNSIDE_DEV = np.nan
L410             if n>=60:
L411                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L412                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L413             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L414
L415             MDD_1Y = np.nan
L416             try:
L417                 w = s.iloc[-min(len(s),252):].dropna()
L418                 if len(w)>=30:
L419                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L420             except Exception: pass
L421             df.loc[t,'MDD_1Y'] = MDD_1Y
L422
L423             RESID_VOL = np.nan
L424             if n>=120:
L425                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L426                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L427                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L428                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L429             df.loc[t,'RESID_VOL'] = RESID_VOL
L430
L431             DOWN_OUTPERF = np.nan
L432             if n>=60:
L433                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L434                 if mask.sum()>=10:
L435                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L436                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L437             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L438
L439             # --- 長期移動平均/位置 ---
L440             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L441             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L442
L443             # --- 配当の詳細系 ---
L444             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L445             try:
L446                 divs = yf.Ticker(t).dividends.dropna()
L447                 if not divs.empty:
L448                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L449                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L450                     ann = divs.groupby(divs.index.year).sum()
L451                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L452                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L453                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L454                 so = d.get('sharesOutstanding',None)
L455                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L456                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L457             except Exception: pass
L458             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L459
L460             # --- 財務安定性 ---
L461             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L462
L463             # --- EPS 変動 ---
L464             EPS_VAR_8Q = np.nan
L465             try:
L466                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L467                 if qe is not None and not qe.empty and so:
L468                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L469                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L470             except Exception: pass
L471             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L472
L473             # --- サイズ/流動性 ---
L474             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L475             try:
L476                 if isinstance(volume_series_full, pd.Series):
L477                     vol_series = volume_series_full.reindex(s.index).dropna()
L478                     if len(vol_series) >= 5:
L479                         aligned_px = s.reindex(vol_series.index).dropna()
L480                         if len(aligned_px) == len(vol_series):
L481                             dv = (vol_series*aligned_px).rolling(60).mean()
L482                             if not dv.dropna().empty:
L483                                 adv60 = float(dv.dropna().iloc[-1])
L484             except Exception:
L485                 pass
L486             df.loc[t,'ADV60_USD'] = adv60
L487
L488             # --- Rule of 40 や周辺 ---
L489             total_rev_ttm = d.get('totalRevenue',np.nan)
L490             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L491             df.loc[t,'FCF_MGN'] = FCF_MGN
L492             rule40 = np.nan
L493             try:
L494                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L495             except Exception: pass
L496             df.loc[t,'RULE40'] = rule40
L497
L498             # --- トレンド補助 ---
L499             sma50  = s.rolling(50).mean()
L500             sma150 = s.rolling(150).mean()
L501             sma200 = s.rolling(200).mean()
L502             p = _safe_last(s)
L503
L504             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L505                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L506             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L507                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L508
L509             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L510             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L511
L512             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L513             if len(sma200.dropna()) >= 21:
L514                 cur200 = _safe_last(sma200)
L515                 old2001 = float(sma200.iloc[-21])
L516                 if old2001:
L517                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L518
L519             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L520             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L521             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L522             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L523             if len(sma200.dropna())>=105:
L524                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L525                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L526             # NEW: 200日線が連続で上向きの「日数」
L527             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L528             try:
L529                 s200 = sma200.dropna()
L530                 if len(s200) >= 2:
L531                     diff200 = s200.diff()
L532                     up = 0
L533                     for v in diff200.iloc[::-1]:
L534                         if pd.isna(v) or v <= 0:
L535                             break
L536                         up += 1
L537                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L538             except Exception:
L539                 pass
L540             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L541             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L542             if hi52 and hi52>0 and pd.notna(p):
L543                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L544             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L545             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L546
L547             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L548
L549             # --- 欠損メモ ---
L550             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L551             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L552             if need_finnhub:
L553                 fin_data = self.fetch_finnhub_metrics(t)
L554                 for col in need_finnhub:
L555                     val = fin_data.get(col)
L556                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L557             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L558                 if pd.isna(df.loc[t,col]):
L559                     if col=='DIV':
L560                         status = self.dividend_status(t)
L561                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L562                     else:
L563                         missing_logs.append({'Ticker':t,'Column':col})
L564
L565         def _pick_series(entry: dict, keys: list[str]):
L566             for k in keys:
L567                 val = entry.get(k) if isinstance(entry, dict) else None
L568                 if val is None:
L569                     continue
L570                 try:
L571                     if hasattr(val, "empty") and getattr(val, "empty"):
L572                         continue
L573                 except Exception:
L574                     pass
L575                 if isinstance(val, (list, tuple)) and len(val) == 0:
L576                     continue
L577                 return val
L578             return None
L579
L580         def _has_sec_series(val) -> bool:
L581             try:
L582                 if isinstance(val, pd.Series):
L583                     return not val.dropna().empty
L584                 if isinstance(val, (list, tuple)):
L585                     return any(pd.notna(v) for v in val)
L586                 return bool(val)
L587             except Exception:
L588                 return False
L589
L590         def _series_len(val) -> int:
L591             try:
L592                 if isinstance(val, pd.Series):
L593                     return int(val.dropna().size)
L594                 if isinstance(val, (list, tuple)):
L595                     return len(val)
L596                 return int(bool(val))
L597             except Exception:
L598                 return 0
L599
L600         for t in tickers:
L601             try:
L602                 d = info.get(t, {}) or {}
L603                 rev_series = d.get("SEC_REV_Q_SERIES")
L604                 eps_series = d.get("SEC_EPS_Q_SERIES")
L605                 fallback_qearn = False
L606                 try:
L607                     qe = tickers_bulk.tickers[t].quarterly_earnings
L608                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L609                 except Exception:
L610                     qe = None
L611
L612                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L613                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L614                 r_raw = _ensure_series(r_src)
L615 
```