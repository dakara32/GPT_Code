```text
"GROWTH_F={row['GROWTH_F']:.3f}"]
L750                     if pd.notna(row.get('GROWTH_F_RAW')):
L751                         parts.append(f"GROWTH_F_RAW={row['GROWTH_F_RAW']:.3f}")
L752                     print(f"Ticker: {t} | " + " ".join(parts))
L753                 print()
L754             except Exception as exc:
L755                 print(f"[ERR] GRW debug dump failed: {exc}")
L756
L757         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L758             + 0.15*df_z['TR_str']
L759             + 0.15*df_z['RS_SLOPE_6W']
L760             + 0.15*df_z['RS_SLOPE_13W']
L761             + 0.10*df_z['MA200_SLOPE_5M']
L762             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L763         df_z['VOL'] = robust_z(df['BETA'])
L764         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L765         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L766
L767         _dump_dfz(df_z=df_z, debug_mode=getattr(cfg, "debug_mode", False))
L768
L769         # === begin: BIO LOSS PENALTY =====================================
L770         try:
L771             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L772         except Exception:
L773             penalty_z = 0.8
L774
L775         def _is_bio_like(t: str) -> bool:
L776             inf = info.get(t, {}) if isinstance(info, dict) else {}
L777             sec = str(inf.get("sector", "")).lower()
L778             ind = str(inf.get("industry", "")).lower()
L779             if "health" not in sec:
L780                 return False
L781             keys = ("biotech", "biopharma", "pharma")
L782             return any(k in ind for k in keys)
L783
L784         tickers_s = pd.Index(df_z.index)
L785         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L786         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L787         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L788
L789         if bool(mask_bio_loss.any()) and penalty_z > 0:
L790             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L791             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L792         # === end: BIO LOSS PENALTY =======================================
L793
L794         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L795         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L796
L797         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L798         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L799         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L800         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L801
L802         # --- 重みは cfg を優先（外部があればそれを使用） ---
L803         # ① 全銘柄で G/D スコアを算出（unmasked）
L804         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L805
L806         d_comp = pd.concat({
L807             'QAL': df_z['D_QAL'],
L808             'YLD': df_z['D_YLD'],
L809             'VOL': df_z['D_VOL_RAW'],
L810             'TRD': df_z['D_TRD']
L811         }, axis=1)
L812         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L813         globals()['D_WEIGHTS_EFF'] = dw.copy()
L814         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L815
L816         # ② テンプレ判定（既存ロジックそのまま）
L817         mask = df['trend_template']
L818         if not bool(mask.any()):
L819             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L820                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L821                 (df.get('RS', np.nan) >= 0.08) &
L822                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L823                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L824                 (df.get('MA150_OVER_200', np.nan) > 0) &
L825                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L826                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L827             df['trend_template'] = mask
L828
L829         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L830         g_score = g_score_all.loc[mask]
L831         Scorer.g_score = g_score
L832         df_z['GSC'] = g_score_all
L833         df_z['DSC'] = d_score_all
L834
L835         try:
L836             current = (pd.read_csv("current_tickers.csv")
L837                   .iloc[:, 0]
L838                   .str.upper()
L839                   .tolist())
L840         except FileNotFoundError:
L841             warnings.warn("current_tickers.csv not found — bonus skipped")
L842             current = []
L843
L844         mask_bonus = g_score.index.isin(current)
L845         if mask_bonus.any():
L846             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L847             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L848             # 2) g 側の σ を取り、NaN なら 0 に丸める
L849             sigma_g = g_score.std()
L850             if pd.isna(sigma_g):
L851                 sigma_g = 0.0
L852             bonus_g = round(k * sigma_g, 3)
L853             g_score.loc[mask_bonus] += bonus_g
L854             Scorer.g_score = g_score
L855             # 3) D 側も同様に σ の NaN をケア
L856             sigma_d = d_score_all.std()
L857             if pd.isna(sigma_d):
L858                 sigma_d = 0.0
L859             bonus_d = round(k * sigma_d, 3)
L860             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L861
L862         try:
L863             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L864         except Exception:
L865             pass
L866
L867         df_full = df.copy()
L868         df_full_z = df_z.copy()
L869
L870         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L871         return FeatureBundle(df=df,
L872             df_z=df_z,
L873             g_score=g_score,
L874             d_score_all=d_score_all,
L875             missing_logs=pd.DataFrame(missing_logs),
L876             df_full=df_full,
L877             df_full_z=df_full_z,
L878             scaler=None)
L879
L880 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L881     """
L882     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L883     次の列を feature_df に追加する（index=ticker）。
L884       - G_BREAKOUT_recent_5d : bool
L885       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L886       - G_PULLBACK_recent_5d : bool
L887       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L888       - G_PIVOT_price        : float
L889     失敗しても例外は握り潰し、既存処理を阻害しない。
L890     """
L891     try:
L892         px   = bundle.px                      # 終値 DataFrame
L893         hi   = bundle.data['High']
L894         lo   = bundle.data['Low']
L895         vol  = bundle.data['Volume']
L896         bench= bundle.spx                     # ベンチマーク Series
L897
L898         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L899         g_universe = getattr(self_obj, "g_universe", None)
L900         if g_universe is None:
L901             try:
L902                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L903             except Exception:
L904                 g_universe = list(feature_df.index)
L905         if not g_universe:
L906             return feature_df
L907
L908         # 指標
L909         px = px.ffill(limit=2)
L910         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L911         ma50  = px[g_universe].rolling(50).mean()
L912         ma150 = px[g_universe].rolling(150).mean()
L913         ma200 = px[g_universe].rolling(200).mean()
L914         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L915         vol20 = vol[g_universe].rolling(20).mean()
L916         vol50 = vol[g_universe].rolling(50).mean()
L917
L918         # トレンドテンプレート合格
L919         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L920                             & (ma150 > ma200) & (ma200.diff() > 0)
L921
L922         # 汎用ピボット：直近65営業日の高値（当日除外）
L923         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L924
L925         # 相対力：年内高値更新
L926         bench_aligned = bench.reindex(px.index).ffill()
L927         rs = px[g_universe].div(bench_aligned, axis=0)
L928         rs_high = rs.rolling(252).max().shift(1)
L929
L930         # ブレイクアウト「発生日」：条件立ち上がり
L931         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L932                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L933         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L934
L935         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L936         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L937         volume_dryup = (vol20 / vol50) <= 1.0
L938         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L939         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L940         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L941
L942         # 直近N営業日内の発火 / 最終発生日
L943         rows = []
L944         for t in g_universe:
L945             def _recent_and_date(s, win):
L946                 sw = s[t].iloc[-win:]
L947                 if sw.any():
L948                     d = sw[sw].index[-1]
L949                     return True, d.strftime("%Y-%m-%d")
L950                 return False, ""
L951             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L952             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L953             rows.append((t, {
L954                 "G_BREAKOUT_recent_5d": br_recent,
L955                 "G_BREAKOUT_last_date": br_date,
L956                 "G_PULLBACK_recent_5d": pb_recent,
L957                 "G_PULLBACK_last_date": pb_date,
L958                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L959             }))
L960         flags = pd.DataFrame({k: v for k, v in rows}).T
L961
L962         # 列を作成・上書き
L963         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L964         for c in cols:
L965             if c not in feature_df.columns:
L966                 feature_df[c] = np.nan
L967         feature_df.loc[flags.index, flags.columns] = flags
L968
L969     except Exception:
L970         pass
L971     return feature_df
L972
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L3
```