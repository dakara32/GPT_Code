```text
','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L668         for col in grw_cols:
L669             if col in df.columns:
L670                 raw = pd.to_numeric(df[col], errors="coerce")
L671                 df_z[col] = robust_z_keepnan(raw)
L672                 df_z[f'{col}_RAW'] = raw
L673         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L674             if k in df.columns and k not in df_z.columns:
L675                 raw = pd.to_numeric(df[k], errors="coerce")
L676                 df_z[k] = robust_z_keepnan(raw)
L677                 df_z[f'{k}_RAW'] = raw
L678         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L679
L680         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L681         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L682         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L683
L684         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L685         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L686         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L687
L688         # ===== トレンドスロープ算出 =====
L689         def zpos(x):
L690             arr = robust_z(x)
L691             idx = getattr(x, 'index', df_z.index)
L692             return pd.Series(arr, index=idx).fillna(0.0)
L693
L694         def relu(x):
L695             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L696             return ser.clip(lower=0).fillna(0.0)
L697
L698         # 売上トレンドスロープ（四半期）
L699         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L700         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L701         slope_rev_combo = slope_rev - 0.25*noise_rev
L702         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L703         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L704
L705         # EPSトレンドスロープ（四半期）
L706         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L707         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L708         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L709
L710         # 年次トレンド（サブ）
L711         slope_rev_yr = zpos(df_z['REV_YOY'])
L712         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L713         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L714         streak_yr = streak_base / (streak_base.abs() + 1.0)
L715         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L716         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L717         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L718         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L719         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L720
L721         # ===== 新GRW合成式（SEPA寄りシフト） =====
L722         _nz = lambda name: df_z.get(name, pd.Series(0.0, index=df_z.index)).fillna(0.0)
L723         grw_combo = (
L724               0.20*_nz('REV_Q_YOY')
L725             + 0.10*_nz('REV_YOY_ACC')
L726             + 0.10*_nz('REV_ANN_STREAK')
L727             - 0.05*_nz('REV_YOY_VAR')
L728             + 0.10*_nz('TREND_SLOPE_REV')
L729             + 0.15*_nz('EPS_Q_YOY')
L730             + 0.05*_nz('EPS_POS')
L731             + 0.20*_nz('TREND_SLOPE_EPS')
L732             + 0.05*_nz('TREND_SLOPE_REV_YR')
L733             + 0.03*_nz('TREND_SLOPE_EPS_YR')
L734             + 0.10*_nz('FCF_MGN')
L735             + 0.05*_nz('RULE40')
L736         )
L737         df_z['GROWTH_F_RAW'] = grw_combo
L738         df_z['GROWTH_F'] = robust_z(grw_combo).clip(-3.0, 3.0)
L739
L740         # Debug dump for GRW composition (console OFF by default; enable only with env)
L741         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L742             try:
L743                 i = df_z[['GROWTH_F', 'GROWTH_F_RAW']].copy()
L744                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L745                 limit = max(0, min(40, len(i)))
L746                 print("[DEBUG: GRW]")
L747                 for t in i.index[:limit]:
L748                     row = i.loc[t]
L749                     parts = [f"GROWTH_F={row['GROWTH_F']:.3f}"]
L750                     if pd.notna(row.get('GROWTH_F_RAW')):
L751                         parts.append(f"GROWTH_F_RAW={row['GROWTH_F_RAW']:.3f}")
L752                     print(f"Ticker: {t} | " + " ".join(parts))
L753                 print()
L754             except Exception as exc:
L755                 print(f"[ERR] GRW debug dump failed: {exc}")
L756
L757         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L758             + 0.15*df_z['TR_str']
L759             + 0.15*df_z['RS_SLOPE_6W']
L760             + 0.15*df_z['RS_SLOPE_13W']
L761             + 0.10*df_z['MA200_SLOPE_5M']
L762             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L763         df_z['VOL'] = robust_z(df['BETA'])
L764         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L765         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L766
L767         _dump_dfz(df_z=df_z, debug_mode=getattr(cfg, "debug_mode", False))
L768
L769         # === begin: BIO LOSS PENALTY =====================================
L770         try:
L771             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L772         except Exception:
L773             penalty_z = 0.8
L774
L775         def _is_bio_like(t: str) -> bool:
L776             inf = info.get(t, {}) if isinstance(info, dict) else {}
L777             sec = str(inf.get("sector", "")).lower()
L778             ind = str(inf.get("industry", "")).lower()
L779             if "health" not in sec:
L780                 return False
L781             keys = ("biotech", "biopharma", "pharma")
L782             return any(k in ind for k in keys)
L783
L784         tickers_s = pd.Index(df_z.index)
L785         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L786         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L787         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L788
L789         if bool(mask_bio_loss.any()) and penalty_z > 0:
L790             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L791             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L792         # === end: BIO LOSS PENALTY =======================================
L793
L794         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L795         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L796
L797         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L798         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L799         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L800         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L801
L802         # --- 重みは cfg を優先（外部があればそれを使用） ---
L803         # ① 全銘柄で G/D スコアを算出（unmasked）
L804         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L805
L806         d_comp = pd.concat({
L807             'QAL': df_z['D_QAL'],
L808             'YLD': df_z['D_YLD'],
L809             'VOL': df_z['D_VOL_RAW'],
L810             'TRD': df_z['D_TRD']
L811         }, axis=1)
L812         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L813         globals()['D_WEIGHTS_EFF'] = dw.copy()
L814         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L815
L816         # ② テンプレ判定（既存ロジックそのまま）
L817         mask = df['trend_template']
L818         if not bool(mask.any()):
L819             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L820                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L821                 (df.get('RS', np.nan) >= 0.08) &
L822                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L823                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L824                 (df.get('MA150_OVER_200', np.nan) > 0) &
L825                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L826                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L827             df['trend_template'] = mask
L828
L829         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L830         g_score = g_score_all.loc[mask]
L831         Scorer.g_score = g_score
L832         df_z['GSC'] = g_score_all
L833         df_z['DSC'] = d_score_all
L834
L835         try:
L836             current = (pd.read_csv("current_tickers.csv")
L837                   .iloc[:, 0]
L838                   .str.upper()
L839                   .tolist())
L840         except FileNotFoundError:
L841             warnings.warn("current_tickers.csv not found — bonus skipped")
L842             current = []
L843
L844         mask_bonus = g_score.index.isin(current)
L845         if mask_bonus.any():
L846             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L847             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L848             # 2) g 側の σ を取り、NaN なら 0 に丸める
L849             sigma_g = g_score.std()
L850             if pd.isna(sigma_g):
L851                 sigma_g = 0.0
L852             bonus_g = round(k * sigma_g, 3)
L853             g_score.loc[mask_bonus] += bonus_g
L854             Scorer.g_score = g_score
L855             # 3) D 側も同様に σ の NaN をケア
L856             sigma_d = d_score_all.std()
L857             if pd.isna(sigma_d):
L858                 sigma_d = 0.0
L859             bonus_d = round(k * sigma_d, 3)
L860             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L861
L862         try:
L863             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L864         except Exception:
L865             pass
L866
L867         df_full = df.copy()
L868         df_full_z = df_z.copy()
L869
L870         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L871         return FeatureBundle(df=df,
L872             df_z=df_z,
L873             g_score=g_score,
L874             d_score_all=d_score_all,
L875             missing_logs=pd.DataFrame(missing_logs),
L876             df_full=df_full,
L877             df_full_z=df_full_z,
L878             scaler=None)
L879
L880 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L881     """
L882     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L883     次の列を feature_df に追加する（index=ticker）。
L884       - G_BREAKOUT_recent_5d : bool
L885       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L886       - G_PULLBACK_recent_5d : bool
L887       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L888       - G_PIVOT_price        : float
L889     失敗しても例外は握り潰し、既存処理を阻害しない。
L890     """
L891     try:
L892         px   = bundle.px                      # 終値 DataFrame
L893         hi   = bundle.data['High']
L894         lo   = bundle.data['Low']
L895         vol  = bundle.data['Volume']
L896         bench= bundle.spx                     # ベンチマーク Series
L897
L898         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L899         g_universe = getattr(self_obj, "g_universe", None)
L900         if g_universe is None:
L901             try:
L902                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L903             except Exception:
L904                 g_universe = list(feature_df.index)
L905       
```