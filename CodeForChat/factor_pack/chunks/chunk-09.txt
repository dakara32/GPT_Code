```text
 pd.Series(x, index=df_z.index)
L608             return ser.clip(lower=0).fillna(0.0)
L609
L610         # 売上トレンドスロープ（四半期）
L611         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L612         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L613         slope_rev_combo = slope_rev - 0.25*noise_rev
L614         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L615         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L616
L617         # EPSトレンドスロープ（四半期）
L618         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L619         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L620         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L621
L622         # 年次トレンド（サブ）
L623         slope_rev_yr = zpos(df_z['REV_YOY'])
L624         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L625         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L626         streak_yr = streak_base / (streak_base.abs() + 1.0)
L627         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L628         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L629         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L630         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L631         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L632
L633         # ===== 新GRW合成式（SEPA寄りシフト） =====
L634         _nz = lambda name: df_z.get(name, pd.Series(0.0, index=df_z.index)).fillna(0.0)
L635         grw_combo = (
L636               0.20*_nz('REV_Q_YOY')
L637             + 0.10*_nz('REV_YOY_ACC')
L638             + 0.10*_nz('REV_ANN_STREAK')
L639             - 0.05*_nz('REV_YOY_VAR')
L640             + 0.10*_nz('TREND_SLOPE_REV')
L641             + 0.15*_nz('EPS_Q_YOY')
L642             + 0.05*_nz('EPS_POS')
L643             + 0.20*_nz('TREND_SLOPE_EPS')
L644             + 0.05*_nz('TREND_SLOPE_REV_YR')
L645             + 0.03*_nz('TREND_SLOPE_EPS_YR')
L646             + 0.10*_nz('FCF_MGN')
L647             + 0.05*_nz('RULE40')
L648         )
L649         df_z['GROWTH_F_RAW'] = grw_combo
L650         df_z['GROWTH_F'] = robust_z(grw_combo).clip(-3.0, 3.0)
L651
L652         # Debug dump for GRW composition (console OFF by default; enable only with env)
L653         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L654             try:
L655                 i = df_z[['GROWTH_F', 'GROWTH_F_RAW']].copy()
L656                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L657                 limit = max(0, min(40, len(i)))
L658                 print("[DEBUG: GRW]")
L659                 for t in i.index[:limit]:
L660                     row = i.loc[t]
L661                     parts = [f"GROWTH_F={row['GROWTH_F']:.3f}"]
L662                     if pd.notna(row.get('GROWTH_F_RAW')):
L663                         parts.append(f"GROWTH_F_RAW={row['GROWTH_F_RAW']:.3f}")
L664                     print(f"Ticker: {t} | " + " ".join(parts))
L665                 print()
L666             except Exception as exc:
L667                 print(f"[ERR] GRW debug dump failed: {exc}")
L668
L669         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L670             + 0.15*df_z['TR_str']
L671             + 0.15*df_z['RS_SLOPE_6W']
L672             + 0.15*df_z['RS_SLOPE_13W']
L673             + 0.10*df_z['MA200_SLOPE_5M']
L674             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L675         df_z['VOL'] = robust_z(df['BETA'])
L676         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L677         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L678
L679         # === begin: BIO LOSS PENALTY =====================================
L680         try:
L681             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L682         except Exception:
L683             penalty_z = 0.8
L684
L685         def _is_bio_like(t: str) -> bool:
L686             inf = info.get(t, {}) if isinstance(info, dict) else {}
L687             sec = str(inf.get("sector", "")).lower()
L688             ind = str(inf.get("industry", "")).lower()
L689             if "health" not in sec:
L690                 return False
L691             keys = ("biotech", "biopharma", "pharma")
L692             return any(k in ind for k in keys)
L693
L694         tickers_s = pd.Index(df_z.index)
L695         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L696         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L697         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L698
L699         if bool(mask_bio_loss.any()) and penalty_z > 0:
L700             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L701             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L702         # === end: BIO LOSS PENALTY =======================================
L703
L704         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L705         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L706
L707         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L708         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L709         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L710         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L711
L712         # --- 重みは cfg を優先（外部があればそれを使用） ---
L713         # ① 全銘柄で G/D スコアを算出（unmasked）
L714         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L715
L716         d_comp = pd.concat({
L717             'QAL': df_z['D_QAL'],
L718             'YLD': df_z['D_YLD'],
L719             'VOL': df_z['D_VOL_RAW'],
L720             'TRD': df_z['D_TRD']
L721         }, axis=1)
L722         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L723         globals()['D_WEIGHTS_EFF'] = dw.copy()
L724         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L725
L726         # ② テンプレ判定（既存ロジックそのまま）
L727         mask = df['trend_template']
L728         if not bool(mask.any()):
L729             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L730                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L731                 (df.get('RS', np.nan) >= 0.08) &
L732                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L733                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L734                 (df.get('MA150_OVER_200', np.nan) > 0) &
L735                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L736                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L737             df['trend_template'] = mask
L738
L739         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L740         g_score = g_score_all.loc[mask]
L741         Scorer.g_score = g_score
L742         df_z['GSC'] = g_score_all
L743         df_z['DSC'] = d_score_all
L744
L745         try:
L746             current = (pd.read_csv("current_tickers.csv")
L747                   .iloc[:, 0]
L748                   .str.upper()
L749                   .tolist())
L750         except FileNotFoundError:
L751             warnings.warn("current_tickers.csv not found — bonus skipped")
L752             current = []
L753
L754         mask_bonus = g_score.index.isin(current)
L755         if mask_bonus.any():
L756             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L757             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L758             # 2) g 側の σ を取り、NaN なら 0 に丸める
L759             sigma_g = g_score.std()
L760             if pd.isna(sigma_g):
L761                 sigma_g = 0.0
L762             bonus_g = round(k * sigma_g, 3)
L763             g_score.loc[mask_bonus] += bonus_g
L764             Scorer.g_score = g_score
L765             # 3) D 側も同様に σ の NaN をケア
L766             sigma_d = d_score_all.std()
L767             if pd.isna(sigma_d):
L768                 sigma_d = 0.0
L769             bonus_d = round(k * sigma_d, 3)
L770             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L771
L772         try:
L773             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L774         except Exception:
L775             pass
L776
L777         df_full = df.copy()
L778         df_full_z = df_z.copy()
L779
L780         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L781         return FeatureBundle(df=df,
L782             df_z=df_z,
L783             g_score=g_score,
L784             d_score_all=d_score_all,
L785             missing_logs=pd.DataFrame(missing_logs),
L786             df_full=df_full,
L787             df_full_z=df_full_z,
L788             scaler=None)
L789
L790 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L791     """
L792     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L793     次の列を feature_df に追加する（index=ticker）。
L794       - G_BREAKOUT_recent_5d : bool
L795       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L796       - G_PULLBACK_recent_5d : bool
L797       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L798       - G_PIVOT_price        : float
L799     失敗しても例外は握り潰し、既存処理を阻害しない。
L800     """
L801     try:
L802         px   = bundle.px                      # 終値 DataFrame
L803         hi   = bundle.data['High']
L804         lo   = bundle.data['Low']
L805         vol  = bundle.data['Volume']
L806         bench= bundle.spx                     # ベンチマーク Series
L807
L808         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L809         g_universe = getattr(self_obj, "g_universe", None)
L810         if g_universe is None:
L811             try:
L812                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L813             except Exception:
L814                 g_universe = list(feature_df.index)
L815         if not g_universe:
L816             return feature_df
L817
L818         # 指標
L819         px = px.ffill(limit=2)
L820         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L821         ma50  = px[g_universe].rolling(50).mean()
L822         ma150 = px[g_universe].rolling(150).mean()
L823         ma200 = px[g_universe].rolling(200).mean()
L824         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L825         vol20 = vol[g_universe].rolling(20).mean()
L826         vol50 = vol[g_universe].rolling(50).mean()
L827
L828         # トレンドテンプレート合格
L829         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L830                             & (ma150 > ma200) & (ma200.diff() > 0)
L831
L832         # 汎用ピボット：直近65営業日の高値（当日除外）
L833         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L834
L835         # 相対力：年内高値更新
L836         bench_aligned = bench.reindex(px.index).ffill()
L837         rs = px[g_universe].div(bench_aligned, axis=0)
L838         rs_high = rs.rolling(252).max().shift(1)
L839
L840         # ブレイクアウト「発生日」：条件立ち上がり
L841         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L842                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L843         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L844
L845         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L846         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L847         volume_dryup = (vol20 / vol50) <= 1.0
L848         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] >
```