```text
ndex(px.index).ffill()
L653
L654         ma50  = px.rolling(50).mean()
L655         ma150 = px.rolling(150).mean()
L656         ma200 = px.rolling(200).mean()
L657
L658         tt = (px > ma150)
L659         tt &= (px > ma200)
L660         tt &= (ma150 > ma200)
L661         tt &= (ma200 - ma200.shift(21) > 0)
L662         tt &= (ma50  > ma150)
L663         tt &= (ma50  > ma200)
L664         tt &= (px    > ma50)
L665
L666         lo252 = px.rolling(252).min()
L667         hi252 = px.rolling(252).max()
L668         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L669         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L670
L671         r12  = px.divide(px.shift(252)).sub(1.0)
L672         br12 = spx.divide(spx.shift(252)).sub(1.0)
L673         r1   = px.divide(px.shift(22)).sub(1.0)
L674         br1  = spx.divide(spx.shift(22)).sub(1.0)
L675         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L676         tt &= (rs >= 0.10)
L677
L678         return tt.fillna(False).sum(axis=1).astype(int)
L679
L680     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L681     def aggregate_scores(self, ib: Any, cfg):
L682         if cfg is None:
L683             raise ValueError("cfg is required; pass factor.PipelineConfig")
L684         self._validate_ib_for_scorer(ib)
L685
L686         px, spx, tickers = ib.px, ib.spx, ib.tickers
L687         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L688
L689         df, missing_logs = pd.DataFrame(index=tickers), []
L690         for t in tickers:
L691             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L692             try:
L693                 volume_series_full = ib.data['Volume'][t]
L694             except Exception:
L695                 volume_series_full = None
L696
L697             grw_result = _calc_grw_flexible(t, d, s, volume_series_full)
L698             df.loc[t,'GRW_FLEX_SCORE'] = grw_result.get('score')
L699             df.loc[t,'GRW_FLEX_WEIGHT'] = grw_result.get('weight')
L700             df.loc[t,'GRW_FLEX_CORE'] = grw_result.get('core')
L701             df.loc[t,'GRW_FLEX_PRICE'] = grw_result.get('price_proxy')
L702             df.loc[t,'DEBUG_GRW_PATH'] = grw_result.get('path')
L703             df.loc[t,'DEBUG_GRW_PARTS'] = grw_result.get('parts')
L704
L705             # --- 基本特徴 ---
L706             df.loc[t,'TR']   = self.trend(s)
L707             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L708             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L709             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L710             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L711             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L712             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L713             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L714
L715             # --- 配当（欠損補完含む） ---
L716             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L717             if div is None or pd.isna(div):
L718                 try:
L719                     divs = yf.Ticker(t).dividends
L720                     if divs is not None and not divs.empty:
L721                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L722                         if last_close and last_close>0: div = float(div_1y/last_close)
L723                 except Exception: pass
L724             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L725
L726             # --- FCF/EV ---
L727             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L728             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L729
L730             # --- モメンタム・ボラ関連 ---
L731             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L732             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L733             n = int(min(len(r), len(rm)))
L734
L735             DOWNSIDE_DEV = np.nan
L736             if n>=60:
L737                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L738                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L739             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L740
L741             MDD_1Y = np.nan
L742             try:
L743                 w = s.iloc[-min(len(s),252):].dropna()
L744                 if len(w)>=30:
L745                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L746             except Exception: pass
L747             df.loc[t,'MDD_1Y'] = MDD_1Y
L748
L749             RESID_VOL = np.nan
L750             if n>=120:
L751                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L752                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L753                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L754                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L755             df.loc[t,'RESID_VOL'] = RESID_VOL
L756
L757             DOWN_OUTPERF = np.nan
L758             if n>=60:
L759                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L760                 if mask.sum()>=10:
L761                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L762                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L763             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L764
L765             # --- 長期移動平均/位置 ---
L766             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L767             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L768
L769             # --- 配当の詳細系 ---
L770             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L771             try:
L772                 divs = yf.Ticker(t).dividends.dropna()
L773                 if not divs.empty:
L774                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L775                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L776                     ann = divs.groupby(divs.index.year).sum()
L777                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L778                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L779                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L780                 so = d.get('sharesOutstanding',None)
L781                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L782                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L783             except Exception: pass
L784             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L785
L786             # --- 財務安定性 ---
L787             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L788
L789             # --- EPS 変動 ---
L790             EPS_VAR_8Q = np.nan
L791             try:
L792                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L793                 if qe is not None and not qe.empty and so:
L794                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L795                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L796             except Exception: pass
L797             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L798
L799             # --- サイズ/流動性 ---
L800             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L801             try:
L802                 if isinstance(volume_series_full, pd.Series):
L803                     vol_series = volume_series_full.reindex(s.index).dropna()
L804                     if len(vol_series) >= 5:
L805                         aligned_px = s.reindex(vol_series.index).dropna()
L806                         if len(aligned_px) == len(vol_series):
L807                             dv = (vol_series*aligned_px).rolling(60).mean()
L808                             if not dv.dropna().empty:
L809                                 adv60 = float(dv.dropna().iloc[-1])
L810             except Exception:
L811                 pass
L812             df.loc[t,'ADV60_USD'] = adv60
L813
L814             # --- Rule of 40 や周辺 ---
L815             total_rev_ttm = d.get('totalRevenue',np.nan)
L816             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L817             df.loc[t,'FCF_MGN'] = FCF_MGN
L818             rule40 = np.nan
L819             try:
L820                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L821             except Exception: pass
L822             df.loc[t,'RULE40'] = rule40
L823
L824             # --- トレンド補助 ---
L825             sma50  = s.rolling(50).mean()
L826             sma150 = s.rolling(150).mean()
L827             sma200 = s.rolling(200).mean()
L828             p = _safe_last(s)
L829
L830             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L831                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L832             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L833                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L834
L835             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L836             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L837
L838             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L839             if len(sma200.dropna()) >= 21:
L840                 cur200 = _safe_last(sma200)
L841                 old2001 = float(sma200.iloc[-21])
L842                 if old2001:
L843                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L844
L845             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L846             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L847             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L848             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L849             if len(sma200.dropna())>=105:
L850                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L851                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L852             # NEW: 200日線が連続で上向きの「日数」
L853             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L854             try:
L855                 s200 = sma200.dropna()
L856                 if len(s200) >= 2:
L857                     diff200 = s200.diff()
L858                     up = 0
L859                     for v in diff200.iloc[::-1]:
L860                         if pd.isna(v) or v <= 0:
L861                             break
L862                         up += 1
L863                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L864             except Exception:
L865                 pass
L866             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L867             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L868             if hi52 and hi52>0 and pd.notna(p):
L86
```