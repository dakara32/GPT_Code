```text
)
L712         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L713         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L714         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L715
L716     # ----（Scorer専用）テクニカル・指標系 ----
L717     @staticmethod
L718     def trend(s: pd.Series):
L719         if len(s)<200: return np.nan
L720         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L721         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L722         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L723         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L724         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L725         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L726         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L727         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L728         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L729         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L730         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L731         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L732
L733     @staticmethod
L734     def rs(s, b):
L735         n, nb = len(s), len(b)
L736         if n<60 or nb<60: return np.nan
L737         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L738         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L739         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L740
L741     @staticmethod
L742     def tr_str(s):
L743         if s is None:
L744             return np.nan
L745         s = s.ffill(limit=2).dropna()
L746         if len(s) < 50:
L747             return np.nan
L748         ma50 = s.rolling(50, min_periods=50).mean()
L749         last_ma = ma50.iloc[-1]
L750         last_px = s.iloc[-1]
L751         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L752
L753     @staticmethod
L754     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L755         r = (s/b).dropna()
L756         if len(r) < win: return np.nan
L757         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L758         try: return float(np.polyfit(x, y, 1)[0])
L759         except Exception: return np.nan
L760
L761     @staticmethod
L762     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L763         ev = info_t.get('enterpriseValue', np.nan)
L764         if pd.notna(ev) and ev>0: return float(ev)
L765         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L766         try:
L767             bs = tk.quarterly_balance_sheet
L768             if bs is not None and not bs.empty:
L769                 c = bs.columns[0]
L770                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L771                     if k in bs.index: debt = float(bs.loc[k,c]); break
L772                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L773                     if k in bs.index: cash = float(bs.loc[k,c]); break
L774         except Exception: pass
L775         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L776         return np.nan
L777
L778     @staticmethod
L779     def dividend_status(ticker: str) -> str:
L780         t = yf.Ticker(ticker)
L781         try:
L782             if not t.dividends.empty: return "has"
L783         except Exception: return "unknown"
L784         try:
L785             a = t.actions
L786             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L787         except Exception: pass
L788         try:
L789             fi = t.fast_info
L790             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L791         except Exception: pass
L792         return "unknown"
L793
L794     @staticmethod
L795     def div_streak(t):
L796         try:
L797             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L798             years, streak = sorted(ann.index), 0
L799             for i in range(len(years)-1,0,-1):
L800                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L801                 else: break
L802             return streak
L803         except Exception: return 0
L804
L805     @staticmethod
L806     def fetch_finnhub_metrics(symbol):
L807         api_key = os.environ.get("FINNHUB_API_KEY")
L808         if not api_key: return {}
L809         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L810         try:
L811             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L812             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L813         except Exception: return {}
L814
L815     @staticmethod
L816     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L817         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L818         n = min(len(r), len(m), lookback)
L819         if n<60: return np.nan
L820         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L821         return np.nan if var==0 else cov/var
L822
L823     @staticmethod
L824     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L825                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L826         """
L827         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L828         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L829         """
L830         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L831         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L832         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L833         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L834         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L835
L836     @staticmethod
L837     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L838         """
L839         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L840         戻り値は降順ソート済み。
L841         """
L842         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L843         cnt, pen = {}, {}
L844         for t in order:
L845             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L846         return (s - pd.Series(pen)).sort_values(ascending=False)
L847
L848     @staticmethod
L849     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L850         """
L851         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L852         """
L853         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L854         if not hard:
L855             return list(eff.head(N).index)
L856         pick, used = [], {}
L857         for t in eff.index:
L858             s = sectors.get(t, "U")
L859             if used.get(s,0) < hard:
L860                 pick.append(t); used[s] = used.get(s,0) + 1
L861             if len(pick) == N: break
L862         return pick
L863
L864     @staticmethod
L865     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L866         """
L867         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L868         - px: 列=ticker（ベンチは含めない）
L869         - spx: ベンチマーク Series（px.index に整列）
L870         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L871         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L872         """
L873         import numpy as np, pandas as pd
L874         if px is None or px.empty:
L875             return pd.Series(dtype=int)
L876         px = px.dropna(how="all", axis=1)
L877         if win_days and win_days > 0:
L878             px = px.tail(win_days)
L879         if px.empty:
L880             return pd.Series(dtype=int)
L881         spx = spx.reindex(px.index).ffill()
L882
L883         ma50  = px.rolling(50).mean()
L884         ma150 = px.rolling(150).mean()
L885         ma200 = px.rolling(200).mean()
L886
L887         tt = (px > ma150)
L888         tt &= (px > ma200)
L889         tt &= (ma150 > ma200)
L890         tt &= (ma200 - ma200.shift(21) > 0)
L891         tt &= (ma50  > ma150)
L892         tt &= (ma50  > ma200)
L893         tt &= (px    > ma50)
L894
L895         lo252 = px.rolling(252).min()
L896         hi252 = px.rolling(252).max()
L897         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L898         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L899
L900         r12  = px.divide(px.shift(252)).sub(1.0)
L901         br12 = spx.divide(spx.shift(252)).sub(1.0)
L902         r1   = px.divide(px.shift(22)).sub(1.0)
L903         br1  = spx.divide(spx.shift(22)).sub(1.0)
L904         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L905         tt &= (rs >= 0.10)
L906
L907         return tt.fillna(False).sum(axis=1).astype(int)
L908
L909     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L910     def aggregate_scores(self, ib: Any, cfg):
L911         if cfg is None:
L912             raise ValueError("cfg is required; pass factor.PipelineConfig")
L913         self._validate_ib_for_scorer(ib)
L914
L915         px, spx, tickers = ib.px, ib.spx, ib.tickers
L916         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L917
L918         df, missing_logs = pd.DataFrame(index=tickers), []
L919         for t in tickers:
L920             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L921             try:
L922                 volume_series_full = ib.data['Volume'][t]
L923             except Exception:
L924                 volume_series_full = None
L925
L926             grw_result = _calc_grw_flexible(t, d, s, volume_series_full)
L927             _grw_record_to_df(t, d, df)
L928             df.loc[t,'GRW_FLEX_SCORE'] = grw_result.get('score')
L929             df.loc[t,'GRW_FLEX_WEIGHT'] = grw_result.get('weight')
L930             df.loc[t,'GRW_FLEX_CORE'] = grw_result.get('core')
L931             df.loc[t,'GRW_FLEX_PRICE'] = grw_result.get('price_proxy')
L932             df.loc[t,'DEBUG_GRW_PATH'] = grw_result.get('path')
L933             df.loc[t,'DEBUG_GRW_PARTS'] = grw_result.get('parts')
L934
L935             # --- 基本特徴 ---
L936             df.loc[t,'TR']   = self.trend(s)
L937             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L938             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L939             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L940             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L941             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L942 
```