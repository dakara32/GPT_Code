```text
None
L419
L420             # --- 基本特徴 ---
L421             df.loc[t,'TR']   = self.trend(s)
L422             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L423             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L424             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L425             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L426             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L427             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L428             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L429
L430             # --- 配当（欠損補完含む） ---
L431             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L432             if div is None or pd.isna(div):
L433                 try:
L434                     divs = yf.Ticker(t).dividends
L435                     if divs is not None and not divs.empty:
L436                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L437                         if last_close and last_close>0: div = float(div_1y/last_close)
L438                 except Exception: pass
L439             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L440
L441             # --- FCF/EV ---
L442             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L443             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L444
L445             # --- モメンタム・ボラ関連 ---
L446             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L447             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L448             n = int(min(len(r), len(rm)))
L449
L450             DOWNSIDE_DEV = np.nan
L451             if n>=60:
L452                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L453                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L454             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L455
L456             MDD_1Y = np.nan
L457             try:
L458                 w = s.iloc[-min(len(s),252):].dropna()
L459                 if len(w)>=30:
L460                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L461             except Exception: pass
L462             df.loc[t,'MDD_1Y'] = MDD_1Y
L463
L464             RESID_VOL = np.nan
L465             if n>=120:
L466                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L467                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L468                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L469                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L470             df.loc[t,'RESID_VOL'] = RESID_VOL
L471
L472             DOWN_OUTPERF = np.nan
L473             if n>=60:
L474                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L475                 if mask.sum()>=10:
L476                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L477                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L478             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L479
L480             # --- 長期移動平均/位置 ---
L481             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L482             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L483
L484             # --- 配当の詳細系 ---
L485             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L486             try:
L487                 divs = yf.Ticker(t).dividends.dropna()
L488                 if not divs.empty:
L489                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L490                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L491                     ann = divs.groupby(divs.index.year).sum()
L492                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L493                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L494                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L495                 so = d.get('sharesOutstanding',None)
L496                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L497                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L498             except Exception: pass
L499             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L500
L501             # --- 財務安定性 ---
L502             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L503
L504             # --- EPS 変動 ---
L505             EPS_VAR_8Q = np.nan
L506             try:
L507                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L508                 if qe is not None and not qe.empty and so:
L509                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L510                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L511             except Exception: pass
L512             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L513
L514             # --- サイズ/流動性 ---
L515             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L516             try:
L517                 if isinstance(volume_series_full, pd.Series):
L518                     vol_series = volume_series_full.reindex(s.index).dropna()
L519                     if len(vol_series) >= 5:
L520                         aligned_px = s.reindex(vol_series.index).dropna()
L521                         if len(aligned_px) == len(vol_series):
L522                             dv = (vol_series*aligned_px).rolling(60).mean()
L523                             if not dv.dropna().empty:
L524                                 adv60 = float(dv.dropna().iloc[-1])
L525             except Exception:
L526                 pass
L527             df.loc[t,'ADV60_USD'] = adv60
L528
L529             # --- Rule of 40 や周辺 ---
L530             total_rev_ttm = d.get('totalRevenue',np.nan)
L531             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L532             df.loc[t,'FCF_MGN'] = FCF_MGN
L533             rule40 = np.nan
L534             try:
L535                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L536             except Exception: pass
L537             df.loc[t,'RULE40'] = rule40
L538
L539             # --- トレンド補助 ---
L540             sma50  = s.rolling(50).mean()
L541             sma150 = s.rolling(150).mean()
L542             sma200 = s.rolling(200).mean()
L543             p = _safe_last(s)
L544
L545             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L546                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L547             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L548                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L549
L550             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L551             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L552
L553             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L554             if len(sma200.dropna()) >= 21:
L555                 cur200 = _safe_last(sma200)
L556                 old2001 = float(sma200.iloc[-21])
L557                 if old2001:
L558                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L559
L560             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L561             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L562             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L563             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L564             if len(sma200.dropna())>=105:
L565                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L566                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L567             # NEW: 200日線が連続で上向きの「日数」
L568             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L569             try:
L570                 s200 = sma200.dropna()
L571                 if len(s200) >= 2:
L572                     diff200 = s200.diff()
L573                     up = 0
L574                     for v in diff200.iloc[::-1]:
L575                         if pd.isna(v) or v <= 0:
L576                             break
L577                         up += 1
L578                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L579             except Exception:
L580                 pass
L581             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L582             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L583             if hi52 and hi52>0 and pd.notna(p):
L584                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L585             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L586             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L587
L588             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L589
L590             # --- 欠損メモ ---
L591             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L592             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L593             if need_finnhub:
L594                 fin_data = self.fetch_finnhub_metrics(t)
L595                 for col in need_finnhub:
L596                     val = fin_data.get(col)
L597                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L598             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L599                 if pd.isna(df.loc[t,col]):
L600                     if col=='DIV':
L601                         status = self.dividend_status(t)
L602                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L603                     else:
L604                         missing_logs.append({'Ticker':t,'Column':col})
L605
L606         def _pick_series(entry: dict, keys: list[str]):
L607             for k in keys:
L608                 val = entry.get(k) if isinstance(entry, dict) else None
L609                 if val is None:
L610                     continue
L611                 try:
L612                     if hasattr(val, "empty") and getattr(val, "empty"):
L613                         continue
L614                 except Exception:
L615                     pass
L616                 if isinstance(val, (list, tuple)) and len(val) == 0:
L617                     continue
L618                 return val
L619             return None
L620
L621         def _has_sec_series(val) -> bool:
L622             try:
L623                 if isinstance(val, pd.Series):
L624                     return not val.dropna().empty
L625                 if isinstance(val, (list, tuple)):
L626                     return any(pd.notna(v) for v in val)
L627                 return bool(val)
L628             except Exception:
L629                 return False
L630
L631         def _series_len(val) -> int:
L632             try:
L633                 if isinstance(val
```