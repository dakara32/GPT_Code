```text
={row['GROWTH_F']:.3f}"]
L880                     if pd.notna(row.get('GROWTH_F_RAW')):
L881                         parts.append(f"GROWTH_F_RAW={row['GROWTH_F_RAW']:.3f}")
L882                     print(f"Ticker: {t} | " + " ".join(parts))
L883                 print()
L884             except Exception as exc:
L885                 print(f"[ERR] GRW debug dump failed: {exc}")
L886
L887         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L888             + 0.15*df_z['TR_str']
L889             + 0.15*df_z['RS_SLOPE_6W']
L890             + 0.15*df_z['RS_SLOPE_13W']
L891             + 0.10*df_z['MA200_SLOPE_5M']
L892             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L893         df_z['VOL'] = robust_z(df['BETA'])
L894         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L895         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L896
L897         _dump_dfz(df_z=df_z, debug_mode=getattr(cfg, "debug_mode", False))
L898
L899         # === begin: BIO LOSS PENALTY =====================================
L900         try:
L901             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L902         except Exception:
L903             penalty_z = 0.8
L904
L905         def _is_bio_like(t: str) -> bool:
L906             inf = info.get(t, {}) if isinstance(info, dict) else {}
L907             sec = str(inf.get("sector", "")).lower()
L908             ind = str(inf.get("industry", "")).lower()
L909             if "health" not in sec:
L910                 return False
L911             keys = ("biotech", "biopharma", "pharma")
L912             return any(k in ind for k in keys)
L913
L914         tickers_s = pd.Index(df_z.index)
L915         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L916         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L917         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L918
L919         if bool(mask_bio_loss.any()) and penalty_z > 0:
L920             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L921             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L922         # === end: BIO LOSS PENALTY =======================================
L923
L924         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L925         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L926
L927         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L928         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L929         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L930         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L931
L932         # --- 重みは cfg を優先（外部があればそれを使用） ---
L933         # ① 全銘柄で G/D スコアを算出（unmasked）
L934         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L935
L936         d_comp = pd.concat({
L937             'QAL': df_z['D_QAL'],
L938             'YLD': df_z['D_YLD'],
L939             'VOL': df_z['D_VOL_RAW'],
L940             'TRD': df_z['D_TRD']
L941         }, axis=1)
L942         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L943         globals()['D_WEIGHTS_EFF'] = dw.copy()
L944         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L945
L946         # ② テンプレ判定（既存ロジックそのまま）
L947         mask = df['trend_template']
L948         if not bool(mask.any()):
L949             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L950                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L951                 (df.get('RS', np.nan) >= 0.08) &
L952                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L953                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L954                 (df.get('MA150_OVER_200', np.nan) > 0) &
L955                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L956                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L957             df['trend_template'] = mask
L958
L959         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L960         g_score = g_score_all.loc[mask]
L961         Scorer.g_score = g_score
L962         df_z['GSC'] = g_score_all
L963         df_z['DSC'] = d_score_all
L964
L965         try:
L966             current = (pd.read_csv("current_tickers.csv")
L967                   .iloc[:, 0]
L968                   .str.upper()
L969                   .tolist())
L970         except FileNotFoundError:
L971             warnings.warn("current_tickers.csv not found — bonus skipped")
L972             current = []
L973
L974         mask_bonus = g_score.index.isin(current)
L975         if mask_bonus.any():
L976             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L977             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L978             # 2) g 側の σ を取り、NaN なら 0 に丸める
L979             sigma_g = g_score.std()
L980             if pd.isna(sigma_g):
L981                 sigma_g = 0.0
L982             bonus_g = round(k * sigma_g, 3)
L983             g_score.loc[mask_bonus] += bonus_g
L984             Scorer.g_score = g_score
L985             # 3) D 側も同様に σ の NaN をケア
L986             sigma_d = d_score_all.std()
L987             if pd.isna(sigma_d):
L988                 sigma_d = 0.0
L989             bonus_d = round(k * sigma_d, 3)
L990             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L991
L992         try:
L993             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L994         except Exception:
L995             pass
L996
L997         df_full = df.copy()
L998         df_full_z = df_z.copy()
L999
L1000         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1001         return FeatureBundle(df=df,
L1002             df_z=df_z,
L1003             g_score=g_score,
L1004             d_score_all=d_score_all,
L1005             missing_logs=pd.DataFrame(missing_logs),
L1006             df_full=df_full,
L1007             df_full_z=df_full_z,
L1008             scaler=None)
L1009
L1010 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1011     """
L1012     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1013     次の列を feature_df に追加する（index=ticker）。
L1014       - G_BREAKOUT_recent_5d : bool
L1015       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1016       - G_PULLBACK_recent_5d : bool
L1017       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1018       - G_PIVOT_price        : float
L1019     失敗しても例外は握り潰し、既存処理を阻害しない。
L1020     """
L1021     try:
L1022         px   = bundle.px                      # 終値 DataFrame
L1023         hi   = bundle.data['High']
L1024         lo   = bundle.data['Low']
L1025         vol  = bundle.data['Volume']
L1026         bench= bundle.spx                     # ベンチマーク Series
L1027
L1028         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1029         g_universe = getattr(self_obj, "g_universe", None)
L1030         if g_universe is None:
L1031             try:
L1032                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1033             except Exception:
L1034                 g_universe = list(feature_df.index)
L1035         if not g_universe:
L1036             return feature_df
L1037
L1038         # 指標
L1039         px = px.ffill(limit=2)
L1040         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1041         ma50  = px[g_universe].rolling(50).mean()
L1042         ma150 = px[g_universe].rolling(150).mean()
L1043         ma200 = px[g_universe].rolling(200).mean()
L1044         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1045         vol20 = vol[g_universe].rolling(20).mean()
L1046         vol50 = vol[g_universe].rolling(50).mean()
L1047
L1048         # トレンドテンプレート合格
L1049         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1050                             & (ma150 > ma200) & (ma200.diff() > 0)
L1051
L1052         # 汎用ピボット：直近65営業日の高値（当日除外）
L1053         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1054
L1055         # 相対力：年内高値更新
L1056         bench_aligned = bench.reindex(px.index).ffill()
L1057         rs = px[g_universe].div(bench_aligned, axis=0)
L1058         rs_high = rs.rolling(252).max().shift(1)
L1059
L1060         # ブレイクアウト「発生日」：条件立ち上がり
L1061         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1062                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1063         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1064
L1065         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1066         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1067         volume_dryup = (vol20 / vol50) <= 1.0
L1068         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1069         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1070         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1071
L1072         # 直近N営業日内の発火 / 最終発生日
L1073         rows = []
L1074         for t in g_universe:
L1075             def _recent_and_date(s, win):
L1076                 sw = s[t].iloc[-win:]
L1077                 if sw.any():
L1078                     d = sw[sw].index[-1]
L1079                     return True, d.strftime("%Y-%m-%d")
L1080                 return False, ""
L1081             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1082             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1083             rows.append((t, {
L1084                 "G_BREAKOUT_recent_5d": br_recent,
L1085                 "G_BREAKOUT_last_date": br_date,
L1086                 "G_PULLBACK_recent_5d": pb_recent,
L1087                 "G_PULLBACK_last_date": pb_date,
L1088                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1089             }))
L1090         flags = pd.DataFrame({k: v for k, v in rows}).T
L1091
L1092         # 列を作成・上書き
L1093         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1094         for c in cols:
L1095             if c not in feature_df.columns:
L1096                 feature_df[c] = np.nan
L1097         feature_df.loc[flags.index, flags.columns] = flags
L1098
L1099     except Exception:
L1100         pass
L1101     return feature_df
L1102
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare res
```