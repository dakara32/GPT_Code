```text
 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L668
L669     @staticmethod
L670     def rs(s, b):
L671         n, nb = len(s), len(b)
L672         if n<60 or nb<60: return np.nan
L673         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L674         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L675         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L676
L677     @staticmethod
L678     def tr_str(s):
L679         if s is None:
L680             return np.nan
L681         s = s.ffill(limit=2).dropna()
L682         if len(s) < 50:
L683             return np.nan
L684         ma50 = s.rolling(50, min_periods=50).mean()
L685         last_ma = ma50.iloc[-1]
L686         last_px = s.iloc[-1]
L687         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L688
L689     @staticmethod
L690     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L691         r = (s/b).dropna()
L692         if len(r) < win: return np.nan
L693         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L694         try: return float(np.polyfit(x, y, 1)[0])
L695         except Exception: return np.nan
L696
L697     @staticmethod
L698     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L699         ev = info_t.get('enterpriseValue', np.nan)
L700         if pd.notna(ev) and ev>0: return float(ev)
L701         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L702         try:
L703             bs = tk.quarterly_balance_sheet
L704             if bs is not None and not bs.empty:
L705                 c = bs.columns[0]
L706                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L707                     if k in bs.index: debt = float(bs.loc[k,c]); break
L708                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L709                     if k in bs.index: cash = float(bs.loc[k,c]); break
L710         except Exception: pass
L711         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L712         return np.nan
L713
L714     @staticmethod
L715     def dividend_status(ticker: str) -> str:
L716         t = yf.Ticker(ticker)
L717         try:
L718             if not t.dividends.empty: return "has"
L719         except Exception: return "unknown"
L720         try:
L721             a = t.actions
L722             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L723         except Exception: pass
L724         try:
L725             fi = t.fast_info
L726             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L727         except Exception: pass
L728         return "unknown"
L729
L730     @staticmethod
L731     def div_streak(t):
L732         try:
L733             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L734             years, streak = sorted(ann.index), 0
L735             for i in range(len(years)-1,0,-1):
L736                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L737                 else: break
L738             return streak
L739         except Exception: return 0
L740
L741     @staticmethod
L742     def fetch_finnhub_metrics(symbol):
L743         api_key = os.environ.get("FINNHUB_API_KEY")
L744         if not api_key: return {}
L745         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L746         try:
L747             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L748             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L749         except Exception: return {}
L750
L751     @staticmethod
L752     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L753         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L754         n = min(len(r), len(m), lookback)
L755         if n<60: return np.nan
L756         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L757         return np.nan if var==0 else cov/var
L758
L759     @staticmethod
L760     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L761                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L762         """
L763         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L764         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L765         """
L766         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L767         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L768         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L769         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L770         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L771
L772     @staticmethod
L773     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L774         """
L775         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L776         戻り値は降順ソート済み。
L777         """
L778         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L779         cnt, pen = {}, {}
L780         for t in order:
L781             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L782         return (s - pd.Series(pen)).sort_values(ascending=False)
L783
L784     @staticmethod
L785     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L786         """
L787         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L788         """
L789         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L790         if not hard:
L791             return list(eff.head(N).index)
L792         pick, used = [], {}
L793         for t in eff.index:
L794             s = sectors.get(t, "U")
L795             if used.get(s,0) < hard:
L796                 pick.append(t); used[s] = used.get(s,0) + 1
L797             if len(pick) == N: break
L798         return pick
L799
L800     @staticmethod
L801     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L802         """
L803         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L804         - px: 列=ticker（ベンチは含めない）
L805         - spx: ベンチマーク Series（px.index に整列）
L806         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L807         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L808         """
L809         import numpy as np, pandas as pd
L810         if px is None or px.empty:
L811             return pd.Series(dtype=int)
L812         px = px.dropna(how="all", axis=1)
L813         if win_days and win_days > 0:
L814             px = px.tail(win_days)
L815         if px.empty:
L816             return pd.Series(dtype=int)
L817         spx = spx.reindex(px.index).ffill()
L818
L819         ma50  = px.rolling(50).mean()
L820         ma150 = px.rolling(150).mean()
L821         ma200 = px.rolling(200).mean()
L822
L823         tt = (px > ma150)
L824         tt &= (px > ma200)
L825         tt &= (ma150 > ma200)
L826         tt &= (ma200 - ma200.shift(21) > 0)
L827         tt &= (ma50  > ma150)
L828         tt &= (ma50  > ma200)
L829         tt &= (px    > ma50)
L830
L831         lo252 = px.rolling(252).min()
L832         hi252 = px.rolling(252).max()
L833         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L834         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L835
L836         r12  = px.divide(px.shift(252)).sub(1.0)
L837         br12 = spx.divide(spx.shift(252)).sub(1.0)
L838         r1   = px.divide(px.shift(22)).sub(1.0)
L839         br1  = spx.divide(spx.shift(22)).sub(1.0)
L840         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L841         tt &= (rs >= 0.10)
L842
L843         return tt.fillna(False).sum(axis=1).astype(int)
L844
L845     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L846     def aggregate_scores(self, ib: Any, cfg):
L847         if cfg is None:
L848             raise ValueError("cfg is required; pass factor.PipelineConfig")
L849         self._validate_ib_for_scorer(ib)
L850
L851         px, spx, tickers = ib.px, ib.spx, ib.tickers
L852         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L853
L854         df, missing_logs = pd.DataFrame(index=tickers), []
L855         for t in tickers:
L856             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L857             try:
L858                 volume_series_full = ib.data['Volume'][t]
L859             except Exception:
L860                 volume_series_full = None
L861
L862             grw_result = _calc_grw_flexible(t, d, s, volume_series_full)
L863             _grw_record_to_df(t, d, df)
L864             df.loc[t,'GRW_FLEX_SCORE'] = grw_result.get('score')
L865             df.loc[t,'GRW_FLEX_WEIGHT'] = grw_result.get('weight')
L866             df.loc[t,'GRW_FLEX_CORE'] = grw_result.get('core')
L867             df.loc[t,'GRW_FLEX_PRICE'] = grw_result.get('price_proxy')
L868             df.loc[t,'DEBUG_GRW_PATH'] = grw_result.get('path')
L869             df.loc[t,'DEBUG_GRW_PARTS'] = grw_result.get('parts')
L870
L871             # --- 基本特徴 ---
L872             df.loc[t,'TR']   = self.trend(s)
L873             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L874             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L875             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L876             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L877             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L878             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L879             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L880
L881             # --- 配当（欠損補完含む） ---
L882             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L883             if div is None or pd.isna(div):
L884                 try:
L885                     divs = yf.Ticker(t).dividends
L886                     if divs is not None and not divs.empty:
L887                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L888                         if last_close and last_close>0: div = float(div_1y/last_close)
L889                 except Exception: pass
L890             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L891
L892             # --- FCF/EV ---
L893             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L894             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L895
L896             # --- モメンタム・ボラ関連 ---
L897             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L898             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L899             n = int(min(len(r), len(rm)))
L900
L901             DOWNSIDE_DEV = np.nan
L902             if n>=60:
L903                 r6 = r.iloc[-min(len(r),126):]; neg = r6
```