```text
L242         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L243
L244     @staticmethod
L245     def tr_str(s):
L246         if s is None:
L247             return np.nan
L248         s = s.ffill(limit=2).dropna()
L249         if len(s) < 50:
L250             return np.nan
L251         ma50 = s.rolling(50, min_periods=50).mean()
L252         last_ma = ma50.iloc[-1]
L253         last_px = s.iloc[-1]
L254         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L255
L256     @staticmethod
L257     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L258         r = (s/b).dropna()
L259         if len(r) < win: return np.nan
L260         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L261         try: return float(np.polyfit(x, y, 1)[0])
L262         except Exception: return np.nan
L263
L264     @staticmethod
L265     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L266         ev = info_t.get('enterpriseValue', np.nan)
L267         if pd.notna(ev) and ev>0: return float(ev)
L268         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L269         try:
L270             bs = tk.quarterly_balance_sheet
L271             if bs is not None and not bs.empty:
L272                 c = bs.columns[0]
L273                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L274                     if k in bs.index: debt = float(bs.loc[k,c]); break
L275                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L276                     if k in bs.index: cash = float(bs.loc[k,c]); break
L277         except Exception: pass
L278         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L279         return np.nan
L280
L281     @staticmethod
L282     def div_streak(t):
L283         try:
L284             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L285             years, streak = sorted(ann.index), 0
L286             for i in range(len(years)-1,0,-1):
L287                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L288                 else: break
L289             return streak
L290         except Exception: return 0
L291
L292     @staticmethod
L293     def fetch_finnhub_metrics(symbol):
L294         api_key = os.environ.get("FINNHUB_API_KEY")
L295         if not api_key: return {}
L296         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L297         try:
L298             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L299             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L300         except Exception: return {}
L301
L302     @staticmethod
L303     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L304         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L305         n = min(len(r), len(m), lookback)
L306         if n<60: return np.nan
L307         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L308         return np.nan if var==0 else cov/var
L309
L310     @staticmethod
L311     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L312                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L313         """
L314         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L315         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L316         """
L317         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L318         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L319         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L320         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L321         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L322
L323     @staticmethod
L324     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L325         """
L326         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L327         戻り値は降順ソート済み。
L328         """
L329         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L330         cnt, pen = {}, {}
L331         for t in order:
L332             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L333         return (s - pd.Series(pen)).sort_values(ascending=False)
L334
L335     @staticmethod
L336     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L337         """
L338         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L339         """
L340         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L341         eff = eff.dropna()
L342         if not hard:
L343             return list(eff.head(N).index)
L344         pick, used = [], {}
L345         for t in eff.index:
L346             s = sectors.get(t, "U")
L347             if used.get(s,0) < hard:
L348                 pick.append(t); used[s] = used.get(s,0) + 1
L349             if len(pick) == N: break
L350         return pick
L351
L352     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L353     def aggregate_scores(self, ib: Any, cfg):
L354         if cfg is None:
L355             raise ValueError("cfg is required; pass factor.PipelineConfig")
L356         self._validate_ib_for_scorer(ib)
L357
L358         px, spx, tickers = ib.px, ib.spx, ib.tickers
L359         try:
L360             vol = ib.data['Volume']
L361         except Exception:
L362             vol = getattr(ib, 'vol', None)
L363         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L364
L365         df = pd.DataFrame(index=tickers)
L366         df['EPS_SERIES'] = pd.Series([None] * len(df), index=df.index, dtype=object)
L367         debug_mode = bool(getattr(cfg, "debug_mode", False))
L368         eps_cols = set(getattr(eps_df, "columns", []))
L369         for t in tickers:
L370             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L371             try:
L372                 volume_series_full = ib.data['Volume'][t]
L373             except Exception:
L374                 volume_series_full = None
L375
L376             # --- 基本特徴 ---
L377             df.loc[t,'TR']   = self.trend(s)
L378
L379             def _eps_value(col: str) -> float:
L380                 if col not in eps_cols:
L381                     return np.nan
L382                 try:
L383                     return _scalar(eps_df[col].get(t, np.nan))
L384                 except Exception:
L385                     return np.nan
L386
L387             df.loc[t,'EPS']  = _eps_value('EPS_TTM')
L388             df.loc[t,'EPS_Q'] = _eps_value('EPS_Q_LastQ')
L389             df.loc[t,'REV_TTM'] = _eps_value('REV_TTM')
L390             df.loc[t,'REV_Q']   = _eps_value('REV_Q_LastQ')
L391             df.loc[t,'EPS_TTM_PREV'] = _eps_value('EPS_TTM_PREV')
L392             df.loc[t,'REV_TTM_PREV'] = _eps_value('REV_TTM_PREV')
L393             df.loc[t,'EPS_Q_PREV'] = _eps_value('EPS_Q_Prev')
L394             df.loc[t,'REV_Q_PREV'] = _eps_value('REV_Q_Prev')
L395             df.loc[t,'EPS_A_LATEST'] = _eps_value('EPS_A_LATEST')
L396             df.loc[t,'EPS_A_PREV'] = _eps_value('EPS_A_PREV')
L397             df.loc[t,'REV_A_LATEST'] = _eps_value('REV_A_LATEST')
L398             df.loc[t,'REV_A_PREV'] = _eps_value('REV_A_PREV')
L399             df.loc[t,'EPS_A_CAGR3'] = _eps_value('EPS_A_CAGR3')
L400             df.loc[t,'REV_A_CAGR3'] = _eps_value('REV_A_CAGR3')
L401             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L402             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L403             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L404
L405             # --- 配当（欠損補完含む） ---
L406             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L407             if div is None or pd.isna(div):
L408                 try:
L409                     divs = yf.Ticker(t).dividends
L410                     if divs is not None and not divs.empty:
L411                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L412                         if last_close and last_close>0: div = float(div_1y/last_close)
L413                 except Exception: pass
L414             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L415
L416             # --- FCF/EV ---
L417             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L418             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L419
L420             # --- モメンタム・ボラ関連 ---
L421             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L422             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L423             n = int(min(len(r), len(rm)))
L424
L425             DOWNSIDE_DEV = np.nan
L426             if n>=60:
L427                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L428                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L429             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L430
L431             MDD_1Y = np.nan
L432             try:
L433                 w = s.iloc[-min(len(s),252):].dropna()
L434                 if len(w)>=30:
L435                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L436             except Exception: pass
L437             df.loc[t,'MDD_1Y'] = MDD_1Y
L438
L439             RESID_VOL = np.nan
L440             if n>=120:
L441                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L442                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L443                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L444                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L445             df.loc[t,'RESID_VOL'] = RESID_VOL
L446
L447             DOWN_OUTPERF = np.nan
L448             if n>=60:
L449                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L450                 if mask.sum()>=10:
L451                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L452                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L453             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L454
L455             # --- 長期移動平均/位置 ---
L456             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L457             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L458
L459             # --- 配当の詳細系 ---
L460             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L461             try:
L462                 divs = yf.Ticker(t).dividends.dropna()
L463                 if not divs.empty:
L464                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L465                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L466                     ann = divs.groupby(divs.index.year).sum()
L467                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L468                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L469                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L470      
```