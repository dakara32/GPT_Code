```text
 pd.concat({
L717             'QAL': df_z['D_QAL'],
L718             'YLD': df_z['D_YLD'],
L719             'VOL': df_z['D_VOL_RAW'],
L720             'TRD': df_z['D_TRD']
L721         }, axis=1)
L722         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L723         globals()['D_WEIGHTS_EFF'] = dw.copy()
L724         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L725
L726         # ② テンプレ判定（既存ロジックそのまま）
L727         mask = df['trend_template']
L728         if not bool(mask.any()):
L729             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L730                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L731                 (df.get('RS', np.nan) >= 0.08) &
L732                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L733                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L734                 (df.get('MA150_OVER_200', np.nan) > 0) &
L735                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L736                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L737             df['trend_template'] = mask
L738
L739         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L740         g_score = g_score_all.loc[mask]
L741         Scorer.g_score = g_score
L742         df_z['GSC'] = g_score_all
L743         df_z['DSC'] = d_score_all
L744
L745         try:
L746             current = (pd.read_csv("current_tickers.csv")
L747                   .iloc[:, 0]
L748                   .str.upper()
L749                   .tolist())
L750         except FileNotFoundError:
L751             warnings.warn("current_tickers.csv not found — bonus skipped")
L752             current = []
L753
L754         mask_bonus = g_score.index.isin(current)
L755         if mask_bonus.any():
L756             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L757             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L758             # 2) g 側の σ を取り、NaN なら 0 に丸める
L759             sigma_g = g_score.std()
L760             if pd.isna(sigma_g):
L761                 sigma_g = 0.0
L762             bonus_g = round(k * sigma_g, 3)
L763             g_score.loc[mask_bonus] += bonus_g
L764             Scorer.g_score = g_score
L765             # 3) D 側も同様に σ の NaN をケア
L766             sigma_d = d_score_all.std()
L767             if pd.isna(sigma_d):
L768                 sigma_d = 0.0
L769             bonus_d = round(k * sigma_d, 3)
L770             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L771
L772         try:
L773             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L774         except Exception:
L775             pass
L776
L777         df_full = df.copy()
L778         df_full_z = df_z.copy()
L779
L780         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L781         return FeatureBundle(df=df,
L782             df_z=df_z,
L783             g_score=g_score,
L784             d_score_all=d_score_all,
L785             missing_logs=pd.DataFrame(missing_logs),
L786             df_full=df_full,
L787             df_full_z=df_full_z,
L788             scaler=None)
L789
L790 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L791     """
L792     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L793     次の列を feature_df に追加する（index=ticker）。
L794       - G_BREAKOUT_recent_5d : bool
L795       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L796       - G_PULLBACK_recent_5d : bool
L797       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L798       - G_PIVOT_price        : float
L799     失敗しても例外は握り潰し、既存処理を阻害しない。
L800     """
L801     try:
L802         px   = bundle.px                      # 終値 DataFrame
L803         hi   = bundle.data['High']
L804         lo   = bundle.data['Low']
L805         vol  = bundle.data['Volume']
L806         bench= bundle.spx                     # ベンチマーク Series
L807
L808         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L809         g_universe = getattr(self_obj, "g_universe", None)
L810         if g_universe is None:
L811             try:
L812                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L813             except Exception:
L814                 g_universe = list(feature_df.index)
L815         if not g_universe:
L816             return feature_df
L817
L818         # 指標
L819         px = px.ffill(limit=2)
L820         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L821         ma50  = px[g_universe].rolling(50).mean()
L822         ma150 = px[g_universe].rolling(150).mean()
L823         ma200 = px[g_universe].rolling(200).mean()
L824         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L825         vol20 = vol[g_universe].rolling(20).mean()
L826         vol50 = vol[g_universe].rolling(50).mean()
L827
L828         # トレンドテンプレート合格
L829         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L830                             & (ma150 > ma200) & (ma200.diff() > 0)
L831
L832         # 汎用ピボット：直近65営業日の高値（当日除外）
L833         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L834
L835         # 相対力：年内高値更新
L836         bench_aligned = bench.reindex(px.index).ffill()
L837         rs = px[g_universe].div(bench_aligned, axis=0)
L838         rs_high = rs.rolling(252).max().shift(1)
L839
L840         # ブレイクアウト「発生日」：条件立ち上がり
L841         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L842                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L843         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L844
L845         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L846         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L847         volume_dryup = (vol20 / vol50) <= 1.0
L848         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L849         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L850         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L851
L852         # 直近N営業日内の発火 / 最終発生日
L853         rows = []
L854         for t in g_universe:
L855             def _recent_and_date(s, win):
L856                 sw = s[t].iloc[-win:]
L857                 if sw.any():
L858                     d = sw[sw].index[-1]
L859                     return True, d.strftime("%Y-%m-%d")
L860                 return False, ""
L861             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L862             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L863             rows.append((t, {
L864                 "G_BREAKOUT_recent_5d": br_recent,
L865                 "G_BREAKOUT_last_date": br_date,
L866                 "G_PULLBACK_recent_5d": pb_recent,
L867                 "G_PULLBACK_last_date": pb_date,
L868                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L869             }))
L870         flags = pd.DataFrame({k: v for k, v in rows}).T
L871
L872         # 列を作成・上書き
L873         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L874         for c in cols:
L875             if c not in feature_df.columns:
L876                 feature_df[c] = np.nan
L877         feature_df.loc[flags.index, flags.columns] = flags
L878
L879     except Exception:
L880         pass
L881     return feature_df
L882
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L41           FIN_THREADS: "8"
L42         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=12）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 12本)`（= N_G）
L17   - 緊急解除: `max(q20, 18本)`（= ceil(1.5×12)）
L18   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **14%**
L24  - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（20×5%に全戻しのみ）
L25
L26 ## モード別の推奨“保有銘柄数”（MMF≒現金）
L27 *各枠=5%（20銘柄均等）。モード移行時は**Gの枠数のみ**調整し、外した枠は現金として保持。*
L28
L29 - **NORMAL:** G **12** / D **8** / 現金化枠 **0**  
L30 - **CAUTION:** G **10** / D **8** / 現金化枠 **2**（= 10%）  
L31 - **EMERG:** G **8**  / D **8** / 現金化枠 **4**（= 20%）  
L32
L33 > 実運用：⭐️低スコアのGから順に外す。解除時はfactor上位から補充。
L34
L35 ## トレーリングストップ
L36 - **基本TS (モード別):** NORMAL **15%** / CAUTION **13%** / EMERG **10%**
L37 - 含み益が **+30% / +60% / +100%** 到達で、基本から **-3pt / -6pt / -8pt** 引き上げ
L38 - TS発動で減少した銘柄は翌日以降に補充（※緊急モード中は補充しない）
L39
L40 ## 半戻し（リバランス）手順
L41 ドリフトチェックで**アラート**が出た場合（合計|drift| がモード閾値を超過、EMERG除く）、翌営業日の米国寄付きで下記を実施する。
L42
L43 1. **売却（必須）**  
L44    Slackテーブルの **Δqty がマイナスの銘柄を売却** する（寄付き成行推奨）。  
L45    これは「半戻し」計算に基づく過重量の削減を意味する。
L46
L47 2. **購入（任意・半戻し目安）**  
L48    半戻し後の合計|drift|を**シミュレーション値（Slackヘッダに表示）**に近づけることを目安に、  
L49    **任意の銘柄を買い増し**してバランスを取る（Δqtyがプラスの銘柄を優先してもよい）。
L50
L51 3. **トレーリングストップの再設定（必須）**  
L52    すべての保有銘柄について、最新の評価額に合わせてTSを**再発注／更新**する。  
L53    ルールは下記（利益到達で段階的にタイト化）：  
L54    - **基本TS:** -15%  
L55    - **+30% 到達 → TS -12%**  
L56    - **+60% 到達 → TS -9%**  
L57    - **+100% 到達 → TS -7%**  
L58    ※ストップ価格の引き上げは許可、**引き下げは不可**（利益保全の原則）。
L59
L60 4. **例外（EMERGモード）**  
L61    緊急(EMERG)では**ドリフト由来の売買は停止（∞）**。20銘柄×各5%への**全戻し**のみ許容。
L62
L63 5. **実行タイミング**
L64    - 判定：米国市場終値直後
L65    - 執行：翌営業日の米国寄付き成行
L66
L67 ## モード移行の実務手順（超シンプル）
L68 モードが変わったら、**MMF≒現金**として扱い、**Gの枠数だけ**を調整する：
L69 1. **Gを削る**（CAUTION/EMERG）  
L70    - ⭐️低スコアのGから順に外す。  
L71    - **`current_tickers.csv` から外すG銘柄の行を削除**（＝その枠は現金化）。
L72 2. **現金として保持**  
L73    - 外した枠は現金（またはMMF相当）でプール。  
L74 3. **復帰時の補充**（NORMALへ）  
L75    - **`current_tickers.csv` に銘柄を追加**（factor上位から）。  
L76    - 以降は日次ドリフト/TSルールに従う。
L77
L78 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて自動で均等比率が再計算される。
L79
L80 ## 入替銘柄選定
L81 - Oxfordキャピタル／インカム、Alpha Investor、Motley Fool Stock Advisor、moomooスクリーニング等を参考にchatGPTで検討
L82 - 年間NISA枠はGrowth群の中から低ボラ銘柄を選定し利用。長期保持にはこだわらない。
L83
L84 ## 再エントリー（クールダウン）
L85 - TSヒット後の同銘柄再INは **8営業日** のクールダウンを設ける（期間中は再IN禁止）
L86
L87 ## 実行タイミング
L88 - 判定：米国市場終値直後
L89 - 執行：翌営業日の米国寄付き成行
```

## <documents/factor_design.md>
```text
L1 # factor.py 詳細設計書
L2
L3 ## 概要
L4 - 既存ポートフォリオの銘柄と検討中の銘柄群を同時に扱う銘柄選定パイプライン。
L5 - 価格・財務データを取り込みスコアリングとDRRS選定を行うことで、以下のアウトプットを得る。
L6   - 採用銘柄と惜しくも漏れた銘柄のスコア一覧
L7   - IN/OUTのティッカーリストとOUT側の低スコア銘柄
L8   - 新旧ポートフォリオの比較表
L9   - 検討中銘柄の低スコアランキング（整理用）
L10
L11 ## 全体フロ
```