```text
T')
L1384                     if pd.notna(weight_val):
L1385                         parts.append(f"w={weight_val:.2f}")
L1386                     path_val = None
L1387                     try:
L1388                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1389                     except Exception:
L1390                         path_val = None
L1391                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1392                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1393                     if path_val:
L1394                         parts.append(f"PATH={path_val}")
L1395                     parts_json = None
L1396                     try:
L1397                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1398                     except Exception:
L1399                         parts_json = None
L1400                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1401                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1402                     if parts_json:
L1403                         parts.append(f"PARTS={parts_json}")
L1404                     if not parts:
L1405                         parts.append('no-data')
L1406                     print(f"Ticker: {t} | " + " ".join(parts))
L1407                 print()
L1408             except Exception as exc:
L1409                 print(f"[ERR] GRW debug dump failed: {exc}")
L1410
L1411         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1412             + 0.15*df_z['TR_str']
L1413             + 0.15*df_z['RS_SLOPE_6W']
L1414             + 0.15*df_z['RS_SLOPE_13W']
L1415             + 0.10*df_z['MA200_SLOPE_5M']
L1416             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1417         df_z['VOL'] = robust_z(df['BETA'])
L1418         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1419         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1420
L1421         _dump_dfz(
L1422             df=df,
L1423             df_z=df_z,
L1424             debug_mode=getattr(cfg, "debug_mode", False),
L1425         )
L1426         if getattr(cfg, "debug_mode", False):
L1427             log_grw_stats(df, df_z, logger)
L1428         save_factor_debug_csv(df, df_z)
L1429
L1430         # === begin: BIO LOSS PENALTY =====================================
L1431         try:
L1432             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1433         except Exception:
L1434             penalty_z = 0.8
L1435
L1436         def _is_bio_like(t: str) -> bool:
L1437             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1438             sec = str(inf.get("sector", "")).lower()
L1439             ind = str(inf.get("industry", "")).lower()
L1440             if "health" not in sec:
L1441                 return False
L1442             keys = ("biotech", "biopharma", "pharma")
L1443             return any(k in ind for k in keys)
L1444
L1445         tickers_s = pd.Index(df_z.index)
L1446         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1447         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1448         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1449
L1450         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1451             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1452             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1453         # === end: BIO LOSS PENALTY =======================================
L1454
L1455         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1456         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1457
L1458         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1459         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1460         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1461         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1462
L1463         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1464         # ① 全銘柄で G/D スコアを算出（unmasked）
L1465         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1466
L1467         d_comp = pd.concat({
L1468             'QAL': df_z['D_QAL'],
L1469             'YLD': df_z['D_YLD'],
L1470             'VOL': df_z['D_VOL_RAW'],
L1471             'TRD': df_z['D_TRD']
L1472         }, axis=1)
L1473         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1474         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1475         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1476
L1477         # ② テンプレ判定（既存ロジックそのまま）
L1478         mask = df['trend_template']
L1479         if not bool(mask.any()):
L1480             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1481                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1482                 (df.get('RS', np.nan) >= 0.08) &
L1483                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1484                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1485                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1486                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1487                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1488             df['trend_template'] = mask
L1489
L1490         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1491         g_score = g_score_all.loc[mask]
L1492         Scorer.g_score = g_score
L1493         df_z['GSC'] = g_score_all
L1494         df_z['DSC'] = d_score_all
L1495
L1496         try:
L1497             current = (pd.read_csv("current_tickers.csv")
L1498                   .iloc[:, 0]
L1499                   .str.upper()
L1500                   .tolist())
L1501         except FileNotFoundError:
L1502             warnings.warn("current_tickers.csv not found — bonus skipped")
L1503             current = []
L1504
L1505         mask_bonus = g_score.index.isin(current)
L1506         if mask_bonus.any():
L1507             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1508             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1509             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1510             sigma_g = g_score.std()
L1511             if pd.isna(sigma_g):
L1512                 sigma_g = 0.0
L1513             bonus_g = round(k * sigma_g, 3)
L1514             g_score.loc[mask_bonus] += bonus_g
L1515             Scorer.g_score = g_score
L1516             # 3) D 側も同様に σ の NaN をケア
L1517             sigma_d = d_score_all.std()
L1518             if pd.isna(sigma_d):
L1519                 sigma_d = 0.0
L1520             bonus_d = round(k * sigma_d, 3)
L1521             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1522
L1523         try:
L1524             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1525         except Exception:
L1526             pass
L1527
L1528         df_full = df.copy()
L1529         df_full_z = df_z.copy()
L1530
L1531         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1532         return FeatureBundle(df=df,
L1533             df_z=df_z,
L1534             g_score=g_score,
L1535             d_score_all=d_score_all,
L1536             missing_logs=pd.DataFrame(missing_logs),
L1537             df_full=df_full,
L1538             df_full_z=df_full_z,
L1539             scaler=None)
L1540
L1541 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1542     """
L1543     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1544     次の列を feature_df に追加する（index=ticker）。
L1545       - G_BREAKOUT_recent_5d : bool
L1546       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1547       - G_PULLBACK_recent_5d : bool
L1548       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1549       - G_PIVOT_price        : float
L1550     失敗しても例外は握り潰し、既存処理を阻害しない。
L1551     """
L1552     try:
L1553         px   = bundle.px                      # 終値 DataFrame
L1554         hi   = bundle.data['High']
L1555         lo   = bundle.data['Low']
L1556         vol  = bundle.data['Volume']
L1557         bench= bundle.spx                     # ベンチマーク Series
L1558
L1559         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1560         g_universe = getattr(self_obj, "g_universe", None)
L1561         if g_universe is None:
L1562             try:
L1563                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1564             except Exception:
L1565                 g_universe = list(feature_df.index)
L1566         if not g_universe:
L1567             return feature_df
L1568
L1569         # 指標
L1570         px = px.ffill(limit=2)
L1571         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1572         ma50  = px[g_universe].rolling(50).mean()
L1573         ma150 = px[g_universe].rolling(150).mean()
L1574         ma200 = px[g_universe].rolling(200).mean()
L1575         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1576         vol20 = vol[g_universe].rolling(20).mean()
L1577         vol50 = vol[g_universe].rolling(50).mean()
L1578
L1579         # トレンドテンプレート合格
L1580         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1581                             & (ma150 > ma200) & (ma200.diff() > 0)
L1582
L1583         # 汎用ピボット：直近65営業日の高値（当日除外）
L1584         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1585
L1586         # 相対力：年内高値更新
L1587         bench_aligned = bench.reindex(px.index).ffill()
L1588         rs = px[g_universe].div(bench_aligned, axis=0)
L1589         rs_high = rs.rolling(252).max().shift(1)
L1590
L1591         # ブレイクアウト「発生日」：条件立ち上がり
L1592         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1593                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1594         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1595
L1596         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1597         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1598         volume_dryup = (vol20 / vol50) <= 1.0
L1599         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1600         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1601         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1602
L1603         # 直近N営業日内の発火 / 最終発生日
L1604         rows = []
L1605         for t in g_universe:
L1606             def _recent_and_date(s, win):
L1607                 sw = s[t].iloc[-win:]
L1608                 if sw.any():
L1609                     d = sw[sw].index[-1]
L1610                     return True, d.strftime("%Y-%m-%d")
L1611                 return False, ""
L1612             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1613             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1614             rows.append((t, {
L1615                 "G_BREAKOUT_recent_5d": br_recent,
L1616                 "G_BREAKOUT_last_date": br_date,
L1617                 "G_PULLBACK_recent_5d": pb_recent,
L1618                 "G_PULLBACK_last_date": pb_date,
L1619                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1620             }))
L1621         flags = pd.D
```