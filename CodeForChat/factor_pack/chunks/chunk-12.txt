```text
.nan) > 0)
L786             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L787             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L788             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L789             c5 = (row.get('TR_str', np.nan) > 0)
L790             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L791             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L792             c8 = (row.get('RS', np.nan) >= 0.10)
L793             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L794
L795         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L796         assert 'trend_template' in df.columns
L797
L798         def _calc_eps_abs_slope(eps_series, n=12):
L799             try:
L800                 if isinstance(eps_series, pd.Series):
L801                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L802                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L803                     series = pd.Series(eps_series, dtype=float).dropna()
L804                 else:
L805                     return 0.0
L806             except Exception:
L807                 return 0.0
L808
L809             if series.empty:
L810                 return 0.0
L811
L812             tail = series.tail(n).to_numpy(dtype=float)
L813             if tail.size < 2:
L814                 return 0.0
L815
L816             x = np.arange(tail.size, dtype=float)
L817             x = x - x.mean()
L818             y = tail - tail.mean()
L819             denom = np.dot(x, x)
L820             if denom == 0:
L821                 return 0.0
L822             slope = float(np.dot(x, y) / denom)
L823             return slope
L824
L825         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L826         df.drop(columns=['EPS_SERIES'], inplace=True)
L827
L828         # === Z化と合成 ===
L829         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L830
L831         df_z = pd.DataFrame(index=df.index)
L832         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L833         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L834         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L835
L836         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L837
L838         # === Growth深掘り系（欠損保持z + RAW併載） ===
L839         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L840         for col in grw_cols:
L841             if col in df.columns:
L842                 raw = pd.to_numeric(df[col], errors="coerce")
L843                 df_z[col] = robust_z_keepnan(raw)
L844         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L845             if k in df.columns and k not in df_z.columns:
L846                 raw = pd.to_numeric(df[k], errors="coerce")
L847                 df_z[k] = robust_z_keepnan(raw)
L848         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L849
L850         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L851         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L852         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L853
L854         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L855         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L856         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L857
L858         # ===== トレンドスロープ算出 =====
L859         def zpos(x):
L860             arr = robust_z(x)
L861             idx = getattr(x, 'index', df_z.index)
L862             return pd.Series(arr, index=idx).fillna(0.0)
L863
L864         def relu(x):
L865             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L866             return ser.clip(lower=0).fillna(0.0)
L867
L868         # 売上トレンドスロープ（四半期）
L869         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L870         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L871         slope_rev_combo = slope_rev - 0.25*noise_rev
L872         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L873
L874         # EPSトレンドスロープ（四半期）
L875         slope_eps = (
L876             0.40*zpos(df_z['EPS_Q_YOY']) +
L877             0.20*zpos(df_z['EPS_POS']) +
L878             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L879         )
L880         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L881
L882         # 年次トレンド（サブ）
L883         slope_rev_yr = zpos(df_z['REV_YOY'])
L884         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L885         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L886         streak_yr = streak_base / (streak_base.abs() + 1.0)
L887         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L888         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L889         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L890
L891         grw_q_z = robust_z_keepnan(df['GRW_Q_RAW']).clip(-3.0, 3.0)
L892         grw_a_z = robust_z_keepnan(df['GRW_A_RAW']).clip(-3.0, 3.0)
L893         df_z['GRW_Q'] = grw_q_z
L894         df_z['GRW_A'] = grw_a_z
L895
L896         try:
L897             mix = float(os.environ.get("GRW_Q_ANNUAL_MIX", "0.7"))
L898         except Exception:
L899             mix = 0.7
L900         if not np.isfinite(mix):
L901             mix = 0.7
L902         mix = float(np.clip(mix, 0.0, 1.0))
L903
L904         weights_q: list[float] = []
L905         weights_a: list[float] = []
L906         grw_mix: list[float] = []
L907         for idx in df.index:
L908             q_val = grw_q_z.get(idx, np.nan)
L909             a_val = grw_a_z.get(idx, np.nan)
L910             q_ok = np.isfinite(q_val)
L911             a_ok = np.isfinite(a_val)
L912             if q_ok and a_ok:
L913                 wq, wa = mix, 1.0 - mix
L914             elif q_ok:
L915                 wq, wa = 1.0, 0.0
L916             elif a_ok:
L917                 wq, wa = 0.0, 1.0
L918             else:
L919                 wq = wa = np.nan
L920                 grw_mix.append(np.nan)
L921                 weights_q.append(wq)
L922                 weights_a.append(wa)
L923                 continue
L924             weights_q.append(wq)
L925             weights_a.append(wa)
L926             grw_mix.append(q_val * wq + a_val * wa)
L927
L928         wq_series = pd.Series(weights_q, index=df.index, dtype=float)
L929         wa_series = pd.Series(weights_a, index=df.index, dtype=float)
L930         grw_series = pd.Series(grw_mix, index=df.index, dtype=float).clip(-3.0, 3.0)
L931
L932         df_z['GROWTH_F'] = grw_series
L933         df_z['GRW_FLEX_WEIGHT'] = 1.0  # 現状は固定（SECの可用性に依らず）
L934
L935         if 'GRW_Q_RAW' in df.columns:
L936             df_z['GRW_Q_DBG'] = pd.Series(df['GRW_Q_RAW'], index=df.index, dtype=float)
L937         if 'GRW_A_RAW' in df.columns:
L938             df_z['GRW_A_DBG'] = pd.Series(df['GRW_A_RAW'], index=df.index, dtype=float)
L939         df_z['GRW_WQ_DBG'] = wq_series
L940         df_z['GRW_WA_DBG'] = wa_series
L941
L942         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L943             + 0.15*df_z['TR_str']
L944             + 0.15*df_z['RS_SLOPE_6W']
L945             + 0.15*df_z['RS_SLOPE_13W']
L946             + 0.10*df_z['MA200_SLOPE_5M']
L947             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L948         df_z['VOL'] = robust_z(df['BETA'])
L949         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L950         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L951
L952         # df_z 全明細をページングしてログ出力（最小版）
L953         if getattr(cfg, "debug_mode", False):
L954             beta_debug_cols = []
L955             if isinstance(df, pd.DataFrame):
L956                 try:
L957                     beta_raw = df.get('BETA') if 'BETA' in df.columns else None
L958                     if beta_raw is not None:
L959                         beta_raw = pd.to_numeric(beta_raw, errors="coerce")
L960                         df_z['BETA_RAW'] = beta_raw.reindex(df_z.index)
L961                         df_z['BETA_Z'] = _plain_zscore_series(df_z['BETA_RAW'])
L962                         beta_debug_cols.extend(['BETA_RAW', 'BETA_Z'])
L963                 except Exception:
L964                     beta_debug_cols.clear()
L965             pd.set_option("display.max_columns", None)
L966             pd.set_option("display.max_colwidth", None)
L967             pd.set_option("display.width", None)
L968             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L969             n = len(df_z)
L970             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L971             try:
L972                 for i in range(0, n, page):
L973                     j = min(i + page, n)
L974                     try:
L975                         chunk_str = df_z.iloc[i:j].to_string()
L976                     except Exception:
L977                         chunk_str = df_z.iloc[i:j].astype(str).to_string()
L978                     logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L979             finally:
L980                 if beta_debug_cols:
L981                     df_z.drop(columns=[c for c in beta_debug_cols if c in df_z.columns], inplace=True)
L982             logger.info("=== df_z FULL DUMP end ===")
L983
L984         # === begin: BIO LOSS PENALTY =====================================
L985         try:
L986             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L987         except Exception:
L988             penalty_z = 0.8
L989
L990         def _is_bio_like(t: str) -> bool:
L991             inf = info.get(t, {}) if isinstance(info, dict) else {}
L992             sec = str(inf.get("sector", "")).lower()
L993             ind = str(inf.get("industry", "")).lower()
L994             if "health" not in sec:
L995                 return False
L996             keys = ("biotech", "biopharma", "pharma")
L997             return any(k in ind for k in keys)
L998
L999         tickers_s = pd.Index(df_z.index)
L1000         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1001         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1002         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1003
L1004         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1005             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1006             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1007         # === end: BIO LOSS PENALTY =======================================
L1008
L1009         _debug_only_cols = [c for c in df_z.columns if c.endswith("_RAW")]
L1010         _no_score_cols = ["DIV_TTM_PS", "DIV_YOY", "LOW52PCT25_EXCESS", "MA50_OVER_200"]
L1011         _drop_cols = [c for c in (_debug_only_cols + _no_score_cols) if c in df_z.columns]
L1012         if _drop_cols:
L1013             df_z = df_z.drop(columns=_drop_cols, errors="ignore")
L1014
L1015         assert not any(c.endswith("_RAW") for c in df_z.columns)
L1016         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L1017             assert c not in df_z.columns
L1018
L1019         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1020         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1021
L1022         df_z
```