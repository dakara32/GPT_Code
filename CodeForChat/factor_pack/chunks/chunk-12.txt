```text
'REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L823         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L824         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L825
L826         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L827
L828         # === Growth深掘り系（欠損保持z + RAW併載） ===
L829         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L830         for col in grw_cols:
L831             if col in df.columns:
L832                 raw = pd.to_numeric(df[col], errors="coerce")
L833                 df_z[col] = robust_z_keepnan(raw)
L834         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L835             if k in df.columns and k not in df_z.columns:
L836                 raw = pd.to_numeric(df[k], errors="coerce")
L837                 df_z[k] = robust_z_keepnan(raw)
L838         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L839
L840         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L841         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L842         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L843
L844         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L845         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L846         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L847
L848         # ===== トレンドスロープ算出 =====
L849         def zpos(x):
L850             arr = robust_z(x)
L851             idx = getattr(x, 'index', df_z.index)
L852             return pd.Series(arr, index=idx).fillna(0.0)
L853
L854         def relu(x):
L855             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L856             return ser.clip(lower=0).fillna(0.0)
L857
L858         # 売上トレンドスロープ（四半期）
L859         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L860         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L861         slope_rev_combo = slope_rev - 0.25*noise_rev
L862         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L863
L864         # EPSトレンドスロープ（四半期）
L865         slope_eps = (
L866             0.40*zpos(df_z['EPS_Q_YOY']) +
L867             0.20*zpos(df_z['EPS_POS']) +
L868             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L869         )
L870         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L871
L872         # 年次トレンド（サブ）
L873         slope_rev_yr = zpos(df_z['REV_YOY'])
L874         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L875         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L876         streak_yr = streak_base / (streak_base.abs() + 1.0)
L877         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L878         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L879         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L880
L881         grw_q_z = robust_z_keepnan(df['GRW_Q_RAW']).clip(-3.0, 3.0)
L882         grw_a_z = robust_z_keepnan(df['GRW_A_RAW']).clip(-3.0, 3.0)
L883         df_z['GRW_Q'] = grw_q_z
L884         df_z['GRW_A'] = grw_a_z
L885
L886         try:
L887             mix = float(os.environ.get("GRW_Q_ANNUAL_MIX", "0.7"))
L888         except Exception:
L889             mix = 0.7
L890         if not np.isfinite(mix):
L891             mix = 0.7
L892         mix = float(np.clip(mix, 0.0, 1.0))
L893
L894         weights_q: list[float] = []
L895         weights_a: list[float] = []
L896         grw_mix: list[float] = []
L897         for idx in df.index:
L898             q_val = grw_q_z.get(idx, np.nan)
L899             a_val = grw_a_z.get(idx, np.nan)
L900             q_ok = np.isfinite(q_val)
L901             a_ok = np.isfinite(a_val)
L902             if q_ok and a_ok:
L903                 wq, wa = mix, 1.0 - mix
L904             elif q_ok:
L905                 wq, wa = 1.0, 0.0
L906             elif a_ok:
L907                 wq, wa = 0.0, 1.0
L908             else:
L909                 wq = wa = np.nan
L910                 grw_mix.append(np.nan)
L911                 weights_q.append(wq)
L912                 weights_a.append(wa)
L913                 continue
L914             weights_q.append(wq)
L915             weights_a.append(wa)
L916             grw_mix.append(q_val * wq + a_val * wa)
L917
L918         wq_series = pd.Series(weights_q, index=df.index, dtype=float)
L919         wa_series = pd.Series(weights_a, index=df.index, dtype=float)
L920         grw_series = pd.Series(grw_mix, index=df.index, dtype=float).clip(-3.0, 3.0)
L921
L922         df_z['GROWTH_F'] = grw_series
L923         df_z['GRW_FLEX_WEIGHT'] = 1.0  # 現状は固定（SECの可用性に依らず）
L924
L925         if 'GRW_Q_RAW' in df.columns:
L926             df_z['GRW_Q_DBG'] = pd.Series(df['GRW_Q_RAW'], index=df.index, dtype=float)
L927         if 'GRW_A_RAW' in df.columns:
L928             df_z['GRW_A_DBG'] = pd.Series(df['GRW_A_RAW'], index=df.index, dtype=float)
L929         df_z['GRW_WQ_DBG'] = wq_series
L930         df_z['GRW_WA_DBG'] = wa_series
L931
L932         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L933             + 0.15*df_z['TR_str']
L934             + 0.15*df_z['RS_SLOPE_6W']
L935             + 0.15*df_z['RS_SLOPE_13W']
L936             + 0.10*df_z['MA200_SLOPE_5M']
L937             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L938         df_z['VOL'] = robust_z(df['BETA'])
L939         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L940         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L941
L942         # df_z 全明細をページングしてログ出力（最小版）
L943         if getattr(cfg, "debug_mode", False):
L944             pd.set_option("display.max_columns", None)
L945             pd.set_option("display.max_colwidth", None)
L946             pd.set_option("display.width", None)
L947             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L948             n = len(df_z)
L949             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L950             for i in range(0, n, page):
L951                 j = min(i + page, n)
L952                 try:
L953                     chunk_str = df_z.iloc[i:j].to_string()
L954                 except Exception:
L955                     chunk_str = df_z.iloc[i:j].astype(str).to_string()
L956                 logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L957             logger.info("=== df_z FULL DUMP end ===")
L958
L959         # === begin: BIO LOSS PENALTY =====================================
L960         try:
L961             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L962         except Exception:
L963             penalty_z = 0.8
L964
L965         def _is_bio_like(t: str) -> bool:
L966             inf = info.get(t, {}) if isinstance(info, dict) else {}
L967             sec = str(inf.get("sector", "")).lower()
L968             ind = str(inf.get("industry", "")).lower()
L969             if "health" not in sec:
L970                 return False
L971             keys = ("biotech", "biopharma", "pharma")
L972             return any(k in ind for k in keys)
L973
L974         tickers_s = pd.Index(df_z.index)
L975         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L976         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L977         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L978
L979         if bool(mask_bio_loss.any()) and penalty_z > 0:
L980             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L981             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L982         # === end: BIO LOSS PENALTY =======================================
L983
L984         _debug_only_cols = [c for c in df_z.columns if c.endswith("_RAW")]
L985         _no_score_cols = ["DIV_TTM_PS", "DIV_YOY", "LOW52PCT25_EXCESS", "MA50_OVER_200"]
L986         _drop_cols = [c for c in (_debug_only_cols + _no_score_cols) if c in df_z.columns]
L987         if _drop_cols:
L988             df_z = df_z.drop(columns=_drop_cols, errors="ignore")
L989
L990         assert not any(c.endswith("_RAW") for c in df_z.columns)
L991         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L992             assert c not in df_z.columns
L993
L994         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L995         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L996
L997         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L998         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L999         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1000         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1001
L1002         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1003         # ① 全銘柄で G/D スコアを算出（unmasked）
L1004         g_weights = pd.Series(cfg.weights.g, dtype=float)
L1005         need_g = ["GROWTH_F", "MOM"]
L1006         dbg_cols = ["GROWTH_F", "MOM", "VOL"]
L1007         if all(c in df_z.columns for c in need_g):
L1008             mask_g = df_z[need_g].notna().all(axis=1)
L1009         else:
L1010             mask_g = pd.Series(False, index=df_z.index, dtype=bool)
L1011         for c in dbg_cols:
L1012             if c in df_z.columns:
L1013                 df_z[f"DBGRW.{c}"] = df_z[c]
L1014         df_fill_g = df_z.reindex(columns=g_weights.index, fill_value=np.nan).copy()
L1015         for c in df_fill_g.columns:
L1016             if c not in need_g:
L1017                 df_fill_g[c] = df_fill_g[c].fillna(0)
L1018         g_score_all = _as_numeric_series(
L1019             df_fill_g.mul(g_weights.reindex(df_fill_g.columns)).sum(axis=1, skipna=False)
L1020         )
L1021         g_score_all = g_score_all.where(mask_g)
L1022
L1023         d_comp = pd.concat({
L1024             'QAL': df_z['D_QAL'],
L1025             'YLD': df_z['D_YLD'],
L1026             'VOL': df_z['D_VOL_RAW'],
L1027             'TRD': df_z['D_TRD']
L1028         }, axis=1)
L1029         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1030         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1031         need_d_candidates = ["VOL", "QAL"]
L1032         mask_d = pd.Series(True, index=d_comp.index, dtype=bool)
L1033         for c in need_d_candidates:
L1034             if c in d_comp.columns:
L1035                 mask_d &= d_comp[c].notna()
L1036             else:
L1037                 mask_d &= False
L1038         df_fill_d = d_comp.copy()
L1039         for c in df_fill_d.columns:
L1040             if c not in need_d_candidates:
L1041                 df_fill_d[c] = df_fill_d[c].fillna(0)
L1042         d_score_all = _as_numeric_series(
L1043             df_fill_d.mul(dw, axis=1).sum(axis=1, skipna=False)
L1044         )
L1045         d_score_all = d_score_all.where(mask_d)
L1046
L1047         # ② テンプレ判定（既存ロジックそのまま）
L1048         mask = df['trend_template']
L1049         if not bool(mask.any()):
L1050             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1051                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1052         
```