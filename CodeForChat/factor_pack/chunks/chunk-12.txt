```text
   streak_yr = streak_base / (streak_base.abs() + 1.0)
L1164         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1165         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1166         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1167
L1168         # ===== GRW flexible score (variable data paths) =====
L1169         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1170         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1171         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1172         if debug_mode:
L1173             dbg_cols = [c for c in df.columns if isinstance(c, str) and c.startswith("DBG_GRW.")]
L1174             for col in dbg_cols:
L1175                 df_z[col] = df[col]
L1176
L1177         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1178         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1179             try:
L1180                 cols = ['GROWTH_F', 'GRW_FLEX_WEIGHT']
L1181                 use_cols = [c for c in cols if c in df_z.columns]
L1182                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1183                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1184                 limit = max(0, min(40, len(i)))
L1185                 print("[DEBUG: GRW]")
L1186                 for t in i.index[:limit]:
L1187                     row = i.loc[t]
L1188                     parts = []
L1189                     if pd.notna(row.get('GROWTH_F')):
L1190                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1191                     raw_val = grw_raw.get(t) if isinstance(grw_raw, pd.Series) else np.nan
L1192                     if pd.notna(raw_val):
L1193                         parts.append(f"GRW_FLEX_SCORE={raw_val:.3f}")
L1194                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1195                     if pd.notna(weight_val):
L1196                         parts.append(f"w={weight_val:.2f}")
L1197                     path_val = None
L1198                     try:
L1199                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1200                     except Exception:
L1201                         path_val = None
L1202                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1203                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1204                     if path_val:
L1205                         parts.append(f"PATH={path_val}")
L1206                     parts_json = None
L1207                     try:
L1208                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1209                     except Exception:
L1210                         parts_json = None
L1211                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1212                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1213                     if parts_json:
L1214                         parts.append(f"PARTS={parts_json}")
L1215                     if not parts:
L1216                         parts.append('no-data')
L1217                     print(f"Ticker: {t} | " + " ".join(parts))
L1218                 print()
L1219             except Exception as exc:
L1220                 print(f"[ERR] GRW debug dump failed: {exc}")
L1221
L1222         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1223             + 0.15*df_z['TR_str']
L1224             + 0.15*df_z['RS_SLOPE_6W']
L1225             + 0.15*df_z['RS_SLOPE_13W']
L1226             + 0.10*df_z['MA200_SLOPE_5M']
L1227             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1228         df_z['VOL'] = robust_z(df['BETA'])
L1229         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1230         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1231
L1232         # df_z 全明細をページングしてログ出力（最小版）
L1233         if getattr(cfg, "debug_mode", False):
L1234             pd.set_option("display.max_columns", None)
L1235             pd.set_option("display.max_colwidth", None)
L1236             pd.set_option("display.width", None)
L1237             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L1238             n = len(df_z)
L1239             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1240             for i in range(0, n, page):
L1241                 j = min(i + page, n)
L1242                 try:
L1243                     chunk_str = df_z.iloc[i:j].to_string()
L1244                 except Exception:
L1245                     chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1246                 logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1247             logger.info("=== df_z FULL DUMP end ===")
L1248
L1249         # === begin: BIO LOSS PENALTY =====================================
L1250         try:
L1251             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1252         except Exception:
L1253             penalty_z = 0.8
L1254
L1255         def _is_bio_like(t: str) -> bool:
L1256             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1257             sec = str(inf.get("sector", "")).lower()
L1258             ind = str(inf.get("industry", "")).lower()
L1259             if "health" not in sec:
L1260                 return False
L1261             keys = ("biotech", "biopharma", "pharma")
L1262             return any(k in ind for k in keys)
L1263
L1264         tickers_s = pd.Index(df_z.index)
L1265         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1266         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1267         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1268
L1269         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1270             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1271             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1272         # === end: BIO LOSS PENALTY =======================================
L1273
L1274         assert not any(c.endswith("_RAW") for c in df_z.columns)
L1275         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L1276             assert c not in df_z.columns
L1277
L1278         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1279         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1280
L1281         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1282         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1283         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1284         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1285
L1286         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1287         # ① 全銘柄で G/D スコアを算出（unmasked）
L1288         g_score_all = _as_numeric_series(df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1))
L1289
L1290         d_comp = pd.concat({
L1291             'QAL': df_z['D_QAL'],
L1292             'YLD': df_z['D_YLD'],
L1293             'VOL': df_z['D_VOL_RAW'],
L1294             'TRD': df_z['D_TRD']
L1295         }, axis=1)
L1296         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1297         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1298         d_score_all = _as_numeric_series(d_comp.mul(dw, axis=1).sum(axis=1))
L1299
L1300         # ② テンプレ判定（既存ロジックそのまま）
L1301         mask = df['trend_template']
L1302         if not bool(mask.any()):
L1303             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1304                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1305                 (df.get('RS', np.nan) >= 0.08) &
L1306                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1307                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1308                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1309                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1310                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1311             df['trend_template'] = mask
L1312
L1313         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1314         g_score = _as_numeric_series(g_score_all.loc[mask])
L1315         Scorer.g_score = g_score
L1316         df_z['GSC'] = g_score_all
L1317         df_z['DSC'] = d_score_all
L1318
L1319         try:
L1320             current = (pd.read_csv("current_tickers.csv")
L1321                   .iloc[:, 0]
L1322                   .str.upper()
L1323                   .tolist())
L1324         except FileNotFoundError:
L1325             warnings.warn("current_tickers.csv not found — bonus skipped")
L1326             current = []
L1327
L1328         mask_bonus = g_score.index.isin(current)
L1329         if mask_bonus.any():
L1330             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1331             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1332             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1333             sigma_g = g_score.std()
L1334             if pd.isna(sigma_g):
L1335                 sigma_g = 0.0
L1336             bonus_g = round(k * sigma_g, 3)
L1337             g_score.loc[mask_bonus] += bonus_g
L1338             Scorer.g_score = g_score
L1339             # 3) D 側も同様に σ の NaN をケア
L1340             sigma_d = d_score_all.std()
L1341             if pd.isna(sigma_d):
L1342                 sigma_d = 0.0
L1343             bonus_d = round(k * sigma_d, 3)
L1344             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1345
L1346         try:
L1347             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1348         except Exception:
L1349             pass
L1350
L1351         df_full = df.copy()
L1352         df_full_z = df_z.copy()
L1353
L1354         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1355         return FeatureBundle(df=df,
L1356             df_z=df_z,
L1357             g_score=g_score,
L1358             d_score_all=d_score_all,
L1359             missing_logs=pd.DataFrame(missing_logs),
L1360             df_full=df_full,
L1361             df_full_z=df_full_z,
L1362             scaler=None)
L1363
L1364 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1365     """
L1366     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1367     次の列を feature_df に追加する（index=ticker）。
L1368       - G_BREAKOUT_recent_5d : bool
L1369       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1370       - G_PULLBACK_recent_5d : bool
L1371       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1372       - G_PIVOT_price        : float
L1373     失敗しても例外は握り潰し、既存処理を阻害しない。
L1374     """
L1375     try:
L1376         px   = bundle.px                      # 終値 DataFrame
L1377         hi   = bundle.data['High']
L1378         lo   = bundle.data['Low']
L1379         vol  = bundle.data['Volume']
L1380         bench= bundle.spx                     # ベンチマーク Series
L1381
L1382         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1383         g_universe = getattr(self_obj, "g_universe", None)
L1384         if g_universe is None:
L1385             try:
L1386                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1387             except Exception:
L1388                 g_universe = list(feature_df.index)
L1389         if not g_universe:
L1390    
```