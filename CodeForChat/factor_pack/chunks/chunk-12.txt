```text
f _trend_template_pass(row, rs_alpha_thresh=0.10):
L789             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L790             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L791             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L792             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L793             c5 = (row.get('TR_str', np.nan) > 0)
L794             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L795             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L796             c8 = (row.get('RS', np.nan) >= 0.10)
L797             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L798
L799         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L800         assert 'trend_template' in df.columns
L801
L802         def _calc_eps_abs_slope(eps_series, n=12):
L803             try:
L804                 if isinstance(eps_series, pd.Series):
L805                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L806                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L807                     series = pd.Series(eps_series, dtype=float).dropna()
L808                 else:
L809                     return 0.0
L810             except Exception:
L811                 return 0.0
L812
L813             if series.empty:
L814                 return 0.0
L815
L816             tail = series.tail(n).to_numpy(dtype=float)
L817             if tail.size < 2:
L818                 return 0.0
L819
L820             x = np.arange(tail.size, dtype=float)
L821             x = x - x.mean()
L822             y = tail - tail.mean()
L823             denom = np.dot(x, x)
L824             if denom == 0:
L825                 return 0.0
L826             slope = float(np.dot(x, y) / denom)
L827             return slope
L828
L829         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L830         df.drop(columns=['EPS_SERIES'], inplace=True)
L831
L832         # === Z化と合成 ===
L833         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L834
L835         df_z = pd.DataFrame(index=df.index)
L836         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L837         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L838         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L839
L840         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L841
L842         # === Growth深掘り系（欠損保持z + RAW併載） ===
L843         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L844         for col in grw_cols:
L845             if col in df.columns:
L846                 raw = pd.to_numeric(df[col], errors="coerce")
L847                 df_z[col] = robust_z_keepnan(raw)
L848         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L849             if k in df.columns and k not in df_z.columns:
L850                 raw = pd.to_numeric(df[k], errors="coerce")
L851                 df_z[k] = robust_z_keepnan(raw)
L852         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L853
L854         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L855         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L856         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L857
L858         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L859         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L860         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L861
L862         # ===== トレンドスロープ算出 =====
L863         def zpos(x):
L864             arr = robust_z(x)
L865             idx = getattr(x, 'index', df_z.index)
L866             return pd.Series(arr, index=idx).fillna(0.0)
L867
L868         def relu(x):
L869             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L870             return ser.clip(lower=0).fillna(0.0)
L871
L872         # 売上トレンドスロープ（四半期）
L873         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L874         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L875         slope_rev_combo = slope_rev - 0.25*noise_rev
L876         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L877
L878         # EPSトレンドスロープ（四半期）
L879         slope_eps = (
L880             0.40*zpos(df_z['EPS_Q_YOY']) +
L881             0.20*zpos(df_z['EPS_POS']) +
L882             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L883         )
L884         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L885
L886         # 年次トレンド（サブ）
L887         slope_rev_yr = zpos(df_z['REV_YOY'])
L888         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L889         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L890         streak_yr = streak_base / (streak_base.abs() + 1.0)
L891         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L892         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L893         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L894
L895         grw_q_z = robust_z_keepnan(df['GRW_Q_RAW']).clip(-3.0, 3.0)
L896         grw_a_z = robust_z_keepnan(df['GRW_A_RAW']).clip(-3.0, 3.0)
L897         df_z['GRW_Q'] = grw_q_z
L898         df_z['GRW_A'] = grw_a_z
L899
L900         try:
L901             mix = float(os.environ.get("GRW_Q_ANNUAL_MIX", "0.7"))
L902         except Exception:
L903             mix = 0.7
L904         if not np.isfinite(mix):
L905             mix = 0.7
L906         mix = float(np.clip(mix, 0.0, 1.0))
L907
L908         weights_q: list[float] = []
L909         weights_a: list[float] = []
L910         grw_mix: list[float] = []
L911         for idx in df.index:
L912             q_val = grw_q_z.get(idx, np.nan)
L913             a_val = grw_a_z.get(idx, np.nan)
L914             q_ok = np.isfinite(q_val)
L915             a_ok = np.isfinite(a_val)
L916             if q_ok and a_ok:
L917                 wq, wa = mix, 1.0 - mix
L918             elif q_ok:
L919                 wq, wa = 1.0, 0.0
L920             elif a_ok:
L921                 wq, wa = 0.0, 1.0
L922             else:
L923                 wq = wa = np.nan
L924                 grw_mix.append(np.nan)
L925                 weights_q.append(wq)
L926                 weights_a.append(wa)
L927                 continue
L928             weights_q.append(wq)
L929             weights_a.append(wa)
L930             grw_mix.append(q_val * wq + a_val * wa)
L931
L932         wq_series = pd.Series(weights_q, index=df.index, dtype=float)
L933         wa_series = pd.Series(weights_a, index=df.index, dtype=float)
L934         grw_series = pd.Series(grw_mix, index=df.index, dtype=float).clip(-3.0, 3.0)
L935
L936         df_z['GROWTH_F'] = grw_series
L937         df_z['GRW_FLEX_WEIGHT'] = 1.0  # 現状は固定（SECの可用性に依らず）
L938
L939         if 'GRW_Q_RAW' in df.columns:
L940             df_z['GRW_Q_DBG'] = pd.Series(df['GRW_Q_RAW'], index=df.index, dtype=float)
L941         if 'GRW_A_RAW' in df.columns:
L942             df_z['GRW_A_DBG'] = pd.Series(df['GRW_A_RAW'], index=df.index, dtype=float)
L943         df_z['GRW_WQ_DBG'] = wq_series
L944         df_z['GRW_WA_DBG'] = wa_series
L945
L946         # --- breakout features (常時寄与) ---
L947         # NEW_HIGH_20D: (終値 / 直近20日終値の最高値) - 1 → 0未満は0
L948         # VOL_RATIO_20D: 出来高(直近5日平均) / 出来高(直近20日平均)
L949         try:
L950             _px = px.copy()
L951             _vol = vol.copy() if vol is not None else None
L952             if _vol is None:
L953                 raise ValueError('volume data missing')
L954             _hi20 = _px.rolling(20, min_periods=10).max()
L955             _br = (_px / _hi20) - 1.0
L956             _new_high_20d = _br.iloc[-1].clip(lower=0)
L957             _vol5 = _vol.rolling(5, min_periods=3).mean()
L958             _vol20 = _vol.rolling(20, min_periods=10).mean()
L959             _vol_ratio_20d = (_vol5 / _vol20).iloc[-1]
L960             # Z化（NaNは保持系）→ df_z に整列
L961             df_z['NEW_HIGH_20D'] = robust_z_keepnan(pd.to_numeric(_new_high_20d, errors='coerce').reindex(df_z.index))
L962             df_z['VOL_RATIO_20D'] = robust_z_keepnan(pd.to_numeric(_vol_ratio_20d, errors='coerce').reindex(df_z.index))
L963         except Exception:
L964             # フォールバック（計算不能時は0寄与とする）
L965             df_z['NEW_HIGH_20D'] = 0.0
L966             df_z['VOL_RATIO_20D'] = 0.0
L967
L968         df_z['MOM_F'] = robust_z(
L969               0.30*df_z['RS']
L970             + 0.10*df_z['TR_str']
L971             + 0.15*df_z['RS_SLOPE_6W']
L972             + 0.15*df_z['RS_SLOPE_13W']
L973             + 0.10*df_z['MA200_SLOPE_5M']
L974             + 0.05*df_z['MA200_UP_STREAK_D']
L975             + 0.10*df_z['NEW_HIGH_20D']
L976             + 0.05*df_z['VOL_RATIO_20D']
L977         ).clip(-3.0, 3.0)
L978         df_z['VOL'] = robust_z(df['BETA'])
L979         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L980         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L981
L982         # df_z 全明細をページングしてログ出力（最小版）
L983         if getattr(cfg, "debug_mode", False):
L984             beta_debug_cols = []
L985             if isinstance(df, pd.DataFrame):
L986                 try:
L987                     beta_raw = df.get('BETA') if 'BETA' in df.columns else None
L988                     if beta_raw is not None:
L989                         beta_raw = pd.to_numeric(beta_raw, errors="coerce")
L990                         df_z['BETA_RAW'] = beta_raw.reindex(df_z.index)
L991                         df_z['BETA_Z'] = _plain_zscore_series(df_z['BETA_RAW'])
L992                         beta_debug_cols.extend(['BETA_RAW', 'BETA_Z'])
L993                 except Exception:
L994                     beta_debug_cols.clear()
L995             pd.set_option("display.max_columns", None)
L996             pd.set_option("display.max_colwidth", None)
L997             pd.set_option("display.width", None)
L998             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L999             n = len(df_z)
L1000             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1001             try:
L1002                 for i in range(0, n, page):
L1003                     j = min(i + page, n)
L1004                     try:
L1005                         chunk_str = df_z.iloc[i:j].to_string()
L1006                     except Exception:
L1007                         chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1008                     logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1009             finally:
L1010                 if beta_debug_cols:
L1011                     df_z.drop(columns=[c for c in beta_debug_cols if c in df_z.columns], inplace=True)
L1012             logger.info("=== df_z FULL DUMP end ===")
L1013
L1014         # === begin: BIO LOSS PENALTY =====================================
L1015         try:
L1016             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1017         except Exception:
L1018             penalty_z = 0.8
L1019
L1020         def _is_bio_like(t: str) -> bool:
L1021             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1022             sec = str(inf.get("sector", "")).lower()
L1023             ind = str(inf.get("industry", "")).lower()
L1024             if "health" not in sec:
L1025                 return False
L1026             keys = ("biotech", "biopharma", "phar
```