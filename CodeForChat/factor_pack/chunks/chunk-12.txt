```text
[:limit]:
L1379                     row = i.loc[t]
L1380                     parts = []
L1381                     if pd.notna(row.get('GROWTH_F')):
L1382                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1383                     raw_val = row.get('GROWTH_F_RAW')
L1384                     if pd.notna(raw_val):
L1385                         parts.append(f"GROWTH_F_RAW={raw_val:.3f}")
L1386                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1387                     if pd.notna(weight_val):
L1388                         parts.append(f"w={weight_val:.2f}")
L1389                     path_val = None
L1390                     try:
L1391                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1392                     except Exception:
L1393                         path_val = None
L1394                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1395                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1396                     if path_val:
L1397                         parts.append(f"PATH={path_val}")
L1398                     parts_json = None
L1399                     try:
L1400                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1401                     except Exception:
L1402                         parts_json = None
L1403                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1404                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1405                     if parts_json:
L1406                         parts.append(f"PARTS={parts_json}")
L1407                     if not parts:
L1408                         parts.append('no-data')
L1409                     print(f"Ticker: {t} | " + " ".join(parts))
L1410                 print()
L1411             except Exception as exc:
L1412                 print(f"[ERR] GRW debug dump failed: {exc}")
L1413
L1414         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1415             + 0.15*df_z['TR_str']
L1416             + 0.15*df_z['RS_SLOPE_6W']
L1417             + 0.15*df_z['RS_SLOPE_13W']
L1418             + 0.10*df_z['MA200_SLOPE_5M']
L1419             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1420         df_z['VOL'] = robust_z(df['BETA'])
L1421         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1422         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1423
L1424         _dump_dfz(
L1425             df=df,
L1426             df_z=df_z,
L1427             debug_mode=getattr(cfg, "debug_mode", False),
L1428         )
L1429         if getattr(cfg, "debug_mode", False):
L1430             log_grw_stats(df, df_z, logger)
L1431         save_factor_debug_csv(df, df_z)
L1432
L1433         # === begin: BIO LOSS PENALTY =====================================
L1434         try:
L1435             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1436         except Exception:
L1437             penalty_z = 0.8
L1438
L1439         def _is_bio_like(t: str) -> bool:
L1440             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1441             sec = str(inf.get("sector", "")).lower()
L1442             ind = str(inf.get("industry", "")).lower()
L1443             if "health" not in sec:
L1444                 return False
L1445             keys = ("biotech", "biopharma", "pharma")
L1446             return any(k in ind for k in keys)
L1447
L1448         tickers_s = pd.Index(df_z.index)
L1449         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1450         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1451         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1452
L1453         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1454             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1455             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1456         # === end: BIO LOSS PENALTY =======================================
L1457
L1458         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1459         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1460
L1461         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1462         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1463         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1464         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1465
L1466         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1467         # ① 全銘柄で G/D スコアを算出（unmasked）
L1468         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1469
L1470         d_comp = pd.concat({
L1471             'QAL': df_z['D_QAL'],
L1472             'YLD': df_z['D_YLD'],
L1473             'VOL': df_z['D_VOL_RAW'],
L1474             'TRD': df_z['D_TRD']
L1475         }, axis=1)
L1476         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1477         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1478         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1479
L1480         # ② テンプレ判定（既存ロジックそのまま）
L1481         mask = df['trend_template']
L1482         if not bool(mask.any()):
L1483             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1484                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1485                 (df.get('RS', np.nan) >= 0.08) &
L1486                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1487                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1488                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1489                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1490                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1491             df['trend_template'] = mask
L1492
L1493         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1494         g_score = g_score_all.loc[mask]
L1495         Scorer.g_score = g_score
L1496         df_z['GSC'] = g_score_all
L1497         df_z['DSC'] = d_score_all
L1498
L1499         try:
L1500             current = (pd.read_csv("current_tickers.csv")
L1501                   .iloc[:, 0]
L1502                   .str.upper()
L1503                   .tolist())
L1504         except FileNotFoundError:
L1505             warnings.warn("current_tickers.csv not found — bonus skipped")
L1506             current = []
L1507
L1508         mask_bonus = g_score.index.isin(current)
L1509         if mask_bonus.any():
L1510             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1511             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1512             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1513             sigma_g = g_score.std()
L1514             if pd.isna(sigma_g):
L1515                 sigma_g = 0.0
L1516             bonus_g = round(k * sigma_g, 3)
L1517             g_score.loc[mask_bonus] += bonus_g
L1518             Scorer.g_score = g_score
L1519             # 3) D 側も同様に σ の NaN をケア
L1520             sigma_d = d_score_all.std()
L1521             if pd.isna(sigma_d):
L1522                 sigma_d = 0.0
L1523             bonus_d = round(k * sigma_d, 3)
L1524             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1525
L1526         try:
L1527             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1528         except Exception:
L1529             pass
L1530
L1531         df_full = df.copy()
L1532         df_full_z = df_z.copy()
L1533
L1534         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1535         return FeatureBundle(df=df,
L1536             df_z=df_z,
L1537             g_score=g_score,
L1538             d_score_all=d_score_all,
L1539             missing_logs=pd.DataFrame(missing_logs),
L1540             df_full=df_full,
L1541             df_full_z=df_full_z,
L1542             scaler=None)
L1543
L1544 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1545     """
L1546     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1547     次の列を feature_df に追加する（index=ticker）。
L1548       - G_BREAKOUT_recent_5d : bool
L1549       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1550       - G_PULLBACK_recent_5d : bool
L1551       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1552       - G_PIVOT_price        : float
L1553     失敗しても例外は握り潰し、既存処理を阻害しない。
L1554     """
L1555     try:
L1556         px   = bundle.px                      # 終値 DataFrame
L1557         hi   = bundle.data['High']
L1558         lo   = bundle.data['Low']
L1559         vol  = bundle.data['Volume']
L1560         bench= bundle.spx                     # ベンチマーク Series
L1561
L1562         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1563         g_universe = getattr(self_obj, "g_universe", None)
L1564         if g_universe is None:
L1565             try:
L1566                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1567             except Exception:
L1568                 g_universe = list(feature_df.index)
L1569         if not g_universe:
L1570             return feature_df
L1571
L1572         # 指標
L1573         px = px.ffill(limit=2)
L1574         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1575         ma50  = px[g_universe].rolling(50).mean()
L1576         ma150 = px[g_universe].rolling(150).mean()
L1577         ma200 = px[g_universe].rolling(200).mean()
L1578         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1579         vol20 = vol[g_universe].rolling(20).mean()
L1580         vol50 = vol[g_universe].rolling(50).mean()
L1581
L1582         # トレンドテンプレート合格
L1583         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1584                             & (ma150 > ma200) & (ma200.diff() > 0)
L1585
L1586         # 汎用ピボット：直近65営業日の高値（当日除外）
L1587         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1588
L1589         # 相対力：年内高値更新
L1590         bench_aligned = bench.reindex(px.index).ffill()
L1591         rs = px[g_universe].div(bench_aligned, axis=0)
L1592         rs_high = rs.rolling(252).max().shift(1)
L1593
L1594         # ブレイクアウト「発生日」：条件立ち上がり
L1595         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1596                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1597         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1598
L1599         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1600         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1601         volume_dryup = (vol20 / vol50) <= 1.0
L1602         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1603         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1604         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1605
L1606         # 直近N営業日内の発火 / 最終発生日
L1607         rows = []
L1608         for t in g_universe:
L1609             def _recent_and_date(s, win):
L1610                 sw = s[t].iloc[-win:]
L1611                 if sw.any():
L1612                     d = sw[sw].index[-1]
L1613                     return True, d.strftime("%Y-%m-%d")
L1614                 return False, ""
L1615             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1616             pb_recent, pb_date 
```