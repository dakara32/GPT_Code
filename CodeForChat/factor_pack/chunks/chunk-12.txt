```text
get('GROWTH_F')):
L1151                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1152                     raw_val = grw_raw.get(t) if isinstance(grw_raw, pd.Series) else np.nan
L1153                     if pd.notna(raw_val):
L1154                         parts.append(f"GRW_FLEX_SCORE={raw_val:.3f}")
L1155                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1156                     if pd.notna(weight_val):
L1157                         parts.append(f"w={weight_val:.2f}")
L1158                     path_val = None
L1159                     try:
L1160                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1161                     except Exception:
L1162                         path_val = None
L1163                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1164                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1165                     if path_val:
L1166                         parts.append(f"PATH={path_val}")
L1167                     parts_json = None
L1168                     try:
L1169                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1170                     except Exception:
L1171                         parts_json = None
L1172                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1173                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1174                     if parts_json:
L1175                         parts.append(f"PARTS={parts_json}")
L1176                     if not parts:
L1177                         parts.append('no-data')
L1178                     print(f"Ticker: {t} | " + " ".join(parts))
L1179                 print()
L1180             except Exception as exc:
L1181                 print(f"[ERR] GRW debug dump failed: {exc}")
L1182
L1183         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1184             + 0.15*df_z['TR_str']
L1185             + 0.15*df_z['RS_SLOPE_6W']
L1186             + 0.15*df_z['RS_SLOPE_13W']
L1187             + 0.10*df_z['MA200_SLOPE_5M']
L1188             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1189         df_z['VOL'] = robust_z(df['BETA'])
L1190         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1191         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1192
L1193         # df_z 全明細をページングしてログ出力（最小版）
L1194         if getattr(cfg, "debug_mode", False):
L1195             pd.set_option("display.max_columns", None)
L1196             pd.set_option("display.max_colwidth", None)
L1197             pd.set_option("display.width", None)
L1198             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L1199             n = len(df_z)
L1200             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1201             for i in range(0, n, page):
L1202                 j = min(i + page, n)
L1203                 try:
L1204                     chunk_str = df_z.iloc[i:j].to_string()
L1205                 except Exception:
L1206                     chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1207                 logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1208             logger.info("=== df_z FULL DUMP end ===")
L1209
L1210         # === begin: BIO LOSS PENALTY =====================================
L1211         try:
L1212             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1213         except Exception:
L1214             penalty_z = 0.8
L1215
L1216         def _is_bio_like(t: str) -> bool:
L1217             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1218             sec = str(inf.get("sector", "")).lower()
L1219             ind = str(inf.get("industry", "")).lower()
L1220             if "health" not in sec:
L1221                 return False
L1222             keys = ("biotech", "biopharma", "pharma")
L1223             return any(k in ind for k in keys)
L1224
L1225         tickers_s = pd.Index(df_z.index)
L1226         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1227         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1228         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1229
L1230         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1231             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1232             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1233         # === end: BIO LOSS PENALTY =======================================
L1234
L1235         assert not any(c.endswith("_RAW") for c in df_z.columns)
L1236         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L1237             assert c not in df_z.columns
L1238
L1239         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1240         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1241
L1242         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1243         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1244         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1245         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1246
L1247         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1248         # ① 全銘柄で G/D スコアを算出（unmasked）
L1249         g_score_all = _as_numeric_series(df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1))
L1250
L1251         d_comp = pd.concat({
L1252             'QAL': df_z['D_QAL'],
L1253             'YLD': df_z['D_YLD'],
L1254             'VOL': df_z['D_VOL_RAW'],
L1255             'TRD': df_z['D_TRD']
L1256         }, axis=1)
L1257         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1258         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1259         d_score_all = _as_numeric_series(d_comp.mul(dw, axis=1).sum(axis=1))
L1260
L1261         # ② テンプレ判定（既存ロジックそのまま）
L1262         mask = df['trend_template']
L1263         if not bool(mask.any()):
L1264             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1265                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1266                 (df.get('RS', np.nan) >= 0.08) &
L1267                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1268                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1269                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1270                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1271                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1272             df['trend_template'] = mask
L1273
L1274         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1275         g_score = _as_numeric_series(g_score_all.loc[mask])
L1276         Scorer.g_score = g_score
L1277         df_z['GSC'] = g_score_all
L1278         df_z['DSC'] = d_score_all
L1279
L1280         try:
L1281             current = (pd.read_csv("current_tickers.csv")
L1282                   .iloc[:, 0]
L1283                   .str.upper()
L1284                   .tolist())
L1285         except FileNotFoundError:
L1286             warnings.warn("current_tickers.csv not found — bonus skipped")
L1287             current = []
L1288
L1289         mask_bonus = g_score.index.isin(current)
L1290         if mask_bonus.any():
L1291             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1292             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1293             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1294             sigma_g = g_score.std()
L1295             if pd.isna(sigma_g):
L1296                 sigma_g = 0.0
L1297             bonus_g = round(k * sigma_g, 3)
L1298             g_score.loc[mask_bonus] += bonus_g
L1299             Scorer.g_score = g_score
L1300             # 3) D 側も同様に σ の NaN をケア
L1301             sigma_d = d_score_all.std()
L1302             if pd.isna(sigma_d):
L1303                 sigma_d = 0.0
L1304             bonus_d = round(k * sigma_d, 3)
L1305             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1306
L1307         try:
L1308             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1309         except Exception:
L1310             pass
L1311
L1312         df_full = df.copy()
L1313         df_full_z = df_z.copy()
L1314
L1315         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1316         return FeatureBundle(df=df,
L1317             df_z=df_z,
L1318             g_score=g_score,
L1319             d_score_all=d_score_all,
L1320             missing_logs=pd.DataFrame(missing_logs),
L1321             df_full=df_full,
L1322             df_full_z=df_full_z,
L1323             scaler=None)
L1324
L1325 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1326     """
L1327     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1328     次の列を feature_df に追加する（index=ticker）。
L1329       - G_BREAKOUT_recent_5d : bool
L1330       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1331       - G_PULLBACK_recent_5d : bool
L1332       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1333       - G_PIVOT_price        : float
L1334     失敗しても例外は握り潰し、既存処理を阻害しない。
L1335     """
L1336     try:
L1337         px   = bundle.px                      # 終値 DataFrame
L1338         hi   = bundle.data['High']
L1339         lo   = bundle.data['Low']
L1340         vol  = bundle.data['Volume']
L1341         bench= bundle.spx                     # ベンチマーク Series
L1342
L1343         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1344         g_universe = getattr(self_obj, "g_universe", None)
L1345         if g_universe is None:
L1346             try:
L1347                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1348             except Exception:
L1349                 g_universe = list(feature_df.index)
L1350         if not g_universe:
L1351             return feature_df
L1352
L1353         # 指標
L1354         px = px.ffill(limit=2)
L1355         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1356         ma50  = px[g_universe].rolling(50).mean()
L1357         ma150 = px[g_universe].rolling(150).mean()
L1358         ma200 = px[g_universe].rolling(200).mean()
L1359         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1360         vol20 = vol[g_universe].rolling(20).mean()
L1361         vol50 = vol[g_universe].rolling(50).mean()
L1362
L1363         # トレンドテンプレート合格
L1364         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1365                             & (ma150 > ma200) & (ma200.diff() > 0)
L1366
L1367         # 汎用ピボット：直近65営業日の高値（当日除外）
L1368         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1369
L1370         # 相対力：年内高値更新
L1371         bench_aligned = bench.reindex(px.index).ffill()
L1372         rs = px[g_universe].div(bench_aligned, axis=0)
L1373         rs_high = rs.rolling(252).max().shift(1)
L1374
L1375         # ブレイクアウト「発生日」：条件立ち上がり
L1376         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1377                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1378         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1379
L1380         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1381         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1382         volume_dryup = (vol20 / vol50) <= 1.0

```