```text
nalty_z > 0:
L954             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L955             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L956         # === end: BIO LOSS PENALTY =======================================
L957
L958         _debug_only_cols = [c for c in df_z.columns if c.endswith("_RAW")]
L959         _no_score_cols = ["DIV_TTM_PS", "DIV_YOY", "LOW52PCT25_EXCESS", "MA50_OVER_200"]
L960         _drop_cols = [c for c in (_debug_only_cols + _no_score_cols) if c in df_z.columns]
L961         if _drop_cols:
L962             df_z = df_z.drop(columns=_drop_cols, errors="ignore")
L963
L964         assert not any(c.endswith("_RAW") for c in df_z.columns)
L965         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L966             assert c not in df_z.columns
L967
L968         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L969         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L970
L971         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L972         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L973         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L974         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L975
L976         # --- 重みは cfg を優先（外部があればそれを使用） ---
L977         # ① 全銘柄で G/D スコアを算出（unmasked）
L978         g_weights = pd.Series(cfg.weights.g, dtype=float)
L979         need_g = ["GROWTH_F", "MOM"]
L980         dbg_cols = ["GROWTH_F", "MOM", "VOL"]
L981         if all(c in df_z.columns for c in need_g):
L982             mask_g = df_z[need_g].notna().all(axis=1)
L983         else:
L984             mask_g = pd.Series(False, index=df_z.index, dtype=bool)
L985         for c in dbg_cols:
L986             if c in df_z.columns:
L987                 df_z[f"DBGRW.{c}"] = df_z[c]
L988         df_fill_g = df_z.reindex(columns=g_weights.index, fill_value=np.nan).copy()
L989         for c in df_fill_g.columns:
L990             if c not in need_g:
L991                 df_fill_g[c] = df_fill_g[c].fillna(0)
L992         g_score_all = _as_numeric_series(
L993             df_fill_g.mul(g_weights.reindex(df_fill_g.columns)).sum(axis=1, skipna=False)
L994         )
L995         g_score_all = g_score_all.where(mask_g)
L996
L997         d_comp = pd.concat({
L998             'QAL': df_z['D_QAL'],
L999             'YLD': df_z['D_YLD'],
L1000             'VOL': df_z['D_VOL_RAW'],
L1001             'TRD': df_z['D_TRD']
L1002         }, axis=1)
L1003         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1004         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1005         need_d_candidates = ["VOL", "QAL"]
L1006         mask_d = pd.Series(True, index=d_comp.index, dtype=bool)
L1007         for c in need_d_candidates:
L1008             if c in d_comp.columns:
L1009                 mask_d &= d_comp[c].notna()
L1010             else:
L1011                 mask_d &= False
L1012         df_fill_d = d_comp.copy()
L1013         for c in df_fill_d.columns:
L1014             if c not in need_d_candidates:
L1015                 df_fill_d[c] = df_fill_d[c].fillna(0)
L1016         d_score_all = _as_numeric_series(
L1017             df_fill_d.mul(dw, axis=1).sum(axis=1, skipna=False)
L1018         )
L1019         d_score_all = d_score_all.where(mask_d)
L1020
L1021         # ② テンプレ判定（既存ロジックそのまま）
L1022         mask = df['trend_template']
L1023         if not bool(mask.any()):
L1024             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1025                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1026                 (df.get('RS', np.nan) >= 0.08) &
L1027                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1028                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1029                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1030                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1031                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1032             df['trend_template'] = mask
L1033
L1034         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1035         g_score = _as_numeric_series(g_score_all.loc[mask])
L1036         Scorer.g_score = g_score
L1037         df_z['GSC'] = g_score_all
L1038         df_z['DSC'] = d_score_all
L1039
L1040         try:
L1041             current = (pd.read_csv("current_tickers.csv")
L1042                   .iloc[:, 0]
L1043                   .str.upper()
L1044                   .tolist())
L1045         except FileNotFoundError:
L1046             warnings.warn("current_tickers.csv not found — bonus skipped")
L1047             current = []
L1048
L1049         mask_bonus = g_score.index.isin(current)
L1050         if mask_bonus.any():
L1051             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1052             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1053             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1054             sigma_g = g_score.std()
L1055             if pd.isna(sigma_g):
L1056                 sigma_g = 0.0
L1057             bonus_g = round(k * sigma_g, 3)
L1058             g_score.loc[mask_bonus] += bonus_g
L1059             Scorer.g_score = g_score
L1060             # 3) D 側も同様に σ の NaN をケア
L1061             sigma_d = d_score_all.std()
L1062             if pd.isna(sigma_d):
L1063                 sigma_d = 0.0
L1064             bonus_d = round(k * sigma_d, 3)
L1065             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1066
L1067         try:
L1068             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1069         except Exception:
L1070             pass
L1071
L1072         df_full = df.copy()
L1073         df_full_z = df_z.copy()
L1074
L1075         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1076         missing_logs_df = getattr(ib, "missing_logs", pd.DataFrame())
L1077         if not isinstance(missing_logs_df, pd.DataFrame):
L1078             try:
L1079                 missing_logs_df = pd.DataFrame(missing_logs_df)
L1080             except Exception:
L1081                 missing_logs_df = pd.DataFrame()
L1082
L1083         return FeatureBundle(df=df,
L1084             df_z=df_z,
L1085             g_score=g_score,
L1086             d_score_all=d_score_all,
L1087             missing_logs=missing_logs_df,
L1088             df_full=df_full,
L1089             df_full_z=df_full_z,
L1090             scaler=None)
L1091
L1092 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1093     """以前はブレイクアウト/押し目反発フラグを付与していたが、現在は無効化。"""
L1094     return feature_df
L1095
L1096
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43           SEC_CONTACT_EMAIL: ${{ secrets.SEC_CONTACT_EMAIL }}
L44         run: python factor.py
L45       - name: Commit current_tickers.csv if changed
L46         run: |
L47           git config user.name "github-actions[bot]"
L48           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
L49           if [[ -n "$(git status --porcelain current_tickers.csv)" ]]; then
L50             git add current_tickers.csv
L51             git commit -m "chore: update current_tickers.csv bucket ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"
L52             git push
L53           else
L54             echo "No changes in current_tickers.csv"
L55           fi
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## モード判定（コンボ：先導株TS × ブレッドス）
L18
L19 **考え方：** *悪化はゆるく（OR）、回復は厳しく（AND）*
L20
L21 ### ① 先導株TSシグナル（Growthのみ）
L22 - 対象（Growthの定義）：当日保有銘柄のうち **β ≥ -0.6** を Growth とみなす（Defenseは無視）
L23 - 判定：直近60日高値からモード別基本TS幅（NORMAL:-15% / CAUTION:-13% / EMERG:-10%）以上の下落を「TS抵触」とみなす
L24 - 集計：直近5営業日のユニーク抵触銘柄数
L25   - 8銘柄以上 → ①=EMERG
L26   - 6銘柄以上 → ①=CAUTION
L27   - それ未満 → ①=NORMAL
L28 - 補足：同一日に複数回実行した場合は、**同日上書き**で管理
L29
L30 ### ② ブレッドス（trend_template 合格本数）
L31 - current+candidate 全体で trend_template 条件を満たした銘柄数（基準 N_G=12）
L32 - 閾値：過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L33   - 緊急入り: max(q05, 12本)
L34   - 緊急解除: max(q20, 18本)
L35   - 通常復帰: max(q60, 36本)
L36 - ヒステリシス：前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L37
L38 ### コンボルール
L39 - **悪化（ダウングレード）**：
L40   final_mode = max(mode①, mode②)
L41   - 例：①=CAUTION, ②=NORMAL → final=CAUTION
L42   - 例：①=EMERG, ②=CAUTION → final=EMERG
L43
L44 - **回復（アップグレード）**：
L45   final_mode を1段階下げるには、mode① と mode② がともに下位モードに揃った場合のみ
L46   - 例：EMERG→CAUTION は ①=CAUTION **かつ** ②=CAUTION
L47   - 例：CAUTION→NORMAL は ①=NORMAL **かつ** ②=NORMAL
L48
L49 > 直感フレーズ：**「悪化はどちらか赤で赤、回復は両方青で青」**
L50
L51 ---
L52
L53 ## モード別設定（現金・ドリフト・保有数）
L54
L55 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 | Growth枠数 | Defense枠数 | 補足 |
L56 |--------------|----------|-------------------|----------|------------|-------------|------|
L57 | **NORMAL**   | 10%      | 12%               | -15%     | 12         | 8           | フル20銘柄（現金化枠なし） |
L58 | **CAUTION**  | 20%      | 14%               | -13%     | 10         | 8           | Gを2枠外し=現金化10% |
L59 | **EMERG**    | 30%      | ドリフト売買停止 | -10%     | 8          | 8           | Gを4枠外し=現金化20% |
L60
L61 - 含み益到達時のTSタイト化：+30% → -3pt、+60% → -6pt、+100% → -8pt
L62 - 含み益 +100% 達成時は50%を利確し、残りはフリーポジションとして -15%TS で保有継続
L63 - TS発動後のクールダウンは廃止（翌日以降すぐに再IN可）
L64
L65 ---
L66
L67 ## 新規買付
L68 - **新規INは等分比率（=5%）の半分まで**を上限。  
L69 - 追加補充や半戻し買付も同じ上限に従う。
L70
L71 ---
L72
L73 ## 半戻し（リバランス）
L74 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L75 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L76 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L77
L78 ---
L79
L80 ## モード移行の実務手順
L81 - モードが変わったら、**MMF≒現金**として扱い、Growth枠数だけ調整：  
L82   1. **Gを削る**（CAUTION/EMERG）：⭐️低スコアのGから順に外し、`current_tickers.csv` から行削除（=現金化）。  
L83   2. **現金として保持**。  
L84   3. **NORMAL復帰時の補充**：`current_tickers.csv` に銘柄を追加（スコア上位から）。以降は日次ドリフト/TSルールに従う。  
L85 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて均等比率を再計算。
L86
L87 ---
L88
L89 ## 入替銘柄選定
L90 - **ファクター分散最適化手法を用いて日次でスコア集計**し、**スコア上位からIN/OUT**を決定。  
L91 - 参考：Oxfordキャピタル、Alpha Investor、Motley Fool、moomooスクリーニング等。  
L92 - 年間NISA枠はGrowth群から低ボラ銘柄を選定し利用（長期保持に固執しな
```