```text
                     parts.append(f"PARTS={parts_json}")
L1343                     if not parts:
L1344                         parts.append('no-data')
L1345                     print(f"Ticker: {t} | " + " ".join(parts))
L1346                 print()
L1347             except Exception as exc:
L1348                 print(f"[ERR] GRW debug dump failed: {exc}")
L1349
L1350         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1351             + 0.15*df_z['TR_str']
L1352             + 0.15*df_z['RS_SLOPE_6W']
L1353             + 0.15*df_z['RS_SLOPE_13W']
L1354             + 0.10*df_z['MA200_SLOPE_5M']
L1355             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1356         df_z['VOL'] = robust_z(df['BETA'])
L1357         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1358         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1359
L1360         _dump_dfz(
L1361             df=df,
L1362             df_z=df_z,
L1363             debug_mode=getattr(cfg, "debug_mode", False),
L1364             weight_dict=getattr(getattr(cfg, "weights", None), "g", None),
L1365         )
L1366         if getattr(cfg, "debug_mode", False):
L1367             log_grw_stats(df, df_z, logger)
L1368         save_factor_debug_csv(df, df_z)
L1369
L1370         # === begin: BIO LOSS PENALTY =====================================
L1371         try:
L1372             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1373         except Exception:
L1374             penalty_z = 0.8
L1375
L1376         def _is_bio_like(t: str) -> bool:
L1377             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1378             sec = str(inf.get("sector", "")).lower()
L1379             ind = str(inf.get("industry", "")).lower()
L1380             if "health" not in sec:
L1381                 return False
L1382             keys = ("biotech", "biopharma", "pharma")
L1383             return any(k in ind for k in keys)
L1384
L1385         tickers_s = pd.Index(df_z.index)
L1386         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1387         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1388         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1389
L1390         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1391             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1392             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1393         # === end: BIO LOSS PENALTY =======================================
L1394
L1395         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1396         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1397
L1398         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1399         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1400         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1401         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1402
L1403         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1404         # ① 全銘柄で G/D スコアを算出（unmasked）
L1405         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L1406
L1407         d_comp = pd.concat({
L1408             'QAL': df_z['D_QAL'],
L1409             'YLD': df_z['D_YLD'],
L1410             'VOL': df_z['D_VOL_RAW'],
L1411             'TRD': df_z['D_TRD']
L1412         }, axis=1)
L1413         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1414         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1415         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L1416
L1417         # ② テンプレ判定（既存ロジックそのまま）
L1418         mask = df['trend_template']
L1419         if not bool(mask.any()):
L1420             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1421                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1422                 (df.get('RS', np.nan) >= 0.08) &
L1423                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1424                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1425                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1426                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1427                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1428             df['trend_template'] = mask
L1429
L1430         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1431         g_score = g_score_all.loc[mask]
L1432         Scorer.g_score = g_score
L1433         df_z['GSC'] = g_score_all
L1434         df_z['DSC'] = d_score_all
L1435
L1436         try:
L1437             current = (pd.read_csv("current_tickers.csv")
L1438                   .iloc[:, 0]
L1439                   .str.upper()
L1440                   .tolist())
L1441         except FileNotFoundError:
L1442             warnings.warn("current_tickers.csv not found — bonus skipped")
L1443             current = []
L1444
L1445         mask_bonus = g_score.index.isin(current)
L1446         if mask_bonus.any():
L1447             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1448             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1449             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1450             sigma_g = g_score.std()
L1451             if pd.isna(sigma_g):
L1452                 sigma_g = 0.0
L1453             bonus_g = round(k * sigma_g, 3)
L1454             g_score.loc[mask_bonus] += bonus_g
L1455             Scorer.g_score = g_score
L1456             # 3) D 側も同様に σ の NaN をケア
L1457             sigma_d = d_score_all.std()
L1458             if pd.isna(sigma_d):
L1459                 sigma_d = 0.0
L1460             bonus_d = round(k * sigma_d, 3)
L1461             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1462
L1463         try:
L1464             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1465         except Exception:
L1466             pass
L1467
L1468         df_full = df.copy()
L1469         df_full_z = df_z.copy()
L1470
L1471         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1472         return FeatureBundle(df=df,
L1473             df_z=df_z,
L1474             g_score=g_score,
L1475             d_score_all=d_score_all,
L1476             missing_logs=pd.DataFrame(missing_logs),
L1477             df_full=df_full,
L1478             df_full_z=df_full_z,
L1479             scaler=None)
L1480
L1481 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1482     """
L1483     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1484     次の列を feature_df に追加する（index=ticker）。
L1485       - G_BREAKOUT_recent_5d : bool
L1486       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1487       - G_PULLBACK_recent_5d : bool
L1488       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1489       - G_PIVOT_price        : float
L1490     失敗しても例外は握り潰し、既存処理を阻害しない。
L1491     """
L1492     try:
L1493         px   = bundle.px                      # 終値 DataFrame
L1494         hi   = bundle.data['High']
L1495         lo   = bundle.data['Low']
L1496         vol  = bundle.data['Volume']
L1497         bench= bundle.spx                     # ベンチマーク Series
L1498
L1499         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1500         g_universe = getattr(self_obj, "g_universe", None)
L1501         if g_universe is None:
L1502             try:
L1503                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1504             except Exception:
L1505                 g_universe = list(feature_df.index)
L1506         if not g_universe:
L1507             return feature_df
L1508
L1509         # 指標
L1510         px = px.ffill(limit=2)
L1511         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L1512         ma50  = px[g_universe].rolling(50).mean()
L1513         ma150 = px[g_universe].rolling(150).mean()
L1514         ma200 = px[g_universe].rolling(200).mean()
L1515         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L1516         vol20 = vol[g_universe].rolling(20).mean()
L1517         vol50 = vol[g_universe].rolling(50).mean()
L1518
L1519         # トレンドテンプレート合格
L1520         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L1521                             & (ma150 > ma200) & (ma200.diff() > 0)
L1522
L1523         # 汎用ピボット：直近65営業日の高値（当日除外）
L1524         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L1525
L1526         # 相対力：年内高値更新
L1527         bench_aligned = bench.reindex(px.index).ffill()
L1528         rs = px[g_universe].div(bench_aligned, axis=0)
L1529         rs_high = rs.rolling(252).max().shift(1)
L1530
L1531         # ブレイクアウト「発生日」：条件立ち上がり
L1532         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L1533                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L1534         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L1535
L1536         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L1537         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L1538         volume_dryup = (vol20 / vol50) <= 1.0
L1539         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L1540         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L1541         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L1542
L1543         # 直近N営業日内の発火 / 最終発生日
L1544         rows = []
L1545         for t in g_universe:
L1546             def _recent_and_date(s, win):
L1547                 sw = s[t].iloc[-win:]
L1548                 if sw.any():
L1549                     d = sw[sw].index[-1]
L1550                     return True, d.strftime("%Y-%m-%d")
L1551                 return False, ""
L1552             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L1553             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L1554             rows.append((t, {
L1555                 "G_BREAKOUT_recent_5d": br_recent,
L1556                 "G_BREAKOUT_last_date": br_date,
L1557                 "G_PULLBACK_recent_5d": pb_recent,
L1558                 "G_PULLBACK_last_date": pb_date,
L1559                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L1560             }))
L1561         flags = pd.DataFrame({k: v for k, v in rows}).T
L1562
L1563         # 列を作成・上書き
L1564         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L1565         for c in cols:
L1566             if c not in feature_df.columns:
L1567                 feature_df[c] = np.nan
L1568         feature_df.loc[flags.index, flags.columns] = flags
L1569
L1570     except Exception:
L1571         pass
L1572     return feature_df
L1573
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       
```