```text
MIX", "0.7"))
L902         except Exception:
L903             mix = 0.7
L904         if not np.isfinite(mix):
L905             mix = 0.7
L906         mix = float(np.clip(mix, 0.0, 1.0))
L907
L908         weights_q: list[float] = []
L909         weights_a: list[float] = []
L910         grw_mix: list[float] = []
L911         for idx in df.index:
L912             q_val = grw_q_z.get(idx, np.nan)
L913             a_val = grw_a_z.get(idx, np.nan)
L914             q_ok = np.isfinite(q_val)
L915             a_ok = np.isfinite(a_val)
L916             if q_ok and a_ok:
L917                 wq, wa = mix, 1.0 - mix
L918             elif q_ok:
L919                 wq, wa = 1.0, 0.0
L920             elif a_ok:
L921                 wq, wa = 0.0, 1.0
L922             else:
L923                 wq = wa = np.nan
L924                 grw_mix.append(np.nan)
L925                 weights_q.append(wq)
L926                 weights_a.append(wa)
L927                 continue
L928             weights_q.append(wq)
L929             weights_a.append(wa)
L930             grw_mix.append(q_val * wq + a_val * wa)
L931
L932         wq_series = pd.Series(weights_q, index=df.index, dtype=float)
L933         wa_series = pd.Series(weights_a, index=df.index, dtype=float)
L934         grw_series = pd.Series(grw_mix, index=df.index, dtype=float).clip(-3.0, 3.0)
L935
L936         df_z['GROWTH_F'] = grw_series
L937         df_z['GRW_FLEX_WEIGHT'] = 1.0  # 現状は固定（SECの可用性に依らず）
L938
L939         if 'GRW_Q_RAW' in df.columns:
L940             df_z['GRW_Q_DBG'] = pd.Series(df['GRW_Q_RAW'], index=df.index, dtype=float)
L941         if 'GRW_A_RAW' in df.columns:
L942             df_z['GRW_A_DBG'] = pd.Series(df['GRW_A_RAW'], index=df.index, dtype=float)
L943         df_z['GRW_WQ_DBG'] = wq_series
L944         df_z['GRW_WA_DBG'] = wa_series
L945
L946         # --- breakout features (常時寄与) ---
L947         # NEW_HIGH_20D: (終値 / 直近20日終値の最高値) - 1 → 0未満は0
L948         # VOL_RATIO_20D: 出来高(直近5日平均) / 出来高(直近20日平均)
L949         try:
L950             _px = px.copy()
L951             _vol = vol.copy() if vol is not None else None
L952             if _vol is None:
L953                 raise ValueError('volume data missing')
L954             _hi20 = _px.rolling(20, min_periods=10).max()
L955             _br = (_px / _hi20) - 1.0
L956             _new_high_20d = _br.iloc[-1].clip(lower=0)
L957             _vol5 = _vol.rolling(5, min_periods=3).mean()
L958             _vol20 = _vol.rolling(20, min_periods=10).mean()
L959             _vol_ratio_20d = (_vol5 / _vol20).iloc[-1]
L960             # Z化（NaNは保持系）→ df_z に整列
L961             df_z['NEW_HIGH_20D'] = robust_z_keepnan(pd.to_numeric(_new_high_20d, errors='coerce').reindex(df_z.index))
L962             df_z['VOL_RATIO_20D'] = robust_z_keepnan(pd.to_numeric(_vol_ratio_20d, errors='coerce').reindex(df_z.index))
L963         except Exception:
L964             # フォールバック（計算不能時は0寄与とする）
L965             df_z['NEW_HIGH_20D'] = 0.0
L966             df_z['VOL_RATIO_20D'] = 0.0
L967
L968         df_z['MOM_F'] = robust_z(
L969               0.30*df_z['RS']
L970             + 0.10*df_z['TR_str']
L971             + 0.15*df_z['RS_SLOPE_6W']
L972             + 0.15*df_z['RS_SLOPE_13W']
L973             + 0.10*df_z['MA200_SLOPE_5M']
L974             + 0.05*df_z['MA200_UP_STREAK_D']
L975             + 0.10*df_z['NEW_HIGH_20D']
L976             + 0.05*df_z['VOL_RATIO_20D']
L977         ).clip(-3.0, 3.0)
L978         df_z['VOL'] = robust_z(df['BETA'])
L979         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L980         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L981
L982         # df_z 全明細をページングしてログ出力（最小版）
L983         if getattr(cfg, "debug_mode", False):
L984             beta_debug_cols = []
L985             if isinstance(df, pd.DataFrame):
L986                 try:
L987                     beta_raw = df.get('BETA') if 'BETA' in df.columns else None
L988                     if beta_raw is not None:
L989                         beta_raw = pd.to_numeric(beta_raw, errors="coerce")
L990                         df_z['BETA_RAW'] = beta_raw.reindex(df_z.index)
L991                         df_z['BETA_Z'] = _plain_zscore_series(df_z['BETA_RAW'])
L992                         beta_debug_cols.extend(['BETA_RAW', 'BETA_Z'])
L993                 except Exception:
L994                     beta_debug_cols.clear()
L995             pd.set_option("display.max_columns", None)
L996             pd.set_option("display.max_colwidth", None)
L997             pd.set_option("display.width", None)
L998             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L999             n = len(df_z)
L1000             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1001             try:
L1002                 for i in range(0, n, page):
L1003                     j = min(i + page, n)
L1004                     try:
L1005                         chunk_str = df_z.iloc[i:j].to_string()
L1006                     except Exception:
L1007                         chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1008                     logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1009             finally:
L1010                 if beta_debug_cols:
L1011                     df_z.drop(columns=[c for c in beta_debug_cols if c in df_z.columns], inplace=True)
L1012             logger.info("=== df_z FULL DUMP end ===")
L1013
L1014         # === begin: BIO LOSS PENALTY =====================================
L1015         try:
L1016             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1017         except Exception:
L1018             penalty_z = 0.8
L1019
L1020         def _is_bio_like(t: str) -> bool:
L1021             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1022             sec = str(inf.get("sector", "")).lower()
L1023             ind = str(inf.get("industry", "")).lower()
L1024             if "health" not in sec:
L1025                 return False
L1026             keys = ("biotech", "biopharma", "pharma")
L1027             return any(k in ind for k in keys)
L1028
L1029         tickers_s = pd.Index(df_z.index)
L1030         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1031         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1032         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1033
L1034         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1035             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1036             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1037         # === end: BIO LOSS PENALTY =======================================
L1038
L1039         _debug_only_cols = [c for c in df_z.columns if c.endswith("_RAW")]
L1040         _no_score_cols = ["DIV_TTM_PS", "DIV_YOY", "LOW52PCT25_EXCESS", "MA50_OVER_200"]
L1041         _drop_cols = [c for c in (_debug_only_cols + _no_score_cols) if c in df_z.columns]
L1042         if _drop_cols:
L1043             df_z = df_z.drop(columns=_drop_cols, errors="ignore")
L1044
L1045         assert not any(c.endswith("_RAW") for c in df_z.columns)
L1046         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L1047             assert c not in df_z.columns
L1048
L1049         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1050         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1051
L1052         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1053         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1054         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1055         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1056
L1057         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1058         # ① 全銘柄で G/D スコアを算出（unmasked）
L1059         g_weights = pd.Series(cfg.weights.g, dtype=float)
L1060         need_g = ["GROWTH_F", "MOM"]
L1061         dbg_cols = ["GROWTH_F", "MOM", "VOL"]
L1062         if all(c in df_z.columns for c in need_g):
L1063             mask_g = df_z[need_g].notna().all(axis=1)
L1064         else:
L1065             mask_g = pd.Series(False, index=df_z.index, dtype=bool)
L1066         for c in dbg_cols:
L1067             if c in df_z.columns:
L1068                 df_z[f"DBGRW.{c}"] = df_z[c]
L1069         df_fill_g = df_z.reindex(columns=g_weights.index, fill_value=np.nan).copy()
L1070         for c in df_fill_g.columns:
L1071             if c not in need_g:
L1072                 df_fill_g[c] = df_fill_g[c].fillna(0)
L1073         g_score_all = _as_numeric_series(
L1074             df_fill_g.mul(g_weights.reindex(df_fill_g.columns)).sum(axis=1, skipna=False)
L1075         )
L1076         g_score_all = g_score_all.where(mask_g)
L1077
L1078         d_comp = pd.concat({
L1079             'QAL': df_z['D_QAL'],
L1080             'YLD': df_z['D_YLD'],
L1081             'VOL': df_z['D_VOL_RAW'],
L1082             'TRD': df_z['D_TRD']
L1083         }, axis=1)
L1084         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1085         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1086         need_d_candidates = ["VOL", "QAL"]
L1087         mask_d = pd.Series(True, index=d_comp.index, dtype=bool)
L1088         for c in need_d_candidates:
L1089             if c in d_comp.columns:
L1090                 mask_d &= d_comp[c].notna()
L1091             else:
L1092                 mask_d &= False
L1093         df_fill_d = d_comp.copy()
L1094         for c in df_fill_d.columns:
L1095             if c not in need_d_candidates:
L1096                 df_fill_d[c] = df_fill_d[c].fillna(0)
L1097         d_score_all = _as_numeric_series(
L1098             df_fill_d.mul(dw, axis=1).sum(axis=1, skipna=False)
L1099         )
L1100         d_score_all = d_score_all.where(mask_d)
L1101
L1102         # ② テンプレ判定（既存ロジックそのまま）
L1103         mask = df['trend_template']
L1104         if not bool(mask.any()):
L1105             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1106                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1107                 (df.get('RS', np.nan) >= 0.08) &
L1108                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1109                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1110                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1111                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1112                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1113             df['trend_template'] = mask
L1114
L1115         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1116         g_score = _as_numeric_series(g_score_all.loc[mask])
L1117         Scorer.g_score = g_score
L1118         df_z['GSC'] = g_score_all
L1119         df_z['DSC'] = d_score_all
L1120
L1121         try:
L1122             current = (pd.read_csv("current_tickers.csv")
L1123                   .iloc[:, 0]
L1124                   .str.upper()
L1125                   .tolist())
L1126         except FileNotFoundError:
L1127             warnings.warn("current_tickers.csv not found — bonus skipped")
L1128             current = []
L1129
L1130         mask_bonus = g_score.index.isin(current)
L1131         if mask_bonus.any():
L1132             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1133             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1134             # 2) g 側の σ を取り
```