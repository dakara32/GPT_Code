```text
   streak_yr = streak_base / (streak_base.abs() + 1.0)
L1164         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1165         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1166         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1167
L1168         # ===== GRW flexible score (variable data paths) =====
L1169         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1170
L1171         # EPSトレンドスロープをGRWに加算
L1172         if 'TREND_SLOPE_EPS' in df_z.columns:
L1173             try:
L1174                 grw_raw = grw_raw + 0.2 * df_z['TREND_SLOPE_EPS']
L1175             except Exception as e:
L1176                 print("[WARN] failed to add TREND_SLOPE_EPS to GRW_FLEX_SCORE:", e)
L1177
L1178         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1179         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1180         if debug_mode:
L1181             dbg_cols = [c for c in df.columns if isinstance(c, str) and c.startswith("DBG_GRW.")]
L1182             for col in dbg_cols:
L1183                 df_z[col] = df[col]
L1184
L1185         # Debug dump for GRW composition (console OFF by default; enable only with env)
L1186         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L1187             try:
L1188                 cols = ['GROWTH_F', 'GRW_FLEX_WEIGHT']
L1189                 use_cols = [c for c in cols if c in df_z.columns]
L1190                 i = df_z[use_cols].copy() if use_cols else pd.DataFrame(index=df_z.index)
L1191                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L1192                 limit = max(0, min(40, len(i)))
L1193                 print("[DEBUG: GRW]")
L1194                 for t in i.index[:limit]:
L1195                     row = i.loc[t]
L1196                     parts = []
L1197                     if pd.notna(row.get('GROWTH_F')):
L1198                         parts.append(f"GROWTH_F={row.get('GROWTH_F'):.3f}")
L1199                     raw_val = grw_raw.get(t) if isinstance(grw_raw, pd.Series) else np.nan
L1200                     if pd.notna(raw_val):
L1201                         parts.append(f"GRW_FLEX_SCORE={raw_val:.3f}")
L1202                     weight_val = row.get('GRW_FLEX_WEIGHT')
L1203                     if pd.notna(weight_val):
L1204                         parts.append(f"w={weight_val:.2f}")
L1205                     path_val = None
L1206                     try:
L1207                         path_val = info.get(t, {}).get('DEBUG_GRW_PATH')
L1208                     except Exception:
L1209                         path_val = None
L1210                     if not path_val and 'DEBUG_GRW_PATH' in df.columns:
L1211                         path_val = df.at[t, 'DEBUG_GRW_PATH']
L1212                     if path_val:
L1213                         parts.append(f"PATH={path_val}")
L1214                     parts_json = None
L1215                     try:
L1216                         parts_json = info.get(t, {}).get('DEBUG_GRW_PARTS')
L1217                     except Exception:
L1218                         parts_json = None
L1219                     if not parts_json and 'DEBUG_GRW_PARTS' in df.columns:
L1220                         parts_json = df.at[t, 'DEBUG_GRW_PARTS']
L1221                     if parts_json:
L1222                         parts.append(f"PARTS={parts_json}")
L1223                     if not parts:
L1224                         parts.append('no-data')
L1225                     print(f"Ticker: {t} | " + " ".join(parts))
L1226                 print()
L1227             except Exception as exc:
L1228                 print(f"[ERR] GRW debug dump failed: {exc}")
L1229
L1230         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L1231             + 0.15*df_z['TR_str']
L1232             + 0.15*df_z['RS_SLOPE_6W']
L1233             + 0.15*df_z['RS_SLOPE_13W']
L1234             + 0.10*df_z['MA200_SLOPE_5M']
L1235             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L1236         df_z['VOL'] = robust_z(df['BETA'])
L1237         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L1238         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L1239
L1240         # df_z 全明細をページングしてログ出力（最小版）
L1241         if getattr(cfg, "debug_mode", False):
L1242             pd.set_option("display.max_columns", None)
L1243             pd.set_option("display.max_colwidth", None)
L1244             pd.set_option("display.width", None)
L1245             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L1246             n = len(df_z)
L1247             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L1248             for i in range(0, n, page):
L1249                 j = min(i + page, n)
L1250                 try:
L1251                     chunk_str = df_z.iloc[i:j].to_string()
L1252                 except Exception:
L1253                     chunk_str = df_z.iloc[i:j].astype(str).to_string()
L1254                 logger.info("--- df_z rows %d..%d ---\n%s", i, j-1, chunk_str)
L1255             logger.info("=== df_z FULL DUMP end ===")
L1256
L1257         # === begin: BIO LOSS PENALTY =====================================
L1258         try:
L1259             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L1260         except Exception:
L1261             penalty_z = 0.8
L1262
L1263         def _is_bio_like(t: str) -> bool:
L1264             inf = info.get(t, {}) if isinstance(info, dict) else {}
L1265             sec = str(inf.get("sector", "")).lower()
L1266             ind = str(inf.get("industry", "")).lower()
L1267             if "health" not in sec:
L1268                 return False
L1269             keys = ("biotech", "biopharma", "pharma")
L1270             return any(k in ind for k in keys)
L1271
L1272         tickers_s = pd.Index(df_z.index)
L1273         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L1274         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L1275         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L1276
L1277         if bool(mask_bio_loss.any()) and penalty_z > 0:
L1278             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L1279             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L1280         # === end: BIO LOSS PENALTY =======================================
L1281
L1282         assert not any(c.endswith("_RAW") for c in df_z.columns)
L1283         for c in ["DIV_TTM_PS","DIV_YOY","LOW52PCT25_EXCESS","MA50_OVER_200"]:
L1284             assert c not in df_z.columns
L1285
L1286         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L1287         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L1288
L1289         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L1290         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L1291         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L1292         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L1293
L1294         # --- 重みは cfg を優先（外部があればそれを使用） ---
L1295         # ① 全銘柄で G/D スコアを算出（unmasked）
L1296         g_score_all = _as_numeric_series(df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1))
L1297
L1298         d_comp = pd.concat({
L1299             'QAL': df_z['D_QAL'],
L1300             'YLD': df_z['D_YLD'],
L1301             'VOL': df_z['D_VOL_RAW'],
L1302             'TRD': df_z['D_TRD']
L1303         }, axis=1)
L1304         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1305         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1306         d_score_all = _as_numeric_series(d_comp.mul(dw, axis=1).sum(axis=1))
L1307
L1308         # ② テンプレ判定（既存ロジックそのまま）
L1309         mask = df['trend_template']
L1310         if not bool(mask.any()):
L1311             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1312                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1313                 (df.get('RS', np.nan) >= 0.08) &
L1314                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1315                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1316                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1317                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1318                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1319             df['trend_template'] = mask
L1320
L1321         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1322         g_score = _as_numeric_series(g_score_all.loc[mask])
L1323         Scorer.g_score = g_score
L1324         df_z['GSC'] = g_score_all
L1325         df_z['DSC'] = d_score_all
L1326
L1327         try:
L1328             current = (pd.read_csv("current_tickers.csv")
L1329                   .iloc[:, 0]
L1330                   .str.upper()
L1331                   .tolist())
L1332         except FileNotFoundError:
L1333             warnings.warn("current_tickers.csv not found — bonus skipped")
L1334             current = []
L1335
L1336         mask_bonus = g_score.index.isin(current)
L1337         if mask_bonus.any():
L1338             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1339             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1340             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1341             sigma_g = g_score.std()
L1342             if pd.isna(sigma_g):
L1343                 sigma_g = 0.0
L1344             bonus_g = round(k * sigma_g, 3)
L1345             g_score.loc[mask_bonus] += bonus_g
L1346             Scorer.g_score = g_score
L1347             # 3) D 側も同様に σ の NaN をケア
L1348             sigma_d = d_score_all.std()
L1349             if pd.isna(sigma_d):
L1350                 sigma_d = 0.0
L1351             bonus_d = round(k * sigma_d, 3)
L1352             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1353
L1354         try:
L1355             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1356         except Exception:
L1357             pass
L1358
L1359         df_full = df.copy()
L1360         df_full_z = df_z.copy()
L1361
L1362         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1363         return FeatureBundle(df=df,
L1364             df_z=df_z,
L1365             g_score=g_score,
L1366             d_score_all=d_score_all,
L1367             missing_logs=pd.DataFrame(missing_logs),
L1368             df_full=df_full,
L1369             df_full_z=df_full_z,
L1370             scaler=None)
L1371
L1372 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1373     """
L1374     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L1375     次の列を feature_df に追加する（index=ticker）。
L1376       - G_BREAKOUT_recent_5d : bool
L1377       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L1378       - G_PULLBACK_recent_5d : bool
L1379       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L1380       - G_PIVOT_price        : float
L1381     失敗しても例外は握り潰し、既存処理を阻害しない。
L1382     """
L1383     try:
L1384         px   = bundle.px                      # 終値 DataFrame
L1385         hi   = bundle.data['High']
L1386         lo   = bundle.data['Low']
L1387         vol  = bundle.data['Volume']
L1388         bench= bundle.spx                     # ベンチマーク Series
L1389
L1390         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L1391         g_universe = getattr(self_obj, "g_un
```