```text
52W_HIGH',0) + 0.15*df_z['TR'])
L975
L976         # --- 重みは cfg を優先（外部があればそれを使用） ---
L977         # ① 全銘柄で G/D スコアを算出（unmasked）
L978         g_weights = pd.Series(cfg.weights.g, dtype=float)
L979         need_g = ["GROWTH_F", "MOM"]
L980         dbg_cols = ["GROWTH_F", "MOM", "VOL"]
L981         if all(c in df_z.columns for c in need_g):
L982             mask_g = df_z[need_g].notna().all(axis=1)
L983         else:
L984             mask_g = pd.Series(False, index=df_z.index, dtype=bool)
L985         for c in dbg_cols:
L986             if c in df_z.columns:
L987                 df_z[f"DBGRW.{c}"] = df_z[c]
L988         df_fill_g = df_z.reindex(columns=g_weights.index, fill_value=np.nan).copy()
L989         for c in df_fill_g.columns:
L990             if c not in need_g:
L991                 df_fill_g[c] = df_fill_g[c].fillna(0)
L992         g_score_all = _as_numeric_series(
L993             df_fill_g.mul(g_weights.reindex(df_fill_g.columns)).sum(axis=1, skipna=False)
L994         )
L995         g_score_all = g_score_all.where(mask_g)
L996
L997         d_comp = pd.concat({
L998             'QAL': df_z['D_QAL'],
L999             'YLD': df_z['D_YLD'],
L1000             'VOL': df_z['D_VOL_RAW'],
L1001             'TRD': df_z['D_TRD']
L1002         }, axis=1)
L1003         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L1004         globals()['D_WEIGHTS_EFF'] = dw.copy()
L1005         need_d_candidates = ["VOL", "QAL"]
L1006         mask_d = pd.Series(True, index=d_comp.index, dtype=bool)
L1007         for c in need_d_candidates:
L1008             if c in d_comp.columns:
L1009                 mask_d &= d_comp[c].notna()
L1010             else:
L1011                 mask_d &= False
L1012         df_fill_d = d_comp.copy()
L1013         for c in df_fill_d.columns:
L1014             if c not in need_d_candidates:
L1015                 df_fill_d[c] = df_fill_d[c].fillna(0)
L1016         d_score_all = _as_numeric_series(
L1017             df_fill_d.mul(dw, axis=1).sum(axis=1, skipna=False)
L1018         )
L1019         d_score_all = d_score_all.where(mask_d)
L1020
L1021         # ② テンプレ判定（既存ロジックそのまま）
L1022         mask = df['trend_template']
L1023         if not bool(mask.any()):
L1024             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L1025                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L1026                 (df.get('RS', np.nan) >= 0.08) &
L1027                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L1028                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L1029                 (df.get('MA150_OVER_200', np.nan) > 0) &
L1030                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L1031                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L1032             df['trend_template'] = mask
L1033
L1034         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L1035         g_score = _as_numeric_series(g_score_all.loc[mask])
L1036         Scorer.g_score = g_score
L1037         df_z['GSC'] = g_score_all
L1038         df_z['DSC'] = d_score_all
L1039
L1040         try:
L1041             current = (pd.read_csv("current_tickers.csv")
L1042                   .iloc[:, 0]
L1043                   .str.upper()
L1044                   .tolist())
L1045         except FileNotFoundError:
L1046             warnings.warn("current_tickers.csv not found — bonus skipped")
L1047             current = []
L1048
L1049         mask_bonus = g_score.index.isin(current)
L1050         if mask_bonus.any():
L1051             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L1052             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L1053             # 2) g 側の σ を取り、NaN なら 0 に丸める
L1054             sigma_g = g_score.std()
L1055             if pd.isna(sigma_g):
L1056                 sigma_g = 0.0
L1057             bonus_g = round(k * sigma_g, 3)
L1058             g_score.loc[mask_bonus] += bonus_g
L1059             Scorer.g_score = g_score
L1060             # 3) D 側も同様に σ の NaN をケア
L1061             sigma_d = d_score_all.std()
L1062             if pd.isna(sigma_d):
L1063                 sigma_d = 0.0
L1064             bonus_d = round(k * sigma_d, 3)
L1065             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L1066
L1067         try:
L1068             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L1069         except Exception:
L1070             pass
L1071
L1072         df_full = df.copy()
L1073         df_full_z = df_z.copy()
L1074
L1075         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L1076         missing_logs_df = getattr(ib, "missing_logs", pd.DataFrame())
L1077         if not isinstance(missing_logs_df, pd.DataFrame):
L1078             try:
L1079                 missing_logs_df = pd.DataFrame(missing_logs_df)
L1080             except Exception:
L1081                 missing_logs_df = pd.DataFrame()
L1082
L1083         return FeatureBundle(df=df,
L1084             df_z=df_z,
L1085             g_score=g_score,
L1086             d_score_all=d_score_all,
L1087             missing_logs=missing_logs_df,
L1088             df_full=df_full,
L1089             df_full_z=df_full_z,
L1090             scaler=None)
L1091
L1092 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L1093     """以前はブレイクアウト/押し目反発フラグを付与していたが、現在は無効化。"""
L1094     return feature_df
L1095
L1096
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43           SEC_CONTACT_EMAIL: ${{ secrets.SEC_CONTACT_EMAIL }}
L44         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール（改訂版）
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）  
L5 - moomoo証券で運用  
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**
L7
L8 ---
L9
L10 ## Barbell Growth-Defense方針
L11 - **Growth枠（12銘柄）**：トレンドを追う**スイングトレード**。高成長・高ボラ銘柄でリターン源泉を狙う。  
L12 - **Defense枠（8銘柄）**：安定重視の**ポジショントレード（やや長期）**。低ボラ・高品質でMDDを抑制。  
L13 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離を生み、**半戻しリバランス**でプレミアムを獲得。
L14
L15 ---
L16
L17 ## レジーム判定（trend_template 合格本数で判定）
L18 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄数（基準 N_G=12）
L19 - しきい値は過去600営業日の分布から自動採用（分位点と運用“床”のmax）
L20   - 緊急入り: `max(q05, 12本)`  
L21   - 緊急解除: `max(q20, 18本)`  
L22   - 通常復帰: `max(q60, 36本)`
L23 - ヒステリシス：EMERG→解除は23本以上、CAUTION→通常は45本以上
L24
L25 ---
L26
L27 ## レジーム別設定
L28 | モード       | 現金比率 | ドリフト閾値      | 基本TS幅 |
L29 |--------------|----------|-------------------|----------|
L30 | **NORMAL**   | 10%      | 12%               | -15%     |
L31 | **CAUTION**  | 12.5%    | 14%               | -13%     |
L32 | **EMERG**    | 20%      | **ドリフト売買停止** | -10%     |
L33
L34 - **含み益到達時のTSタイト化**：+30% → -3pt、+60% → -6pt、+100% → -8pt  
L35 - **TS発動後のクールダウン廃止**：翌日以降すぐに再IN可
L36
L37 ---
L38
L39 ## モード別の推奨“保有銘柄数”
L40 - 各枠=5%（20銘柄均等）。モード移行時は**Growthの枠数のみ調整**し、外した枠は現金として保持。  
L41 - **NORMAL:** G 12 / D 8 / 現金枠 0  
L42 - **CAUTION:** G 10 / D 8 / 現金枠 2（=10%）  
L43 - **EMERG:** G 8 / D 8 / 現金枠 4（=20%）  
L44 > 実運用：⭐️低スコアのGから順に外す。解除時はスコア上位から補充。
L45
L46 ---
L47
L48 ## 新規買付
L49 - **新規INは等分比率（=5%）の半分まで**を上限。  
L50 - 追加補充や半戻し買付も同じ上限に従う。
L51
L52 ---
L53
L54 ## 半戻し（リバランス）
L55 1. **現金比率 ≤ 閾値**：過重量銘柄を売却し、不足銘柄を補充。  
L56 2. **現金比率 > 閾値**：**売却は行わず**、現金でドリフト不足銘柄を買付（現金比率を閾値以下へ戻すことを優先）。  
L57 3. **共通**：リバランス後は全銘柄のTSを再設定。EMERGでは「ドリフト売買停止」、20銘柄×5%全戻しのみ許容。
L58
L59 ---
L60
L61 ## モード移行の実務手順
L62 - モードが変わったら、**MMF≒現金**として扱い、Growth枠数だけ調整：  
L63   1. **Gを削る**（CAUTION/EMERG）：⭐️低スコアのGから順に外し、`current_tickers.csv` から行削除（=現金化）。  
L64   2. **現金として保持**。  
L65   3. **NORMAL復帰時の補充**：`current_tickers.csv` に銘柄を追加（スコア上位から）。以降は日次ドリフト/TSルールに従う。  
L66 > driftは `target_ratio = 1/銘柄数` を自動適用。行数に応じて均等比率を再計算。
L67
L68 ---
L69
L70 ## 入替銘柄選定
L71 - **ファクター分散最適化手法を用いて日次でスコア集計**し、**スコア上位からIN/OUT**を決定。  
L72 - 参考：Oxfordキャピタル、Alpha Investor、Motley Fool、moomooスクリーニング等。  
L73 - 年間NISA枠はGrowth群から低ボラ銘柄を選定し利用（長期保持に固執しない）。
L74
L75 ---
L76
L77 ## 実行タイミング
L78 - 判定：米国市場終値直後  
L79 - 執行：翌営業日の米国寄付き成行
```

## <documents/factor_design.md>
```text
L1 # factor.py 詳細設計書
L2
L3 ## 概要
L4 - 既存ポートフォリオの銘柄と検討中の銘柄群を同時に扱う銘柄選定パイプライン。
L5 - 価格・財務データを取り込みスコアリングとDRRS選定を行うことで、以下のアウトプットを得る。
L6   - 採用銘柄と惜しくも漏れた銘柄のスコア一覧
L7   - IN/OUTのティッカーリストとOUT側の低スコア銘柄
L8   - 新旧ポートフォリオの比較表
L9   - 検討中銘柄の低スコアランキング（整理用）
L10
L11 ## 全体フロー
L12 1. **Input** – `current_tickers.csv`と`candidate_tickers.csv`を読み込み、yfinanceやFinnhubのAPIから価格・財務データを収集して`InputBundle`を整備。
L13 2. **Score Calculation** – Scorerが特徴量を計算し因子スコアを合成して`FeatureBundle`を生成。
L14 3. **Correlation Reduction & Selection** – SelectorがDRRSロジックで相関を抑えつつG/D銘柄を選定し`SelectionBundle`を得る。
L15 4. **Output** – 採用結果と周辺情報を表・Slack通知として出力。
L16
L17 ```mermaid
L18 flowchart LR
L19   A[Input\nAPI & 前処理] --> B[Score Calculation\n特徴量・因子合成]
L20   B --> C[Correlation Reduction\nDRRS選定]
L21   C --> D[Output\nSlack通知]
L22 ```
L23
L24 ## 定数・設定
L25 | 変数 | 内容 | 主な用途 |
L26 | --- | --- | --- |
L27 | `exist` / `cand` | 現行ポートフォリオと検討中銘柄のティッカーリスト | スコア対象ユニバースの構成、候補整理 |
L28 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L29 | `CAND_PRICE_MAX` | 候補銘柄の許容価格上限 | 高額銘柄の事前除外 |
L30 | `N_G` / `N_D` | G/D採用枠の件数（**既定: 12 / 8**） | 最終的に選ぶ銘柄数の制約 |
L31 | `g_weights` / `D_weights` | 各因子の重みdict | G/Dスコア合成 |
L32 | `D_BETA_MAX` | Dバケットの許容β上限 | 高β銘柄の除外フィルタ |
L33 | `FILTER_SPEC` | G/Dごとの前処理フィルタ | トレンドマスクやβ上限設定 |
L34 | `corrM` | DRRS初期プールの最大件数 | 相関行列サイズ制御 |
L35 | `DRRS_G` / `DRRS_D` | DRRSパラメータdict | バケット別の相関低減設定 |
L36 | `DRRS_SHRINK` | 残差相関の対角シュリンク率 | `residual_corr`の安定化 |
L37 | `CROSS_MU_GD` | G-D間クロス相関ペナルティμ | 2バケット同時最適化で相関抑制 |
L38 | `RESULTS_DIR` | 選定結果保存ディレクトリ | `_save_sel`/`_load_prev`の入出力 |
L39
L40 選定結果は`results/`配下にJSONとして保存し、次回実行時に`_load_prev`で読み込んで選定条件に反映。
L41
L42 ## DTO/Config
L43 各ステップ間で受け渡すデータ構造と設定値。変数の意味合いと利用箇所を以下に示す。
L44
L45 ### InputBundle（Input → Scorer）
L46 | 変数 | 内容 | 主な用途 |
L47 | --- | --- | --- |
L48 | `cand` | 候補銘柄ティッカーのリスト | OUTテーブルや低スコアランキング対象の母集団 |
L49 | `tickers` | 現行+候補を合わせたティッカー一覧 | 価格・出来高ダウンロード、リターン計算 |
L50 | `bench` | ベンチマークティッカー | 相対強さ・β算出、ポート比較 |
L51 | `data` | yfinanceのダウンロード結果（階層列） | `px`/`spx`/リターン等の基礎データ |
L52 | `px` | `data['Close']`だけを抜き出した価格系列 | 指標計算・リターン生成 |
L53 | `spx` | `data['Close'][bench]` のSeries | `rs`や`calc_beta`の基準指数 |
L54 | `tickers_bulk` | `yf.Tickers`オブジェクト | `info`等の一括取得 |
L55 | `info` | ティッカー別のyfinance情報dict | セクター判定やEPS補完 |
L56 | `eps_df` | EPS TTM/直近EPS等をまとめた表 | 成長指標の算出 |
L57 | `fcf_df` | CFO・CapEx・FCF TTMと情報源フラグ | FCF/EVや配当カバレッジ |
L58 | `returns` | `px.pct_change()`のリターン表 | 相関行列・DRRS計算 |
L59
L60 ### FeatureBundle（Scorer → Selector）
L61 | 変数 | 内容 | 主な用途 |
L62 | --- | --- | --- |
L63 | `df` | 計算済み指標の生値テーブル | デバッグ・出力表示 |
L64 | `df_z` | ウィンザー後Zスコア化した指標表 | 因子スコア合成、選定基準 |
L65 | `g_score` | Gバケット総合スコア | G選定、IN/OUT比較 |
L66 | `d_score_all` | Dバケット総合スコア（全銘柄） | D選定、低スコアランキング |
L67 | `missing_logs` | 欠損指標と補完状況のログ | データ品質チェック |
L68
L69 ### SelectionBundle（Selector → Output）
L70 | 変数 | 内容 | 主な用途 |
L71 | --- | --- | --- |
L72 | `resG` | G選定結果の詳細dict（`tickers`、目的値等） | 結果保存・平均相関などの指
```