```text
p, cfg)]
L830
L831     selector = Selector()
L832     if hasattr(sc, "select_diversified"):
L833         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L834             selector=selector, prev_tickers=None,
L835             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L836             cross_mu=cfg.drrs.cross_mu_gd)
L837     else:
L838         if group == "G":
L839             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L840             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L841                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L842                 lam=cfg.drrs.G.get("lam", 0.68),
L843                 lookback=cfg.drrs.G.get("lookback", 252),
L844                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L845         else:
L846             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L847             g_fixed = getattr(sc, "_top_G", None)
L848             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L849                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L850                 lam=cfg.drrs.D.get("lam", 0.85),
L851                 lookback=cfg.drrs.D.get("lookback", 504),
L852                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L853                 mu=cfg.drrs.cross_mu_gd)
L854         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L855         sum_sc = res["sum_score"]; obj = res["objective"]
L856         if group == "D":
L857             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L858             T.log("selection finalized (G/D)")
L859     try:
L860         inc = [t for t in exist if t in agg.index]
L861         pick = _sticky_keep_current(
L862             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L863             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L864         )
L865     except Exception as _e:
L866         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L867     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L868     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L869     try:
L870         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L871         near10 = list(pool.sort_values(ascending=False).head(10).index)
L872         setattr(sc, f"_near_{group}", near10)
L873         setattr(sc, f"_agg_{group}", agg)
L874     except Exception:
L875         pass
L876
L877     if group == "D":
L878         T.log("save done")
L879     if group == "G":
L880         sc._top_G = pick
L881     return pick, avg_r, sum_sc, obj
L882
L883 def run_pipeline() -> SelectionBundle:
L884     """
L885     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L886     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L887     """
L888     inb = io_build_input_bundle()
L889     cfg = PipelineConfig(weights=WeightsConfig(g=g_weights, d=D_weights),
L890         drrs=DRRSParams(corrM=corrM, shrink=DRRS_SHRINK,
L891                          G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD),
L892         price_max=CAND_PRICE_MAX)
L893     sc = Scorer()
L894     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L895     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L896     alpha = Scorer.spx_to_alpha(inb.spx)
L897     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L898     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L899     sc._top_G = top_G
L900     try:
L901         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L902         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L903     except Exception:
L904         pass
L905     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L906     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L907     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L908     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L909     fb = getattr(sc, "_feat", None)
L910     near_G = getattr(sc, "_near_G", [])
L911     selected12 = list(top_G)
L912     df = fb.df if fb is not None else pd.DataFrame()
L913     guni = _infer_g_universe(df, selected12, near_G)
L914     try:
L915         fire_recent = [t for t in guni
L916                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L917                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L918     except Exception: fire_recent = []
L919
L920     lines = [
L921         "【G枠レポート｜週次モニタ（直近5営業日）】",
L922         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L923         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L924         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L925
L926     if fire_recent:
L927         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L928         lines.append(f"過去5営業日の検知: {fire_list}")
L929     else:
L930         lines.append("過去5営業日の検知: なし")
L931
L932     try:
L933         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L934         if webhook:
L935             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L936     except Exception:
L937         pass
L938
L939     out = Output(debug=debug_mode)
L940     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L941     try: out._sc = sc
L942     except Exception: pass
L943     if hasattr(sc, "_feat"):
L944         try:
L945             out.miss_df = sc._feat.missing_logs
L946             out.display_results(exist=exist, bench=bench, df_z=sc._feat.df_z,
L947                 g_score=sc._feat.g_score, d_score_all=sc._feat.d_score_all,
L948                 init_G=top_G, init_D=top_D, top_G=top_G, top_D=top_D)
L949         except Exception:
L950             pass
L951     out.notify_slack()
L952     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L953               "sum_score": sumG, "objective": objG},
L954         resD={"tickers": top_D, "avg_res_corr": avgD,
L955               "sum_score": sumD, "objective": objD},
L956         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L957
L958     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L959     try:
L960         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L961               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L962               .sort_values("G_plus_D")
L963               .head(10)
L964               .round(3))
L965         _slack("Low Score Candidates (GSC+DSC bottom 10)\n"
L966                "```"
L967                + _low_df.to_string(index=True, index_names=False)
L968                + "\n```")
L969     except Exception as _e:
L970         _slack(f"Low Score Candidates: 作成失敗: {_e}")
L971
L972     if debug_mode:
L973         try:
L974             _slack_debug(_compact_debug(fb, sb, [], []))
L975         except Exception as e:
L976             print(f"[debug skipped] {e}")
L977
L978     return sb
L979
L980 if __name__ == "__main__":
L981     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #
L26 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L27 # =============================================================================
L28
L29 import os, sys, warnings
L30 import requests
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36
L37 if TYPE_CHECKING:
L38     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L39
L40 # ---- Dividend Helpers -------------------------------------------------------
L41 def _last_close(t, price_map=None):
L42     if price_map and (c := price_map.get(t)) is not None: return float(c)
L43     try:
L44         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L45         return float(h.iloc[-1]) if len(h) else np.nan
L46     except Exception:
L47         return np.nan
L48
L49 def _ttm_div_sum(t, lookback_days=400):
L50     try:
L51         div = yf.Ticker(t).dividends
L52         if div is None or len(div) == 0: return 0.0
L53         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L54         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L55         return ttm if ttm > 0 else float(div.tail(4).sum())
L56     except Exception:
L57         return 0.0
L58
L59 def ttm_div_yield_portfolio(tickers, price_map=None):
L60     ys = [(lambda c, s: (s/c) if (np.isfinite(c) and c>0 and s>0) else 0.0)(_last_close(t, price_map), _ttm_div_sum(t)) for t in tickers]
L61     return float(np.mean(ys)) if ys else 0.0
L62
L63 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L64 def winsorize_s(s: pd.Series, p=0.02):
L65     if s is None or s.dropna().empty: return s
L66     lo, hi = np.nanpercentile(s.astype(float), [100*p, 100*(1-p)]); return s.clip(lo, hi)
L67
L68 def robust_z(s: pd.Series, p=0.02):
L69     s2 = winsorize_s(s,p); return np.nan_to_num(zscore(s2.fillna(s2.mean())))
L70
L71 def robust_z_keepnan(s: pd.Series) -> pd.Series:
L72     """robust_z variant that preserves NaNs and falls back to rank-z when needed."""
L73     if s is None:
L74         return pd.Series(dtype=float)
L75     v = pd.to_numeric(s, errors="coerce")
L76     m = np.nanmedian(v)
L77     mad = np.nanmedian(np.abs(v - m))
L78     z = (v - m) / (1.4826 * mad + 1e-9)
L79     if np.nanstd(z) < 1e-9:
L80         r = v.rank(method="average", na_option="keep")
L81         z = (r - np.nanmean(r)) / (np.nanstd(r) + 1e-9)
L82     return pd.Series(z, index=v.index, dtype=float)
L83
L84 def _safe_div(a, b):
L85     try: return np.nan if (b is None or float(b)==0 or pd.isna(b)) else float(a)/float(b)
L86     except Exception: return np.nan
L87
L88 def _safe_last(series: pd.Series, default=np.nan):
L89     try: return float(series.iloc[-1])
L90     except Exception: return default
L91
L92 D_WEIGHTS_EFF = None  # 出力表示互換のため
L93
L94 # ---- Scorer 本体 -------------------------------------------------------------
L95 class Scorer:
L96     """
L97     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L98     - cfg は必須（factor.PipelineConfig を渡す）。
L99     - 旧カラム名を自動リネームして新スキーマに吸収します。
L100     """
L101
L102     # === 先頭で旧→新カラム名マップ（移行用） ===
L103     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L104     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L105
L106     # === スキーマ簡易チェック（最低限） ===
L107     @staticmethod
L108     def _validate_ib_for_scorer(ib: Any):
L109         miss = [a for a in ["tickers","bench","data","px","spx","tickers_
```