```text
r:
L857             suf = _filter_suffix_from(FILTER_SPEC, group)
L858             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L859
L860         def _blk(title, tbl, fmt=None, drop=()):
L861             if tbl is None or getattr(tbl, 'empty', False):
L862                 return f"{title}\n(選定なし)\n"
L863             if drop and hasattr(tbl, 'columns'):
L864                 keep = [c for c in tbl.columns if c not in drop]
L865                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L866             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L867
L868         message = "📈 ファクター分散最適化の結果\n"
L869         if self.miss_df is not None and not self.miss_df.empty:
L870             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L871         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L872         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L873         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L874         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L875
L876         try:
L877             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L878             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L879             if r is not None:
L880                 r.raise_for_status()
L881         except Exception as e:
L882             print(f"[ERR] main_post_failed: {e}")
L883
L884 def _infer_g_universe(feature_df, selected12=None, near5=None):
L885     try:
L886         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L887         if out: return out
L888     except Exception:
L889         pass
L890     base = set()
L891     for lst in (selected12 or []), (near5 or []):
L892         for x in (lst or []): base.add(x)
L893     return list(base) if base else list(feature_df.index)
L894
L895 def _fmt_with_fire_mark(tickers, feature_df):
L896     out = []
L897     for t in tickers or []:
L898         try:
L899             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L900             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L901             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L902         except Exception:
L903             out.append(t)
L904     return out
L905
L906 def _label_recent_event(t, feature_df):
L907     try:
L908         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L909         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L910         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L911         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L912         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L913     except Exception:
L914         pass
L915     return t
L916
L917 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L918
L919 def io_build_input_bundle() -> InputBundle:
L920     """
L921     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L922     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L923     """
L924     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L925     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L926
L927 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L928               n_target: int) -> tuple[list, float, float, float]:
L929     """
L930     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L931     戻り値：(pick, avg_res_corr, sum_score, objective)
L932     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L933     """
L934     sc.cfg = cfg
L935
L936     if hasattr(sc, "score_build_features"):
L937         feat = sc.score_build_features(inb)
L938         if not hasattr(sc, "_feat_logged"):
L939             T.log("features built (scorer)")
L940             sc._feat_logged = True
L941         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L942     else:
L943         fb = sc.aggregate_scores(inb, cfg)
L944         if not hasattr(sc, "_feat_logged"):
L945             T.log("features built (scorer)")
L946             sc._feat_logged = True
L947         sc._feat = fb
L948         agg = fb.g_score if group == "G" else fb.d_score_all
L949         if group == "D" and hasattr(fb, "df"):
L950             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L951
L952     if hasattr(sc, "filter_candidates"):
L953         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L954
L955     selector = Selector()
L956     if hasattr(sc, "select_diversified"):
L957         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L958             selector=selector, prev_tickers=None,
L959             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L960             cross_mu=cfg.drrs.cross_mu_gd)
L961     else:
L962         if group == "G":
L963             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L964             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L965                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L966                 lam=cfg.drrs.G.get("lam", 0.68),
L967                 lookback=cfg.drrs.G.get("lookback", 252),
L968                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L969         else:
L970             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L971             g_fixed = getattr(sc, "_top_G", None)
L972             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L973                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L974                 lam=cfg.drrs.D.get("lam", 0.85),
L975                 lookback=cfg.drrs.D.get("lookback", 504),
L976                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L977                 mu=cfg.drrs.cross_mu_gd)
L978         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L979         sum_sc = res["sum_score"]; obj = res["objective"]
L980         if group == "D":
L981             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L982             T.log("selection finalized (G/D)")
L983     try:
L984         inc = [t for t in exist if t in agg.index]
L985         pick = _sticky_keep_current(
L986             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L987             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L988         )
L989     except Exception as _e:
L990         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L991     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L992     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L993     try:
L994         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L995         near10 = list(pool.sort_values(ascending=False).head(10).index)
L996         setattr(sc, f"_near_{group}", near10)
L997         setattr(sc, f"_agg_{group}", agg)
L998     except Exception:
L999         pass
L1000
L1001     if group == "D":
L1002         T.log("save done")
L1003     if group == "G":
L1004         sc._top_G = pick
L1005     return pick, avg_r, sum_sc, obj
L1006
L1007 def run_pipeline() -> SelectionBundle:
L1008     """
L1009     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1010     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1011     """
L1012     inb = io_build_input_bundle()
L1013     cfg = PipelineConfig(weights=WeightsConfig(g=g_weights, d=D_weights),
L1014         drrs=DRRSParams(corrM=corrM, shrink=DRRS_SHRINK,
L1015                          G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD),
L1016         price_max=CAND_PRICE_MAX)
L1017     sc = Scorer()
L1018     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1019     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L1020     alpha = Scorer.spx_to_alpha(inb.spx)
L1021     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1022     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1023     sc._top_G = top_G
L1024     try:
L1025         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1026         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1027     except Exception:
L1028         pass
L1029     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1030     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1031     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1032     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1033     fb = getattr(sc, "_feat", None)
L1034     near_G = getattr(sc, "_near_G", [])
L1035     selected12 = list(top_G)
L1036     df = fb.df if fb is not None else pd.DataFrame()
L1037     guni = _infer_g_universe(df, selected12, near_G)
L1038     try:
L1039         fire_recent = [t for t in guni
L1040                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1041                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1042     except Exception: fire_recent = []
L1043
L1044     lines = [
L1045         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1046         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1047         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1048         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1049
L1050     if fire_recent:
L1051         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1052         lines.append(f"過去5営業日の検知: {fire_list}")
L1053     else:
L1054         lines.append("過去5営業日の検知: なし")
L1055
L1056     try:
L1057         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1058         if webhook:
L1059             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1060     except Exception:
L1061         pass
L1062
L1063     out = Output()
L1064     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1065     try: out._sc = sc
L1066     except Exception: pass
L1067     if hasattr(sc, "_feat"):
L1068         try:
L1069             fb = sc._feat
L1070             out.miss_df = fb.missing_logs
L1071             out.display_results(
L1072                 exist=exist,
L1073                 bench=bench,
L1074                 df_z=fb.df_z,
L1075                 g_score=fb.g_score,
L1076                 d_score_all=fb.d_score_all,
L1077                 init_G=top_G,
L1078                 init_D=top_D,
L1079                 top_G=top_G,
L1080                 top_D=top_D,
L1081                 df_full_z=getattr(fb, "df_full_z", None),
L1082                 prev_G=getattr(sc, "_prev_G", exist),
L1083                 prev_D=getattr(sc, "_prev_D", exist),
L1084             )
L1085         except Exception:
L1086             pass
L1087     out.notify_slack()
L1088     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1089               "sum_score": sumG, "objective": objG},
L1090         resD={"tickers": top_D, "avg_res_corr": avgD,
L1091               "sum_score": sumD, "objective": objD},
L1092         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1093
L1094     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1095     try:
L1096         _low_df = (pd.DataFrame({"GSC": fb.g_score
```