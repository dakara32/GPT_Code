```text
       else:
L836                             text_value = self.debug_text if self.debug_text is not None else ""
L837                             dt = str(text_value).strip()
L838                             if dt:
L839                                 logger.info("===== DEBUG (after Low Score) START =====")
L840                                 logger.info("\n%s", dt)
L841                                 logger.info("===== DEBUG (after Low Score) END =====")
L842                             else:
L843                                 logger.info("<empty debug_text>")
L844
L845                     except Exception as e:
L846                         logger.warning("debug output failed: %s", e)
L847             except Exception as e:
L848                 logger.warning("debug dump failed: %s", e)
L849         except Exception as e:
L850             print(f"[warn] low-score ranking failed: {e}")
L851             self.low10_table = None
L852         if not debug_mode:
L853             self.debug_text = ""
L854         if debug_mode:
L855             self._debug_logged = True
L856         else:
L857             logger.debug(
L858                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L859                 debug_mode, not bool((self.debug_text or '').strip())
L860             )
L861             self._debug_logged = True
L862
L863     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L864     def notify_slack(self):
L865         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L866
L867         if not SLACK_WEBHOOK_URL:
L868             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L869             return
L870
L871         def _filter_suffix_from(spec: dict, group: str) -> str:
L872             g = spec.get(group, {})
L873             parts = [str(m) for m in g.get("pre_mask", [])]
L874             for k, v in (g.get("pre_filter", {}) or {}).items():
L875                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L876                 name = {"beta": "β"}.get(base, base)
L877                 try:
L878                     val = f"{float(v):g}"
L879                 except Exception:
L880                     val = str(v)
L881                 parts.append(f"{name}{op}{val}")
L882             return "" if not parts else " / filter:" + " & ".join(parts)
L883
L884         def _inject_filter_suffix(title: str, group: str) -> str:
L885             suf = _filter_suffix_from(FILTER_SPEC, group)
L886             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L887
L888         def _blk(title, tbl, fmt=None, drop=()):
L889             if tbl is None or getattr(tbl, 'empty', False):
L890                 return f"{title}\n(選定なし)\n"
L891             if drop and hasattr(tbl, 'columns'):
L892                 keep = [c for c in tbl.columns if c not in drop]
L893                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L894             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L895
L896         message = "📈 ファクター分散最適化の結果\n"
L897         if self.miss_df is not None and not self.miss_df.empty:
L898             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L899         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L900         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L901         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L902         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L903
L904         try:
L905             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L906             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L907             if r is not None:
L908                 r.raise_for_status()
L909         except Exception as e:
L910             print(f"[ERR] main_post_failed: {e}")
L911
L912 def _infer_g_universe(feature_df, selected12=None, near5=None):
L913     try:
L914         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L915         if out: return out
L916     except Exception:
L917         pass
L918     base = set()
L919     for lst in (selected12 or []), (near5 or []):
L920         for x in (lst or []): base.add(x)
L921     return list(base) if base else list(feature_df.index)
L922
L923 def _fmt_with_fire_mark(tickers, feature_df):
L924     out = []
L925     for t in tickers or []:
L926         try:
L927             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L928             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L929             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L930         except Exception:
L931             out.append(t)
L932     return out
L933
L934 def _label_recent_event(t, feature_df):
L935     try:
L936         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L937         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L938         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L939         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L940         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L941     except Exception:
L942         pass
L943     return t
L944
L945 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L946
L947 def io_build_input_bundle() -> InputBundle:
L948     """
L949     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L950     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L951     """
L952     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L953     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L954
L955 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L956               n_target: int) -> tuple[list, float, float, float]:
L957     """
L958     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L959     戻り値：(pick, avg_res_corr, sum_score, objective)
L960     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L961     """
L962     sc.cfg = cfg
L963
L964     if hasattr(sc, "score_build_features"):
L965         feat = sc.score_build_features(inb)
L966         if not hasattr(sc, "_feat_logged"):
L967             T.log("features built (scorer)")
L968             sc._feat_logged = True
L969         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L970     else:
L971         fb = sc.aggregate_scores(inb, cfg)
L972         if not hasattr(sc, "_feat_logged"):
L973             T.log("features built (scorer)")
L974             sc._feat_logged = True
L975         sc._feat = fb
L976         agg = fb.g_score if group == "G" else fb.d_score_all
L977         if group == "D" and hasattr(fb, "df"):
L978             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L979
L980     if hasattr(sc, "filter_candidates"):
L981         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L982
L983     selector = Selector()
L984     if hasattr(sc, "select_diversified"):
L985         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L986             selector=selector, prev_tickers=None,
L987             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L988             cross_mu=cfg.drrs.cross_mu_gd)
L989     else:
L990         if group == "G":
L991             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L992             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L993                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L994                 lam=cfg.drrs.G.get("lam", 0.68),
L995                 lookback=cfg.drrs.G.get("lookback", 252),
L996                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L997         else:
L998             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L999             g_fixed = getattr(sc, "_top_G", None)
L1000             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1001                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1002                 lam=cfg.drrs.D.get("lam", 0.85),
L1003                 lookback=cfg.drrs.D.get("lookback", 504),
L1004                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1005                 mu=cfg.drrs.cross_mu_gd)
L1006         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1007         sum_sc = res["sum_score"]; obj = res["objective"]
L1008         if group == "D":
L1009             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1010             T.log("selection finalized (G/D)")
L1011     try:
L1012         inc = [t for t in exist if t in agg.index]
L1013         pick = _sticky_keep_current(
L1014             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1015             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1016         )
L1017     except Exception as _e:
L1018         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1019     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1020     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1021     try:
L1022         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1023         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1024         setattr(sc, f"_near_{group}", near10)
L1025         setattr(sc, f"_agg_{group}", agg)
L1026     except Exception:
L1027         pass
L1028
L1029     if group == "D":
L1030         T.log("save done")
L1031     if group == "G":
L1032         sc._top_G = pick
L1033     return pick, avg_r, sum_sc, obj
L1034
L1035 def run_pipeline() -> SelectionBundle:
L1036     """
L1037     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1038     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1039     """
L1040     inb = io_build_input_bundle()
L1041     cfg = PipelineConfig(weights=WeightsConfig(g=g_weights, d=D_weights),
L1042         drrs=DRRSParams(corrM=corrM, shrink=DRRS_SHRINK,
L1043                          G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD),
L1044         price_max=CAND_PRICE_MAX)
L1045     sc = Scorer()
L1046     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1047     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L1048     alpha = Scorer.spx_to_alpha(inb.spx)
L1049     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1050     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1051     sc._top_G = top_G
L1052     try:
L1053         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1054         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1055     except Exception:
L1056         pass
L1057     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1058     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1059     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1060     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1061     fb = getattr(sc, "_feat", None)
L1062     near_G = getattr(sc, "_near_G", [])
L1063     selected12 = list(top_G)
L1064     df = fb.df if fb is not None else pd.DataFrame()
L1065     guni = _infer_g_universe(df, selected12, near_G)
L1066     try:
L1067         fire_recent = [t for t in guni
L1
```