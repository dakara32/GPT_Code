```text
  except Exception:
L978                 return False
L979
L980         have_rev = 0
L981         have_eps = 0
L982         rev_lens: list[int] = []
L983         eps_lens: list[int] = []
L984         rev_y_lens: list[int] = []
L985         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L986
L987         for t in tickers:
L988             entry = info.get(t, {})
L989             m = (sec_map or {}).get(t) or {}
L990             if entry is None or not isinstance(entry, dict):
L991                 entry = {}
L992                 info[t] = entry
L993
L994             if m:
L995                 pairs_r = m.get("rev_q_series_pairs") or []
L996                 pairs_e = m.get("eps_q_series_pairs") or []
L997                 if pairs_r:
L998                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L999                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L1000                     s = pd.Series(val, index=idx).sort_index()
L1001                     entry["SEC_REV_Q_SERIES"] = s
L1002                 else:
L1003                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L1004                 if pairs_e:
L1005                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L1006                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L1007                     s = pd.Series(val, index=idx).sort_index()
L1008                     entry["SEC_EPS_Q_SERIES"] = s
L1009                 else:
L1010                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L1011
L1012             r = entry.get("SEC_REV_Q_SERIES")
L1013             e = entry.get("SEC_EPS_Q_SERIES")
L1014             # 年次は直近3件（約3年）だけ保持。重み分岐の nY 判定は従来通り。
L1015             try:
L1016                 if hasattr(r, "index") and isinstance(r.index, pd.DatetimeIndex):
L1017                     y = r.resample("Y").sum().dropna()
L1018                     entry["SEC_REV_Y_SERIES"] = y.tail(3)
L1019                 else:
L1020                     entry["SEC_REV_Y_SERIES"] = []
L1021             except Exception:
L1022                 entry["SEC_REV_Y_SERIES"] = []
L1023             ry = entry.get("SEC_REV_Y_SERIES")
L1024             if _has_entries(r):
L1025                 have_rev += 1
L1026             if _has_entries(e):
L1027                 have_eps += 1
L1028             lr = _brief_len(r)
L1029             le = _brief_len(e)
L1030             rev_lens.append(lr)
L1031             eps_lens.append(le)
L1032             rev_y_lens.append(_brief_len(ry))
L1033             if len(samples) < 8:
L1034                 try:
L1035                     rd = getattr(r, "index", [])[-1] if lr > 0 else None
L1036                     rv = float(r.iloc[-1]) if lr > 0 else None
L1037                     ed = getattr(e, "index", [])[-1] if le > 0 else None
L1038                     ev = float(e.iloc[-1]) if le > 0 else None
L1039                     samples.append((t, lr, str(rd) if rd is not None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L1040                 except Exception:
L1041                     samples.append((t, lr, "-", None, le, "-", None))
L1042
L1043         logger.info("[SEC] series attach: rev_q=%d/%d, eps_q=%d/%d", have_rev, len(tickers), have_eps, len(tickers))
L1044         logger.info(
L1045             "[SEC_SERIES] rev_q=%d (<=12), eps_q=%d (<=12), rev_y=%d (<=3)",
L1046             max(rev_lens) if rev_lens else 0,
L1047             max(eps_lens) if eps_lens else 0,
L1048             max(rev_y_lens) if rev_y_lens else 0,
L1049         )
L1050
L1051         if rev_lens:
L1052             rev_lens_sorted = sorted(rev_lens)
L1053             eps_lens_sorted = sorted(eps_lens)
L1054             _log(
L1055                 "SEC_SERIES",
L1056                 f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L1057                 f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L1058             )
L1059         for (t, lr, rd, rv, le, ed, ev) in samples:
L1060             _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L1061         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L1062         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L1063         if not eps_df.index.is_unique:
L1064             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L1065         eps_df = eps_df.assign(
L1066             EPS_TTM=eps_df["eps_ttm"],
L1067             EPS_TTM_PREV=eps_df.get("eps_ttm_prev", np.nan),
L1068             EPS_Q_LastQ=eps_df["eps_q_recent"],
L1069             EPS_Q_Prev=eps_df.get("eps_q_prev", np.nan),
L1070             REV_TTM=eps_df["rev_ttm"],
L1071             REV_TTM_PREV=eps_df.get("rev_ttm_prev", np.nan),
L1072             REV_Q_LastQ=eps_df["rev_q_recent"],
L1073             REV_Q_Prev=eps_df.get("rev_q_prev", np.nan),
L1074             EPS_A_LATEST=eps_df.get("eps_annual_latest", np.nan),
L1075             EPS_A_PREV=eps_df.get("eps_annual_prev", np.nan),
L1076             REV_A_LATEST=eps_df.get("rev_annual_latest", np.nan),
L1077             REV_A_PREV=eps_df.get("rev_annual_prev", np.nan),
L1078             EPS_A_CAGR3=eps_df.get("eps_cagr3", np.nan),
L1079             REV_A_CAGR3=eps_df.get("rev_cagr3", np.nan),
L1080         )
L1081         missing_logs = pd.DataFrame()
L1082         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L1083         try:
L1084             n = len(eps_df)
L1085             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L1086             c_rev = int(eps_df["REV_TTM"].notna().sum())
L1087             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L1088         except Exception:
L1089             pass
L1090         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L1091         _tlog("eps/fcf prep done")
L1092         returns = px[tickers].pct_change()
L1093         _tlog("price prep/returns done")
L1094         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns, missing_logs=missing_logs)
L1095
L1096 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L1097 class Selector:
L1098     # ---- DRRS helpers（Selector専用） ----
L1099     @staticmethod
L1100     def _z_np(X: np.ndarray) -> np.ndarray:
L1101         X = np.asarray(X, dtype=np.float32)
L1102         m = np.nanmean(X, axis=0, keepdims=True)
L1103         s = np.nanstd(X, axis=0, keepdims=True)
L1104         # 分母0/全NaN列の安全化：std==0 を 1 に置換（z=0に収束）
L1105         s = np.where(np.isfinite(s) & (s > 0), s, 1.0).astype(np.float32)
L1106         with np.errstate(invalid="ignore", divide="ignore"):
L1107             Z = (np.nan_to_num(X) - np.nan_to_num(m)) / s
L1108         return np.nan_to_num(Z)
L1109
L1110     @classmethod
L1111     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L1112         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L1113         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L1114         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L1115         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L1116         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L1117
L1118     @classmethod
L1119     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L1120         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L1121         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L1122         if k==0: return []
L1123         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L1124         for _ in range(k):
L1125             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L1126             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L1127             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L1128         return sorted(S)
L1129
L1130     @staticmethod
L1131     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L1132         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1133         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L1134
L1135     @classmethod
L1136     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L1137         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L1138         while improved and passes<max_pass:
L1139             improved, passes = False, passes+1
L1140             for i,out in enumerate(list(S)):
L1141                 for inn in range(len(score)):
L1142                     if inn in S: continue
L1143                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L1144                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1145                 if improved: break
L1146         return S, best
L1147
L1148     @staticmethod
L1149     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L1150         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1151         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L1152         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L1153         return float(s[idx].sum() - lam*within - mu*cross)
L1154
L1155     @classmethod
L1156     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L1157         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L1158         while improved and passes<max_pass:
L1159             improved, passes = False, passes+1
L1160             for i,out in enumerate(list(S)):
L1161                 for inn in range(N):
L1162                     if inn in S: continue
L1163                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L1164                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1165                 if improved: break
L1166         return S, best
L1167
L1168     @staticmethod
L1169     def avg_corr(C: np.ndarray, idx) -> float:
L1170         k = len(idx); P = C[np.ix_(idx, idx)]
L1171         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L1172
L1173     @classmethod
L1174     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L1175         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L1176         union = [t for t in pool_tickers if t in returns_df.columns]
L1177         for t in g_fixed:
L1178             if t not in union: union.append(t)
L1179         Rdf_all = returns_df[union]
L1180         Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all) >= lookback else Rdf_all
L1181         _thresh = max(1, int(0.8 * len(Rdf_all)))
L1182         Rdf_all = Rdf_all.dropna(axis=1, thresh=_thresh)
L1183         Rdf_all = Rdf_all.dropna()
L1184         pool_eff, g_eff = (
L1185             [t for t in pool_tickers if t in Rdf_all.columns],
L1186             [t for t in g_fixed if t in Rdf_all.columns],
L1187         )
L1188         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_co
```