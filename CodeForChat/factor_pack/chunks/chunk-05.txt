```text
ers:
L992                 tickers_bulk.tickers[orig] = tickers_bulk.tickers[ysym]
L993         for t in tickers:
L994             try:
L995                 tk = tickers_bulk.tickers.get(t) or tickers_bulk.tickers.get(yf_map[t])
L996                 info_entry = tk.info if tk is not None else {}
L997                 if not isinstance(info_entry, dict):
L998                     info_entry = {}
L999                 info_entry.setdefault("_yf_symbol", getattr(tk, "ticker", yf_map.get(t)))
L1000                 info[t] = info_entry
L1001             except Exception as e:
L1002                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L1003                 info[t] = {}
L1004         try:
L1005             sec_map = self.fetch_eps_rev_from_sec(tickers)
L1006         except Exception as e:
L1007             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L1008             sec_map = {}
L1009
L1010         def _brief_len(s):
L1011             try:
L1012                 if isinstance(s, pd.Series):
L1013                     return int(s.dropna().size)
L1014                 if isinstance(s, (list, tuple)):
L1015                     return len([v for v in s if pd.notna(v)])
L1016                 if isinstance(s, np.ndarray):
L1017                     return int(np.count_nonzero(~pd.isna(s)))
L1018                 return int(bool(s))
L1019             except Exception:
L1020                 return 0
L1021
L1022         def _has_entries(val) -> bool:
L1023             try:
L1024                 if isinstance(val, pd.Series):
L1025                     return not val.dropna().empty
L1026                 if isinstance(val, (list, tuple)):
L1027                     return any(pd.notna(v) for v in val)
L1028                 return bool(val)
L1029             except Exception:
L1030                 return False
L1031
L1032         have_rev = 0
L1033         have_eps = 0
L1034         rev_lens: list[int] = []
L1035         eps_lens: list[int] = []
L1036         rev_y_lens: list[int] = []
L1037         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L1038
L1039         for t in tickers:
L1040             entry = info.get(t, {})
L1041             m = (sec_map or {}).get(t) or {}
L1042             if entry is None or not isinstance(entry, dict):
L1043                 entry = {}
L1044                 info[t] = entry
L1045
L1046             if m:
L1047                 pairs_r = m.get("rev_q_series_pairs") or []
L1048                 pairs_e = m.get("eps_q_series_pairs") or []
L1049                 if pairs_r:
L1050                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L1051                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L1052                     s = pd.Series(val, index=idx).sort_index()
L1053                     entry["SEC_REV_Q_SERIES"] = s
L1054                 else:
L1055                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L1056                 if pairs_e:
L1057                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L1058                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L1059                     s = pd.Series(val, index=idx).sort_index()
L1060                     entry["SEC_EPS_Q_SERIES"] = s
L1061                 else:
L1062                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L1063
L1064             r = entry.get("SEC_REV_Q_SERIES")
L1065             e = entry.get("SEC_EPS_Q_SERIES")
L1066             # 年次は直近3件（約3年）だけ保持。重み分岐の nY 判定は従来通り。
L1067             try:
L1068                 if hasattr(r, "index") and isinstance(r.index, pd.DatetimeIndex):
L1069                     y = r.resample("Y").sum().dropna()
L1070                     entry["SEC_REV_Y_SERIES"] = y.tail(3)
L1071                 else:
L1072                     entry["SEC_REV_Y_SERIES"] = []
L1073             except Exception:
L1074                 entry["SEC_REV_Y_SERIES"] = []
L1075             ry = entry.get("SEC_REV_Y_SERIES")
L1076             if _has_entries(r):
L1077                 have_rev += 1
L1078             if _has_entries(e):
L1079                 have_eps += 1
L1080             lr = _brief_len(r)
L1081             le = _brief_len(e)
L1082             rev_lens.append(lr)
L1083             eps_lens.append(le)
L1084             rev_y_lens.append(_brief_len(ry))
L1085             if len(samples) < 8:
L1086                 try:
L1087                     rd = getattr(r, "index", [])[-1] if lr > 0 else None
L1088                     rv = float(r.iloc[-1]) if lr > 0 else None
L1089                     ed = getattr(e, "index", [])[-1] if le > 0 else None
L1090                     ev = float(e.iloc[-1]) if le > 0 else None
L1091                     samples.append((t, lr, str(rd) if rd is not None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L1092                 except Exception:
L1093                     samples.append((t, lr, "-", None, le, "-", None))
L1094
L1095         logger.info("[SEC] series attach: rev_q=%d/%d, eps_q=%d/%d", have_rev, len(tickers), have_eps, len(tickers))
L1096         logger.info(
L1097             "[SEC_SERIES] rev_q=%d (<=12), eps_q=%d (<=12), rev_y=%d (<=3)",
L1098             max(rev_lens) if rev_lens else 0,
L1099             max(eps_lens) if eps_lens else 0,
L1100             max(rev_y_lens) if rev_y_lens else 0,
L1101         )
L1102
L1103         if rev_lens:
L1104             rev_lens_sorted = sorted(rev_lens)
L1105             eps_lens_sorted = sorted(eps_lens)
L1106             _log(
L1107                 "SEC_SERIES",
L1108                 f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L1109                 f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L1110             )
L1111         for (t, lr, rd, rv, le, ed, ev) in samples:
L1112             _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L1113         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L1114         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L1115         if not eps_df.index.is_unique:
L1116             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L1117         eps_df = eps_df.assign(
L1118             EPS_TTM=eps_df["eps_ttm"],
L1119             EPS_TTM_PREV=eps_df.get("eps_ttm_prev", np.nan),
L1120             EPS_Q_LastQ=eps_df["eps_q_recent"],
L1121             EPS_Q_Prev=eps_df.get("eps_q_prev", np.nan),
L1122             REV_TTM=eps_df["rev_ttm"],
L1123             REV_TTM_PREV=eps_df.get("rev_ttm_prev", np.nan),
L1124             REV_Q_LastQ=eps_df["rev_q_recent"],
L1125             REV_Q_Prev=eps_df.get("rev_q_prev", np.nan),
L1126             EPS_A_LATEST=eps_df.get("eps_annual_latest", np.nan),
L1127             EPS_A_PREV=eps_df.get("eps_annual_prev", np.nan),
L1128             REV_A_LATEST=eps_df.get("rev_annual_latest", np.nan),
L1129             REV_A_PREV=eps_df.get("rev_annual_prev", np.nan),
L1130             EPS_A_CAGR3=eps_df.get("eps_cagr3", np.nan),
L1131             REV_A_CAGR3=eps_df.get("rev_cagr3", np.nan),
L1132         )
L1133         missing_logs = _build_missing_logs_after_impute(eps_df)
L1134         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L1135         try:
L1136             n = len(eps_df)
L1137             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L1138             c_rev = int(eps_df["REV_TTM"].notna().sum())
L1139             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L1140         except Exception:
L1141             pass
L1142         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L1143         T.log("eps/fcf prep done")
L1144         returns = px[tickers].pct_change()
L1145         T.log("price prep/returns done")
L1146         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns, missing_logs=missing_logs)
L1147
L1148 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L1149 class Selector:
L1150     # ---- DRRS helpers（Selector専用） ----
L1151     @staticmethod
L1152     def _z_np(X: np.ndarray) -> np.ndarray:
L1153         X = np.asarray(X, dtype=np.float32)
L1154         m = np.nanmean(X, axis=0, keepdims=True)
L1155         s = np.nanstd(X, axis=0, keepdims=True)
L1156         # 分母0/全NaN列の安全化：std==0 を 1 に置換（z=0に収束）
L1157         s = np.where(np.isfinite(s) & (s > 0), s, 1.0).astype(np.float32)
L1158         with np.errstate(invalid="ignore", divide="ignore"):
L1159             Z = (np.nan_to_num(X) - np.nan_to_num(m)) / s
L1160         return np.nan_to_num(Z)
L1161
L1162     @classmethod
L1163     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L1164         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L1165         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L1166         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L1167         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L1168         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L1169
L1170     @classmethod
L1171     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L1172         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L1173         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L1174         if k==0: return []
L1175         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L1176         for _ in range(k):
L1177             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L1178             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L1179             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L1180         return sorted(S)
L1181
L1182     @staticmethod
L1183     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L1184         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1185         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L1186
L1187     @classmethod
L1188     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L1189         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L1190         while improved and passes<max_pass:
L1191             improved, passes = False, passes+1
L1192             for i,out in enumerate(list(S)):
L1193                 for inn in range(len(score)):
L1194                     if inn in S: continue
L1195                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L1196                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1197                 if improved: break
L1198         return S, best
L1199
L1200     @staticmethod
L1201     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L1202         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1203         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L1204         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L1205         return float(s[idx].sum() - lam*within - mu*cross)
L1206
L1207     @classmethod
L1208     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L1209         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cr
```