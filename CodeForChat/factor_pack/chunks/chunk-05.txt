```text
, "G_PULLBACK_last_date"]) if pb else ""
L839         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L840         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L841         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L842     except Exception:
L843         pass
L844     return t
L845
L846 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L847
L848 def io_build_input_bundle() -> InputBundle:
L849     """
L850     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L851     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L852     """
L853     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L854     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L855
L856 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L857               n_target: int) -> tuple[list, float, float, float]:
L858     """
L859     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L860     戻り値：(pick, avg_res_corr, sum_score, objective)
L861     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L862     """
L863     sc.cfg = cfg
L864
L865     if hasattr(sc, "score_build_features"):
L866         feat = sc.score_build_features(inb)
L867         if not hasattr(sc, "_feat_logged"):
L868             T.log("features built (scorer)")
L869             sc._feat_logged = True
L870         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L871     else:
L872         fb = sc.aggregate_scores(inb, cfg)
L873         if not hasattr(sc, "_feat_logged"):
L874             T.log("features built (scorer)")
L875             sc._feat_logged = True
L876         sc._feat = fb
L877         agg = fb.g_score if group == "G" else fb.d_score_all
L878         if group == "D" and hasattr(fb, "df"):
L879             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L880
L881     if hasattr(sc, "filter_candidates"):
L882         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L883
L884     selector = Selector()
L885     if hasattr(sc, "select_diversified"):
L886         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L887             selector=selector, prev_tickers=None,
L888             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L889             cross_mu=cfg.drrs.cross_mu_gd)
L890     else:
L891         if group == "G":
L892             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L893             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L894                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L895                 lam=cfg.drrs.G.get("lam", 0.68),
L896                 lookback=cfg.drrs.G.get("lookback", 252),
L897                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L898         else:
L899             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L900             g_fixed = getattr(sc, "_top_G", None)
L901             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L902                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L903                 lam=cfg.drrs.D.get("lam", 0.85),
L904                 lookback=cfg.drrs.D.get("lookback", 504),
L905                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L906                 mu=cfg.drrs.cross_mu_gd)
L907         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L908         sum_sc = res["sum_score"]; obj = res["objective"]
L909         if group == "D":
L910             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L911             T.log("selection finalized (G/D)")
L912     try:
L913         inc = [t for t in exist if t in agg.index]
L914         pick = _sticky_keep_current(
L915             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L916             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L917         )
L918     except Exception as _e:
L919         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L920     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L921     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L922     try:
L923         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L924         near10 = list(pool.sort_values(ascending=False).head(10).index)
L925         setattr(sc, f"_near_{group}", near10)
L926         setattr(sc, f"_agg_{group}", agg)
L927     except Exception:
L928         pass
L929
L930     if group == "D":
L931         T.log("save done")
L932     if group == "G":
L933         sc._top_G = pick
L934     return pick, avg_r, sum_sc, obj
L935
L936 def run_pipeline() -> SelectionBundle:
L937     """
L938     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L939     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L940     """
L941     inb = io_build_input_bundle()
L942     cfg = PipelineConfig(weights=WeightsConfig(g=g_weights, d=D_weights),
L943         drrs=DRRSParams(corrM=corrM, shrink=DRRS_SHRINK,
L944                          G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD),
L945         price_max=CAND_PRICE_MAX)
L946     sc = Scorer()
L947     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L948     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L949     alpha = Scorer.spx_to_alpha(inb.spx)
L950     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L951     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L952     sc._top_G = top_G
L953     try:
L954         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L955         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L956     except Exception:
L957         pass
L958     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L959     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L960     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L961     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L962     fb = getattr(sc, "_feat", None)
L963     near_G = getattr(sc, "_near_G", [])
L964     selected12 = list(top_G)
L965     df = fb.df if fb is not None else pd.DataFrame()
L966     guni = _infer_g_universe(df, selected12, near_G)
L967     try:
L968         fire_recent = [t for t in guni
L969                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L970                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L971     except Exception: fire_recent = []
L972
L973     lines = [
L974         "【G枠レポート｜週次モニタ（直近5営業日）】",
L975         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L976         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L977         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L978
L979     if fire_recent:
L980         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L981         lines.append(f"過去5営業日の検知: {fire_list}")
L982     else:
L983         lines.append("過去5営業日の検知: なし")
L984
L985     try:
L986         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L987         if webhook:
L988             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L989     except Exception:
L990         pass
L991
L992     out = Output(debug=debug_mode)
L993     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L994     try: out._sc = sc
L995     except Exception: pass
L996     if hasattr(sc, "_feat"):
L997         try:
L998             fb = sc._feat
L999             out.miss_df = fb.missing_logs
L1000             out.display_results(
L1001                 exist=exist,
L1002                 bench=bench,
L1003                 df_z=fb.df_z,
L1004                 g_score=fb.g_score,
L1005                 d_score_all=fb.d_score_all,
L1006                 init_G=top_G,
L1007                 init_D=top_D,
L1008                 top_G=top_G,
L1009                 top_D=top_D,
L1010                 df_full_z=getattr(fb, "df_full_z", None),
L1011                 prev_G=getattr(sc, "_prev_G", exist),
L1012                 prev_D=getattr(sc, "_prev_D", exist),
L1013             )
L1014         except Exception:
L1015             pass
L1016     out.notify_slack()
L1017     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1018               "sum_score": sumG, "objective": objG},
L1019         resD={"tickers": top_D, "avg_res_corr": avgD,
L1020               "sum_score": sumD, "objective": objD},
L1021         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1022
L1023     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1024     try:
L1025         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1026               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1027               .sort_values("G_plus_D")
L1028               .head(10)
L1029               .round(3))
L1030         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1031         _post_slack({"text": f"```{low_msg}```"})
L1032     except Exception as _e:
L1033         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1034
L1035     if debug_mode and getattr(out, "debug_text", ""):
L1036         try:
L1037             _slack_debug(out.debug_text)
L1038         except Exception as e:
L1039             print(f"[debug skipped] {e}")
L1040
L1041     return sb
L1042
L1043 if __name__ == "__main__":
L1044     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #
L26 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L27 # =============================================================================
L28
L29 import os, sys, warnings
L30 import requests
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36
L37 if TYPE_CHECKING:
L38     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L39
L40 # ---- Dividend Helpers -------------------------------------------------------
L41 def _last_close(t, price_map=None):
L42     if price_map and (c := price_map.get(t)) is not None: return float(c)
L43     try:
L44         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L45         return float(h.iloc[-1]) if len(h) else np.nan
L46     except Exception:
L47         return np.nan
L48
L49 def _ttm_div_sum(t, lookback_days=400):
L50     try:
L51         div = yf.Ticke
```