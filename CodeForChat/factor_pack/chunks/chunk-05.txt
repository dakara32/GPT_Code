```text
ng(index=False)}```\n")
L843         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L844
L845         try:
L846             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L847             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L848             if r is not None:
L849                 r.raise_for_status()
L850         except Exception as e:
L851             print(f"[ERR] main_post_failed: {e}")
L852
L853         if debug_mode:
L854             try:
L855                 requests.post(SLACK_WEBHOOK_URL, json={"text": "```DEBUG (after Low Score)```"})
L856             except Exception as e:
L857                 print(f"[ERR] debug_header_failed: {e}")
L858             _slack_send_text_chunks(SLACK_WEBHOOK_URL, self.debug_text, chunk=2800)
L859
L860 def _infer_g_universe(feature_df, selected12=None, near5=None):
L861     try:
L862         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L863         if out: return out
L864     except Exception:
L865         pass
L866     base = set()
L867     for lst in (selected12 or []), (near5 or []):
L868         for x in (lst or []): base.add(x)
L869     return list(base) if base else list(feature_df.index)
L870
L871 def _fmt_with_fire_mark(tickers, feature_df):
L872     out = []
L873     for t in tickers or []:
L874         try:
L875             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L876             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L877             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L878         except Exception:
L879             out.append(t)
L880     return out
L881
L882 def _label_recent_event(t, feature_df):
L883     try:
L884         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L885         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L886         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L887         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L888         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L889     except Exception:
L890         pass
L891     return t
L892
L893 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L894
L895 def io_build_input_bundle() -> InputBundle:
L896     """
L897     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L898     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L899     """
L900     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L901     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L902
L903 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L904               n_target: int) -> tuple[list, float, float, float]:
L905     """
L906     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L907     戻り値：(pick, avg_res_corr, sum_score, objective)
L908     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L909     """
L910     sc.cfg = cfg
L911
L912     if hasattr(sc, "score_build_features"):
L913         feat = sc.score_build_features(inb)
L914         if not hasattr(sc, "_feat_logged"):
L915             T.log("features built (scorer)")
L916             sc._feat_logged = True
L917         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L918     else:
L919         fb = sc.aggregate_scores(inb, cfg)
L920         if not hasattr(sc, "_feat_logged"):
L921             T.log("features built (scorer)")
L922             sc._feat_logged = True
L923         sc._feat = fb
L924         agg = fb.g_score if group == "G" else fb.d_score_all
L925         if group == "D" and hasattr(fb, "df"):
L926             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L927
L928     if hasattr(sc, "filter_candidates"):
L929         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L930
L931     selector = Selector()
L932     if hasattr(sc, "select_diversified"):
L933         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L934             selector=selector, prev_tickers=None,
L935             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L936             cross_mu=cfg.drrs.cross_mu_gd)
L937     else:
L938         if group == "G":
L939             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L940             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L941                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L942                 lam=cfg.drrs.G.get("lam", 0.68),
L943                 lookback=cfg.drrs.G.get("lookback", 252),
L944                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L945         else:
L946             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L947             g_fixed = getattr(sc, "_top_G", None)
L948             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L949                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L950                 lam=cfg.drrs.D.get("lam", 0.85),
L951                 lookback=cfg.drrs.D.get("lookback", 504),
L952                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L953                 mu=cfg.drrs.cross_mu_gd)
L954         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L955         sum_sc = res["sum_score"]; obj = res["objective"]
L956         if group == "D":
L957             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L958             T.log("selection finalized (G/D)")
L959     try:
L960         inc = [t for t in exist if t in agg.index]
L961         pick = _sticky_keep_current(
L962             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L963             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L964         )
L965     except Exception as _e:
L966         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L967     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L968     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L969     try:
L970         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L971         near10 = list(pool.sort_values(ascending=False).head(10).index)
L972         setattr(sc, f"_near_{group}", near10)
L973         setattr(sc, f"_agg_{group}", agg)
L974     except Exception:
L975         pass
L976
L977     if group == "D":
L978         T.log("save done")
L979     if group == "G":
L980         sc._top_G = pick
L981     return pick, avg_r, sum_sc, obj
L982
L983 def run_pipeline() -> SelectionBundle:
L984     """
L985     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L986     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L987     """
L988     inb = io_build_input_bundle()
L989     cfg = PipelineConfig(weights=WeightsConfig(g=g_weights, d=D_weights),
L990         drrs=DRRSParams(corrM=corrM, shrink=DRRS_SHRINK,
L991                          G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD),
L992         price_max=CAND_PRICE_MAX)
L993     sc = Scorer()
L994     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L995     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L996     alpha = Scorer.spx_to_alpha(inb.spx)
L997     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L998     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L999     sc._top_G = top_G
L1000     try:
L1001         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1002         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1003     except Exception:
L1004         pass
L1005     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1006     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1007     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1008     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1009     fb = getattr(sc, "_feat", None)
L1010     near_G = getattr(sc, "_near_G", [])
L1011     selected12 = list(top_G)
L1012     df = fb.df if fb is not None else pd.DataFrame()
L1013     guni = _infer_g_universe(df, selected12, near_G)
L1014     try:
L1015         fire_recent = [t for t in guni
L1016                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1017                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1018     except Exception: fire_recent = []
L1019
L1020     lines = [
L1021         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1022         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1023         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1024         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1025
L1026     if fire_recent:
L1027         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1028         lines.append(f"過去5営業日の検知: {fire_list}")
L1029     else:
L1030         lines.append("過去5営業日の検知: なし")
L1031
L1032     try:
L1033         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1034         if webhook:
L1035             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1036     except Exception:
L1037         pass
L1038
L1039     out = Output()
L1040     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1041     try: out._sc = sc
L1042     except Exception: pass
L1043     if hasattr(sc, "_feat"):
L1044         try:
L1045             fb = sc._feat
L1046             out.miss_df = fb.missing_logs
L1047             out.display_results(
L1048                 exist=exist,
L1049                 bench=bench,
L1050                 df_z=fb.df_z,
L1051                 g_score=fb.g_score,
L1052                 d_score_all=fb.d_score_all,
L1053                 init_G=top_G,
L1054                 init_D=top_D,
L1055                 top_G=top_G,
L1056                 top_D=top_D,
L1057                 df_full_z=getattr(fb, "df_full_z", None),
L1058                 prev_G=getattr(sc, "_prev_G", exist),
L1059                 prev_D=getattr(sc, "_prev_D", exist),
L1060             )
L1061         except Exception:
L1062             pass
L1063     out.notify_slack()
L1064     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1065               "sum_score": sumG, "objective": objG},
L1066         resD={"tickers": top_D, "avg_res_corr": avgD,
L1067               "sum_score": sumD, "objective": objD},
L1068         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1069
L1070     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1071     try:
L1072         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1073               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1074               .sort_values("G_plus_D")
L1075               .head(10)
L1076               .round(3))
L1077         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1078         _post_slack({"text": f"```{low_msg}```"})
L1079     except Exception as _e:
L1080         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1081
L1082     return sb
L1083
L1084 if __name__ == "__main__":
L1085     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 d
```