```text

L980         have_eps = 0
L981         rev_lens: list[int] = []
L982         eps_lens: list[int] = []
L983         rev_y_lens: list[int] = []
L984         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L985
L986         for t in tickers:
L987             entry = info.get(t, {})
L988             m = (sec_map or {}).get(t) or {}
L989             if entry is None or not isinstance(entry, dict):
L990                 entry = {}
L991                 info[t] = entry
L992
L993             if m:
L994                 pairs_r = m.get("rev_q_series_pairs") or []
L995                 pairs_e = m.get("eps_q_series_pairs") or []
L996                 if pairs_r:
L997                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L998                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L999                     s = pd.Series(val, index=idx).sort_index()
L1000                     entry["SEC_REV_Q_SERIES"] = s
L1001                 else:
L1002                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L1003                 if pairs_e:
L1004                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L1005                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L1006                     s = pd.Series(val, index=idx).sort_index()
L1007                     entry["SEC_EPS_Q_SERIES"] = s
L1008                 else:
L1009                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L1010
L1011             r = entry.get("SEC_REV_Q_SERIES")
L1012             e = entry.get("SEC_EPS_Q_SERIES")
L1013             # 年次は直近3件（約3年）だけ保持。重み分岐の nY 判定は従来通り。
L1014             try:
L1015                 if hasattr(r, "index") and isinstance(r.index, pd.DatetimeIndex):
L1016                     y = r.resample("Y").sum().dropna()
L1017                     entry["SEC_REV_Y_SERIES"] = y.tail(3)
L1018                 else:
L1019                     entry["SEC_REV_Y_SERIES"] = []
L1020             except Exception:
L1021                 entry["SEC_REV_Y_SERIES"] = []
L1022             ry = entry.get("SEC_REV_Y_SERIES")
L1023             if _has_entries(r):
L1024                 have_rev += 1
L1025             if _has_entries(e):
L1026                 have_eps += 1
L1027             lr = _brief_len(r)
L1028             le = _brief_len(e)
L1029             rev_lens.append(lr)
L1030             eps_lens.append(le)
L1031             rev_y_lens.append(_brief_len(ry))
L1032             if len(samples) < 8:
L1033                 try:
L1034                     rd = getattr(r, "index", [])[-1] if lr > 0 else None
L1035                     rv = float(r.iloc[-1]) if lr > 0 else None
L1036                     ed = getattr(e, "index", [])[-1] if le > 0 else None
L1037                     ev = float(e.iloc[-1]) if le > 0 else None
L1038                     samples.append((t, lr, str(rd) if rd is not None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L1039                 except Exception:
L1040                     samples.append((t, lr, "-", None, le, "-", None))
L1041
L1042         logger.info("[SEC] series attach: rev_q=%d/%d, eps_q=%d/%d", have_rev, len(tickers), have_eps, len(tickers))
L1043         logger.info(
L1044             "[SEC_SERIES] rev_q=%d (<=12), eps_q=%d (<=12), rev_y=%d (<=3)",
L1045             max(rev_lens) if rev_lens else 0,
L1046             max(eps_lens) if eps_lens else 0,
L1047             max(rev_y_lens) if rev_y_lens else 0,
L1048         )
L1049
L1050         if rev_lens:
L1051             rev_lens_sorted = sorted(rev_lens)
L1052             eps_lens_sorted = sorted(eps_lens)
L1053             _log(
L1054                 "SEC_SERIES",
L1055                 f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L1056                 f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L1057             )
L1058         for (t, lr, rd, rv, le, ed, ev) in samples:
L1059             _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L1060         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L1061         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L1062         if not eps_df.index.is_unique:
L1063             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L1064         eps_df = eps_df.assign(
L1065             EPS_TTM=eps_df["eps_ttm"],
L1066             EPS_TTM_PREV=eps_df.get("eps_ttm_prev", np.nan),
L1067             EPS_Q_LastQ=eps_df["eps_q_recent"],
L1068             EPS_Q_Prev=eps_df.get("eps_q_prev", np.nan),
L1069             REV_TTM=eps_df["rev_ttm"],
L1070             REV_TTM_PREV=eps_df.get("rev_ttm_prev", np.nan),
L1071             REV_Q_LastQ=eps_df["rev_q_recent"],
L1072             REV_Q_Prev=eps_df.get("rev_q_prev", np.nan),
L1073             EPS_A_LATEST=eps_df.get("eps_annual_latest", np.nan),
L1074             EPS_A_PREV=eps_df.get("eps_annual_prev", np.nan),
L1075             REV_A_LATEST=eps_df.get("rev_annual_latest", np.nan),
L1076             REV_A_PREV=eps_df.get("rev_annual_prev", np.nan),
L1077             EPS_A_CAGR3=eps_df.get("eps_cagr3", np.nan),
L1078             REV_A_CAGR3=eps_df.get("rev_cagr3", np.nan),
L1079         )
L1080         missing_logs = pd.DataFrame()
L1081         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L1082         try:
L1083             n = len(eps_df)
L1084             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L1085             c_rev = int(eps_df["REV_TTM"].notna().sum())
L1086             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L1087         except Exception:
L1088             pass
L1089         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L1090         _tlog("eps/fcf prep done")
L1091         returns = px[tickers].pct_change()
L1092         _tlog("price prep/returns done")
L1093         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns, missing_logs=missing_logs)
L1094
L1095 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L1096 class Selector:
L1097     # ---- DRRS helpers（Selector専用） ----
L1098     @staticmethod
L1099     def _z_np(X: np.ndarray) -> np.ndarray:
L1100         X = np.asarray(X, dtype=np.float32)
L1101         m = np.nanmean(X, axis=0, keepdims=True)
L1102         s = np.nanstd(X, axis=0, keepdims=True)
L1103         # 分母0/全NaN列の安全化：std==0 を 1 に置換（z=0に収束）
L1104         s = np.where(np.isfinite(s) & (s > 0), s, 1.0).astype(np.float32)
L1105         with np.errstate(invalid="ignore", divide="ignore"):
L1106             Z = (np.nan_to_num(X) - np.nan_to_num(m)) / s
L1107         return np.nan_to_num(Z)
L1108
L1109     @classmethod
L1110     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L1111         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L1112         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L1113         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L1114         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L1115         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L1116
L1117     @classmethod
L1118     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L1119         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L1120         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L1121         if k==0: return []
L1122         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L1123         for _ in range(k):
L1124             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L1125             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L1126             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L1127         return sorted(S)
L1128
L1129     @staticmethod
L1130     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L1131         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1132         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L1133
L1134     @classmethod
L1135     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L1136         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L1137         while improved and passes<max_pass:
L1138             improved, passes = False, passes+1
L1139             for i,out in enumerate(list(S)):
L1140                 for inn in range(len(score)):
L1141                     if inn in S: continue
L1142                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L1143                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1144                 if improved: break
L1145         return S, best
L1146
L1147     @staticmethod
L1148     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L1149         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1150         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L1151         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L1152         return float(s[idx].sum() - lam*within - mu*cross)
L1153
L1154     @classmethod
L1155     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L1156         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L1157         while improved and passes<max_pass:
L1158             improved, passes = False, passes+1
L1159             for i,out in enumerate(list(S)):
L1160                 for inn in range(N):
L1161                     if inn in S: continue
L1162                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L1163                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1164                 if improved: break
L1165         return S, best
L1166
L1167     @staticmethod
L1168     def avg_corr(C: np.ndarray, idx) -> float:
L1169         k = len(idx); P = C[np.ix_(idx, idx)]
L1170         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L1171
L1172     @classmethod
L1173     def select_bucket_drrs(cls, returns_df: pd.DataFrame, score_ser: pd.Series, pool_tickers: list[str], k: int, *, n_pc: int, gamma: float, lam: float, lookback: int, shrink: float=0.10, g_fixed_tickers: list[str]|None=None, mu: float=0.0):
L1174         g_fixed = [t for t in (g_fixed_tickers or []) if t in returns_df.columns]
L1175         union = [t for t in pool_tickers if t in returns_df.columns]
L1176         for t in g_fixed:
L1177             if t not in union: union.append(t)
L1178         Rdf_all = returns_df[union]
L1179         Rdf_all = Rdf_all.iloc[-lookback:] if len(Rdf_all) >= lookback else Rdf_all
L1180         _thresh = max(1, int(0.8 * len(Rdf_all)))
L1181         Rdf_all = Rdf_all.dropna(axis=1, thresh=_thresh)
L1182         Rdf_all = Rdf_all.dropna()
L1183         pool_eff, g_eff = (
L1184             [t for t in pool_tickers if t in Rdf_all.columns],
L1185             [t for t in g_fixed if t in Rdf_all.columns],
L1186         )
L1187         if len(pool_eff)==0: return dict(idx=[], tickers=[], avg_res_corr=np.nan, sum_score=0.0, objective=-np.inf)
L1188         score = score_ser.reindex(
```