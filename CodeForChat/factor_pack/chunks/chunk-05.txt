```text
'GSC')
L926         self.g_table = pd.concat([df_z.loc[G_UNI,['GROWTH_F','MOM','TRD','VOL']], gsc_series], axis=1)
L927         self.g_table.index = [t + ("⭐️" if t in top_G else "") for t in G_UNI]
L928         self.g_formatters = {col:"{:.2f}".format for col in ['GROWTH_F','MOM','TRD','VOL']}; self.g_formatters['GSC'] = "{:.3f}".format
L929         self.g_title = (f"[G枠 / {N_G} / {_fmt_w(g_weights)} / corrM={corrM} / "
L930                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L931         if near_G:
L932             add = [t for t in near_G if t not in set(G_UNI)][:10]
L933             if len(add) < 10:
L934                 try:
L935                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L936                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L937                     used = set(G_UNI + add)
L938                     def _push(lst):
L939                         nonlocal add, used
L940                         for t in lst:
L941                             if len(add) == 10: break
L942                             if t in aggG.index and t not in used:
L943                                 add.append(t); used.add(t)
L944                     _push(out_now)           # ① 今回 OUT を優先
L945                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L946                 except Exception:
L947                     pass
L948             if add:
L949                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L950                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L951         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L952
L953         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L954         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L955         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L956         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L957         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L958         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L959         import scorer
L960         dw_eff = scorer.D_WEIGHTS_EFF
L961         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L962                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L963         if near_D:
L964             add = [t for t in near_D if t not in set(D_UNI)][:10]
L965             if add:
L966                 d_disp2 = pd.DataFrame(index=add)
L967                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L968                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L969                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L970         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L971
L972         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L973         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L974         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L975
L976         self.io_table = pd.DataFrame({
L977             'IN': pd.Series(in_list),
L978             '/ OUT': pd.Series(out_list)
L979         })
L980         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L981         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L982         self.io_table['GSC'] = pd.Series(g_list)
L983         self.io_table['DSC'] = pd.Series(d_list)
L984
L985         print("Changes:")
L986         print(self.io_table.to_string(index=False))
L987
L988         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L989         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L990         for name,ticks in portfolios.items():
L991             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L992             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L993             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L994             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L995             if len(ticks)>=2:
L996                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L997                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L998                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L999             else: RAW_rho = RESID_rho = np.nan
L1000             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L1001         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L1002         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L1003         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L1004         def _fmt_row(s):
L1005             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L1006         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L1007         # === 追加: GSC+DSC が低い順 TOP10 ===
L1008         try:
L1009             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L1010             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L1011             all_scores = all_scores.dropna(subset=['G_plus_D'])
L1012             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L1013             print("Low Score Candidates (GSC+DSC bottom 10):")
L1014             print(self.low10_table.to_string())
L1015         except Exception as e:
L1016             print(f"[warn] low-score ranking failed: {e}")
L1017             self.low10_table = None
L1018         self.debug_text = ""
L1019         if debug_mode:
L1020             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L1021         else:
L1022             logger.debug(
L1023                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L1024                 debug_mode, True
L1025             )
L1026         self._debug_logged = True
L1027
L1028     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1029     def notify_slack(self):
L1030         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1031
L1032         if not SLACK_WEBHOOK_URL:
L1033             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1034             return
L1035
L1036         def _filter_suffix_from(spec: dict, group: str) -> str:
L1037             g = spec.get(group, {})
L1038             parts = [str(m) for m in g.get("pre_mask", [])]
L1039             for k, v in (g.get("pre_filter", {}) or {}).items():
L1040                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L1041                 name = {"beta": "β"}.get(base, base)
L1042                 try:
L1043                     val = f"{float(v):g}"
L1044                 except Exception:
L1045                     val = str(v)
L1046                 parts.append(f"{name}{op}{val}")
L1047             return "" if not parts else " / filter:" + " & ".join(parts)
L1048
L1049         def _inject_filter_suffix(title: str, group: str) -> str:
L1050             suf = _filter_suffix_from(FILTER_SPEC, group)
L1051             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1052
L1053         def _blk(title, tbl, fmt=None, drop=()):
L1054             if tbl is None or getattr(tbl, 'empty', False):
L1055                 return f"{title}\n(選定なし)\n"
L1056             if drop and hasattr(tbl, 'columns'):
L1057                 keep = [c for c in tbl.columns if c not in drop]
L1058                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1059             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1060
L1061         message = "📈 ファクター分散最適化の結果\n"
L1062         if self.miss_df is not None and not self.miss_df.empty:
L1063             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L1064         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1065         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1066         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L1067         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L1068
L1069         try:
L1070             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1071             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1072             if r is not None:
L1073                 r.raise_for_status()
L1074         except Exception as e:
L1075             print(f"[ERR] main_post_failed: {e}")
L1076
L1077 def _infer_g_universe(feature_df, selected12=None, near5=None):
L1078     try:
L1079         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1080         if out: return out
L1081     except Exception:
L1082         pass
L1083     base = set()
L1084     for lst in (selected12 or []), (near5 or []):
L1085         for x in (lst or []): base.add(x)
L1086     return list(base) if base else list(feature_df.index)
L1087
L1088 def _fmt_with_fire_mark(tickers, feature_df):
L1089     out = []
L1090     for t in tickers or []:
L1091         try:
L1092             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L1093             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L1094             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L1095         except Exception:
L1096             out.append(t)
L1097     return out
L1098
L1099 def _label_recent_event(t, feature_df):
L1100     try:
L1101         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L1102         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L1103         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L1104         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L1105         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L1106     except Exception:
L1107         pass
L1108     return t
L1109
L1110 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1111
L1112 def io_build_input_bundle() -> Inp
```