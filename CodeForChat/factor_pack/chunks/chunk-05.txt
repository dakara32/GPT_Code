```text
0                         f"LB={DRRS_G['lookback']} nPC={DRRS_G['n_pc']} γ={DRRS_G['gamma']} λ={DRRS_G['lam']} η={DRRS_G['eta']} shrink={DRRS_SHRINK}]")
L921         if near_G:
L922             add = [t for t in near_G if t not in set(G_UNI)][:10]
L923             if len(add) < 10:
L924                 try:
L925                     aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L926                     out_now = sorted(set(exist) - set(top_G + top_D))  # 今回 OUT
L927                     used = set(G_UNI + add)
L928                     def _push(lst):
L929                         nonlocal add, used
L930                         for t in lst:
L931                             if len(add) == 10: break
L932                             if t in aggG.index and t not in used:
L933                                 add.append(t); used.add(t)
L934                     _push(out_now)           # ① 今回 OUT を優先
L935                     _push(list(aggG.index))  # ② まだ足りなければ上位で充填
L936                 except Exception:
L937                     pass
L938             if add:
L939                 near_tbl = pd.concat([df_z.loc[add,['GROWTH_F','MOM','TRD','VOL']], pd.Series({t: g_score.get(t) for t in add}, name='GSC')], axis=1)
L940                 self.g_table = pd.concat([self.g_table, near_tbl], axis=0)
L941         print(self.g_title); print(self.g_table.to_string(formatters=self.g_formatters))
L942
L943         extra_D = [t for t in init_D if t not in top_D][:5]; D_UNI = top_D + extra_D
L944         cols_D = ['QAL','YLD','VOL','TRD']; d_disp = pd.DataFrame(index=D_UNI)
L945         d_disp['QAL'], d_disp['YLD'], d_disp['VOL'], d_disp['TRD'] = df_z.loc[D_UNI,'D_QAL'], df_z.loc[D_UNI,'D_YLD'], df_z.loc[D_UNI,'D_VOL_RAW'], df_z.loc[D_UNI,'D_TRD']
L946         dsc_series = pd.Series({t: d_score_all.get(t) for t in D_UNI}, name='DSC')
L947         self.d_table = pd.concat([d_disp, dsc_series], axis=1); self.d_table.index = [t + ("⭐️" if t in top_D else "") for t in D_UNI]
L948         self.d_formatters = {col:"{:.2f}".format for col in cols_D}; self.d_formatters['DSC']="{:.3f}".format
L949         import scorer
L950         dw_eff = scorer.D_WEIGHTS_EFF
L951         self.d_title = (f"[D枠 / {N_D} / {_fmt_w(dw_eff)} / corrM={corrM} / "
L952                         f"LB={DRRS_D['lookback']} nPC={DRRS_D['n_pc']} γ={DRRS_D['gamma']} λ={DRRS_D['lam']} μ={CROSS_MU_GD} η={DRRS_D['eta']} shrink={DRRS_SHRINK}]")
L953         if near_D:
L954             add = [t for t in near_D if t not in set(D_UNI)][:10]
L955             if add:
L956                 d_disp2 = pd.DataFrame(index=add)
L957                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L958                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L959                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L960         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L961
L962         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L963         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L964         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L965
L966         self.io_table = pd.DataFrame({
L967             'IN': pd.Series(in_list),
L968             '/ OUT': pd.Series(out_list)
L969         })
L970         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L971         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L972         self.io_table['GSC'] = pd.Series(g_list)
L973         self.io_table['DSC'] = pd.Series(d_list)
L974
L975         print("Changes:")
L976         print(self.io_table.to_string(index=False))
L977
L978         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L979         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L980         for name,ticks in portfolios.items():
L981             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L982             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L983             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L984             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L985             if len(ticks)>=2:
L986                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L987                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L988                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L989             else: RAW_rho = RESID_rho = np.nan
L990             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L991         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L992         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L993         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L994         def _fmt_row(s):
L995             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L996         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L997         # === 追加: GSC+DSC が低い順 TOP10 ===
L998         try:
L999             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L1000             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L1001             all_scores = all_scores.dropna(subset=['G_plus_D'])
L1002             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L1003             print("Low Score Candidates (GSC+DSC bottom 10):")
L1004             print(self.low10_table.to_string())
L1005         except Exception as e:
L1006             print(f"[warn] low-score ranking failed: {e}")
L1007             self.low10_table = None
L1008         self.debug_text = ""
L1009         if debug_mode:
L1010             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L1011         else:
L1012             logger.debug(
L1013                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L1014                 debug_mode, True
L1015             )
L1016         self._debug_logged = True
L1017
L1018     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L1019     def notify_slack(self):
L1020         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L1021
L1022         if not SLACK_WEBHOOK_URL:
L1023             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L1024             return
L1025
L1026         def _filter_suffix_from(spec: dict, group: str) -> str:
L1027             g = spec.get(group, {})
L1028             parts = [str(m) for m in g.get("pre_mask", [])]
L1029             for k, v in (g.get("pre_filter", {}) or {}).items():
L1030                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L1031                 name = {"beta": "β"}.get(base, base)
L1032                 try:
L1033                     val = f"{float(v):g}"
L1034                 except Exception:
L1035                     val = str(v)
L1036                 parts.append(f"{name}{op}{val}")
L1037             return "" if not parts else " / filter:" + " & ".join(parts)
L1038
L1039         def _inject_filter_suffix(title: str, group: str) -> str:
L1040             suf = _filter_suffix_from(FILTER_SPEC, group)
L1041             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L1042
L1043         def _blk(title, tbl, fmt=None, drop=()):
L1044             if tbl is None or getattr(tbl, 'empty', False):
L1045                 return f"{title}\n(選定なし)\n"
L1046             if drop and hasattr(tbl, 'columns'):
L1047                 keep = [c for c in tbl.columns if c not in drop]
L1048                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L1049             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L1050
L1051         message = "📈 ファクター分散最適化の結果\n"
L1052         if self.miss_df is not None and not self.miss_df.empty:
L1053             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L1054         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L1055         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L1056         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L1057         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L1058
L1059         try:
L1060             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1061             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1062             if r is not None:
L1063                 r.raise_for_status()
L1064         except Exception as e:
L1065             print(f"[ERR] main_post_failed: {e}")
L1066
L1067 def _infer_g_universe(feature_df, selected12=None, near5=None):
L1068     try:
L1069         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1070         if out: return out
L1071     except Exception:
L1072         pass
L1073     base = set()
L1074     for lst in (selected12 or []), (near5 or []):
L1075         for x in (lst or []): base.add(x)
L1076     return list(base) if base else list(feature_df.index)
L1077
L1078 def _fmt_with_fire_mark(tickers, feature_df):
L1079     out = []
L1080     for t in tickers or []:
L1081         try:
L1082             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L1083             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L1084             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L1085         except Exception:
L1086             out.append(t)
L1087     return out
L1088
L1089 def _label_recent_event(t, feature_df):
L1090     try:
L1091         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L1092         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L1093         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L1094         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L1095         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L1096     except Exception:
L1097         pass
L1098     return t
L1099
L1100 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1101
L1102 def io_build_input_bundle() -> InputBundle:
L1103     """
L1104     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1105     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1106     """
L1107     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1108     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"],
```