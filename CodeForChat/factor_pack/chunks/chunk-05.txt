```text
L847             g = spec.get(group, {})
L848             parts = [str(m) for m in g.get("pre_mask", [])]
L849             for k, v in (g.get("pre_filter", {}) or {}).items():
L850                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L851                 name = {"beta": "β"}.get(base, base)
L852                 try:
L853                     val = f"{float(v):g}"
L854                 except Exception:
L855                     val = str(v)
L856                 parts.append(f"{name}{op}{val}")
L857             return "" if not parts else " / filter:" + " & ".join(parts)
L858
L859         def _inject_filter_suffix(title: str, group: str) -> str:
L860             suf = _filter_suffix_from(FILTER_SPEC, group)
L861             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L862
L863         def _blk(title, tbl, fmt=None, drop=()):
L864             if tbl is None or getattr(tbl, 'empty', False):
L865                 return f"{title}\n(選定なし)\n"
L866             if drop and hasattr(tbl, 'columns'):
L867                 keep = [c for c in tbl.columns if c not in drop]
L868                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L869             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L870
L871         message = "📈 ファクター分散最適化の結果\n"
L872         if self.miss_df is not None and not self.miss_df.empty:
L873             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L874         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L875         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L876         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L877         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L878
L879         try:
L880             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L881             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L882             if r is not None:
L883                 r.raise_for_status()
L884         except Exception as e:
L885             print(f"[ERR] main_post_failed: {e}")
L886
L887 def _infer_g_universe(feature_df, selected12=None, near5=None):
L888     try:
L889         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L890         if out: return out
L891     except Exception:
L892         pass
L893     base = set()
L894     for lst in (selected12 or []), (near5 or []):
L895         for x in (lst or []): base.add(x)
L896     return list(base) if base else list(feature_df.index)
L897
L898 def _fmt_with_fire_mark(tickers, feature_df):
L899     out = []
L900     for t in tickers or []:
L901         try:
L902             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L903             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L904             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L905         except Exception:
L906             out.append(t)
L907     return out
L908
L909 def _label_recent_event(t, feature_df):
L910     try:
L911         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L912         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L913         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L914         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L915         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L916     except Exception:
L917         pass
L918     return t
L919
L920 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L921
L922 def io_build_input_bundle() -> InputBundle:
L923     """
L924     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L925     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L926     """
L927     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L928     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L929
L930 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L931               n_target: int) -> tuple[list, float, float, float]:
L932     """
L933     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L934     戻り値：(pick, avg_res_corr, sum_score, objective)
L935     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L936     """
L937     sc.cfg = cfg
L938
L939     if hasattr(sc, "score_build_features"):
L940         feat = sc.score_build_features(inb)
L941         if not hasattr(sc, "_feat_logged"):
L942             T.log("features built (scorer)")
L943             sc._feat_logged = True
L944         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L945     else:
L946         fb = sc.aggregate_scores(inb, cfg)
L947         if not hasattr(sc, "_feat_logged"):
L948             T.log("features built (scorer)")
L949             sc._feat_logged = True
L950         sc._feat = fb
L951         agg = fb.g_score if group == "G" else fb.d_score_all
L952         if group == "D" and hasattr(fb, "df"):
L953             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L954
L955     if hasattr(sc, "filter_candidates"):
L956         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L957
L958     selector = Selector()
L959     if hasattr(sc, "select_diversified"):
L960         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L961             selector=selector, prev_tickers=None,
L962             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L963             cross_mu=cfg.drrs.cross_mu_gd)
L964     else:
L965         if group == "G":
L966             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L967             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L968                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L969                 lam=cfg.drrs.G.get("lam", 0.68),
L970                 lookback=cfg.drrs.G.get("lookback", 252),
L971                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L972         else:
L973             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L974             g_fixed = getattr(sc, "_top_G", None)
L975             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L976                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L977                 lam=cfg.drrs.D.get("lam", 0.85),
L978                 lookback=cfg.drrs.D.get("lookback", 504),
L979                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L980                 mu=cfg.drrs.cross_mu_gd)
L981         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L982         sum_sc = res["sum_score"]; obj = res["objective"]
L983         if group == "D":
L984             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L985             T.log("selection finalized (G/D)")
L986     try:
L987         inc = [t for t in exist if t in agg.index]
L988         pick = _sticky_keep_current(
L989             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L990             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L991         )
L992     except Exception as _e:
L993         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L994     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L995     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L996     try:
L997         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L998         near10 = list(pool.sort_values(ascending=False).head(10).index)
L999         setattr(sc, f"_near_{group}", near10)
L1000         setattr(sc, f"_agg_{group}", agg)
L1001     except Exception:
L1002         pass
L1003
L1004     if group == "D":
L1005         T.log("save done")
L1006     if group == "G":
L1007         sc._top_G = pick
L1008     return pick, avg_r, sum_sc, obj
L1009
L1010 def run_pipeline() -> SelectionBundle:
L1011     """
L1012     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1013     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1014     """
L1015     inb = io_build_input_bundle()
L1016     cfg = PipelineConfig(weights=WeightsConfig(g=g_weights, d=D_weights),
L1017         drrs=DRRSParams(corrM=corrM, shrink=DRRS_SHRINK,
L1018                          G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD),
L1019         price_max=CAND_PRICE_MAX)
L1020     sc = Scorer()
L1021     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1022     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L1023     alpha = Scorer.spx_to_alpha(inb.spx)
L1024     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1025     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1026     sc._top_G = top_G
L1027     try:
L1028         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1029         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1030     except Exception:
L1031         pass
L1032     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1033     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1034     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1035     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1036     fb = getattr(sc, "_feat", None)
L1037     near_G = getattr(sc, "_near_G", [])
L1038     selected12 = list(top_G)
L1039     df = fb.df if fb is not None else pd.DataFrame()
L1040     guni = _infer_g_universe(df, selected12, near_G)
L1041     try:
L1042         fire_recent = [t for t in guni
L1043                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1044                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1045     except Exception: fire_recent = []
L1046
L1047     lines = [
L1048         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1049         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1050         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1051         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1052
L1053     if fire_recent:
L1054         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1055         lines.append(f"過去5営業日の検知: {fire_list}")
L1056     else:
L1057         lines.append("過去5営業日の検知: なし")
L1058
L1059     try:
L1060         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1061         if webhook:
L1062             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1063     except Exception:
L1064         pass
L1065
L1066     out = Output()
L1067     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1068     try: out._sc = sc
L1069     except Exception: pass
L1070     if hasattr(sc, "_feat"):
L1071         try:
L1072             fb = sc._feat
L1073             out.miss_df = fb.missing_logs
L1074             out.display_results(
L1075                 exist=exist,
L1076                 bench=bench,
L1077                 df_z=fb.df_z,
L1078                 g_score=fb.g_score,
L1079                 d_score_all=fb.d_score_all,
L1080                 init_G=top_G,
L1081                 init_D=top_D,
L1082                 top_G=top_G,
L1083                 top_D=top_D,
L1084                 df_full_z=getattr(fb, "df_full_z", 
```