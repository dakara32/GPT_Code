```text
get(t)))
L976                 info[t] = info_entry
L977             except Exception as e:
L978                 logger.info("[warn] %s: info fetch failed (%s)", t, e)
L979                 info[t] = {}
L980         try:
L981             sec_map = self.fetch_eps_rev_from_sec(tickers)
L982         except Exception as e:
L983             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L984             sec_map = {}
L985
L986         def _brief_len(s):
L987             try:
L988                 if isinstance(s, pd.Series):
L989                     return int(s.dropna().size)
L990                 if isinstance(s, (list, tuple)):
L991                     return len([v for v in s if pd.notna(v)])
L992                 if isinstance(s, np.ndarray):
L993                     return int(np.count_nonzero(~pd.isna(s)))
L994                 return int(bool(s))
L995             except Exception:
L996                 return 0
L997
L998         def _has_entries(val) -> bool:
L999             try:
L1000                 if isinstance(val, pd.Series):
L1001                     return not val.dropna().empty
L1002                 if isinstance(val, (list, tuple)):
L1003                     return any(pd.notna(v) for v in val)
L1004                 return bool(val)
L1005             except Exception:
L1006                 return False
L1007
L1008         have_rev = 0
L1009         have_eps = 0
L1010         rev_lens: list[int] = []
L1011         eps_lens: list[int] = []
L1012         rev_y_lens: list[int] = []
L1013         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L1014
L1015         for t in tickers:
L1016             entry = info.get(t, {})
L1017             m = (sec_map or {}).get(t) or {}
L1018             if entry is None or not isinstance(entry, dict):
L1019                 entry = {}
L1020                 info[t] = entry
L1021
L1022             if m:
L1023                 pairs_r = m.get("rev_q_series_pairs") or []
L1024                 pairs_e = m.get("eps_q_series_pairs") or []
L1025                 if pairs_r:
L1026                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L1027                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L1028                     s = pd.Series(val, index=idx).sort_index()
L1029                     entry["SEC_REV_Q_SERIES"] = s
L1030                 else:
L1031                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L1032                 if pairs_e:
L1033                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L1034                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L1035                     s = pd.Series(val, index=idx).sort_index()
L1036                     entry["SEC_EPS_Q_SERIES"] = s
L1037                 else:
L1038                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L1039
L1040             r = entry.get("SEC_REV_Q_SERIES")
L1041             e = entry.get("SEC_EPS_Q_SERIES")
L1042             # 年次は直近3件（約3年）だけ保持。重み分岐の nY 判定は従来通り。
L1043             try:
L1044                 if hasattr(r, "index") and isinstance(r.index, pd.DatetimeIndex):
L1045                     y = r.resample("Y").sum().dropna()
L1046                     entry["SEC_REV_Y_SERIES"] = y.tail(3)
L1047                 else:
L1048                     entry["SEC_REV_Y_SERIES"] = []
L1049             except Exception:
L1050                 entry["SEC_REV_Y_SERIES"] = []
L1051             ry = entry.get("SEC_REV_Y_SERIES")
L1052             if _has_entries(r):
L1053                 have_rev += 1
L1054             if _has_entries(e):
L1055                 have_eps += 1
L1056             lr = _brief_len(r)
L1057             le = _brief_len(e)
L1058             rev_lens.append(lr)
L1059             eps_lens.append(le)
L1060             rev_y_lens.append(_brief_len(ry))
L1061             if len(samples) < 8:
L1062                 try:
L1063                     rd = getattr(r, "index", [])[-1] if lr > 0 else None
L1064                     rv = float(r.iloc[-1]) if lr > 0 else None
L1065                     ed = getattr(e, "index", [])[-1] if le > 0 else None
L1066                     ev = float(e.iloc[-1]) if le > 0 else None
L1067                     samples.append((t, lr, str(rd) if rd is not None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L1068                 except Exception:
L1069                     samples.append((t, lr, "-", None, le, "-", None))
L1070
L1071         logger.info("[SEC] series attach: rev_q=%d/%d, eps_q=%d/%d", have_rev, len(tickers), have_eps, len(tickers))
L1072         logger.info(
L1073             "[SEC_SERIES] rev_q=%d (<=12), eps_q=%d (<=12), rev_y=%d (<=3)",
L1074             max(rev_lens) if rev_lens else 0,
L1075             max(eps_lens) if eps_lens else 0,
L1076             max(rev_y_lens) if rev_y_lens else 0,
L1077         )
L1078
L1079         if rev_lens:
L1080             rev_lens_sorted = sorted(rev_lens)
L1081             eps_lens_sorted = sorted(eps_lens)
L1082             _log(
L1083                 "SEC_SERIES",
L1084                 f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L1085                 f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L1086             )
L1087         for (t, lr, rd, rv, le, ed, ev) in samples:
L1088             _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L1089         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L1090         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L1091         if not eps_df.index.is_unique:
L1092             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L1093         eps_df = eps_df.assign(
L1094             EPS_TTM=eps_df["eps_ttm"],
L1095             EPS_TTM_PREV=eps_df.get("eps_ttm_prev", np.nan),
L1096             EPS_Q_LastQ=eps_df["eps_q_recent"],
L1097             EPS_Q_Prev=eps_df.get("eps_q_prev", np.nan),
L1098             REV_TTM=eps_df["rev_ttm"],
L1099             REV_TTM_PREV=eps_df.get("rev_ttm_prev", np.nan),
L1100             REV_Q_LastQ=eps_df["rev_q_recent"],
L1101             REV_Q_Prev=eps_df.get("rev_q_prev", np.nan),
L1102             EPS_A_LATEST=eps_df.get("eps_annual_latest", np.nan),
L1103             EPS_A_PREV=eps_df.get("eps_annual_prev", np.nan),
L1104             REV_A_LATEST=eps_df.get("rev_annual_latest", np.nan),
L1105             REV_A_PREV=eps_df.get("rev_annual_prev", np.nan),
L1106             EPS_A_CAGR3=eps_df.get("eps_cagr3", np.nan),
L1107             REV_A_CAGR3=eps_df.get("rev_cagr3", np.nan),
L1108         )
L1109         missing_logs = pd.DataFrame()
L1110         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L1111         try:
L1112             n = len(eps_df)
L1113             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L1114             c_rev = int(eps_df["REV_TTM"].notna().sum())
L1115             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L1116         except Exception:
L1117             pass
L1118         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L1119         _tlog("eps/fcf prep done")
L1120         returns = px[tickers].pct_change()
L1121         _tlog("price prep/returns done")
L1122         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns, missing_logs=missing_logs)
L1123
L1124 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L1125 class Selector:
L1126     # ---- DRRS helpers（Selector専用） ----
L1127     @staticmethod
L1128     def _z_np(X: np.ndarray) -> np.ndarray:
L1129         X = np.asarray(X, dtype=np.float32)
L1130         m = np.nanmean(X, axis=0, keepdims=True)
L1131         s = np.nanstd(X, axis=0, keepdims=True)
L1132         # 分母0/全NaN列の安全化：std==0 を 1 に置換（z=0に収束）
L1133         s = np.where(np.isfinite(s) & (s > 0), s, 1.0).astype(np.float32)
L1134         with np.errstate(invalid="ignore", divide="ignore"):
L1135             Z = (np.nan_to_num(X) - np.nan_to_num(m)) / s
L1136         return np.nan_to_num(Z)
L1137
L1138     @classmethod
L1139     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L1140         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L1141         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L1142         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L1143         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L1144         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L1145
L1146     @classmethod
L1147     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L1148         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L1149         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L1150         if k==0: return []
L1151         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L1152         for _ in range(k):
L1153             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L1154             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L1155             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L1156         return sorted(S)
L1157
L1158     @staticmethod
L1159     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L1160         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1161         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L1162
L1163     @classmethod
L1164     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L1165         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L1166         while improved and passes<max_pass:
L1167             improved, passes = False, passes+1
L1168             for i,out in enumerate(list(S)):
L1169                 for inn in range(len(score)):
L1170                     if inn in S: continue
L1171                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L1172                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1173                 if improved: break
L1174         return S, best
L1175
L1176     @staticmethod
L1177     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L1178         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1179         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L1180         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L1181         return float(s[idx].sum() - lam*within - mu*cross)
L1182
L1183     @classmethod
L1184     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L1185         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L1186         while improved and passes<max_pass:
L1187             improved, passes = False, passes+1
L1188             for i,out in enumerate(list(S)):
L1189                 for inn in range(N):
L1190                     if inn in S: continue
L1191                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L1192                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1193                 if improved: br
```