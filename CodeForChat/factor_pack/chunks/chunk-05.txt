```text
ppend(f"{name}{op}{val}")
L849             return "" if not parts else " / filter:" + " & ".join(parts)
L850
L851         def _inject_filter_suffix(title: str, group: str) -> str:
L852             suf = _filter_suffix_from(FILTER_SPEC, group)
L853             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L854
L855         def _blk(title, tbl, fmt=None, drop=()):
L856             if tbl is None or getattr(tbl, 'empty', False):
L857                 return f"{title}\n(選定なし)\n"
L858             if drop and hasattr(tbl, 'columns'):
L859                 keep = [c for c in tbl.columns if c not in drop]
L860                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L861             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L862
L863         message = "📈 ファクター分散最適化の結果\n"
L864         if self.miss_df is not None and not self.miss_df.empty:
L865             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L866         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L867         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L868         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L869         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L870
L871         try:
L872             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L873             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L874             if r is not None:
L875                 r.raise_for_status()
L876         except Exception as e:
L877             print(f"[ERR] main_post_failed: {e}")
L878
L879 def _infer_g_universe(feature_df, selected12=None, near5=None):
L880     try:
L881         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L882         if out: return out
L883     except Exception:
L884         pass
L885     base = set()
L886     for lst in (selected12 or []), (near5 or []):
L887         for x in (lst or []): base.add(x)
L888     return list(base) if base else list(feature_df.index)
L889
L890 def _fmt_with_fire_mark(tickers, feature_df):
L891     out = []
L892     for t in tickers or []:
L893         try:
L894             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L895             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L896             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L897         except Exception:
L898             out.append(t)
L899     return out
L900
L901 def _label_recent_event(t, feature_df):
L902     try:
L903         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L904         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L905         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L906         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L907         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L908     except Exception:
L909         pass
L910     return t
L911
L912 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L913
L914 def io_build_input_bundle() -> InputBundle:
L915     """
L916     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L917     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L918     """
L919     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L920     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L921
L922 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L923               n_target: int) -> tuple[list, float, float, float]:
L924     """
L925     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L926     戻り値：(pick, avg_res_corr, sum_score, objective)
L927     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L928     """
L929     sc.cfg = cfg
L930
L931     if hasattr(sc, "score_build_features"):
L932         feat = sc.score_build_features(inb)
L933         if not hasattr(sc, "_feat_logged"):
L934             T.log("features built (scorer)")
L935             sc._feat_logged = True
L936         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L937     else:
L938         fb = sc.aggregate_scores(inb, cfg)
L939         if not hasattr(sc, "_feat_logged"):
L940             T.log("features built (scorer)")
L941             sc._feat_logged = True
L942         sc._feat = fb
L943         agg = fb.g_score if group == "G" else fb.d_score_all
L944         if group == "D" and hasattr(fb, "df"):
L945             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L946
L947     if hasattr(sc, "filter_candidates"):
L948         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L949
L950     selector = Selector()
L951     if hasattr(sc, "select_diversified"):
L952         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L953             selector=selector, prev_tickers=None,
L954             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L955             cross_mu=cfg.drrs.cross_mu_gd)
L956     else:
L957         if group == "G":
L958             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L959             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L960                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L961                 lam=cfg.drrs.G.get("lam", 0.68),
L962                 lookback=cfg.drrs.G.get("lookback", 252),
L963                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L964         else:
L965             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L966             g_fixed = getattr(sc, "_top_G", None)
L967             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L968                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L969                 lam=cfg.drrs.D.get("lam", 0.85),
L970                 lookback=cfg.drrs.D.get("lookback", 504),
L971                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L972                 mu=cfg.drrs.cross_mu_gd)
L973         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L974         sum_sc = res["sum_score"]; obj = res["objective"]
L975         if group == "D":
L976             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L977             T.log("selection finalized (G/D)")
L978     try:
L979         inc = [t for t in exist if t in agg.index]
L980         pick = _sticky_keep_current(
L981             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L982             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L983         )
L984     except Exception as _e:
L985         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L986     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L987     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L988     try:
L989         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L990         near10 = list(pool.sort_values(ascending=False).head(10).index)
L991         setattr(sc, f"_near_{group}", near10)
L992         setattr(sc, f"_agg_{group}", agg)
L993     except Exception:
L994         pass
L995
L996     if group == "D":
L997         T.log("save done")
L998     if group == "G":
L999         sc._top_G = pick
L1000     return pick, avg_r, sum_sc, obj
L1001
L1002 def run_pipeline() -> SelectionBundle:
L1003     """
L1004     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1005     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1006     """
L1007     inb = io_build_input_bundle()
L1008     cfg = PipelineConfig(weights=WeightsConfig(g=g_weights, d=D_weights),
L1009         drrs=DRRSParams(corrM=corrM, shrink=DRRS_SHRINK,
L1010                          G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD),
L1011         price_max=CAND_PRICE_MAX)
L1012     sc = Scorer()
L1013     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1014     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L1015     alpha = Scorer.spx_to_alpha(inb.spx)
L1016     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1017     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1018     sc._top_G = top_G
L1019     try:
L1020         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L1021         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1022     except Exception:
L1023         pass
L1024     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1025     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1026     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1027     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1028     fb = getattr(sc, "_feat", None)
L1029     near_G = getattr(sc, "_near_G", [])
L1030     selected12 = list(top_G)
L1031     df = fb.df if fb is not None else pd.DataFrame()
L1032     guni = _infer_g_universe(df, selected12, near_G)
L1033     try:
L1034         fire_recent = [t for t in guni
L1035                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1036                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1037     except Exception: fire_recent = []
L1038
L1039     lines = [
L1040         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1041         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1042         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1043         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1044
L1045     if fire_recent:
L1046         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1047         lines.append(f"過去5営業日の検知: {fire_list}")
L1048     else:
L1049         lines.append("過去5営業日の検知: なし")
L1050
L1051     try:
L1052         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1053         if webhook:
L1054             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1055     except Exception:
L1056         pass
L1057
L1058     out = Output()
L1059     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1060     try: out._sc = sc
L1061     except Exception: pass
L1062     if hasattr(sc, "_feat"):
L1063         try:
L1064             fb = sc._feat
L1065             out.miss_df = fb.missing_logs
L1066             out.display_results(
L1067                 exist=exist,
L1068                 bench=bench,
L1069                 df_z=fb.df_z,
L1070                 g_score=fb.g_score,
L1071                 d_score_all=fb.d_score_all,
L1072                 init_G=top_G,
L1073                 init_D=top_D,
L1074                 top_G=top_G,
L1075                 top_D=top_D,
L1076                 df_full_z=getattr(fb, "df_full_z", None),
L1077                 prev_G=getattr(sc, "_prev_G", exist),
L1078                 prev_D=getattr(sc, "_prev_D", exist),
L1079             )
L1080         except Exception:
L1081             pass
L1082     out.notify_slack()
L1083     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1084               "sum_score": sumG, "objective": objG},
L1085         resD={"tickers": top_D, "avg_res_corr": avgD,
L1086               "sum_score": sumD, "objective": objD},
L1087         top_G=top_G, top_D=top_D, init_G=top_G, init_
```