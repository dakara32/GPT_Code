```text
 e:
L989             logger.warning("[SEC] fetch_eps_rev_from_sec failed: %s", e)
L990             sec_map = {}
L991
L992         def _brief_len(s):
L993             try:
L994                 if isinstance(s, pd.Series):
L995                     return int(s.dropna().size)
L996                 if isinstance(s, (list, tuple)):
L997                     return len([v for v in s if pd.notna(v)])
L998                 if isinstance(s, np.ndarray):
L999                     return int(np.count_nonzero(~pd.isna(s)))
L1000                 return int(bool(s))
L1001             except Exception:
L1002                 return 0
L1003
L1004         def _has_entries(val) -> bool:
L1005             try:
L1006                 if isinstance(val, pd.Series):
L1007                     return not val.dropna().empty
L1008                 if isinstance(val, (list, tuple)):
L1009                     return any(pd.notna(v) for v in val)
L1010                 return bool(val)
L1011             except Exception:
L1012                 return False
L1013
L1014         have_rev = 0
L1015         have_eps = 0
L1016         rev_lens: list[int] = []
L1017         eps_lens: list[int] = []
L1018         rev_y_lens: list[int] = []
L1019         samples: list[tuple[str, int, str, float | None, int, str, float | None]] = []
L1020
L1021         for t in tickers:
L1022             entry = info.get(t, {})
L1023             m = (sec_map or {}).get(t) or {}
L1024             if entry is None or not isinstance(entry, dict):
L1025                 entry = {}
L1026                 info[t] = entry
L1027
L1028             if m:
L1029                 pairs_r = m.get("rev_q_series_pairs") or []
L1030                 pairs_e = m.get("eps_q_series_pairs") or []
L1031                 if pairs_r:
L1032                     idx = pd.to_datetime([d for (d, _v) in pairs_r], errors="coerce")
L1033                     val = pd.to_numeric([v for (_d, v) in pairs_r], errors="coerce")
L1034                     s = pd.Series(val, index=idx).sort_index()
L1035                     entry["SEC_REV_Q_SERIES"] = s
L1036                 else:
L1037                     entry["SEC_REV_Q_SERIES"] = m.get("rev_q_series") or []
L1038                 if pairs_e:
L1039                     idx = pd.to_datetime([d for (d, _v) in pairs_e], errors="coerce")
L1040                     val = pd.to_numeric([v for (_d, v) in pairs_e], errors="coerce")
L1041                     s = pd.Series(val, index=idx).sort_index()
L1042                     entry["SEC_EPS_Q_SERIES"] = s
L1043                 else:
L1044                     entry["SEC_EPS_Q_SERIES"] = m.get("eps_q_series") or []
L1045
L1046             r = entry.get("SEC_REV_Q_SERIES")
L1047             e = entry.get("SEC_EPS_Q_SERIES")
L1048             # 年次は直近3件（約3年）だけ保持。重み分岐の nY 判定は従来通り。
L1049             try:
L1050                 if hasattr(r, "index") and isinstance(r.index, pd.DatetimeIndex):
L1051                     y = r.resample("Y").sum().dropna()
L1052                     entry["SEC_REV_Y_SERIES"] = y.tail(3)
L1053                 else:
L1054                     entry["SEC_REV_Y_SERIES"] = []
L1055             except Exception:
L1056                 entry["SEC_REV_Y_SERIES"] = []
L1057             ry = entry.get("SEC_REV_Y_SERIES")
L1058             if _has_entries(r):
L1059                 have_rev += 1
L1060             if _has_entries(e):
L1061                 have_eps += 1
L1062             lr = _brief_len(r)
L1063             le = _brief_len(e)
L1064             rev_lens.append(lr)
L1065             eps_lens.append(le)
L1066             rev_y_lens.append(_brief_len(ry))
L1067             if len(samples) < 8:
L1068                 try:
L1069                     rd = getattr(r, "index", [])[-1] if lr > 0 else None
L1070                     rv = float(r.iloc[-1]) if lr > 0 else None
L1071                     ed = getattr(e, "index", [])[-1] if le > 0 else None
L1072                     ev = float(e.iloc[-1]) if le > 0 else None
L1073                     samples.append((t, lr, str(rd) if rd is not None else "-", rv, le, str(ed) if ed is not None else "-", ev))
L1074                 except Exception:
L1075                     samples.append((t, lr, "-", None, le, "-", None))
L1076
L1077         logger.info("[SEC] series attach: rev_q=%d/%d, eps_q=%d/%d", have_rev, len(tickers), have_eps, len(tickers))
L1078         logger.info(
L1079             "[SEC_SERIES] rev_q=%d (<=12), eps_q=%d (<=12), rev_y=%d (<=3)",
L1080             max(rev_lens) if rev_lens else 0,
L1081             max(eps_lens) if eps_lens else 0,
L1082             max(rev_y_lens) if rev_y_lens else 0,
L1083         )
L1084
L1085         if rev_lens:
L1086             rev_lens_sorted = sorted(rev_lens)
L1087             eps_lens_sorted = sorted(eps_lens)
L1088             _log(
L1089                 "SEC_SERIES",
L1090                 f"rev_len min/med/max={rev_lens_sorted[0]}/{rev_lens_sorted[len(rev_lens)//2]}/{rev_lens_sorted[-1]} "
L1091                 f"eps_len min/med/max={eps_lens_sorted[0]}/{eps_lens_sorted[len(eps_lens)//2]}/{eps_lens_sorted[-1]}",
L1092             )
L1093         for (t, lr, rd, rv, le, ed, ev) in samples:
L1094             _log("SEC_SERIES_SMP", f"{t}  rev_len={lr} last=({rd},{rv})  eps_len={le} last=({ed},{ev})")
L1095         eps_df = self._build_eps_df(tickers, tickers_bulk, info, sec_map=sec_map)
L1096         # index 重複があると .loc[t, col] が Series になり代入時に ValueError を誘発する
L1097         if not eps_df.index.is_unique:
L1098             eps_df = eps_df[~eps_df.index.duplicated(keep="last")]
L1099         eps_df = eps_df.assign(
L1100             EPS_TTM=eps_df["eps_ttm"],
L1101             EPS_TTM_PREV=eps_df.get("eps_ttm_prev", np.nan),
L1102             EPS_Q_LastQ=eps_df["eps_q_recent"],
L1103             EPS_Q_Prev=eps_df.get("eps_q_prev", np.nan),
L1104             REV_TTM=eps_df["rev_ttm"],
L1105             REV_TTM_PREV=eps_df.get("rev_ttm_prev", np.nan),
L1106             REV_Q_LastQ=eps_df["rev_q_recent"],
L1107             REV_Q_Prev=eps_df.get("rev_q_prev", np.nan),
L1108             EPS_A_LATEST=eps_df.get("eps_annual_latest", np.nan),
L1109             EPS_A_PREV=eps_df.get("eps_annual_prev", np.nan),
L1110             REV_A_LATEST=eps_df.get("rev_annual_latest", np.nan),
L1111             REV_A_PREV=eps_df.get("rev_annual_prev", np.nan),
L1112             EPS_A_CAGR3=eps_df.get("eps_cagr3", np.nan),
L1113             REV_A_CAGR3=eps_df.get("rev_cagr3", np.nan),
L1114         )
L1115         missing_logs = pd.DataFrame()
L1116         # ここで非NaN件数をサマリ表示（欠損状況の即時把握用）
L1117         try:
L1118             n = len(eps_df)
L1119             c_eps = int(eps_df["EPS_TTM"].notna().sum())
L1120             c_rev = int(eps_df["REV_TTM"].notna().sum())
L1121             print(f"[SEC] eps_ttm non-NaN: {c_eps}/{n}  rev_ttm non-NaN: {c_rev}/{n}")
L1122         except Exception:
L1123             pass
L1124         fcf_df = self.compute_fcf_with_fallback(tickers, finnhub_api_key=self.api_key)
L1125         T.log("eps/fcf prep done")
L1126         returns = px[tickers].pct_change()
L1127         T.log("price prep/returns done")
L1128         return dict(cand=cand_f, tickers=tickers, data=data, px=px, spx=spx, tickers_bulk=tickers_bulk, info=info, eps_df=eps_df, fcf_df=fcf_df, returns=returns, missing_logs=missing_logs)
L1129
L1130 # === Selector：相関低減・選定（スコア＆リターンだけ読む） ===
L1131 class Selector:
L1132     # ---- DRRS helpers（Selector専用） ----
L1133     @staticmethod
L1134     def _z_np(X: np.ndarray) -> np.ndarray:
L1135         X = np.asarray(X, dtype=np.float32)
L1136         m = np.nanmean(X, axis=0, keepdims=True)
L1137         s = np.nanstd(X, axis=0, keepdims=True)
L1138         # 分母0/全NaN列の安全化：std==0 を 1 に置換（z=0に収束）
L1139         s = np.where(np.isfinite(s) & (s > 0), s, 1.0).astype(np.float32)
L1140         with np.errstate(invalid="ignore", divide="ignore"):
L1141             Z = (np.nan_to_num(X) - np.nan_to_num(m)) / s
L1142         return np.nan_to_num(Z)
L1143
L1144     @classmethod
L1145     def residual_corr(cls, R: np.ndarray, n_pc: int=3, shrink: float=0.1) -> np.ndarray:
L1146         Z = cls._z_np(R); U,S,_ = np.linalg.svd(Z, full_matrices=False); F = U[:,:n_pc]*S[:n_pc]; B = np.linalg.lstsq(F, Z, rcond=None)[0]
L1147         E = Z - F@B; C = np.corrcoef(E, rowvar=False)
L1148         off = C - np.diag(np.diag(C)); iu = np.triu_indices_from(off,1); avg_abs = np.nanmean(np.abs(off[iu])) if iu[0].size else 0.0
L1149         shrink_eff = float(np.clip(shrink + 0.5*avg_abs, 0.1, 0.6)); N = C.shape[0]
L1150         return (1.0 - shrink_eff)*C + shrink_eff*np.eye(N, dtype=C.dtype)
L1151
L1152     @classmethod
L1153     def rrqr_like_det(cls, R: np.ndarray, score: np.ndarray, k: int, gamma: float=1.0):
L1154         Z, w = cls._z_np(R), (score-score.min())/(np.ptp(score)+1e-12); X = Z*(1.0 + gamma*w)
L1155         N, k = X.shape[1], max(0, min(k, X.shape[1]))
L1156         if k==0: return []
L1157         S, selected, Rres = [], np.zeros(N, dtype=bool), X.copy()
L1158         for _ in range(k):
L1159             norms = (Rres*Rres).sum(axis=0); cand = np.where(~selected)[0]
L1160             j = sorted(cand, key=lambda c:(-norms[c], -w[c], c))[0]
L1161             S.append(j); selected[j]=True; u = X[:,j:j+1]; u/=(np.linalg.norm(u)+1e-12); Rres = Rres - u @ (u.T @ Rres)
L1162         return sorted(S)
L1163
L1164     @staticmethod
L1165     def _obj(corrM: np.ndarray, score: np.ndarray, idx, lam: float) -> float:
L1166         idx = list(idx); P = corrM[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1167         return float(s[idx].sum() - lam*((P.sum()-np.trace(P))/2.0))
L1168
L1169     @classmethod
L1170     def swap_local_det(cls, corrM: np.ndarray, score: np.ndarray, idx, lam: float=0.6, max_pass: int=15):
L1171         S, best, improved, passes = sorted(idx), cls._obj(corrM, score, idx, lam), True, 0
L1172         while improved and passes<max_pass:
L1173             improved, passes = False, passes+1
L1174             for i,out in enumerate(list(S)):
L1175                 for inn in range(len(score)):
L1176                     if inn in S: continue
L1177                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj(corrM, score, cand, lam)
L1178                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1179                 if improved: break
L1180         return S, best
L1181
L1182     @staticmethod
L1183     def _obj_with_cross(C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float, mu: float) -> float:
L1184         idx = list(idx); P = C_within[np.ix_(idx, idx)]; s = (score-score.mean())/(score.std()+1e-9)
L1185         within = (P.sum()-np.trace(P))/2.0; cross = 0.0
L1186         if C_cross is not None and C_cross.size>0: cross = C_cross[idx,:].sum()
L1187         return float(s[idx].sum() - lam*within - mu*cross)
L1188
L1189     @classmethod
L1190     def swap_local_det_cross(cls, C_within: np.ndarray, C_cross: np.ndarray|None, score: np.ndarray, idx, lam: float=0.6, mu: float=0.3, max_pass: int=15):
L1191         S, best, improved, passes, N = sorted(idx), cls._obj_with_cross(C_within,C_cross,score,idx,lam,mu), True, 0, len(score)
L1192         while improved and passes<max_pass:
L1193             improved, passes = False, passes+1
L1194             for i,out in enumerate(list(S)):
L1195                 for inn in range(N):
L1196                     if inn in S: continue
L1197                     cand = sorted(S[:i]+[inn]+S[i+1:]); v = cls._obj_with_cross(C_within,C_cross,score,cand,lam,mu)
L1198                     if v>best+1e-10: S, best, improved = cand, v, True; break
L1199                 if improved: break
L1200         return S, best
L1201
L1202     @staticmethod
L1203     def avg_corr(C: np.ndarray, idx) -> float:
L1204         k = len(idx); P = C[np.ix_(idx, idx)]
L1205         return float((P.sum()-np.trace(P))/(k*(k-1)+1e-12))
L1206
L1207     @classmethod
L1208     def select_bucket_drrs(cls, returns_
```