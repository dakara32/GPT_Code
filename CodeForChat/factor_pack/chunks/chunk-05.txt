```text
        pick = res["tickers"]; avg_r = res["avg_res_corr"]
L862         sum_sc = res["sum_score"]; obj = res["objective"]
L863         if group == "D":
L864             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L865             T.log("selection finalized (G/D)")
L866     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L867     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L868     try:
L869         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L870         near10 = list(pool.sort_values(ascending=False).head(10).index)
L871         setattr(sc, f"_near_{group}", near10)
L872         setattr(sc, f"_agg_{group}", agg)
L873     except Exception:
L874         pass
L875
L876     if group == "D":
L877         T.log("save done")
L878     if group == "G":
L879         sc._top_G = pick
L880     return pick, avg_r, sum_sc, obj
L881
L882 def run_pipeline() -> SelectionBundle:
L883     """
L884     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L885     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L886     """
L887     inb = io_build_input_bundle()
L888     cfg = PipelineConfig(
L889         weights=WeightsConfig(g=g_weights, d=D_weights),
L890         drrs=DRRSParams(corrM=corrM, shrink=DRRS_SHRINK,
L891                          G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD),
L892         price_max=CAND_PRICE_MAX
L893     )
L894     sc = Scorer()
L895     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L896     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False).index)
L897     alpha = Scorer.spx_to_alpha(inb.spx)
L898     sectors = {t: (inb.info.get(t, {}).get("sector") or "U") for t in poolG}
L899     scores = {t: Scorer.g_score.get(t, 0.0) for t in poolG}
L900     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L901     sc._top_G = top_G
L902     try:
L903         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).sort_values(ascending=False)
L904         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L905     except Exception:
L906         pass
L907     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L908     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L909     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L910     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L911     fb = getattr(sc, "_feat", None)
L912     near_G = getattr(sc, "_near_G", [])
L913     selected12 = list(top_G)
L914     df = fb.df if fb is not None else pd.DataFrame()
L915     guni = _infer_g_universe(df, selected12, near_G)
L916     try:
L917         fire_recent = [t for t in guni
L918                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L919                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L920     except Exception:
L921         fire_recent = []
L922
L923     # --- Breadth行を並列で先行計算（InputBundleのみ依存） ---
L924     breadth_fut = None
L925     try:
L926         ex = ThreadPoolExecutor(max_workers=2)
L927         breadth_fut = ex.submit(_build_breadth_lead_lines, inb)
L928     except Exception:
L929         breadth_fut = None
L930
L931     lines = [
L932         "【G枠レポート｜週次モニタ（直近5営業日）】",
L933         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L934         f"選定12: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else "選定12: なし",
L935         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",
L936     ]
L937     # --- 並列結果をここで合流（失敗しても既存の出力は継続） ---
L938     if breadth_fut is not None:
L939         try:
L940             lead_lines, _mode = breadth_fut.result()
L941             lines = lead_lines + lines
L942         except Exception as _e:
L943             lines = [f"Breadth計算エラー: {_e}"] + lines
L944
L945     if fire_recent:
L946         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L947         lines.append(f"過去5営業日の検知: {fire_list}")
L948     else:
L949         lines.append("過去5営業日の検知: なし")
L950
L951     try:
L952         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L953         if webhook:
L954             requests.post(webhook, json={"text": "\n".join(lines)}, timeout=10)
L955     except Exception:
L956         pass
L957
L958     out = Output(debug=debug_mode)
L959     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L960     try: out._sc = sc
L961     except Exception: pass
L962     if hasattr(sc, "_feat"):
L963         try:
L964             out.miss_df = sc._feat.missing_logs
L965             out.display_results(
L966                 exist=exist, bench=bench, df_z=sc._feat.df_z,
L967                 g_score=sc._feat.g_score, d_score_all=sc._feat.d_score_all,
L968                 init_G=top_G, init_D=top_D, top_G=top_G, top_D=top_D
L969             )
L970         except Exception:
L971             pass
L972     out.notify_slack()
L973     sb = SelectionBundle(
L974         resG={"tickers": top_G, "avg_res_corr": avgG,
L975               "sum_score": sumG, "objective": objG},
L976         resD={"tickers": top_D, "avg_res_corr": avgD,
L977               "sum_score": sumD, "objective": objD},
L978         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D
L979     )
L980
L981     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L982     try:
L983         _low_df = (
L984             pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L985               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L986               .sort_values("G_plus_D")
L987               .head(10)
L988               .round(3)
L989         )
L990         _slack("Low Score Candidates (GSC+DSC bottom 10)\n"
L991                "```"
L992                + _low_df.to_string(index=True, index_names=False)
L993                + "\n```")
L994     except Exception as _e:
L995         _slack(f"Low Score Candidates: 作成失敗: {_e}")
L996
L997     if debug_mode:
L998         try:
L999             _slack_debug(_compact_debug(fb, sb, [], []))
L1000         except Exception as e:
L1001             print(f"[debug skipped] {e}")
L1002
L1003     return sb
L1004
L1005 if __name__ == "__main__":
L1006     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py 
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #
L26 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L27 # =============================================================================
L28
L29 import os, sys, warnings
L30 import requests
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36
L37 if TYPE_CHECKING:
L38     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L39
L40 # ---- Dividend Helpers -------------------------------------------------------
L41 def _last_close(t, price_map=None):
L42     if price_map and (c := price_map.get(t)) is not None:
L43         return float(c)
L44     try:
L45         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L46         return float(h.iloc[-1]) if len(h) else np.nan
L47     except Exception:
L48         return np.nan
L49
L50 def _ttm_div_sum(t, lookback_days=400):
L51     try:
L52         div = yf.Ticker(t).dividends
L53         if div is None or len(div) == 0:
L54             return 0.0
L55         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L56         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L57         return ttm if ttm > 0 else float(div.tail(4).sum())
L58     except Exception:
L59         return 0.0
L60
L61 def ttm_div_yield_portfolio(tickers, price_map=None):
L62     ys = []
L63     for t in tickers:
L64         c = _last_close(t, price_map)
L65         if not np.isfinite(c) or c <= 0:
L66             ys.append(0.0)
L67             continue
L68         s = _ttm_div_sum(t)
L69         ys.append(s / c if s > 0 else 0.0)
L70     return float(np.mean(ys)) if ys else 0.0
L71
L72 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L73 def winsorize_s(s: pd.Series, p=0.02):
L74     if s is None or s.dropna().empty: return s
L75     lo, hi = np.nanpercentile(s.astype(float), [100*p, 100*(1-p)]); return s.clip(lo, hi)
L76
L77 def robust_z(s: pd.Series, p=0.02):
L78     s2 = winsorize_s(s, p); return np.nan_to_num(zscore(s2.fillna(s2.mean())))
L79
L80 def _safe_div(a, b):
L81     try:
L82         if b is None or float(b)==0 or pd.isna(b): return np.nan
L83         return float(a)/float(b)
L84     except Exception: return np.nan
L85
L86 def _safe_last(series: pd.Series, default=np.nan):
L87     try: return float(series.iloc[-1])
L88     except Exception: return default
L89
L90 D_WEIGHTS_EFF = None  # 出力表示互換のため
L91
L92 # ---- Scorer 本体 -------------------------------------------------------------
L93 class Scorer:
L94     """
L95     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L96     - cfg は必須（factor.PipelineConfig を渡す）。
L97     - 旧カラム名を自動リネームして新スキーマに吸収します。
L98     """
L99
L100     # === 先頭で旧→新カラム名マップ（移行用） ===
L101     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L102     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L103
L104     # === スキーマ簡易チェック（最低限） ===
L105     @staticmethod
L106     def _validate_ib_for_scorer(ib: Any):
L107         must_attrs = ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"]
L108         miss = [a for a in must_attrs if not hasattr(ib, a) or getattr(ib, a) is None]
L109         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L110
L111         # 後方互換のため、まず rename を試みる
L112         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME.keys()):
L113             ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L114         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME.keys()):
L115             ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L116
L117         # 必須列の存在確認
L118         need_eps = {"EPS_TTM","EPS_Q_LastQ"}
L119         need_fcf = {"FCF_TTM"}
L120         if not need_eps.issubset(set(ib.eps_df.columns)):
L121             raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L122         if not need_fcf.issubset(set(ib.fcf_df.columns)):
L123             raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L124
L125     # ----（Scorer専用）テクニカル・指標系 ----
L126     @staticmethod
L127     def trend(s: pd.Series):
L128         if len(s)<200: return np.nan
L129         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L130         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L131         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max(
```