```text
         if add:
L898                 d_disp2 = pd.DataFrame(index=add)
L899                 d_disp2['QAL'], d_disp2['YLD'], d_disp2['VOL'], d_disp2['TRD'] = df_z.loc[add,'D_QAL'], df_z.loc[add,'D_YLD'], df_z.loc[add,'D_VOL_RAW'], df_z.loc[add,'D_TRD']
L900                 near_tbl = pd.concat([d_disp2, pd.Series({t: d_score_all.get(t) for t in add}, name='DSC')], axis=1)
L901                 self.d_table = pd.concat([self.d_table, near_tbl], axis=0)
L902         print(self.d_title); print(self.d_table.to_string(formatters=self.d_formatters))
L903
L904         # === Changes（IN の GSC/DSC を表示。OUT は銘柄名のみ） ===
L905         in_list = sorted(set(list(top_G)+list(top_D)) - set(exist))
L906         out_list = sorted(set(exist) - set(list(top_G)+list(top_D)))
L907
L908         self.io_table = pd.DataFrame({
L909             'IN': pd.Series(in_list),
L910             '/ OUT': pd.Series(out_list)
L911         })
L912         g_list = [f"{g_score.get(t):.3f}" if pd.notna(g_score.get(t)) else '—' for t in out_list]
L913         d_list = [f"{d_score_all.get(t):.3f}" if pd.notna(d_score_all.get(t)) else '—' for t in out_list]
L914         self.io_table['GSC'] = pd.Series(g_list)
L915         self.io_table['DSC'] = pd.Series(d_list)
L916
L917         print("Changes:")
L918         print(self.io_table.to_string(index=False))
L919
L920         all_tickers = list(set(exist + list(top_G) + list(top_D) + [bench])); prices = yf.download(all_tickers, period='1y', auto_adjust=True, progress=False, threads=False)['Close'].ffill(limit=2)
L921         ret = prices.pct_change(); portfolios = {'CUR':exist,'NEW':list(top_G)+list(top_D)}; metrics={}
L922         for name,ticks in portfolios.items():
L923             pr = ret[ticks].mean(axis=1, skipna=True).dropna(); cum = (1+pr).cumprod()-1; n = len(pr)
L924             if n>=252: ann_ret, ann_vol = (1+cum.iloc[-1])**(252/n)-1, pr.std()*np.sqrt(252)
L925             else: ann_ret, ann_vol = cum.iloc[-1], pr.std()*np.sqrt(n)
L926             sharpe, drawdown = ann_ret/ann_vol, (cum - cum.cummax()).min()
L927             if len(ticks)>=2:
L928                 C_raw = ret[ticks].corr(); RAW_rho = C_raw.mask(np.eye(len(ticks), dtype=bool)).stack().mean()
L929                 R = ret[ticks].dropna().to_numpy(); C_resid = Selector.residual_corr(R, n_pc=3, shrink=DRRS_SHRINK)
L930                 RESID_rho = float((C_resid.sum()-np.trace(C_resid))/(C_resid.shape[0]*(C_resid.shape[0]-1)))
L931             else: RAW_rho = RESID_rho = np.nan
L932             divy = ttm_div_yield_portfolio(ticks); metrics[name] = {'RET':ann_ret,'VOL':ann_vol,'SHP':sharpe,'MDD':drawdown,'RAWρ':RAW_rho,'RESIDρ':RESID_rho,'DIVY':divy}
L933         df_metrics = pd.DataFrame(metrics).T; df_metrics_pct = df_metrics.copy(); self.df_metrics = df_metrics
L934         for col in ['RET','VOL','MDD','DIVY']: df_metrics_pct[col] = df_metrics_pct[col]*100
L935         cols_order = ['RET','VOL','SHP','MDD','RAWρ','RESIDρ','DIVY']; df_metrics_pct = df_metrics_pct.reindex(columns=cols_order)
L936         def _fmt_row(s):
L937             return pd.Series({'RET':f"{s['RET']:.1f}%",'VOL':f"{s['VOL']:.1f}%",'SHP':f"{s['SHP']:.1f}",'MDD':f"{s['MDD']:.1f}%",'RAWρ':(f"{s['RAWρ']:.2f}" if pd.notna(s['RAWρ']) else "NaN"),'RESIDρ':(f"{s['RESIDρ']:.2f}" if pd.notna(s['RESIDρ']) else "NaN"),'DIVY':f"{s['DIVY']:.1f}%"})
L938         self.df_metrics_fmt = df_metrics_pct.apply(_fmt_row, axis=1); print("Performance Comparison:"); print(self.df_metrics_fmt.to_string())
L939         # === 追加: GSC+DSC が低い順 TOP10 ===
L940         try:
L941             all_scores = pd.DataFrame({'GSC': df_z['GSC'], 'DSC': df_z['DSC']}).copy()
L942             all_scores['G_plus_D'] = all_scores['GSC'] + all_scores['DSC']
L943             all_scores = all_scores.dropna(subset=['G_plus_D'])
L944             self.low10_table = all_scores.sort_values('G_plus_D', ascending=True).head(10).round(3)
L945             print("Low Score Candidates (GSC+DSC bottom 10):")
L946             print(self.low10_table.to_string())
L947         except Exception as e:
L948             print(f"[warn] low-score ranking failed: {e}")
L949             self.low10_table = None
L950         self.debug_text = ""
L951         if debug_mode:
L952             logger.info("debug_mode=True: df_z dump handled in scorer; skipping factor-side debug output")
L953         else:
L954             logger.debug(
L955                 "skip debug log: debug_mode=%s debug_text_empty=%s",
L956                 debug_mode, True
L957             )
L958         self._debug_logged = True
L959
L960     # --- Slack送信（元 notify_slack のロジックそのまま） ---
L961     def notify_slack(self):
L962         SLACK_WEBHOOK_URL = os.environ.get("SLACK_WEBHOOK_URL")
L963
L964         if not SLACK_WEBHOOK_URL:
L965             print("⚠️ SLACK_WEBHOOK_URL not set (main report skipped)")
L966             return
L967
L968         def _filter_suffix_from(spec: dict, group: str) -> str:
L969             g = spec.get(group, {})
L970             parts = [str(m) for m in g.get("pre_mask", [])]
L971             for k, v in (g.get("pre_filter", {}) or {}).items():
L972                 base, op = (k[:-4], "<") if k.endswith("_max") else ((k[:-4], ">") if k.endswith("_min") else (k, "="))
L973                 name = {"beta": "β"}.get(base, base)
L974                 try:
L975                     val = f"{float(v):g}"
L976                 except Exception:
L977                     val = str(v)
L978                 parts.append(f"{name}{op}{val}")
L979             return "" if not parts else " / filter:" + " & ".join(parts)
L980
L981         def _inject_filter_suffix(title: str, group: str) -> str:
L982             suf = _filter_suffix_from(FILTER_SPEC, group)
L983             return f"{title[:-1]}{suf}]" if suf and title.endswith("]") else (title + suf)
L984
L985         def _blk(title, tbl, fmt=None, drop=()):
L986             if tbl is None or getattr(tbl, 'empty', False):
L987                 return f"{title}\n(選定なし)\n"
L988             if drop and hasattr(tbl, 'columns'):
L989                 keep = [c for c in tbl.columns if c not in drop]
L990                 tbl, fmt = tbl[keep], {k: v for k, v in (fmt or {}).items() if k in keep}
L991             return f"{title}\n```{tbl.to_string(formatters=fmt)}```\n"
L992
L993         message = "📈 ファクター分散最適化の結果\n"
L994         if self.miss_df is not None and not self.miss_df.empty:
L995             message += "Missing Data\n```" + self.miss_df.to_string(index=False) + "```\n"
L996         message += _blk(_inject_filter_suffix(self.g_title, "G"), self.g_table, self.g_formatters, drop=("TRD",))
L997         message += _blk(_inject_filter_suffix(self.d_title, "D"), self.d_table, self.d_formatters)
L998         message += "Changes\n" + ("(変更なし)\n" if self.io_table is None or getattr(self.io_table, 'empty', False) else f"```{self.io_table.to_string(index=False)}```\n")
L999         message += "Performance Comparison:\n```" + self.df_metrics_fmt.to_string() + "```"
L1000
L1001         try:
L1002             r = requests.post(SLACK_WEBHOOK_URL, json={"text": message})
L1003             print(f"[DBG] main_post status={getattr(r, 'status_code', None)} size={len(message)}")
L1004             if r is not None:
L1005                 r.raise_for_status()
L1006         except Exception as e:
L1007             print(f"[ERR] main_post_failed: {e}")
L1008
L1009 def _infer_g_universe(feature_df, selected12=None, near5=None):
L1010     try:
L1011         out = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L1012         if out: return out
L1013     except Exception:
L1014         pass
L1015     base = set()
L1016     for lst in (selected12 or []), (near5 or []):
L1017         for x in (lst or []): base.add(x)
L1018     return list(base) if base else list(feature_df.index)
L1019
L1020 def _fmt_with_fire_mark(tickers, feature_df):
L1021     out = []
L1022     for t in tickers or []:
L1023         try:
L1024             br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"])
L1025             pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"])
L1026             out.append(f"{t}{' 🔥' if (br or pb) else ''}")
L1027         except Exception:
L1028             out.append(t)
L1029     return out
L1030
L1031 def _label_recent_event(t, feature_df):
L1032     try:
L1033         br = bool(feature_df.at[t, "G_BREAKOUT_recent_5d"]); dbr = str(feature_df.at[t, "G_BREAKOUT_last_date"]) if br else ""
L1034         pb = bool(feature_df.at[t, "G_PULLBACK_recent_5d"]); dpb = str(feature_df.at[t, "G_PULLBACK_last_date"]) if pb else ""
L1035         if   br and not pb: return f"{t}（ブレイクアウト確定 {dbr}）"
L1036         elif pb and not br: return f"{t}（押し目反発 {dpb}）"
L1037         elif br and pb:     return f"{t}（ブレイクアウト確定 {dbr}／押し目反発 {dpb}）"
L1038     except Exception:
L1039         pass
L1040     return t
L1041
L1042 # === パイプライン可視化：G/D共通フロー（出力は不変） ===
L1043
L1044 def io_build_input_bundle() -> InputBundle:
L1045     """
L1046     既存の『データ取得→前処理』を実行し、InputBundle を返す。
L1047     処理内容・列名・丸め・例外・ログ文言は現行どおり（変更禁止）。
L1048     """
L1049     state = Input(cand=cand, exist=exist, bench=bench, price_max=CAND_PRICE_MAX, finnhub_api_key=FINNHUB_API_KEY).prepare_data()
L1050     return InputBundle(cand=state["cand"], tickers=state["tickers"], bench=bench, data=state["data"], px=state["px"], spx=state["spx"], tickers_bulk=state["tickers_bulk"], info=state["info"], eps_df=state["eps_df"], fcf_df=state["fcf_df"], returns=state["returns"])
L1051
L1052 def run_group(sc: Scorer, group: str, inb: InputBundle, cfg: PipelineConfig,
L1053               n_target: int) -> tuple[list, float, float, float]:
L1054     """
L1055     G/Dを同一手順で処理：採点→フィルター→選定（相関低減込み）。
L1056     戻り値：(pick, avg_res_corr, sum_score, objective)
L1057     JSON保存は既存フォーマット（キー名・丸め桁・順序）を踏襲。
L1058     """
L1059     sc.cfg = cfg
L1060
L1061     if hasattr(sc, "score_build_features"):
L1062         feat = sc.score_build_features(inb)
L1063         if not hasattr(sc, "_feat_logged"):
L1064             T.log("features built (scorer)")
L1065             sc._feat_logged = True
L1066         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1067     else:
L1068         fb = sc.aggregate_scores(inb, cfg)
L1069         if not hasattr(sc, "_feat_logged"):
L1070             T.log("features built (scorer)")
L1071             sc._feat_logged = True
L1072         sc._feat = fb
L1073         agg = fb.g_score if group == "G" else fb.d_score_all
L1074         if group == "D" and hasattr(fb, "df"):
L1075             agg = agg[fb.df['BETA'] < D_BETA_MAX]
L1076
L1077     if hasattr(sc, "filter_candidates"):
L1078         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1079
L1080     selector = Selector()
L1081     if hasattr(sc, "select_diversified"):
L1082         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1083             selector=selector, prev_tickers=None,
L1084             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1085             cross_mu=cfg.drrs.cross_mu_gd)
L1086     else:
L1087         if group == "G":
L1088             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1089             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1090                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1091                 lam=cfg.drrs.G.get("lam", 0.68),
L1092                 lookback=cfg.drrs.G.get("lookback", 252),
L1093                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1094         else:
L1095             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1096             g_fixed = getattr(sc, "_top_G", None)
L1097             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1098                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1099                 lam=cfg.
```