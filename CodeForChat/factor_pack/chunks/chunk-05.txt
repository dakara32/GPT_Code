```text
ss
L812     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L813     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L814     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L815     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L816     fb = getattr(sc, "_feat", None)
L817     near_G = getattr(sc, "_near_G", [])
L818     selected12 = list(top_G)
L819     df = fb.df if fb is not None else pd.DataFrame()
L820     guni = _infer_g_universe(df, selected12, near_G)
L821     try:
L822         fire_recent = [t for t in guni
L823                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L824                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L825     except Exception: fire_recent = []
L826
L827     lines = [
L828         "【G枠レポート｜週次モニタ（直近5営業日）】",
L829         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L830         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L831         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L832
L833     if fire_recent:
L834         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L835         lines.append(f"過去5営業日の検知: {fire_list}")
L836     else:
L837         lines.append("過去5営業日の検知: なし")
L838
L839     try:
L840         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L841         if webhook:
L842             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L843     except Exception:
L844         pass
L845
L846     out = Output(debug=debug_mode)
L847     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L848     try: out._sc = sc
L849     except Exception: pass
L850     if hasattr(sc, "_feat"):
L851         try:
L852             out.miss_df = sc._feat.missing_logs
L853             out.display_results(exist=exist, bench=bench, df_z=sc._feat.df_z,
L854                 g_score=sc._feat.g_score, d_score_all=sc._feat.d_score_all,
L855                 init_G=top_G, init_D=top_D, top_G=top_G, top_D=top_D)
L856         except Exception:
L857             pass
L858     out.notify_slack()
L859     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L860               "sum_score": sumG, "objective": objG},
L861         resD={"tickers": top_D, "avg_res_corr": avgD,
L862               "sum_score": sumD, "objective": objD},
L863         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L864
L865     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L866     try:
L867         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L868               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L869               .sort_values("G_plus_D")
L870               .head(10)
L871               .round(3))
L872         _slack("Low Score Candidates (GSC+DSC bottom 10)\n"
L873                "```"
L874                + _low_df.to_string(index=True, index_names=False)
L875                + "\n```")
L876     except Exception as _e:
L877         _slack(f"Low Score Candidates: 作成失敗: {_e}")
L878
L879     if debug_mode:
L880         try:
L881             _slack_debug(_compact_debug(fb, sb, [], []))
L882         except Exception as e:
L883             print(f"[debug skipped] {e}")
L884
L885     return sb
L886
L887 if __name__ == "__main__":
L888     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #
L26 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L27 # =============================================================================
L28
L29 import os, sys, warnings
L30 import requests
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36
L37 if TYPE_CHECKING:
L38     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L39
L40 # ---- Dividend Helpers -------------------------------------------------------
L41 def _last_close(t, price_map=None):
L42     if price_map and (c := price_map.get(t)) is not None: return float(c)
L43     try:
L44         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L45         return float(h.iloc[-1]) if len(h) else np.nan
L46     except Exception:
L47         return np.nan
L48
L49 def _ttm_div_sum(t, lookback_days=400):
L50     try:
L51         div = yf.Ticker(t).dividends
L52         if div is None or len(div) == 0: return 0.0
L53         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L54         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L55         return ttm if ttm > 0 else float(div.tail(4).sum())
L56     except Exception:
L57         return 0.0
L58
L59 def ttm_div_yield_portfolio(tickers, price_map=None):
L60     ys = [(lambda c, s: (s/c) if (np.isfinite(c) and c>0 and s>0) else 0.0)(_last_close(t, price_map), _ttm_div_sum(t)) for t in tickers]
L61     return float(np.mean(ys)) if ys else 0.0
L62
L63 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L64 def winsorize_s(s: pd.Series, p=0.02):
L65     if s is None or s.dropna().empty: return s
L66     lo, hi = np.nanpercentile(s.astype(float), [100*p, 100*(1-p)]); return s.clip(lo, hi)
L67
L68 def robust_z(s: pd.Series, p=0.02):
L69     s2 = winsorize_s(s,p); return np.nan_to_num(zscore(s2.fillna(s2.mean())))
L70
L71 def _safe_div(a, b):
L72     try: return np.nan if (b is None or float(b)==0 or pd.isna(b)) else float(a)/float(b)
L73     except Exception: return np.nan
L74
L75 def _safe_last(series: pd.Series, default=np.nan):
L76     try: return float(series.iloc[-1])
L77     except Exception: return default
L78
L79 D_WEIGHTS_EFF = None  # 出力表示互換のため
L80
L81 # ---- Scorer 本体 -------------------------------------------------------------
L82 class Scorer:
L83     """
L84     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L85     - cfg は必須（factor.PipelineConfig を渡す）。
L86     - 旧カラム名を自動リネームして新スキーマに吸収します。
L87     """
L88
L89     # === 先頭で旧→新カラム名マップ（移行用） ===
L90     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L91     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L92
L93     # === スキーマ簡易チェック（最低限） ===
L94     @staticmethod
L95     def _validate_ib_for_scorer(ib: Any):
L96         miss = [a for a in ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"] if not hasattr(ib,a) or getattr(ib,a) is None]
L97         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L98         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L99         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L100         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L101         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L102         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L103
L104     # ----（Scorer専用）テクニカル・指標系 ----
L105     @staticmethod
L106     def trend(s: pd.Series):
L107         if len(s)<200: return np.nan
L108         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L109         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L110         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L111         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L112         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L113         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L114         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L115         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L116         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L117         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L118         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L119         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L120
L121     @staticmethod
L122     def rs(s, b):
L123         n, nb = len(s), len(b)
L124         if n<60 or nb<60: return np.nan
L125         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L126         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L127         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L128
L129     @staticmethod
L130     def tr_str(s):
L131         if len(s)<50: return np.nan
L132         return s.iloc[-1]/s.rolling(50).mean().iloc[-1] - 1
L133
L134     @staticmethod
L135     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L136         r = (s/b).dropna()
L137         if len(r) < win: return np.nan
L138         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L139         try: return float(np.polyfit(x, y, 1)[0])
L140         except Exception: return np.nan
L141
L142     @staticmethod
L143     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L144         ev = info_t.get('enterpriseValue', np.nan)
L145         if pd.notna(ev) and ev>0: return float(ev)
L146         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L147         try:
L148             bs = tk.quarterly_balance_sheet
L149             if bs is not None and not bs.empty:
L150                 c = bs.columns[0]
L151                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L152                     if k in bs.index: debt = float(bs.loc[k,c]); break
L153                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L154                     if k in bs.index: cash = float(bs.loc[k,c]); break
L155         except Exception: pass
L156         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L157         return np.nan
L158
L159     @staticmethod
L160     def dividend_status(ticker: str) -> str:
L161         t = yf.Ticker(ticker)
L162         try:
L163             if not t.dividends.empty: return "has"
L164         except Exception: return "unknown"
L165         try:
L166             a = t.actions
L167             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L168         except Exception: pass
L169         try:
L170             fi = t.fast_info
L171             if any(getattr(fi,k,None) for k in ("last_dividend_date","divi
```