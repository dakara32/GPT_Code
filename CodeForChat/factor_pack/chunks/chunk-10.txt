```text
9                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L870             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L871             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L872
L873             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L874
L875             # --- 欠損メモ ---
L876             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L877             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L878             if need_finnhub:
L879                 fin_data = self.fetch_finnhub_metrics(t)
L880                 for col in need_finnhub:
L881                     val = fin_data.get(col)
L882                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L883             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L884                 if pd.isna(df.loc[t,col]):
L885                     if col=='DIV':
L886                         status = self.dividend_status(t)
L887                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L888                     else:
L889                         missing_logs.append({'Ticker':t,'Column':col})
L890
L891         def _pick_series(entry: dict, keys: list[str]):
L892             for k in keys:
L893                 val = entry.get(k) if isinstance(entry, dict) else None
L894                 if val is None:
L895                     continue
L896                 try:
L897                     if hasattr(val, "empty") and getattr(val, "empty"):
L898                         continue
L899                 except Exception:
L900                     pass
L901                 if isinstance(val, (list, tuple)) and len(val) == 0:
L902                     continue
L903                 return val
L904             return None
L905
L906         rev_q_ge5 = 0
L907         ttm_yoy_avail = 0
L908         wrote_growth = 0
L909
L910         for t in tickers:
L911             try:
L912                 d = info.get(t, {}) or {}
L913
L914                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L915                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L916                 r_raw = _ensure_series(r_src)
L917                 e_raw = _ensure_series(e_src)
L918                 _log("DERIV_SRC", f"{t} rev_raw_len={r_raw.size} eps_raw_len={e_raw.size}")
L919
L920                 r_q = _to_quarterly(r_raw)
L921                 e_q = _to_quarterly(e_raw)
L922                 _log("DERIV_Q", f"{t} rev_q_len={r_q.size} eps_q_len={e_q.size}")
L923                 if r_q.size >= 5:
L924                     rev_q_ge5 += 1
L925
L926                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L927                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L928                 has_ttm = int(not r_yoy_ttm.dropna().empty)
L929                 ttm_yoy_avail += has_ttm
L930                 _log("DERIV_TTM", f"{t} rev_ttm_yoy_len={r_yoy_ttm.dropna().size} eps_ttm_yoy_len={e_yoy_ttm.dropna().size}")
L931
L932                 def _q_yoy(qs):
L933                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L934
L935                 rev_q_yoy = _q_yoy(r_q)
L936                 eps_q_yoy = _q_yoy(e_q)
L937
L938                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L939                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L940                         ann = qs.groupby(qs.index.year).last().pct_change()
L941                         ann_dn = ann.dropna()
L942                         if not ann_dn.empty:
L943                             y = float(ann_dn.iloc[-1])
L944                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L945                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L946                             return y, acc, var
L947                     yoy_dn = yoy_ttm.dropna()
L948                     if yoy_dn.empty:
L949                         return np.nan, np.nan, np.nan
L950                     return (
L951                         float(yoy_dn.iloc[-1]),
L952                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L953                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L954                     )
L955
L956                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L957                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L958
L959                 def _pos_streak(s: pd.Series):
L960                     s = s.dropna()
L961                     if s.empty:
L962                         return np.nan
L963                     b = (s > 0).astype(int).to_numpy()[::-1]
L964                     k = 0
L965                     for v in b:
L966                         if v == 1:
L967                             k += 1
L968                         else:
L969                             break
L970                     return float(k)
L971
L972                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L973
L974                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L975                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L976                 df.loc[t, "REV_YOY"] = rev_yoy
L977                 df.loc[t, "EPS_YOY"] = eps_yoy
L978                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L979                 df.loc[t, "REV_YOY_VAR"] = rev_var
L980                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L981
L982                 wrote_growth += 1
L983                 _log(
L984                     "DERIV_WRITE",
L985                     f"{t} wrote: Q_YOY(rev={rev_q_yoy}, eps={eps_q_yoy}) ANN(rev_yoy={rev_yoy}, acc={rev_acc}, var={rev_var}) streak={rev_ann_streak}",
L986                 )
L987
L988             except Exception as e:
L989                 _log("DERIV_WARN", f"{t} {type(e).__name__}: {e}")
L990
L991         _log("DERIV_SUMMARY", f"rev_q_len>=5: {rev_q_ge5}/{len(tickers)}  ttm_yoy_available: {ttm_yoy_avail}  wrote_growth_for: {wrote_growth}")
L992
L993         try:
L994             cols = [
L995                 "REV_Q_YOY",
L996                 "EPS_Q_YOY",
L997                 "REV_YOY",
L998                 "EPS_YOY",
L999                 "REV_YOY_ACC",
L1000                 "REV_YOY_VAR",
L1001                 "REV_ANN_STREAK",
L1002             ]
L1003             cnt = {c: int(df[c].count()) for c in cols if c in df.columns}
L1004             _log("DERIV_NONNAN_COUNTS", str(cnt))
L1005         except Exception as e:
L1006             _log("DERIV_NONNAN_COUNTS", f"error: {e}")
L1007
L1008         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1009             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1010             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1011             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1012             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1013             c5 = (row.get('TR_str', np.nan) > 0)
L1014             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1015             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1016             c8 = (row.get('RS', np.nan) >= 0.10)
L1017             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1018
L1019         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1020         assert 'trend_template' in df.columns
L1021
L1022         # === Z化と合成 ===
L1023         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1024
L1025         df_z = pd.DataFrame(index=df.index)
L1026         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1027         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1028         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1029
L1030         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1031         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1032         for col in grw_cols:
L1033             if col in df.columns:
L1034                 raw = pd.to_numeric(df[col], errors="coerce")
L1035                 df_z[col] = robust_z_keepnan(raw)
L1036                 df_z[f'{col}_RAW'] = raw
L1037         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1038             if k in df.columns and k not in df_z.columns:
L1039                 raw = pd.to_numeric(df[k], errors="coerce")
L1040                 df_z[k] = robust_z_keepnan(raw)
L1041                 df_z[f'{k}_RAW'] = raw
L1042         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L1043
L1044         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L1045         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L1046         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L1047
L1048         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L1049         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L1050         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L1051
L1052         # ===== トレンドスロープ算出 =====
L1053         def zpos(x):
L1054             arr = robust_z(x)
L1055             idx = getattr(x, 'index', df_z.index)
L1056             return pd.Series(arr, index=idx).fillna(0.0)
L1057
L1058         def relu(x):
L1059             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L1060             return ser.clip(lower=0).fillna(0.0)
L1061
L1062         # 売上トレンドスロープ（四半期）
L1063         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L1064         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L1065         slope_rev_combo = slope_rev - 0.25*noise_rev
L1066         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L1067         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L1068
L1069         # EPSトレンドスロープ（四半期）
L1070         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L1071         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L1072         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L1073
L1074         # 年次トレンド（サブ）
L1075         slope_rev_yr = zpos(df_z['REV_YOY'])
L1076         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L1077         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L1078         streak_yr = streak_base / (streak_base.abs() + 1.0)
L1079         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L1080         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L1081         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L1082         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L1083         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L1084
L1085         # ===== GRW flexible score (variable data paths) =====
L1086         grw_raw = pd.to_numeric(df.get('GRW_FLEX_SCORE'), errors="coerce")
L1087         df_z['GRW_FLEX_SCORE_RAW'] = grw_raw
L1088         df_z['GROWTH_F_RAW'] = grw_raw
L1089         df_z['GROWTH_F'] = robust_z_keepnan(grw_raw).clip(-3.0, 3.0)
L1090         df_z['GRW_FLEX_WEIGHT'] = pd.to_numeric(df.get('GRW_FLEX_WEIGHT'), errors="coerce")
L1091         df_z['GRW_FLEX_CORE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_CORE'), errors="coerce")
L1092         df_z['GRW_FLEX_PRICE_RAW'] = pd.to_numeric(df.get('GRW_FLEX_PRICE'), errors="coerce")
L1093
L1094         # Debug dump
```