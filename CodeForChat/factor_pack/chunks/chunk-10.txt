```text
t(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L524
L525             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L526             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L527
L528             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L529             if len(sma200.dropna()) >= 21:
L530                 cur200 = _safe_last(sma200)
L531                 old2001 = float(sma200.iloc[-21])
L532                 if old2001:
L533                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L534
L535             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L536             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L537             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L538             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L539             if len(sma200.dropna())>=105:
L540                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L541                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L542             # NEW: 200日線が連続で上向きの「日数」
L543             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L544             try:
L545                 s200 = sma200.dropna()
L546                 if len(s200) >= 2:
L547                     diff200 = s200.diff()
L548                     up = 0
L549                     for v in diff200.iloc[::-1]:
L550                         if pd.isna(v) or v <= 0:
L551                             break
L552                         up += 1
L553                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L554             except Exception:
L555                 pass
L556             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L557             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L558             if hi52 and hi52>0 and pd.notna(p):
L559                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L560             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L561             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L562
L563             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L564
L565             # --- 欠損メモ ---
L566             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L567             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L568             if need_finnhub:
L569                 fin_data = self.fetch_finnhub_metrics(t)
L570                 for col in need_finnhub:
L571                     val = fin_data.get(col)
L572                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L573             # 欠損ログは factor 側で補完後に集約する（ここでは検知のみ）
L574
L575         def _pick_series(entry: dict, keys: list[str]):
L576             for k in keys:
L577                 val = entry.get(k) if isinstance(entry, dict) else None
L578                 if val is None:
L579                     continue
L580                 try:
L581                     if hasattr(val, "empty") and getattr(val, "empty"):
L582                         continue
L583                 except Exception:
L584                     pass
L585                 if isinstance(val, (list, tuple)) and len(val) == 0:
L586                     continue
L587                 return val
L588             return None
L589
L590         for t in tickers:
L591             try:
L592                 d = info.get(t, {}) or {}
L593                 rev_series = d.get("SEC_REV_Q_SERIES")
L594                 eps_series = d.get("SEC_EPS_Q_SERIES")
L595                 fallback_qearn = False
L596                 try:
L597                     qe = tickers_bulk.tickers[t].quarterly_earnings
L598                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L599                 except Exception:
L600                     qe = None
L601
L602                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L603                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L604                 r_raw = _ensure_series(r_src)
L605                 e_raw = _ensure_series(e_src)
L606
L607                 r_q = _to_quarterly(r_raw)
L608                 e_q = _to_quarterly(e_raw)
L609
L610                 df.at[t, "EPS_SERIES"] = e_q
L611
L612                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L613                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L614
L615                 def _q_yoy(qs):
L616                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L617
L618                 rev_q_yoy = _q_yoy(r_q)
L619                 eps_q_yoy = _q_yoy(e_q)
L620
L621                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L622                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L623                         ann = qs.groupby(qs.index.year).last().pct_change()
L624                         ann_dn = ann.dropna()
L625                         if not ann_dn.empty:
L626                             y = float(ann_dn.iloc[-1])
L627                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L628                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L629                             return y, acc, var
L630                     yoy_dn = yoy_ttm.dropna()
L631                     if yoy_dn.empty:
L632                         return np.nan, np.nan, np.nan
L633                     return (
L634                         float(yoy_dn.iloc[-1]),
L635                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L636                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L637                     )
L638
L639                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L640                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L641
L642                 def _pos_streak(s: pd.Series):
L643                     s = s.dropna()
L644                     if s.empty:
L645                         return np.nan
L646                     b = (s > 0).astype(int).to_numpy()[::-1]
L647                     k = 0
L648                     for v in b:
L649                         if v == 1:
L650                             k += 1
L651                         else:
L652                             break
L653                     return float(k)
L654
L655                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L656
L657                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L658                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L659                 df.loc[t, "REV_YOY"] = rev_yoy
L660                 df.loc[t, "EPS_YOY"] = eps_yoy
L661                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L662                 df.loc[t, "REV_YOY_VAR"] = rev_var
L663                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L664
L665             except Exception as e:
L666                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L667
L668         def _pct_change(new, old):
L669             try:
L670                 if np.isfinite(new) and np.isfinite(old) and float(old) != 0:
L671                     return float((new - old) / abs(old))
L672             except Exception:
L673                 pass
L674             return np.nan
L675
L676         def _pct_series(a: pd.Series, b: pd.Series) -> list[float]:
L677             a_vals = pd.to_numeric(a, errors="coerce") if a is not None else pd.Series(np.nan, index=df.index)
L678             b_vals = pd.to_numeric(b, errors="coerce") if b is not None else pd.Series(np.nan, index=df.index)
L679             return [_pct_change(x, y) for x, y in zip(a_vals.reindex(df.index), b_vals.reindex(df.index))]
L680
L681         def _mean_valid(vals: list[float]) -> float:
L682             arr = [float(v) for v in vals if np.isfinite(v)]
L683             return float(np.mean(arr)) if arr else np.nan
L684
L685         grw_q_eps_last = _pct_series(df['EPS_Q'], df.get('EPS_Q_PREV', pd.Series(np.nan, index=df.index)))
L686         grw_q_rev_last = _pct_series(df['REV_Q'], df.get('REV_Q_PREV', pd.Series(np.nan, index=df.index)))
L687         grw_q_eps_ttm = _pct_series(df['EPS'], df.get('EPS_TTM_PREV', pd.Series(np.nan, index=df.index)))
L688         grw_q_rev_ttm = _pct_series(df['REV_TTM'], df.get('REV_TTM_PREV', pd.Series(np.nan, index=df.index)))
L689
L690         grw_a_eps_yoy = _pct_series(df.get('EPS_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('EPS_A_PREV', pd.Series(np.nan, index=df.index)))
L691         grw_a_rev_yoy = _pct_series(df.get('REV_A_LATEST', pd.Series(np.nan, index=df.index)), df.get('REV_A_PREV', pd.Series(np.nan, index=df.index)))
L692         grw_a_eps_cagr = pd.to_numeric(df.get('EPS_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L693         grw_a_rev_cagr = pd.to_numeric(df.get('REV_A_CAGR3', pd.Series(np.nan, index=df.index)), errors="coerce").reindex(df.index).tolist()
L694
L695         grw_q_combined = [
L696             _mean_valid([a, b, c, d])
L697             for a, b, c, d in zip(grw_q_eps_last, grw_q_rev_last, grw_q_eps_ttm, grw_q_rev_ttm)
L698         ]
L699         grw_a_combined = [
L700             _mean_valid([a, b, c, d])
L701             for a, b, c, d in zip(grw_a_eps_yoy, grw_a_rev_yoy, grw_a_eps_cagr, grw_a_rev_cagr)
L702         ]
L703
L704         df['GRW_Q_RAW'] = pd.Series(grw_q_combined, index=df.index, dtype=float)
L705         df['GRW_A_RAW'] = pd.Series(grw_a_combined, index=df.index, dtype=float)
L706
L707         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L708             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L709             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L710             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L711             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L712             c5 = (row.get('TR_str', np.nan) > 0)
L713             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L714             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L715             c8 = (row.get('RS', np.nan) >= 0.10)
L716             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L717
L718         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L719         assert 'trend_template' in df.columns
L720
L721         def _calc_eps_abs_slope(eps_series, n=12):
L722             try:
L723                 if isinstance(eps_series, pd.Series):
L724                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L725                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L726                     series = pd.Series(eps_series, dtype=float).dropna()
L727                 else:
L728                     return 0.0
L729             except Exception:
L730                 return 0.0
L731
L732             if series.empty:
L733                 return 0.0
L734
L735             tail = series.tail(n).to_numpy(dtype=float)
L736             if tail.size < 2:
L737                 return 0.0
L738
L739             x = np.arange(tail.size, dtype=float)
L740             x = x - x.mean()
L741             y = tail - tail.mean()
L742             denom = np.dot(x, x)
L743             if denom == 0:
L744                 return 0.0
L745             slope = float(np.dot(x, y) / denom)
L746             return slope
L747
L748         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L749         df.drop(columns=['EPS_SERIES'
```