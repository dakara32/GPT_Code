```text
L758             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L759             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L760             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L761             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L762
L763             # --- 配当（欠損補完含む） ---
L764             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L765             if div is None or pd.isna(div):
L766                 try:
L767                     divs = yf.Ticker(t).dividends
L768                     if divs is not None and not divs.empty:
L769                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L770                         if last_close and last_close>0: div = float(div_1y/last_close)
L771                 except Exception: pass
L772             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L773
L774             # --- FCF/EV ---
L775             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L776             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L777
L778             # --- モメンタム・ボラ関連 ---
L779             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L780             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L781             n = int(min(len(r), len(rm)))
L782
L783             DOWNSIDE_DEV = np.nan
L784             if n>=60:
L785                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L786                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L787             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L788
L789             MDD_1Y = np.nan
L790             try:
L791                 w = s.iloc[-min(len(s),252):].dropna()
L792                 if len(w)>=30:
L793                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L794             except Exception: pass
L795             df.loc[t,'MDD_1Y'] = MDD_1Y
L796
L797             RESID_VOL = np.nan
L798             if n>=120:
L799                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L800                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L801                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L802                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L803             df.loc[t,'RESID_VOL'] = RESID_VOL
L804
L805             DOWN_OUTPERF = np.nan
L806             if n>=60:
L807                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L808                 if mask.sum()>=10:
L809                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L810                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L811             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L812
L813             # --- 長期移動平均/位置 ---
L814             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L815             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L816
L817             # --- 配当の詳細系 ---
L818             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L819             try:
L820                 divs = yf.Ticker(t).dividends.dropna()
L821                 if not divs.empty:
L822                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L823                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L824                     ann = divs.groupby(divs.index.year).sum()
L825                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L826                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L827                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L828                 so = d.get('sharesOutstanding',None)
L829                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L830                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L831             except Exception: pass
L832             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L833
L834             # --- 財務安定性 ---
L835             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L836
L837             # --- EPS 変動 ---
L838             EPS_VAR_8Q = np.nan
L839             try:
L840                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L841                 if qe is not None and not qe.empty and so:
L842                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L843                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L844             except Exception: pass
L845             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L846
L847             # --- サイズ/流動性 ---
L848             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L849             try:
L850                 if isinstance(volume_series_full, pd.Series):
L851                     vol_series = volume_series_full.reindex(s.index).dropna()
L852                     if len(vol_series) >= 5:
L853                         aligned_px = s.reindex(vol_series.index).dropna()
L854                         if len(aligned_px) == len(vol_series):
L855                             dv = (vol_series*aligned_px).rolling(60).mean()
L856                             if not dv.dropna().empty:
L857                                 adv60 = float(dv.dropna().iloc[-1])
L858             except Exception:
L859                 pass
L860             df.loc[t,'ADV60_USD'] = adv60
L861
L862             # --- Rule of 40 や周辺 ---
L863             total_rev_ttm = d.get('totalRevenue',np.nan)
L864             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L865             df.loc[t,'FCF_MGN'] = FCF_MGN
L866             rule40 = np.nan
L867             try:
L868                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L869             except Exception: pass
L870             df.loc[t,'RULE40'] = rule40
L871
L872             # --- トレンド補助 ---
L873             sma50  = s.rolling(50).mean()
L874             sma150 = s.rolling(150).mean()
L875             sma200 = s.rolling(200).mean()
L876             p = _safe_last(s)
L877
L878             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L879                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L880             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L881                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L882
L883             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L884             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L885
L886             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L887             if len(sma200.dropna()) >= 21:
L888                 cur200 = _safe_last(sma200)
L889                 old2001 = float(sma200.iloc[-21])
L890                 if old2001:
L891                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L892
L893             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L894             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L895             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L896             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L897             if len(sma200.dropna())>=105:
L898                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L899                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L900             # NEW: 200日線が連続で上向きの「日数」
L901             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L902             try:
L903                 s200 = sma200.dropna()
L904                 if len(s200) >= 2:
L905                     diff200 = s200.diff()
L906                     up = 0
L907                     for v in diff200.iloc[::-1]:
L908                         if pd.isna(v) or v <= 0:
L909                             break
L910                         up += 1
L911                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L912             except Exception:
L913                 pass
L914             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L915             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L916             if hi52 and hi52>0 and pd.notna(p):
L917                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L918             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L919             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L920
L921             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L922
L923             # --- 欠損メモ ---
L924             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L925             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L926             if need_finnhub:
L927                 fin_data = self.fetch_finnhub_metrics(t)
L928                 for col in need_finnhub:
L929                     val = fin_data.get(col)
L930                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L931             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L932                 if pd.isna(df.loc[t,col]):
L933                     if col=='DIV':
L934                         status = self.dividend_status(t)
L935                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L936                     else:
L937                         missing_logs.append({'Ticker':t,'Column':col})
L938
L939         def _pick_series(entry: dict, keys: list[str]):
L940             for k in keys:
L941                 val = entry.get(k) if isinstance(entry, dict) else None
L942                 if val is None:
L943                     continue
L944                 try:
L945                     if hasattr(val, "empty") and getattr(val, "empty"):
L946                         continue
L947                 except Exception:
L948                     pass
L949                 if isinstance(val, (list, tuple)) and len(val) == 0:
L950                     continue
L951                 return val
L952             return None
L953
L954         def _has_sec_series(val) -> bool:
L955             try:
L956                 if isinstance(val, pd.Series):
L957                     return not val.dropna().empty
L958                 if isinstance(val, (list, tuple)):
L959                     return any(pd.notna(v) for v in val)
L960                 return bool(val)
L961             except Exception:
L962                 return False
L963
L964         def _series_len(val) -> int:
L965             try:
L966                 if isinstance(val, pd.Series):
L967                     return int(val.dropna().size)
L968                 if isinstance(val, (list, tuple)):
L969                     return len(val)
L970                 return int(bool(val))
L971             except Exception:
L972                 return 0
L973
L974         for t in tickers:
L975             try:
L976                 d = info.get(t, {}) or {}
L977                 rev_se
```