```text
.loc[t,'REV_Q_PREV'] = _eps_value('REV_Q_Prev')
L456             df.loc[t,'EPS_A_LATEST'] = _eps_value('EPS_A_LATEST')
L457             df.loc[t,'EPS_A_PREV'] = _eps_value('EPS_A_PREV')
L458             df.loc[t,'REV_A_LATEST'] = _eps_value('REV_A_LATEST')
L459             df.loc[t,'REV_A_PREV'] = _eps_value('REV_A_PREV')
L460             df.loc[t,'EPS_A_CAGR3'] = _eps_value('EPS_A_CAGR3')
L461             df.loc[t,'REV_A_CAGR3'] = _eps_value('REV_A_CAGR3')
L462             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L463             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L464             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L465
L466             # --- 配当（欠損補完含む） ---
L467             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L468             if div is None or pd.isna(div):
L469                 try:
L470                     divs = yf.Ticker(t).dividends
L471                     if divs is not None and not divs.empty:
L472                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L473                         if last_close and last_close>0: div = float(div_1y/last_close)
L474                 except Exception: pass
L475             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L476
L477             # --- FCF/EV ---
L478             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L479             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L480
L481             # --- モメンタム・ボラ関連 ---
L482             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L483             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L484             n = int(min(len(r), len(rm)))
L485
L486             DOWNSIDE_DEV = np.nan
L487             if n>=60:
L488                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L489                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L490             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L491
L492             MDD_1Y = np.nan
L493             try:
L494                 w = s.iloc[-min(len(s),252):].dropna()
L495                 if len(w)>=30:
L496                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L497             except Exception: pass
L498             df.loc[t,'MDD_1Y'] = MDD_1Y
L499
L500             RESID_VOL = np.nan
L501             if n>=120:
L502                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L503                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L504                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L505                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L506             df.loc[t,'RESID_VOL'] = RESID_VOL
L507
L508             DOWN_OUTPERF = np.nan
L509             if n>=60:
L510                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L511                 if mask.sum()>=10:
L512                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L513                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L514             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L515
L516             # --- 長期移動平均/位置 ---
L517             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L518             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L519
L520             # --- 配当の詳細系 ---
L521             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L522             try:
L523                 divs = yf.Ticker(t).dividends.dropna()
L524                 if not divs.empty:
L525                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L526                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L527                     ann = divs.groupby(divs.index.year).sum()
L528                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L529                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L530                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L531                 so = d.get('sharesOutstanding',None)
L532                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L533                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L534             except Exception: pass
L535             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L536
L537             # --- 財務安定性 ---
L538             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L539
L540             # --- EPS 変動 ---
L541             EPS_VAR_8Q = np.nan
L542             try:
L543                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L544                 if qe is not None and not qe.empty and so:
L545                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L546                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L547             except Exception: pass
L548             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L549
L550             # --- サイズ/流動性 ---
L551             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L552             try:
L553                 if isinstance(volume_series_full, pd.Series):
L554                     vol_series = volume_series_full.reindex(s.index).dropna()
L555                     if len(vol_series) >= 5:
L556                         aligned_px = s.reindex(vol_series.index).dropna()
L557                         if len(aligned_px) == len(vol_series):
L558                             dv = (vol_series*aligned_px).rolling(60).mean()
L559                             if not dv.dropna().empty:
L560                                 adv60 = float(dv.dropna().iloc[-1])
L561             except Exception:
L562                 pass
L563             df.loc[t,'ADV60_USD'] = adv60
L564
L565             # --- Rule of 40 や周辺 ---
L566             total_rev_ttm = d.get('totalRevenue',np.nan)
L567             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L568             df.loc[t,'FCF_MGN'] = FCF_MGN
L569             rule40 = np.nan
L570             try:
L571                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L572             except Exception: pass
L573             df.loc[t,'RULE40'] = rule40
L574
L575             # --- トレンド補助 ---
L576             sma50  = s.rolling(50).mean()
L577             sma150 = s.rolling(150).mean()
L578             sma200 = s.rolling(200).mean()
L579             p = _safe_last(s)
L580
L581             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L582                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L583             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L584                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L585
L586             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L587             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L588
L589             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L590             if len(sma200.dropna()) >= 21:
L591                 cur200 = _safe_last(sma200)
L592                 old2001 = float(sma200.iloc[-21])
L593                 if old2001:
L594                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L595
L596             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L597             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L598             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L599             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L600             if len(sma200.dropna())>=105:
L601                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L602                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L603             # NEW: 200日線が連続で上向きの「日数」
L604             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L605             try:
L606                 s200 = sma200.dropna()
L607                 if len(s200) >= 2:
L608                     diff200 = s200.diff()
L609                     up = 0
L610                     for v in diff200.iloc[::-1]:
L611                         if pd.isna(v) or v <= 0:
L612                             break
L613                         up += 1
L614                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L615             except Exception:
L616                 pass
L617             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L618             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L619             if hi52 and hi52>0 and pd.notna(p):
L620                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L621             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L622             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L623
L624             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L625
L626             # --- 欠損メモ ---
L627             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L628             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L629             if need_finnhub:
L630                 fin_data = self.fetch_finnhub_metrics(t)
L631                 for col in need_finnhub:
L632                     val = fin_data.get(col)
L633                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L634             # 欠損ログは factor 側で補完後に集約する（ここでは検知のみ）
L635
L636         def _pick_series(entry: dict, keys: list[str]):
L637             for k in keys:
L638                 val = entry.get(k) if isinstance(entry, dict) else None
L639                 if val is None:
L640                     continue
L641                 try:
L642                     if hasattr(val, "empty") and getattr(val, "empty"):
L643                         continue
L644                 except Exception:
L645                     pass
L646                 if isinstance(val, (list, tuple)) and len(val) == 0:
L647                     continue
L648                 return val
L649             return None
L650
L651         def _has_sec_series(val) -> bool:
L652             try:
L653                 if isinstance(val, pd.Series):
L654                     return not val.dropna().empty
L655                 if isinstance(val, (list, tuple)):
L656                     return any(pd.notna(v) for v in val)
L657                 return bool(val)
L658             except Exception:
L659                 return False
L660
L661         def _series_len(val) -> int:
L662             try:
L663                 if isinstance(val, pd.Series):
L664                     return int(val.dropna().size)
L665                 if isinstance(val, (list, tuple)):
L666                     return len(val)
L667                 return int(bool(val))
L668             except Exception:
L669                 return 0
L670
L671         for t in tickers:
L672             try:
L673                 d = info.get(t, {}) or {}
L674                 rev_series = d.get("SEC_REV_Q_SERIES")
L675          
```