```text
            df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L943             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L944
L945             # --- 配当（欠損補完含む） ---
L946             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L947             if div is None or pd.isna(div):
L948                 try:
L949                     divs = yf.Ticker(t).dividends
L950                     if divs is not None and not divs.empty:
L951                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L952                         if last_close and last_close>0: div = float(div_1y/last_close)
L953                 except Exception: pass
L954             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L955
L956             # --- FCF/EV ---
L957             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L958             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L959
L960             # --- モメンタム・ボラ関連 ---
L961             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L962             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L963             n = int(min(len(r), len(rm)))
L964
L965             DOWNSIDE_DEV = np.nan
L966             if n>=60:
L967                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L968                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L969             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L970
L971             MDD_1Y = np.nan
L972             try:
L973                 w = s.iloc[-min(len(s),252):].dropna()
L974                 if len(w)>=30:
L975                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L976             except Exception: pass
L977             df.loc[t,'MDD_1Y'] = MDD_1Y
L978
L979             RESID_VOL = np.nan
L980             if n>=120:
L981                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L982                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L983                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L984                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L985             df.loc[t,'RESID_VOL'] = RESID_VOL
L986
L987             DOWN_OUTPERF = np.nan
L988             if n>=60:
L989                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L990                 if mask.sum()>=10:
L991                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L992                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L993             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L994
L995             # --- 長期移動平均/位置 ---
L996             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L997             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L998
L999             # --- 配当の詳細系 ---
L1000             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L1001             try:
L1002                 divs = yf.Ticker(t).dividends.dropna()
L1003                 if not divs.empty:
L1004                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L1005                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L1006                     ann = divs.groupby(divs.index.year).sum()
L1007                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L1008                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L1009                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L1010                 so = d.get('sharesOutstanding',None)
L1011                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L1012                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L1013             except Exception: pass
L1014             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L1015
L1016             # --- 財務安定性 ---
L1017             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L1018
L1019             # --- EPS 変動 ---
L1020             EPS_VAR_8Q = np.nan
L1021             try:
L1022                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L1023                 if qe is not None and not qe.empty and so:
L1024                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L1025                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L1026             except Exception: pass
L1027             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L1028
L1029             # --- サイズ/流動性 ---
L1030             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L1031             try:
L1032                 if isinstance(volume_series_full, pd.Series):
L1033                     vol_series = volume_series_full.reindex(s.index).dropna()
L1034                     if len(vol_series) >= 5:
L1035                         aligned_px = s.reindex(vol_series.index).dropna()
L1036                         if len(aligned_px) == len(vol_series):
L1037                             dv = (vol_series*aligned_px).rolling(60).mean()
L1038                             if not dv.dropna().empty:
L1039                                 adv60 = float(dv.dropna().iloc[-1])
L1040             except Exception:
L1041                 pass
L1042             df.loc[t,'ADV60_USD'] = adv60
L1043
L1044             # --- Rule of 40 や周辺 ---
L1045             total_rev_ttm = d.get('totalRevenue',np.nan)
L1046             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L1047             df.loc[t,'FCF_MGN'] = FCF_MGN
L1048             rule40 = np.nan
L1049             try:
L1050                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L1051             except Exception: pass
L1052             df.loc[t,'RULE40'] = rule40
L1053
L1054             # --- トレンド補助 ---
L1055             sma50  = s.rolling(50).mean()
L1056             sma150 = s.rolling(150).mean()
L1057             sma200 = s.rolling(200).mean()
L1058             p = _safe_last(s)
L1059
L1060             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L1061                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L1062             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L1063                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L1064
L1065             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L1066             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L1067
L1068             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L1069             if len(sma200.dropna()) >= 21:
L1070                 cur200 = _safe_last(sma200)
L1071                 old2001 = float(sma200.iloc[-21])
L1072                 if old2001:
L1073                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L1074
L1075             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L1076             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L1077             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L1078             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L1079             if len(sma200.dropna())>=105:
L1080                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L1081                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L1082             # NEW: 200日線が連続で上向きの「日数」
L1083             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L1084             try:
L1085                 s200 = sma200.dropna()
L1086                 if len(s200) >= 2:
L1087                     diff200 = s200.diff()
L1088                     up = 0
L1089                     for v in diff200.iloc[::-1]:
L1090                         if pd.isna(v) or v <= 0:
L1091                             break
L1092                         up += 1
L1093                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L1094             except Exception:
L1095                 pass
L1096             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L1097             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L1098             if hi52 and hi52>0 and pd.notna(p):
L1099                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L1100             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L1101             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L1102
L1103             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L1104
L1105             # --- 欠損メモ ---
L1106             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L1107             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L1108             if need_finnhub:
L1109                 fin_data = self.fetch_finnhub_metrics(t)
L1110                 for col in need_finnhub:
L1111                     val = fin_data.get(col)
L1112                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L1113             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L1114                 if pd.isna(df.loc[t,col]):
L1115                     if col=='DIV':
L1116                         status = self.dividend_status(t)
L1117                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L1118                     else:
L1119                         missing_logs.append({'Ticker':t,'Column':col})
L1120
L1121         def _pick_series(entry: dict, keys: list[str]):
L1122             for k in keys:
L1123                 val = entry.get(k) if isinstance(entry, dict) else None
L1124                 if val is None:
L1125                     continue
L1126                 try:
L1127                     if hasattr(val, "empty") and getattr(val, "empty"):
L1128                         continue
L1129                 except Exception:
L1130                     pass
L1131                 if isinstance(val, (list, tuple)) and len(val) == 0:
L1132                     continue
L1133                 return val
L1134             return None
L1135
L1136         def _has_sec_series(val) -> bool:
L1137             try:
L1138                 if isinstance(val, pd.Series):
L1139                     return not val.dropna().empty
L1140                 if isinstance(val, (list, tuple)):
L1141                     return any(pd.notna(v) for v in val)
L1142                 return bool(val)
L1143             except Exception:
L1144                 return False
L1145
L1146         def _series_len(val) -> int:
L1147             try:
L1148                 if isinstance(val, pd.Series):
L1149                     return int(val.dropna().size)
L1150                 if isinstance(val, (list, tuple)):
L1151                     return len(val)
L1152                 return int(bool(val))
L1153             except Exception:
L1154                 return 0
L1155
L1156         cnt_rev_series = sum(1 for _t, d in info.items() if _has_sec_series(d.get("SEC_REV_Q_SERIES")))
L1157         cnt_eps_series = sum(1 for 
```