```text
ot None and not divs.empty:
L948                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L949                         if last_close and last_close>0: div = float(div_1y/last_close)
L950                 except Exception: pass
L951             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L952
L953             # --- FCF/EV ---
L954             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L955             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L956
L957             # --- モメンタム・ボラ関連 ---
L958             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L959             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L960             n = int(min(len(r), len(rm)))
L961
L962             DOWNSIDE_DEV = np.nan
L963             if n>=60:
L964                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L965                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L966             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L967
L968             MDD_1Y = np.nan
L969             try:
L970                 w = s.iloc[-min(len(s),252):].dropna()
L971                 if len(w)>=30:
L972                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L973             except Exception: pass
L974             df.loc[t,'MDD_1Y'] = MDD_1Y
L975
L976             RESID_VOL = np.nan
L977             if n>=120:
L978                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L979                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L980                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L981                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L982             df.loc[t,'RESID_VOL'] = RESID_VOL
L983
L984             DOWN_OUTPERF = np.nan
L985             if n>=60:
L986                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L987                 if mask.sum()>=10:
L988                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L989                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L990             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L991
L992             # --- 長期移動平均/位置 ---
L993             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L994             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L995
L996             # --- 配当の詳細系 ---
L997             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L998             try:
L999                 divs = yf.Ticker(t).dividends.dropna()
L1000                 if not divs.empty:
L1001                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L1002                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L1003                     ann = divs.groupby(divs.index.year).sum()
L1004                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L1005                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L1006                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L1007                 so = d.get('sharesOutstanding',None)
L1008                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L1009                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L1010             except Exception: pass
L1011             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L1012
L1013             # --- 財務安定性 ---
L1014             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L1015
L1016             # --- EPS 変動 ---
L1017             EPS_VAR_8Q = np.nan
L1018             try:
L1019                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L1020                 if qe is not None and not qe.empty and so:
L1021                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L1022                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L1023             except Exception: pass
L1024             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L1025
L1026             # --- サイズ/流動性 ---
L1027             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L1028             try:
L1029                 if isinstance(volume_series_full, pd.Series):
L1030                     vol_series = volume_series_full.reindex(s.index).dropna()
L1031                     if len(vol_series) >= 5:
L1032                         aligned_px = s.reindex(vol_series.index).dropna()
L1033                         if len(aligned_px) == len(vol_series):
L1034                             dv = (vol_series*aligned_px).rolling(60).mean()
L1035                             if not dv.dropna().empty:
L1036                                 adv60 = float(dv.dropna().iloc[-1])
L1037             except Exception:
L1038                 pass
L1039             df.loc[t,'ADV60_USD'] = adv60
L1040
L1041             # --- Rule of 40 や周辺 ---
L1042             total_rev_ttm = d.get('totalRevenue',np.nan)
L1043             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L1044             df.loc[t,'FCF_MGN'] = FCF_MGN
L1045             rule40 = np.nan
L1046             try:
L1047                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L1048             except Exception: pass
L1049             df.loc[t,'RULE40'] = rule40
L1050
L1051             # --- トレンド補助 ---
L1052             sma50  = s.rolling(50).mean()
L1053             sma150 = s.rolling(150).mean()
L1054             sma200 = s.rolling(200).mean()
L1055             p = _safe_last(s)
L1056
L1057             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L1058                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L1059             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L1060                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L1061
L1062             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L1063             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L1064
L1065             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L1066             if len(sma200.dropna()) >= 21:
L1067                 cur200 = _safe_last(sma200)
L1068                 old2001 = float(sma200.iloc[-21])
L1069                 if old2001:
L1070                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L1071
L1072             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L1073             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L1074             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L1075             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L1076             if len(sma200.dropna())>=105:
L1077                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L1078                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L1079             # NEW: 200日線が連続で上向きの「日数」
L1080             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L1081             try:
L1082                 s200 = sma200.dropna()
L1083                 if len(s200) >= 2:
L1084                     diff200 = s200.diff()
L1085                     up = 0
L1086                     for v in diff200.iloc[::-1]:
L1087                         if pd.isna(v) or v <= 0:
L1088                             break
L1089                         up += 1
L1090                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L1091             except Exception:
L1092                 pass
L1093             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L1094             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L1095             if hi52 and hi52>0 and pd.notna(p):
L1096                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L1097             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L1098             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L1099
L1100             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L1101
L1102             # --- 欠損メモ ---
L1103             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L1104             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L1105             if need_finnhub:
L1106                 fin_data = self.fetch_finnhub_metrics(t)
L1107                 for col in need_finnhub:
L1108                     val = fin_data.get(col)
L1109                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L1110             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L1111                 if pd.isna(df.loc[t,col]):
L1112                     if col=='DIV':
L1113                         status = self.dividend_status(t)
L1114                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L1115                     else:
L1116                         missing_logs.append({'Ticker':t,'Column':col})
L1117
L1118         def _pick_series(entry: dict, keys: list[str]):
L1119             for k in keys:
L1120                 val = entry.get(k) if isinstance(entry, dict) else None
L1121                 if val is None:
L1122                     continue
L1123                 try:
L1124                     if hasattr(val, "empty") and getattr(val, "empty"):
L1125                         continue
L1126                 except Exception:
L1127                     pass
L1128                 if isinstance(val, (list, tuple)) and len(val) == 0:
L1129                     continue
L1130                 return val
L1131             return None
L1132
L1133         def _has_sec_series(val) -> bool:
L1134             try:
L1135                 if isinstance(val, pd.Series):
L1136                     return not val.dropna().empty
L1137                 if isinstance(val, (list, tuple)):
L1138                     return any(pd.notna(v) for v in val)
L1139                 return bool(val)
L1140             except Exception:
L1141                 return False
L1142
L1143         def _series_len(val) -> int:
L1144             try:
L1145                 if isinstance(val, pd.Series):
L1146                     return int(val.dropna().size)
L1147                 if isinstance(val, (list, tuple)):
L1148                     return len(val)
L1149                 return int(bool(val))
L1150             except Exception:
L1151                 return 0
L1152
L1153         cnt_rev_series = sum(1 for _t, d in info.items() if _has_sec_series(d.get("SEC_REV_Q_SERIES")))
L1154         cnt_eps_series = sum(1 for _t, d in info.items() if _has_sec_series(d.get("SEC_EPS_Q_SERIES")))
L1155         logger.info(
L1156             "[DERIV] SEC series presence: REV_Q=%d, EPS_Q=%d (universe=%d)",
L1157             cnt_rev_series,
L1158             cnt_eps_series,
L1159             len(info),
L1160         )
L1161
L1162         rev_q_ge5 = 0
L1163         ttm_yoy_avail = 0
L1164         wrote_growth = 0
L1165
L1166         for t in tickers:
L1167             try:
L1168                 d 
```