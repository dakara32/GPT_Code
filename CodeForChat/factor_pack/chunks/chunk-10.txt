```text
"DBG_GRW.rev_yoy_med"] = float(np.nanmedian(rev_yoy)) if len(rev_yoy) > 0 else None
L723                     if isinstance(series_eps_q, pd.Series) and series_eps_q.size >= 8:
L724                         eps_yoy = (series_eps_q / series_eps_q.shift(4) - 1).dropna()
L725                         if not eps_yoy.empty:
L726                             df.loc[t, "DBG_GRW.eps_yoy_last4"] = list(eps_yoy.tail(4).round(4))
L727                             df.loc[t, "DBG_GRW.eps_yoy_mean"] = float(np.nanmean(eps_yoy)) if len(eps_yoy) > 0 else None
L728                             df.loc[t, "DBG_GRW.eps_yoy_med"] = float(np.nanmedian(eps_yoy)) if len(eps_yoy) > 0 else None
L729
L730                     base_pos = []
L731                     for key in ("DBG_GRW.rev_yoy_mean", "DBG_GRW.eps_yoy_mean", "DBG_GRW.core.ttm_yoy"):
L732                         if key in df.columns:
L733                             val = df.at[t, key]
L734                             if val is not None and not pd.isna(val):
L735                                 try:
L736                                     base_pos.append(float(val))
L737                                 except Exception:
L738                                     continue
L739                     if base_pos:
L740                         median_base = float(np.nanmedian(base_pos))
L741                         if (
L742                             np.isfinite(median_base)
L743                             and median_base > 0.30
L744                             and np.isfinite(grw_score_val)
L745                             and grw_score_val < 0
L746                         ):
L747                             row_dbg = df.loc[t] if t in df.index else {}
L748                             path_dbg = row_dbg.get('DBG_GRW.path') if hasattr(row_dbg, 'get') else None
L749                             weight_dbg = row_dbg.get('DBG_GRW.w') if hasattr(row_dbg, 'get') else None
L750                             logger.warning(
L751                                 "[GRW-SANITY] %s: median_base=%.3f but GROWTH_F=%.3f  path=%s w=%s",
L752                                 t,
L753                                 median_base,
L754                                 grw_score_val,
L755                                 path_dbg,
L756                                 weight_dbg,
L757                             )
L758                 except Exception:
L759                     pass
L760
L761             # --- 基本特徴 ---
L762             df.loc[t,'TR']   = self.trend(s)
L763             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L764             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L765             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L766             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L767             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L768             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L769             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L770
L771             # --- 配当（欠損補完含む） ---
L772             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L773             if div is None or pd.isna(div):
L774                 try:
L775                     divs = yf.Ticker(t).dividends
L776                     if divs is not None and not divs.empty:
L777                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L778                         if last_close and last_close>0: div = float(div_1y/last_close)
L779                 except Exception: pass
L780             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L781
L782             # --- FCF/EV ---
L783             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L784             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L785
L786             # --- モメンタム・ボラ関連 ---
L787             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L788             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L789             n = int(min(len(r), len(rm)))
L790
L791             DOWNSIDE_DEV = np.nan
L792             if n>=60:
L793                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L794                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L795             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L796
L797             MDD_1Y = np.nan
L798             try:
L799                 w = s.iloc[-min(len(s),252):].dropna()
L800                 if len(w)>=30:
L801                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L802             except Exception: pass
L803             df.loc[t,'MDD_1Y'] = MDD_1Y
L804
L805             RESID_VOL = np.nan
L806             if n>=120:
L807                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L808                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L809                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L810                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L811             df.loc[t,'RESID_VOL'] = RESID_VOL
L812
L813             DOWN_OUTPERF = np.nan
L814             if n>=60:
L815                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L816                 if mask.sum()>=10:
L817                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L818                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L819             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L820
L821             # --- 長期移動平均/位置 ---
L822             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L823             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L824
L825             # --- 配当の詳細系 ---
L826             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L827             try:
L828                 divs = yf.Ticker(t).dividends.dropna()
L829                 if not divs.empty:
L830                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L831                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L832                     ann = divs.groupby(divs.index.year).sum()
L833                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L834                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L835                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L836                 so = d.get('sharesOutstanding',None)
L837                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L838                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L839             except Exception: pass
L840             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L841
L842             # --- 財務安定性 ---
L843             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L844
L845             # --- EPS 変動 ---
L846             EPS_VAR_8Q = np.nan
L847             try:
L848                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L849                 if qe is not None and not qe.empty and so:
L850                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L851                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L852             except Exception: pass
L853             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L854
L855             # --- サイズ/流動性 ---
L856             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L857             try:
L858                 if isinstance(volume_series_full, pd.Series):
L859                     vol_series = volume_series_full.reindex(s.index).dropna()
L860                     if len(vol_series) >= 5:
L861                         aligned_px = s.reindex(vol_series.index).dropna()
L862                         if len(aligned_px) == len(vol_series):
L863                             dv = (vol_series*aligned_px).rolling(60).mean()
L864                             if not dv.dropna().empty:
L865                                 adv60 = float(dv.dropna().iloc[-1])
L866             except Exception:
L867                 pass
L868             df.loc[t,'ADV60_USD'] = adv60
L869
L870             # --- Rule of 40 や周辺 ---
L871             total_rev_ttm = d.get('totalRevenue',np.nan)
L872             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L873             df.loc[t,'FCF_MGN'] = FCF_MGN
L874             rule40 = np.nan
L875             try:
L876                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L877             except Exception: pass
L878             df.loc[t,'RULE40'] = rule40
L879
L880             # --- トレンド補助 ---
L881             sma50  = s.rolling(50).mean()
L882             sma150 = s.rolling(150).mean()
L883             sma200 = s.rolling(200).mean()
L884             p = _safe_last(s)
L885
L886             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L887                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L888             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L889                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L890
L891             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L892             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L893
L894             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L895             if len(sma200.dropna()) >= 21:
L896                 cur200 = _safe_last(sma200)
L897                 old2001 = float(sma200.iloc[-21])
L898                 if old2001:
L899                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L900
L901             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L902             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L903             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L904             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L905             if len(sma200.dropna())>=105:
L906                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L907                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L908             # NEW: 200日線が連続で上向きの「日数」
L909             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L910             try:
L911                 s200 = sma200.dropna()
L912                 if len(s200) >= 2:
L913                     diff200 = s200.diff()
L914                     up = 0
L915                     for v in diff200.iloc[::-1]:
L916                         if pd.isna(v) or v <= 0:
L917                             break
L918                         up += 1
L919                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L920             except Exception:
L921                 pass
L922             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L923             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.na
```