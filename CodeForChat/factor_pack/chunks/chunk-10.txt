```text
anmean(rev_yoy)) if len(rev_yoy) > 0 else None
L723                             df.loc[t, "DBG_GRW.rev_yoy_med"] = float(np.nanmedian(rev_yoy)) if len(rev_yoy) > 0 else None
L724                     if isinstance(series_eps_q, pd.Series) and series_eps_q.size >= 8:
L725                         eps_yoy = (series_eps_q / series_eps_q.shift(4) - 1).dropna()
L726                         if not eps_yoy.empty:
L727                             df.loc[t, "DBG_GRW.eps_yoy_last4"] = list(eps_yoy.tail(4).round(4))
L728                             df.loc[t, "DBG_GRW.eps_yoy_mean"] = float(np.nanmean(eps_yoy)) if len(eps_yoy) > 0 else None
L729                             df.loc[t, "DBG_GRW.eps_yoy_med"] = float(np.nanmedian(eps_yoy)) if len(eps_yoy) > 0 else None
L730
L731                     base_pos = []
L732                     for key in ("DBG_GRW.rev_yoy_mean", "DBG_GRW.eps_yoy_mean", "DBG_GRW.core.ttm_yoy"):
L733                         if key in df.columns:
L734                             val = df.at[t, key]
L735                             if val is not None and not pd.isna(val):
L736                                 try:
L737                                     base_pos.append(float(val))
L738                                 except Exception:
L739                                     continue
L740                     if base_pos:
L741                         median_base = float(np.nanmedian(base_pos))
L742                         if (
L743                             np.isfinite(median_base)
L744                             and median_base > 0.30
L745                             and np.isfinite(grw_score_val)
L746                             and grw_score_val < 0
L747                         ):
L748                             row_dbg = df.loc[t] if t in df.index else {}
L749                             path_dbg = row_dbg.get('DBG_GRW.path') if hasattr(row_dbg, 'get') else None
L750                             weight_dbg = row_dbg.get('DBG_GRW.w') if hasattr(row_dbg, 'get') else None
L751                             logger.warning(
L752                                 "[GRW-SANITY] %s: median_base=%.3f but GROWTH_F=%.3f  path=%s w=%s",
L753                                 t,
L754                                 median_base,
L755                                 grw_score_val,
L756                                 path_dbg,
L757                                 weight_dbg,
L758                             )
L759                 except Exception:
L760                     pass
L761
L762             # --- 基本特徴 ---
L763             df.loc[t,'TR']   = self.trend(s)
L764             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L765             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L766             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L767             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L768             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L769             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L770             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L771
L772             # --- 配当（欠損補完含む） ---
L773             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L774             if div is None or pd.isna(div):
L775                 try:
L776                     divs = yf.Ticker(t).dividends
L777                     if divs is not None and not divs.empty:
L778                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L779                         if last_close and last_close>0: div = float(div_1y/last_close)
L780                 except Exception: pass
L781             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L782
L783             # --- FCF/EV ---
L784             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L785             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L786
L787             # --- モメンタム・ボラ関連 ---
L788             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L789             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L790             n = int(min(len(r), len(rm)))
L791
L792             DOWNSIDE_DEV = np.nan
L793             if n>=60:
L794                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L795                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L796             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L797
L798             MDD_1Y = np.nan
L799             try:
L800                 w = s.iloc[-min(len(s),252):].dropna()
L801                 if len(w)>=30:
L802                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L803             except Exception: pass
L804             df.loc[t,'MDD_1Y'] = MDD_1Y
L805
L806             RESID_VOL = np.nan
L807             if n>=120:
L808                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L809                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L810                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L811                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L812             df.loc[t,'RESID_VOL'] = RESID_VOL
L813
L814             DOWN_OUTPERF = np.nan
L815             if n>=60:
L816                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L817                 if mask.sum()>=10:
L818                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L819                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L820             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L821
L822             # --- 長期移動平均/位置 ---
L823             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L824             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L825
L826             # --- 配当の詳細系 ---
L827             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L828             try:
L829                 divs = yf.Ticker(t).dividends.dropna()
L830                 if not divs.empty:
L831                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L832                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L833                     ann = divs.groupby(divs.index.year).sum()
L834                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L835                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L836                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L837                 so = d.get('sharesOutstanding',None)
L838                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L839                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L840             except Exception: pass
L841             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L842
L843             # --- 財務安定性 ---
L844             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L845
L846             # --- EPS 変動 ---
L847             EPS_VAR_8Q = np.nan
L848             try:
L849                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L850                 if qe is not None and not qe.empty and so:
L851                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L852                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L853             except Exception: pass
L854             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L855
L856             # --- サイズ/流動性 ---
L857             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L858             try:
L859                 if isinstance(volume_series_full, pd.Series):
L860                     vol_series = volume_series_full.reindex(s.index).dropna()
L861                     if len(vol_series) >= 5:
L862                         aligned_px = s.reindex(vol_series.index).dropna()
L863                         if len(aligned_px) == len(vol_series):
L864                             dv = (vol_series*aligned_px).rolling(60).mean()
L865                             if not dv.dropna().empty:
L866                                 adv60 = float(dv.dropna().iloc[-1])
L867             except Exception:
L868                 pass
L869             df.loc[t,'ADV60_USD'] = adv60
L870
L871             # --- Rule of 40 や周辺 ---
L872             total_rev_ttm = d.get('totalRevenue',np.nan)
L873             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L874             df.loc[t,'FCF_MGN'] = FCF_MGN
L875             rule40 = np.nan
L876             try:
L877                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L878             except Exception: pass
L879             df.loc[t,'RULE40'] = rule40
L880
L881             # --- トレンド補助 ---
L882             sma50  = s.rolling(50).mean()
L883             sma150 = s.rolling(150).mean()
L884             sma200 = s.rolling(200).mean()
L885             p = _safe_last(s)
L886
L887             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L888                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L889             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L890                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L891
L892             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L893             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L894
L895             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L896             if len(sma200.dropna()) >= 21:
L897                 cur200 = _safe_last(sma200)
L898                 old2001 = float(sma200.iloc[-21])
L899                 if old2001:
L900                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L901
L902             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L903             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L904             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L905             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L906             if len(sma200.dropna())>=105:
L907                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L908                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L909             # NEW: 200日線が連続で上向きの「日数」
L910             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L911             try:
L912                 s200 = sma200.dropna()
L913                 if len(s200) >= 2:
L914                     diff200 = s200.diff()
L915                     up = 0
L916                     for v in diff200.iloc[::-1]:
L917                         if pd.isna(v) or v <= 0:
L918                             break
L919                         up += 1
L920                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L921             except Exception:
L922                 pass
L923             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L924       
```