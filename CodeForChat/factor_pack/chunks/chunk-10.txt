```text
)>=105:
L850                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L851                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L852             # NEW: 200日線が連続で上向きの「日数」
L853             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L854             try:
L855                 s200 = sma200.dropna()
L856                 if len(s200) >= 2:
L857                     diff200 = s200.diff()
L858                     up = 0
L859                     for v in diff200.iloc[::-1]:
L860                         if pd.isna(v) or v <= 0:
L861                             break
L862                         up += 1
L863                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L864             except Exception:
L865                 pass
L866             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L867             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L868             if hi52 and hi52>0 and pd.notna(p):
L869                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L870             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L871             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L872
L873             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L874
L875             # --- 欠損メモ ---
L876             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L877             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L878             if need_finnhub:
L879                 fin_data = self.fetch_finnhub_metrics(t)
L880                 for col in need_finnhub:
L881                     val = fin_data.get(col)
L882                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L883             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L884                 if pd.isna(df.loc[t,col]):
L885                     if col=='DIV':
L886                         status = self.dividend_status(t)
L887                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L888                     else:
L889                         missing_logs.append({'Ticker':t,'Column':col})
L890
L891         def _pick_series(entry: dict, keys: list[str]):
L892             for k in keys:
L893                 val = entry.get(k) if isinstance(entry, dict) else None
L894                 if val is None:
L895                     continue
L896                 try:
L897                     if hasattr(val, "empty") and getattr(val, "empty"):
L898                         continue
L899                 except Exception:
L900                     pass
L901                 if isinstance(val, (list, tuple)) and len(val) == 0:
L902                     continue
L903                 return val
L904             return None
L905
L906         def _has_sec_series(val) -> bool:
L907             try:
L908                 if isinstance(val, pd.Series):
L909                     return not val.dropna().empty
L910                 if isinstance(val, (list, tuple)):
L911                     return any(pd.notna(v) for v in val)
L912                 return bool(val)
L913             except Exception:
L914                 return False
L915
L916         def _series_len(val) -> int:
L917             try:
L918                 if isinstance(val, pd.Series):
L919                     return int(val.dropna().size)
L920                 if isinstance(val, (list, tuple)):
L921                     return len(val)
L922                 return int(bool(val))
L923             except Exception:
L924                 return 0
L925
L926         cnt_rev_series = sum(1 for _t, d in info.items() if _has_sec_series(d.get("SEC_REV_Q_SERIES")))
L927         cnt_eps_series = sum(1 for _t, d in info.items() if _has_sec_series(d.get("SEC_EPS_Q_SERIES")))
L928         logger.info(
L929             "[DERIV] SEC series presence: REV_Q=%d, EPS_Q=%d (universe=%d)",
L930             cnt_rev_series,
L931             cnt_eps_series,
L932             len(info),
L933         )
L934
L935         rev_q_ge5 = 0
L936         ttm_yoy_avail = 0
L937         wrote_growth = 0
L938
L939         for t in tickers:
L940             try:
L941                 d = info.get(t, {}) or {}
L942                 rev_series = d.get("SEC_REV_Q_SERIES")
L943                 eps_series = d.get("SEC_EPS_Q_SERIES")
L944                 fallback_qearn = False
L945                 try:
L946                     qe = tickers_bulk.tickers[t].quarterly_earnings
L947                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L948                 except Exception:
L949                     qe = None
L950                 logger.debug(
L951                     "[DERIV] %s: rev_q_len=%s eps_q_len=%s fallback_qearn=%s",
L952                     t,
L953                     _series_len(rev_series),
L954                     _series_len(eps_series),
L955                     fallback_qearn,
L956                 )
L957
L958                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L959                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L960                 r_raw = _ensure_series(r_src)
L961                 e_raw = _ensure_series(e_src)
L962                 _log("DERIV_SRC", f"{t} rev_raw_len={r_raw.size} eps_raw_len={e_raw.size}")
L963
L964                 r_q = _to_quarterly(r_raw)
L965                 e_q = _to_quarterly(e_raw)
L966                 _log("DERIV_Q", f"{t} rev_q_len={r_q.size} eps_q_len={e_q.size}")
L967                 if r_q.size >= 5:
L968                     rev_q_ge5 += 1
L969
L970                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L971                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L972                 has_ttm = int(not r_yoy_ttm.dropna().empty)
L973                 ttm_yoy_avail += has_ttm
L974                 _log("DERIV_TTM", f"{t} rev_ttm_yoy_len={r_yoy_ttm.dropna().size} eps_ttm_yoy_len={e_yoy_ttm.dropna().size}")
L975
L976                 def _q_yoy(qs):
L977                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L978
L979                 rev_q_yoy = _q_yoy(r_q)
L980                 eps_q_yoy = _q_yoy(e_q)
L981
L982                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L983                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L984                         ann = qs.groupby(qs.index.year).last().pct_change()
L985                         ann_dn = ann.dropna()
L986                         if not ann_dn.empty:
L987                             y = float(ann_dn.iloc[-1])
L988                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L989                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L990                             return y, acc, var
L991                     yoy_dn = yoy_ttm.dropna()
L992                     if yoy_dn.empty:
L993                         return np.nan, np.nan, np.nan
L994                     return (
L995                         float(yoy_dn.iloc[-1]),
L996                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L997                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L998                     )
L999
L1000                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L1001                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L1002
L1003                 def _pos_streak(s: pd.Series):
L1004                     s = s.dropna()
L1005                     if s.empty:
L1006                         return np.nan
L1007                     b = (s > 0).astype(int).to_numpy()[::-1]
L1008                     k = 0
L1009                     for v in b:
L1010                         if v == 1:
L1011                             k += 1
L1012                         else:
L1013                             break
L1014                     return float(k)
L1015
L1016                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L1017
L1018                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L1019                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L1020                 df.loc[t, "REV_YOY"] = rev_yoy
L1021                 df.loc[t, "EPS_YOY"] = eps_yoy
L1022                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L1023                 df.loc[t, "REV_YOY_VAR"] = rev_var
L1024                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L1025
L1026                 wrote_growth += 1
L1027                 _log(
L1028                     "DERIV_WRITE",
L1029                     f"{t} wrote: Q_YOY(rev={rev_q_yoy}, eps={eps_q_yoy}) ANN(rev_yoy={rev_yoy}, acc={rev_acc}, var={rev_var}) streak={rev_ann_streak}",
L1030                 )
L1031
L1032             except Exception as e:
L1033                 logger.warning("[DERIV_WARN] %s growth-derivatives failed: %s", t, e)
L1034                 _log("DERIV_WARN", f"{t} {type(e).__name__}: {e}")
L1035
L1036         _log("DERIV_SUMMARY", f"rev_q_len>=5: {rev_q_ge5}/{len(tickers)}  ttm_yoy_available: {ttm_yoy_avail}  wrote_growth_for: {wrote_growth}")
L1037
L1038         try:
L1039             cols = [
L1040                 "REV_Q_YOY",
L1041                 "EPS_Q_YOY",
L1042                 "REV_YOY",
L1043                 "EPS_YOY",
L1044                 "REV_YOY_ACC",
L1045                 "REV_YOY_VAR",
L1046                 "REV_ANN_STREAK",
L1047             ]
L1048             cnt = {c: int(df[c].count()) for c in cols if c in df.columns}
L1049             _log("DERIV_NONNAN_COUNTS", str(cnt))
L1050         except Exception as e:
L1051             _log("DERIV_NONNAN_COUNTS", f"error: {e}")
L1052
L1053         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1054             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1055             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1056             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1057             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1058             c5 = (row.get('TR_str', np.nan) > 0)
L1059             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1060             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1061             c8 = (row.get('RS', np.nan) >= 0.10)
L1062             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1063
L1064         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1065         assert 'trend_template' in df.columns
L1066
L1067         # === Z化と合成 ===
L1068         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1069
L1070         df_z = pd.DataFrame(index=df.index)
L1071         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1072         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1073         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L1074
L1075         # === Growth深掘り系（欠損保持z + RAW併載） ===
L1076         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L1077         for col in grw_cols:
L1078             if col in df.columns:
L1079                 raw = pd.to_numeric(df[col], errors="coerce")
L1080                 df_z[col] = robust_z_keepnan(raw)
L1081                 df_z[f'{col}_RAW'] = raw
L1082         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L1083             if k in df.columns and k not in df_z.columns:
L1084                 raw = pd.to_numeric
```