```text
8                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L329         """
L330         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L331         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L332         """
L333         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L334         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L335         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L336         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L337         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L338
L339     @staticmethod
L340     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L341         """
L342         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L343         戻り値は降順ソート済み。
L344         """
L345         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L346         cnt, pen = {}, {}
L347         for t in order:
L348             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L349         return (s - pd.Series(pen)).sort_values(ascending=False)
L350
L351     @staticmethod
L352     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L353         """
L354         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L355         """
L356         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L357         eff = eff.dropna()
L358         if not hard:
L359             return list(eff.head(N).index)
L360         pick, used = [], {}
L361         for t in eff.index:
L362             s = sectors.get(t, "U")
L363             if used.get(s,0) < hard:
L364                 pick.append(t); used[s] = used.get(s,0) + 1
L365             if len(pick) == N: break
L366         return pick
L367
L368     @staticmethod
L369     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L370         """
L371         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L372         - px: 列=ticker（ベンチは含めない）
L373         - spx: ベンチマーク Series（px.index に整列）
L374         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L375         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L376         """
L377         import numpy as np, pandas as pd
L378         if px is None or px.empty:
L379             return pd.Series(dtype=int)
L380         px = px.dropna(how="all", axis=1)
L381         if win_days and win_days > 0:
L382             px = px.tail(win_days)
L383         if px.empty:
L384             return pd.Series(dtype=int)
L385         spx = spx.reindex(px.index).ffill()
L386
L387         ma50  = px.rolling(50).mean()
L388         ma150 = px.rolling(150).mean()
L389         ma200 = px.rolling(200).mean()
L390
L391         tt = (px > ma150)
L392         tt &= (px > ma200)
L393         tt &= (ma150 > ma200)
L394         tt &= (ma200 - ma200.shift(21) > 0)
L395         tt &= (ma50  > ma150)
L396         tt &= (ma50  > ma200)
L397         tt &= (px    > ma50)
L398
L399         lo252 = px.rolling(252).min()
L400         hi252 = px.rolling(252).max()
L401         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L402         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L403
L404         r12  = px.divide(px.shift(252)).sub(1.0)
L405         br12 = spx.divide(spx.shift(252)).sub(1.0)
L406         r1   = px.divide(px.shift(22)).sub(1.0)
L407         br1  = spx.divide(spx.shift(22)).sub(1.0)
L408         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L409         tt &= (rs >= 0.10)
L410
L411         return tt.fillna(False).sum(axis=1).astype(int)
L412
L413     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L414     def aggregate_scores(self, ib: Any, cfg):
L415         if cfg is None:
L416             raise ValueError("cfg is required; pass factor.PipelineConfig")
L417         self._validate_ib_for_scorer(ib)
L418
L419         px, spx, tickers = ib.px, ib.spx, ib.tickers
L420         try:
L421             vol = ib.data['Volume']
L422         except Exception:
L423             vol = getattr(ib, 'vol', None)
L424         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L425
L426         df = pd.DataFrame(index=tickers)
L427         df['EPS_SERIES'] = pd.Series([None] * len(df), index=df.index, dtype=object)
L428         debug_mode = bool(getattr(cfg, "debug_mode", False))
L429         eps_cols = set(getattr(eps_df, "columns", []))
L430         for t in tickers:
L431             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L432             try:
L433                 volume_series_full = ib.data['Volume'][t]
L434             except Exception:
L435                 volume_series_full = None
L436
L437             # --- 基本特徴 ---
L438             df.loc[t,'TR']   = self.trend(s)
L439
L440             def _eps_value(col: str) -> float:
L441                 if col not in eps_cols:
L442                     return np.nan
L443                 try:
L444                     return _scalar(eps_df[col].get(t, np.nan))
L445                 except Exception:
L446                     return np.nan
L447
L448             df.loc[t,'EPS']  = _eps_value('EPS_TTM')
L449             df.loc[t,'EPS_Q'] = _eps_value('EPS_Q_LastQ')
L450             df.loc[t,'REV_TTM'] = _eps_value('REV_TTM')
L451             df.loc[t,'REV_Q']   = _eps_value('REV_Q_LastQ')
L452             df.loc[t,'EPS_TTM_PREV'] = _eps_value('EPS_TTM_PREV')
L453             df.loc[t,'REV_TTM_PREV'] = _eps_value('REV_TTM_PREV')
L454             df.loc[t,'EPS_Q_PREV'] = _eps_value('EPS_Q_Prev')
L455             df.loc[t,'REV_Q_PREV'] = _eps_value('REV_Q_Prev')
L456             df.loc[t,'EPS_A_LATEST'] = _eps_value('EPS_A_LATEST')
L457             df.loc[t,'EPS_A_PREV'] = _eps_value('EPS_A_PREV')
L458             df.loc[t,'REV_A_LATEST'] = _eps_value('REV_A_LATEST')
L459             df.loc[t,'REV_A_PREV'] = _eps_value('REV_A_PREV')
L460             df.loc[t,'EPS_A_CAGR3'] = _eps_value('EPS_A_CAGR3')
L461             df.loc[t,'REV_A_CAGR3'] = _eps_value('REV_A_CAGR3')
L462             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L463             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L464             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L465
L466             # --- 配当（欠損補完含む） ---
L467             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L468             if div is None or pd.isna(div):
L469                 try:
L470                     divs = yf.Ticker(t).dividends
L471                     if divs is not None and not divs.empty:
L472                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L473                         if last_close and last_close>0: div = float(div_1y/last_close)
L474                 except Exception: pass
L475             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L476
L477             # --- FCF/EV ---
L478             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L479             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L480
L481             # --- モメンタム・ボラ関連 ---
L482             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L483             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L484             n = int(min(len(r), len(rm)))
L485
L486             DOWNSIDE_DEV = np.nan
L487             if n>=60:
L488                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L489                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L490             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L491
L492             MDD_1Y = np.nan
L493             try:
L494                 w = s.iloc[-min(len(s),252):].dropna()
L495                 if len(w)>=30:
L496                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L497             except Exception: pass
L498             df.loc[t,'MDD_1Y'] = MDD_1Y
L499
L500             RESID_VOL = np.nan
L501             if n>=120:
L502                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L503                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L504                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L505                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L506             df.loc[t,'RESID_VOL'] = RESID_VOL
L507
L508             DOWN_OUTPERF = np.nan
L509             if n>=60:
L510                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L511                 if mask.sum()>=10:
L512                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L513                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L514             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L515
L516             # --- 長期移動平均/位置 ---
L517             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L518             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L519
L520             # --- 配当の詳細系 ---
L521             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L522             try:
L523                 divs = yf.Ticker(t).dividends.dropna()
L524                 if not divs.empty:
L525                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L526                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L527                     ann = divs.groupby(divs.index.year).sum()
L528                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L529                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L530                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L531                 so = d.get('sharesOutstanding',None)
L532                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L533                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L534             except Exception: pass
L535             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L536
L537             # --- 財務安定性 ---
L538             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L539
L540             # --- EPS 変動 ---
L541             EPS_VAR_8Q = np.nan
L542             try:
L543                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L544                 if qe is not None and not qe.empty and so:
L545                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L546                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L547             except Exception: pass
L548             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L549
L550             # --- サイズ/流動性 ---
L551             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L552             try:
L553                 if isinstance(volume_series_full, pd.Series):
L554                     vol_series = volume_series_full.reindex(s.index).dropna()
L555                     if len(vol_series) >= 5:
L556                         aligned_px = s.reindex(vol_series.index).dropna()
L557                         if len(aligned_px) == len(vol_series):
L558                             dv = (vol_series*aligned_px).rolling(60).mean()
L559              
```