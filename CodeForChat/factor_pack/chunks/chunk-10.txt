```text

L355             if len(pick) == N: break
L356         return pick
L357
L358     @staticmethod
L359     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L360         """
L361         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L362         - px: 列=ticker（ベンチは含めない）
L363         - spx: ベンチマーク Series（px.index に整列）
L364         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L365         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L366         """
L367         import numpy as np, pandas as pd
L368         if px is None or px.empty:
L369             return pd.Series(dtype=int)
L370         px = px.dropna(how="all", axis=1)
L371         if win_days and win_days > 0:
L372             px = px.tail(win_days)
L373         if px.empty:
L374             return pd.Series(dtype=int)
L375         spx = spx.reindex(px.index).ffill()
L376
L377         ma50  = px.rolling(50).mean()
L378         ma150 = px.rolling(150).mean()
L379         ma200 = px.rolling(200).mean()
L380
L381         tt = (px > ma150)
L382         tt &= (px > ma200)
L383         tt &= (ma150 > ma200)
L384         tt &= (ma200 - ma200.shift(21) > 0)
L385         tt &= (ma50  > ma150)
L386         tt &= (ma50  > ma200)
L387         tt &= (px    > ma50)
L388
L389         lo252 = px.rolling(252).min()
L390         hi252 = px.rolling(252).max()
L391         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L392         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L393
L394         r12  = px.divide(px.shift(252)).sub(1.0)
L395         br12 = spx.divide(spx.shift(252)).sub(1.0)
L396         r1   = px.divide(px.shift(22)).sub(1.0)
L397         br1  = spx.divide(spx.shift(22)).sub(1.0)
L398         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L399         tt &= (rs >= 0.10)
L400
L401         return tt.fillna(False).sum(axis=1).astype(int)
L402
L403     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L404     def aggregate_scores(self, ib: Any, cfg):
L405         if cfg is None:
L406             raise ValueError("cfg is required; pass factor.PipelineConfig")
L407         self._validate_ib_for_scorer(ib)
L408
L409         px, spx, tickers = ib.px, ib.spx, ib.tickers
L410         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L411
L412         df = pd.DataFrame(index=tickers)
L413         df['EPS_SERIES'] = pd.Series([None] * len(df), index=df.index, dtype=object)
L414         debug_mode = bool(getattr(cfg, "debug_mode", False))
L415         eps_cols = set(getattr(eps_df, "columns", []))
L416         for t in tickers:
L417             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L418             try:
L419                 volume_series_full = ib.data['Volume'][t]
L420             except Exception:
L421                 volume_series_full = None
L422
L423             # --- 基本特徴 ---
L424             df.loc[t,'TR']   = self.trend(s)
L425
L426             def _eps_value(col: str) -> float:
L427                 if col not in eps_cols:
L428                     return np.nan
L429                 try:
L430                     return _scalar(eps_df[col].get(t, np.nan))
L431                 except Exception:
L432                     return np.nan
L433
L434             df.loc[t,'EPS']  = _eps_value('EPS_TTM')
L435             df.loc[t,'EPS_Q'] = _eps_value('EPS_Q_LastQ')
L436             df.loc[t,'REV_TTM'] = _eps_value('REV_TTM')
L437             df.loc[t,'REV_Q']   = _eps_value('REV_Q_LastQ')
L438             df.loc[t,'EPS_TTM_PREV'] = _eps_value('EPS_TTM_PREV')
L439             df.loc[t,'REV_TTM_PREV'] = _eps_value('REV_TTM_PREV')
L440             df.loc[t,'EPS_Q_PREV'] = _eps_value('EPS_Q_Prev')
L441             df.loc[t,'REV_Q_PREV'] = _eps_value('REV_Q_Prev')
L442             df.loc[t,'EPS_A_LATEST'] = _eps_value('EPS_A_LATEST')
L443             df.loc[t,'EPS_A_PREV'] = _eps_value('EPS_A_PREV')
L444             df.loc[t,'REV_A_LATEST'] = _eps_value('REV_A_LATEST')
L445             df.loc[t,'REV_A_PREV'] = _eps_value('REV_A_PREV')
L446             df.loc[t,'EPS_A_CAGR3'] = _eps_value('EPS_A_CAGR3')
L447             df.loc[t,'REV_A_CAGR3'] = _eps_value('REV_A_CAGR3')
L448             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L449             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L450             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L451
L452             # --- 配当（欠損補完含む） ---
L453             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L454             if div is None or pd.isna(div):
L455                 try:
L456                     divs = yf.Ticker(t).dividends
L457                     if divs is not None and not divs.empty:
L458                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L459                         if last_close and last_close>0: div = float(div_1y/last_close)
L460                 except Exception: pass
L461             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L462
L463             # --- FCF/EV ---
L464             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L465             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L466
L467             # --- モメンタム・ボラ関連 ---
L468             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L469             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L470             n = int(min(len(r), len(rm)))
L471
L472             DOWNSIDE_DEV = np.nan
L473             if n>=60:
L474                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L475                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L476             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L477
L478             MDD_1Y = np.nan
L479             try:
L480                 w = s.iloc[-min(len(s),252):].dropna()
L481                 if len(w)>=30:
L482                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L483             except Exception: pass
L484             df.loc[t,'MDD_1Y'] = MDD_1Y
L485
L486             RESID_VOL = np.nan
L487             if n>=120:
L488                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L489                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L490                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L491                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L492             df.loc[t,'RESID_VOL'] = RESID_VOL
L493
L494             DOWN_OUTPERF = np.nan
L495             if n>=60:
L496                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L497                 if mask.sum()>=10:
L498                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L499                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L500             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L501
L502             # --- 長期移動平均/位置 ---
L503             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L504             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L505
L506             # --- 配当の詳細系 ---
L507             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L508             try:
L509                 divs = yf.Ticker(t).dividends.dropna()
L510                 if not divs.empty:
L511                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L512                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L513                     ann = divs.groupby(divs.index.year).sum()
L514                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L515                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L516                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L517                 so = d.get('sharesOutstanding',None)
L518                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L519                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L520             except Exception: pass
L521             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L522
L523             # --- 財務安定性 ---
L524             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L525
L526             # --- EPS 変動 ---
L527             EPS_VAR_8Q = np.nan
L528             try:
L529                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L530                 if qe is not None and not qe.empty and so:
L531                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L532                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L533             except Exception: pass
L534             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L535
L536             # --- サイズ/流動性 ---
L537             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L538             try:
L539                 if isinstance(volume_series_full, pd.Series):
L540                     vol_series = volume_series_full.reindex(s.index).dropna()
L541                     if len(vol_series) >= 5:
L542                         aligned_px = s.reindex(vol_series.index).dropna()
L543                         if len(aligned_px) == len(vol_series):
L544                             dv = (vol_series*aligned_px).rolling(60).mean()
L545                             if not dv.dropna().empty:
L546                                 adv60 = float(dv.dropna().iloc[-1])
L547             except Exception:
L548                 pass
L549             df.loc[t,'ADV60_USD'] = adv60
L550
L551             # --- Rule of 40 や周辺 ---
L552             total_rev_ttm = d.get('totalRevenue',np.nan)
L553             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L554             df.loc[t,'FCF_MGN'] = FCF_MGN
L555             rule40 = np.nan
L556             try:
L557                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L558             except Exception: pass
L559             df.loc[t,'RULE40'] = rule40
L560
L561             # --- トレンド補助 ---
L562             sma50  = s.rolling(50).mean()
L563             sma150 = s.rolling(150).mean()
L564             sma200 = s.rolling(200).mean()
L565             p = _safe_last(s)
L566
L567             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L568                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L569             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L570                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L571
L572             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L573             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L574
L575             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L576             if len(sma200.dropna()) >= 21:
L577                 cur200 = _safe_last(sma200)
L578                 old2001 = float(sma200.iloc[-21])
L579                 if old2001:
L580                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L581
L582             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L583             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) an
```