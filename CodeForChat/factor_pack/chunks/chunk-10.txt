```text
, pd.Series):
L634                     return int(val.dropna().size)
L635                 if isinstance(val, (list, tuple)):
L636                     return len(val)
L637                 return int(bool(val))
L638             except Exception:
L639                 return 0
L640
L641         for t in tickers:
L642             try:
L643                 d = info.get(t, {}) or {}
L644                 rev_series = d.get("SEC_REV_Q_SERIES")
L645                 eps_series = d.get("SEC_EPS_Q_SERIES")
L646                 fallback_qearn = False
L647                 try:
L648                     qe = tickers_bulk.tickers[t].quarterly_earnings
L649                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L650                 except Exception:
L651                     qe = None
L652
L653                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L654                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L655                 r_raw = _ensure_series(r_src)
L656                 e_raw = _ensure_series(e_src)
L657
L658                 r_q = _to_quarterly(r_raw)
L659                 e_q = _to_quarterly(e_raw)
L660
L661                 df.at[t, "EPS_SERIES"] = e_q
L662
L663                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L664                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L665
L666                 def _q_yoy(qs):
L667                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L668
L669                 rev_q_yoy = _q_yoy(r_q)
L670                 eps_q_yoy = _q_yoy(e_q)
L671
L672                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L673                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L674                         ann = qs.groupby(qs.index.year).last().pct_change()
L675                         ann_dn = ann.dropna()
L676                         if not ann_dn.empty:
L677                             y = float(ann_dn.iloc[-1])
L678                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L679                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L680                             return y, acc, var
L681                     yoy_dn = yoy_ttm.dropna()
L682                     if yoy_dn.empty:
L683                         return np.nan, np.nan, np.nan
L684                     return (
L685                         float(yoy_dn.iloc[-1]),
L686                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L687                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L688                     )
L689
L690                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L691                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L692
L693                 def _pos_streak(s: pd.Series):
L694                     s = s.dropna()
L695                     if s.empty:
L696                         return np.nan
L697                     b = (s > 0).astype(int).to_numpy()[::-1]
L698                     k = 0
L699                     for v in b:
L700                         if v == 1:
L701                             k += 1
L702                         else:
L703                             break
L704                     return float(k)
L705
L706                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L707
L708                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L709                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L710                 df.loc[t, "REV_YOY"] = rev_yoy
L711                 df.loc[t, "EPS_YOY"] = eps_yoy
L712                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L713                 df.loc[t, "REV_YOY_VAR"] = rev_var
L714                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L715
L716             except Exception as e:
L717                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L718
L719         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L720             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L721             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L722             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L723             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L724             c5 = (row.get('TR_str', np.nan) > 0)
L725             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L726             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L727             c8 = (row.get('RS', np.nan) >= 0.10)
L728             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L729
L730         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L731         assert 'trend_template' in df.columns
L732
L733         def _calc_eps_abs_slope(eps_series, n=12):
L734             try:
L735                 if isinstance(eps_series, pd.Series):
L736                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L737                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L738                     series = pd.Series(eps_series, dtype=float).dropna()
L739                 else:
L740                     return 0.0
L741             except Exception:
L742                 return 0.0
L743
L744             if series.empty:
L745                 return 0.0
L746
L747             tail = series.tail(n).to_numpy(dtype=float)
L748             if tail.size < 2:
L749                 return 0.0
L750
L751             x = np.arange(tail.size, dtype=float)
L752             x = x - x.mean()
L753             y = tail - tail.mean()
L754             denom = np.dot(x, x)
L755             if denom == 0:
L756                 return 0.0
L757             slope = float(np.dot(x, y) / denom)
L758             return slope
L759
L760         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L761         df.drop(columns=['EPS_SERIES'], inplace=True)
L762
L763         # === Z化と合成 ===
L764         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L765
L766         df_z = pd.DataFrame(index=df.index)
L767         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L768         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L769         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L770
L771         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L772
L773         # === Growth深掘り系（欠損保持z + RAW併載） ===
L774         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L775         for col in grw_cols:
L776             if col in df.columns:
L777                 raw = pd.to_numeric(df[col], errors="coerce")
L778                 df_z[col] = robust_z_keepnan(raw)
L779         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L780             if k in df.columns and k not in df_z.columns:
L781                 raw = pd.to_numeric(df[k], errors="coerce")
L782                 df_z[k] = robust_z_keepnan(raw)
L783         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L784
L785         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L786         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L787         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L788
L789         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L790         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L791         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L792
L793         # ===== トレンドスロープ算出 =====
L794         def zpos(x):
L795             arr = robust_z(x)
L796             idx = getattr(x, 'index', df_z.index)
L797             return pd.Series(arr, index=idx).fillna(0.0)
L798
L799         def relu(x):
L800             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L801             return ser.clip(lower=0).fillna(0.0)
L802
L803         # 売上トレンドスロープ（四半期）
L804         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L805         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L806         slope_rev_combo = slope_rev - 0.25*noise_rev
L807         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L808
L809         # EPSトレンドスロープ（四半期）
L810         slope_eps = (
L811             0.40*zpos(df_z['EPS_Q_YOY']) +
L812             0.20*zpos(df_z['EPS_POS']) +
L813             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L814         )
L815         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L816
L817         # 年次トレンド（サブ）
L818         slope_rev_yr = zpos(df_z['REV_YOY'])
L819         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L820         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L821         streak_yr = streak_base / (streak_base.abs() + 1.0)
L822         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L823         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L824         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L825
L826         # ===== GRW 固定レシピ =====
L827         def _z(name):
L828             ser = df_z.get(name)
L829             if isinstance(ser, pd.Series):
L830                 return pd.to_numeric(ser, errors="coerce").fillna(0.0)
L831             return pd.Series(0.0, index=df_z.index)
L832
L833         rev_yoy   = _z('REV_Q_YOY')
L834         rev_acc   = _z('REV_YOY_ACC')
L835         rev_var   = _z('REV_YOY_VAR')
L836         rev_block = (0.70*rev_yoy + 0.30*rev_acc) - 0.20*rev_var.clip(lower=0)
L837         rev_block = rev_block.clip(-3.0, 3.0)
L838
L839         eps_qyoy  = _z('EPS_Q_YOY')
L840         eps_pos   = _z('EPS_POS')
L841         eps_slope = _z('EPS_ABS_SLOPE')
L842         eps_block = (0.40*eps_qyoy + 0.20*eps_pos + 0.40*eps_slope).clip(-3.0, 3.0)
L843
L844         rule40  = _z('RULE40')
L845         eps_var = _z('EPS_VAR_8Q')
L846         bonus   = 0.10*rule40
L847         penalty = 0.10*eps_var.clip(lower=0)
L848
L849         grw_core = (0.65*rev_block + 0.35*eps_block + bonus - penalty)
L850         grw_core = grw_core.clip(-2.5, 2.5)
L851         df_z['GROWTH_F'] = robust_z_keepnan(grw_core).clip(-3.0, 3.0)
L852
L853         df_z['GRW_FLEX_WEIGHT'] = 1.0  # 現状は固定（SECの可用性に依らず）
L854
L855         if debug_mode:
L856             # ---- Growth debug columns (可視化用) ----
L857             df_z['DBG_GRW.REV_YOY']        = rev_yoy
L858             df_z['DBG_GRW.REV_ACC']        = rev_acc
L859             df_z['DBG_GRW.REV_VAR']        = rev_var
L860             df_z['DBG_GRW.REV_BLOCK']      = rev_block
L861             df_z['DBG_GRW.EPS_Q_YOY']      = eps_qyoy
L862             df_z['DBG_GRW.EPS_POS']        = eps_pos
L863             df_z['DBG_GRW.EPS_ABS_SLOPE']  = eps_slope
L864             df_z['DBG_GRW.EPS_VAR_8Q']     = eps_var
L865             df_z['DBG_GRW.EPS_BLOCK']      = eps_block
L866             df_z['DBG_GRW.RULE40']         = rule40
L867             df_z['DBG_GRW.BONUS']          = bonus
L868             df_z['DBG_GRW.PENALTY']        = penalty
L869             df_z['DBG_GRW.CORE_RAW']       = grw_core
L870             df_z['DBG_GRW.GROWTH_F']       = df_z['GROWTH_F']
L871
L872         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L873             + 0.15*df_z['TR_str']
L874             + 0.15*df_z['RS_SLOPE_6W']
L875             + 0.15*df_z['RS_SLOPE_13W']
L876             + 0.10*df_z['MA200_SLOPE_5M']
L877             + 0.10*df_z['MA200_
```