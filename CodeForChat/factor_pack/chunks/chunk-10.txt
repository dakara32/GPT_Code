```text
                e_raw = _ensure_series(e_src)
L616
L617                 r_q = _to_quarterly(r_raw)
L618                 e_q = _to_quarterly(e_raw)
L619
L620                 df.at[t, "EPS_SERIES"] = e_q
L621
L622                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L623                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L624
L625                 def _q_yoy(qs):
L626                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L627
L628                 rev_q_yoy = _q_yoy(r_q)
L629                 eps_q_yoy = _q_yoy(e_q)
L630
L631                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L632                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L633                         ann = qs.groupby(qs.index.year).last().pct_change()
L634                         ann_dn = ann.dropna()
L635                         if not ann_dn.empty:
L636                             y = float(ann_dn.iloc[-1])
L637                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L638                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L639                             return y, acc, var
L640                     yoy_dn = yoy_ttm.dropna()
L641                     if yoy_dn.empty:
L642                         return np.nan, np.nan, np.nan
L643                     return (
L644                         float(yoy_dn.iloc[-1]),
L645                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L646                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L647                     )
L648
L649                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L650                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L651
L652                 def _pos_streak(s: pd.Series):
L653                     s = s.dropna()
L654                     if s.empty:
L655                         return np.nan
L656                     b = (s > 0).astype(int).to_numpy()[::-1]
L657                     k = 0
L658                     for v in b:
L659                         if v == 1:
L660                             k += 1
L661                         else:
L662                             break
L663                     return float(k)
L664
L665                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L666
L667                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L668                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L669                 df.loc[t, "REV_YOY"] = rev_yoy
L670                 df.loc[t, "EPS_YOY"] = eps_yoy
L671                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L672                 df.loc[t, "REV_YOY_VAR"] = rev_var
L673                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L674
L675             except Exception as e:
L676                 logger.warning("growth-derivatives failed: %s: %s", t, e)
L677
L678         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L679             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L680             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L681             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L682             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L683             c5 = (row.get('TR_str', np.nan) > 0)
L684             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L685             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L686             c8 = (row.get('RS', np.nan) >= 0.10)
L687             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L688
L689         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L690         assert 'trend_template' in df.columns
L691
L692         def _calc_eps_abs_slope(eps_series, n=12):
L693             try:
L694                 if isinstance(eps_series, pd.Series):
L695                     series = pd.to_numeric(eps_series, errors="coerce").dropna()
L696                 elif isinstance(eps_series, (list, tuple, np.ndarray)):
L697                     series = pd.Series(eps_series, dtype=float).dropna()
L698                 else:
L699                     return 0.0
L700             except Exception:
L701                 return 0.0
L702
L703             if series.empty:
L704                 return 0.0
L705
L706             tail = series.tail(n).to_numpy(dtype=float)
L707             if tail.size < 2:
L708                 return 0.0
L709
L710             x = np.arange(tail.size, dtype=float)
L711             x = x - x.mean()
L712             y = tail - tail.mean()
L713             denom = np.dot(x, x)
L714             if denom == 0:
L715                 return 0.0
L716             slope = float(np.dot(x, y) / denom)
L717             return slope
L718
L719         df['EPS_ABS_SLOPE'] = df['EPS_SERIES'].apply(_calc_eps_abs_slope).astype(float)
L720         df.drop(columns=['EPS_SERIES'], inplace=True)
L721
L722         # === Z化と合成 ===
L723         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L724
L725         df_z = pd.DataFrame(index=df.index)
L726         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L727         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L728         for col in ['P_OVER_150','P_OVER_200','MA200_SLOPE_5M','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L729
L730         df_z['EPS_ABS_SLOPE'] = robust_z(df['EPS_ABS_SLOPE']).clip(-3.0, 3.0)
L731
L732         # === Growth深掘り系（欠損保持z + RAW併載） ===
L733         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L734         for col in grw_cols:
L735             if col in df.columns:
L736                 raw = pd.to_numeric(df[col], errors="coerce")
L737                 df_z[col] = robust_z_keepnan(raw)
L738         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L739             if k in df.columns and k not in df_z.columns:
L740                 raw = pd.to_numeric(df[k], errors="coerce")
L741                 df_z[k] = robust_z_keepnan(raw)
L742         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_VAR5','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L743
L744         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L745         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L746         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L747
L748         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L749         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L750         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L751
L752         # ===== トレンドスロープ算出 =====
L753         def zpos(x):
L754             arr = robust_z(x)
L755             idx = getattr(x, 'index', df_z.index)
L756             return pd.Series(arr, index=idx).fillna(0.0)
L757
L758         def relu(x):
L759             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L760             return ser.clip(lower=0).fillna(0.0)
L761
L762         # 売上トレンドスロープ（四半期）
L763         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L764         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L765         slope_rev_combo = slope_rev - 0.25*noise_rev
L766         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L767
L768         # EPSトレンドスロープ（四半期）
L769         slope_eps = (
L770             0.40*zpos(df_z['EPS_Q_YOY']) +
L771             0.20*zpos(df_z['EPS_POS']) +
L772             0.40*zpos(df_z['EPS_ABS_SLOPE'])
L773         )
L774         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L775
L776         # 年次トレンド（サブ）
L777         slope_rev_yr = zpos(df_z['REV_YOY'])
L778         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L779         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L780         streak_yr = streak_base / (streak_base.abs() + 1.0)
L781         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L782         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L783         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L784
L785         # ===== GRW 固定レシピ =====
L786         def _z(name):
L787             ser = df_z.get(name)
L788             if isinstance(ser, pd.Series):
L789                 return pd.to_numeric(ser, errors="coerce").fillna(0.0)
L790             return pd.Series(0.0, index=df_z.index)
L791
L792         rev_yoy   = _z('REV_Q_YOY')
L793         rev_acc   = _z('REV_YOY_ACC')
L794         rev_var   = _z('REV_YOY_VAR')
L795         rev_block = (0.70*rev_yoy + 0.30*rev_acc) - 0.20*rev_var.clip(lower=0)
L796         rev_block = rev_block.clip(-3.0, 3.0)
L797
L798         eps_qyoy  = _z('EPS_Q_YOY')
L799         eps_pos   = _z('EPS_POS')
L800         eps_slope = _z('EPS_ABS_SLOPE')
L801         eps_block = (0.40*eps_qyoy + 0.20*eps_pos + 0.40*eps_slope).clip(-3.0, 3.0)
L802
L803         rule40  = _z('RULE40')
L804         eps_var = _z('EPS_VAR_8Q')
L805         bonus   = 0.10*rule40
L806         penalty = 0.10*eps_var.clip(lower=0)
L807
L808         grw_core = (0.65*rev_block + 0.35*eps_block + bonus - penalty)
L809         grw_core = grw_core.clip(-2.5, 2.5)
L810         df_z['GROWTH_F'] = robust_z_keepnan(grw_core).clip(-3.0, 3.0)
L811
L812         df_z['GRW_FLEX_WEIGHT'] = 1.0  # 現状は固定（SECの可用性に依らず）
L813
L814         if debug_mode:
L815             # ---- Growth debug columns (可視化用) ----
L816             df_z['DBG_GRW.REV_YOY']        = rev_yoy
L817             df_z['DBG_GRW.REV_ACC']        = rev_acc
L818             df_z['DBG_GRW.REV_VAR']        = rev_var
L819             df_z['DBG_GRW.REV_BLOCK']      = rev_block
L820             df_z['DBG_GRW.EPS_Q_YOY']      = eps_qyoy
L821             df_z['DBG_GRW.EPS_POS']        = eps_pos
L822             df_z['DBG_GRW.EPS_ABS_SLOPE']  = eps_slope
L823             df_z['DBG_GRW.EPS_VAR_8Q']     = eps_var
L824             df_z['DBG_GRW.EPS_BLOCK']      = eps_block
L825             df_z['DBG_GRW.RULE40']         = rule40
L826             df_z['DBG_GRW.BONUS']          = bonus
L827             df_z['DBG_GRW.PENALTY']        = penalty
L828             df_z['DBG_GRW.CORE_RAW']       = grw_core
L829             df_z['DBG_GRW.GROWTH_F']       = df_z['GROWTH_F']
L830
L831         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L832             + 0.15*df_z['TR_str']
L833             + 0.15*df_z['RS_SLOPE_6W']
L834             + 0.15*df_z['RS_SLOPE_13W']
L835             + 0.10*df_z['MA200_SLOPE_5M']
L836             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L837         df_z['VOL'] = robust_z(df['BETA'])
L838         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L839         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L840
L841         # df_z 全明細をページングしてログ出力（最小版）
L842         if getattr(cfg, "debug_mode", False):
L843             pd.set_option("display.max_columns", None)
L844             pd.set_option("display.max_colwidth", None)
L845             pd.set_option("display.width", None)
L846             page = int(getattr(cfg, "debug_dfz_page", 50))  # デフォルト50行単位
L847             n = len(df_z)
L848             logger.info("=== df_z FULL DUMP start === rows=%d cols=%d page=%d", n, df_z.shape[1], page)
L849             for i in range(0, n, page):
L850                 j = min(i + page, n)
L851                 try:
L852                     chunk_str = df_z.iloc[i:j].to_string()
L853                 except Exception:
L854                     chunk_str = df_z.iloc[i:j].astype(str).to_string()
L855                 logger
```