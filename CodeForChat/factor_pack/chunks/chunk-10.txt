```text
dropna()) >= 21:
L791                 cur200 = _safe_last(sma200)
L792                 old2001 = float(sma200.iloc[-21])
L793                 if old2001:
L794                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L795
L796             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L797             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L798             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L799             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L800             if len(sma200.dropna())>=105:
L801                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L802                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L803             # NEW: 200日線が連続で上向きの「日数」
L804             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L805             try:
L806                 s200 = sma200.dropna()
L807                 if len(s200) >= 2:
L808                     diff200 = s200.diff()
L809                     up = 0
L810                     for v in diff200.iloc[::-1]:
L811                         if pd.isna(v) or v <= 0:
L812                             break
L813                         up += 1
L814                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L815             except Exception:
L816                 pass
L817             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L818             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L819             if hi52 and hi52>0 and pd.notna(p):
L820                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L821             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L822             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L823
L824             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L825
L826             # --- 欠損メモ ---
L827             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L828             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L829             if need_finnhub:
L830                 fin_data = self.fetch_finnhub_metrics(t)
L831                 for col in need_finnhub:
L832                     val = fin_data.get(col)
L833                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L834             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L835                 if pd.isna(df.loc[t,col]):
L836                     if col=='DIV':
L837                         status = self.dividend_status(t)
L838                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L839                     else:
L840                         missing_logs.append({'Ticker':t,'Column':col})
L841
L842         def _pick_series(entry: dict, keys: list[str]):
L843             for k in keys:
L844                 val = entry.get(k) if isinstance(entry, dict) else None
L845                 if val is None:
L846                     continue
L847                 try:
L848                     if hasattr(val, "empty") and getattr(val, "empty"):
L849                         continue
L850                 except Exception:
L851                     pass
L852                 if isinstance(val, (list, tuple)) and len(val) == 0:
L853                     continue
L854                 return val
L855             return None
L856
L857         def _has_sec_series(val) -> bool:
L858             try:
L859                 if isinstance(val, pd.Series):
L860                     return not val.dropna().empty
L861                 if isinstance(val, (list, tuple)):
L862                     return any(pd.notna(v) for v in val)
L863                 return bool(val)
L864             except Exception:
L865                 return False
L866
L867         def _series_len(val) -> int:
L868             try:
L869                 if isinstance(val, pd.Series):
L870                     return int(val.dropna().size)
L871                 if isinstance(val, (list, tuple)):
L872                     return len(val)
L873                 return int(bool(val))
L874             except Exception:
L875                 return 0
L876
L877         cnt_rev_series = sum(1 for _t, d in info.items() if _has_sec_series(d.get("SEC_REV_Q_SERIES")))
L878         cnt_eps_series = sum(1 for _t, d in info.items() if _has_sec_series(d.get("SEC_EPS_Q_SERIES")))
L879         logger.info(
L880             "[DERIV] SEC series presence: REV_Q=%d, EPS_Q=%d (universe=%d)",
L881             cnt_rev_series,
L882             cnt_eps_series,
L883             len(info),
L884         )
L885
L886         rev_q_ge5 = 0
L887         ttm_yoy_avail = 0
L888         wrote_growth = 0
L889
L890         for t in tickers:
L891             try:
L892                 d = info.get(t, {}) or {}
L893                 rev_series = d.get("SEC_REV_Q_SERIES")
L894                 eps_series = d.get("SEC_EPS_Q_SERIES")
L895                 fallback_qearn = False
L896                 try:
L897                     qe = tickers_bulk.tickers[t].quarterly_earnings
L898                     fallback_qearn = bool(qe is not None and not getattr(qe, "empty", True))
L899                 except Exception:
L900                     qe = None
L901                 logger.debug(
L902                     "[DERIV] %s: rev_q_len=%s eps_q_len=%s fallback_qearn=%s",
L903                     t,
L904                     _series_len(rev_series),
L905                     _series_len(eps_series),
L906                     fallback_qearn,
L907                 )
L908
L909                 r_src = _pick_series(d, ["SEC_REV_Q_SERIES", "rev_q_series_pairs", "rev_q_series"])
L910                 e_src = _pick_series(d, ["SEC_EPS_Q_SERIES", "eps_q_series_pairs", "eps_q_series"])
L911                 r_raw = _ensure_series(r_src)
L912                 e_raw = _ensure_series(e_src)
L913                 _log("DERIV_SRC", f"{t} rev_raw_len={r_raw.size} eps_raw_len={e_raw.size}")
L914
L915                 r_q = _to_quarterly(r_raw)
L916                 e_q = _to_quarterly(e_raw)
L917                 _log("DERIV_Q", f"{t} rev_q_len={r_q.size} eps_q_len={e_q.size}")
L918                 if r_q.size >= 5:
L919                     rev_q_ge5 += 1
L920
L921                 r_yoy_ttm = _ttm_yoy_from_quarterly(r_q)
L922                 e_yoy_ttm = _ttm_yoy_from_quarterly(e_q)
L923                 has_ttm = int(not r_yoy_ttm.dropna().empty)
L924                 ttm_yoy_avail += has_ttm
L925                 _log("DERIV_TTM", f"{t} rev_ttm_yoy_len={r_yoy_ttm.dropna().size} eps_ttm_yoy_len={e_yoy_ttm.dropna().size}")
L926
L927                 def _q_yoy(qs):
L928                     return np.nan if qs is None or len(qs) < 5 else float(qs.iloc[-1] / qs.iloc[-5] - 1.0)
L929
L930                 rev_q_yoy = _q_yoy(r_q)
L931                 eps_q_yoy = _q_yoy(e_q)
L932
L933                 def _annual_from(qs: pd.Series, yoy_ttm: pd.Series):
L934                     if isinstance(qs.index, pd.DatetimeIndex) and len(qs) >= 8:
L935                         ann = qs.groupby(qs.index.year).last().pct_change()
L936                         ann_dn = ann.dropna()
L937                         if not ann_dn.empty:
L938                             y = float(ann_dn.iloc[-1])
L939                             acc = float(ann_dn.tail(3).mean()) if ann_dn.size >= 3 else np.nan
L940                             var = float(ann_dn.tail(4).var()) if ann_dn.size >= 4 else np.nan
L941                             return y, acc, var
L942                     yoy_dn = yoy_ttm.dropna()
L943                     if yoy_dn.empty:
L944                         return np.nan, np.nan, np.nan
L945                     return (
L946                         float(yoy_dn.iloc[-1]),
L947                         float(yoy_dn.tail(3).mean() if yoy_dn.size >= 3 else np.nan),
L948                         float(yoy_dn.tail(4).var() if yoy_dn.size >= 4 else np.nan),
L949                     )
L950
L951                 rev_yoy, rev_acc, rev_var = _annual_from(r_q, r_yoy_ttm)
L952                 eps_yoy, _, _ = _annual_from(e_q, e_yoy_ttm)
L953
L954                 def _pos_streak(s: pd.Series):
L955                     s = s.dropna()
L956                     if s.empty:
L957                         return np.nan
L958                     b = (s > 0).astype(int).to_numpy()[::-1]
L959                     k = 0
L960                     for v in b:
L961                         if v == 1:
L962                             k += 1
L963                         else:
L964                             break
L965                     return float(k)
L966
L967                 rev_ann_streak = _pos_streak(r_yoy_ttm)
L968
L969                 df.loc[t, "REV_Q_YOY"] = rev_q_yoy
L970                 df.loc[t, "EPS_Q_YOY"] = eps_q_yoy
L971                 df.loc[t, "REV_YOY"] = rev_yoy
L972                 df.loc[t, "EPS_YOY"] = eps_yoy
L973                 df.loc[t, "REV_YOY_ACC"] = rev_acc
L974                 df.loc[t, "REV_YOY_VAR"] = rev_var
L975                 df.loc[t, "REV_ANN_STREAK"] = rev_ann_streak
L976
L977                 wrote_growth += 1
L978                 _log(
L979                     "DERIV_WRITE",
L980                     f"{t} wrote: Q_YOY(rev={rev_q_yoy}, eps={eps_q_yoy}) ANN(rev_yoy={rev_yoy}, acc={rev_acc}, var={rev_var}) streak={rev_ann_streak}",
L981                 )
L982
L983             except Exception as e:
L984                 logger.warning("[DERIV_WARN] %s growth-derivatives failed: %s", t, e)
L985                 _log("DERIV_WARN", f"{t} {type(e).__name__}: {e}")
L986
L987         _log("DERIV_SUMMARY", f"rev_q_len>=5: {rev_q_ge5}/{len(tickers)}  ttm_yoy_available: {ttm_yoy_avail}  wrote_growth_for: {wrote_growth}")
L988
L989         try:
L990             cols = [
L991                 "REV_Q_YOY",
L992                 "EPS_Q_YOY",
L993                 "REV_YOY",
L994                 "EPS_YOY",
L995                 "REV_YOY_ACC",
L996                 "REV_YOY_VAR",
L997                 "REV_ANN_STREAK",
L998             ]
L999             cnt = {c: int(df[c].count()) for c in cols if c in df.columns}
L1000             _log("DERIV_NONNAN_COUNTS", str(cnt))
L1001         except Exception as e:
L1002             _log("DERIV_NONNAN_COUNTS", f"error: {e}")
L1003
L1004         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L1005             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L1006             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L1007             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L1008             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L1009             c5 = (row.get('TR_str', np.nan) > 0)
L1010             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L1011             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L1012             c8 = (row.get('RS', np.nan) >= 0.10)
L1013             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L1014
L1015         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L1016         assert 'trend_template' in df.columns
L1017
L1018         # === Z化と合成 ===
L1019         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L1020
L1021         df_z = pd.DataFrame(index=df.index)
L1022         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L1023         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L1024         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_S
```