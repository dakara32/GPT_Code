```text
1636             sc._feat_logged = True
L1637         agg = sc.score_aggregate(feat, group, cfg) if hasattr(sc, "score_aggregate") else feat
L1638     else:
L1639         fb = sc.aggregate_scores(inb, cfg)
L1640         if not hasattr(sc, "_feat_logged"):
L1641             T.log("features built (scorer)")
L1642             sc._feat_logged = True
L1643         sc._feat = fb
L1644         agg = fb.g_score if group == "G" else fb.d_score_all
L1645         if group == "D" and hasattr(fb, "df"):
L1646             beta_raw = fb.df['BETA'].astype(float)
L1647             if D_BETA_MODE == "z":
L1648                 beta_for_filter = _zscore_series(beta_raw)
L1649             else:
L1650                 beta_for_filter = beta_raw
L1651
L1652             beta_mask = (beta_for_filter <= D_BETA_CUTOFF).reindex(agg.index, fill_value=False)
L1653             agg = agg[beta_mask]
L1654
L1655             if isinstance(agg, pd.Series):
L1656                 _min = agg.min(skipna=True)
L1657                 floor = (0.0 if not np.isfinite(_min) else float(_min)) - 1e6
L1658                 agg = agg.fillna(floor)
L1659
L1660             try:
L1661                 logger.info(
L1662                     "D-filter mode=%s cutoff=%s | pass=%d raw[mean=%.3f std=%.3f] z[mean≈0 std≈1]",
L1663                     D_BETA_MODE,
L1664                     D_BETA_CUTOFF,
L1665                     int(beta_mask.sum()),
L1666                     float(beta_raw.mean(skipna=True)),
L1667                     float(beta_raw.std(skipna=True, ddof=0)),
L1668                 )
L1669             except Exception:
L1670                 pass
L1671
L1672     if hasattr(sc, "filter_candidates"):
L1673         agg = agg[sc.filter_candidates(inb, agg, group, cfg)]
L1674
L1675     if isinstance(agg, pd.Series):
L1676         agg = _as_numeric_series(agg)
L1677
L1678     selector = Selector()
L1679     if hasattr(sc, "select_diversified"):
L1680         pick, avg_r, sum_sc, obj = sc.select_diversified(agg, group, cfg, n_target,
L1681             selector=selector, prev_tickers=None,
L1682             corrM=cfg.drrs.corrM, shrink=cfg.drrs.shrink,
L1683             cross_mu=cfg.drrs.cross_mu_gd)
L1684     else:
L1685         if group == "G":
L1686             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1687             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1688                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1689                 lam=cfg.drrs.G.get("lam", 0.68),
L1690                 lookback=cfg.drrs.G.get("lookback", 252),
L1691                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1692         else:
L1693             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1694             g_fixed = getattr(sc, "_top_G", None)
L1695             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1696                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1697                 lam=cfg.drrs.D.get("lam", 0.85),
L1698                 lookback=cfg.drrs.D.get("lookback", 504),
L1699                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1700                 mu=cfg.drrs.cross_mu_gd)
L1701         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1702         sum_sc = res["sum_score"]; obj = res["objective"]
L1703         if group == "D":
L1704             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1705             T.log("selection finalized (G/D)")
L1706     try:
L1707         inc = [t for t in exist if t in agg.index]
L1708         pick = _sticky_keep_current(
L1709             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1710             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1711         )
L1712     except Exception as _e:
L1713         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1714     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1715     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1716     try:
L1717         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1718         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1719         setattr(sc, f"_near_{group}", near10)
L1720         setattr(sc, f"_agg_{group}", agg)
L1721     except Exception:
L1722         pass
L1723
L1724     if group == "D":
L1725         T.log("save done")
L1726     if group == "G":
L1727         sc._top_G = pick
L1728     return pick, avg_r, sum_sc, obj
L1729
L1730 def run_pipeline() -> SelectionBundle:
L1731     """
L1732     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1733     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1734     """
L1735     inb = io_build_input_bundle()
L1736     cfg = PipelineConfig(
L1737         weights=WeightsConfig(g=g_weights, d=D_weights),
L1738         drrs=DRRSParams(
L1739             corrM=corrM, shrink=DRRS_SHRINK,
L1740             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1741         ),
L1742         price_max=CAND_PRICE_MAX,
L1743         debug_mode=debug_mode
L1744     )
L1745     sc = Scorer()
L1746     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1747     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1748     alpha = Scorer.spx_to_alpha(inb.spx)
L1749     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1750     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1751     sc._top_G = top_G
L1752     try:
L1753         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1754         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1755     except Exception:
L1756         pass
L1757     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1758     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1759     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1760     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1761     poolD = list(getattr(sc, "_agg_D", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1762     fb = getattr(sc, "_feat", None)
L1763     near_G = getattr(sc, "_near_G", [])
L1764     selected12 = list(top_G)
L1765     df = fb.df if fb is not None else pd.DataFrame()
L1766     guni = _infer_g_universe(df, selected12, near_G)
L1767     try:
L1768         fire_recent = [t for t in guni
L1769                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1770                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1771     except Exception: fire_recent = []
L1772
L1773     lines = [
L1774         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1775         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1776         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1777         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1778
L1779     if fire_recent:
L1780         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1781         lines.append(f"過去5営業日の検知: {fire_list}")
L1782     else:
L1783         lines.append("過去5営業日の検知: なし")
L1784
L1785     try:
L1786         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1787         if webhook:
L1788             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1789     except Exception:
L1790         pass
L1791
L1792     out = Output()
L1793     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1794     try:
L1795         out._sc = sc
L1796     except Exception:
L1797         pass
L1798     if hasattr(sc, "_feat"):
L1799         try:
L1800             fb = sc._feat
L1801             out.miss_df = fb.missing_logs
L1802             out.display_results(
L1803                 exist=exist,
L1804                 bench=bench,
L1805                 df_raw=fb.df,
L1806                 df_z=fb.df_z,
L1807                 g_score=fb.g_score,
L1808                 d_score_all=fb.d_score_all,
L1809                 init_G=top_G,
L1810                 init_D=top_D,
L1811                 top_G=top_G,
L1812                 top_D=top_D,
L1813                 df_full_z=getattr(fb, "df_full_z", None),
L1814                 prev_G=getattr(sc, "_prev_G", exist),
L1815                 prev_D=getattr(sc, "_prev_D", exist),
L1816             )
L1817             try:
L1818                 DBG_COLS = ["GSC", "GROWTH_F", "MOM", "VOL", "DBGRW.GROWTH_F", "DBGRW.MOM", "DBGRW.VOL"]
L1819                 cols = [c for c in DBG_COLS if c in fb.df_z.columns]
L1820                 idx = [t for t in top_G if t in fb.df_z.index]
L1821                 out.debug_table = fb.df_z.loc[idx, cols].round(2) if idx and cols else None
L1822             except Exception:
L1823                 out.debug_table = None
L1824         except Exception:
L1825             pass
L1826     out.notify_slack()
L1827     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1828               "sum_score": sumG, "objective": objG},
L1829         resD={"tickers": top_D, "avg_res_corr": avgD,
L1830               "sum_score": sumD, "objective": objD},
L1831         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1832
L1833     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1834     try:
L1835         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1836               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1837               .sort_values("G_plus_D")
L1838               .head(10)
L1839               .round(3))
L1840         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1841         _post_slack({"text": f"```{low_msg}```"})
L1842     except Exception as _e:
L1843         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1844
L1845     return sb
L1846
L1847 if __name__ == "__main__":
L1848     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #   - missing_logs: pd.DataFrame   … 補完後の欠損ログ
L26 #
L27 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L28 # =============================================================================
L29
L30 import json, logging, os, requests, sys, warnings
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36 from datetime import datetime as _dt
L37
L38 if TYPE_CHECKING:
L39     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L40
L41 logger = logging.getLogger(__name__)
L42
L43
L44
```