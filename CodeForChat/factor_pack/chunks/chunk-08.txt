```text
     except Exception: pass
L473             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L474
L475             # --- 財務安定性 ---
L476             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L477
L478             # --- EPS 変動 ---
L479             EPS_VAR_8Q = np.nan
L480             try:
L481                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L482                 if qe is not None and not qe.empty and so:
L483                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L484                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L485             except Exception: pass
L486             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L487
L488             # --- サイズ/流動性 ---
L489             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L490             try:
L491                 vol_series = ib.data['Volume'][t].dropna()
L492                 if len(vol_series)>=5 and len(s)==len(vol_series):
L493                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L494             except Exception: pass
L495             df.loc[t,'ADV60_USD'] = adv60
L496
L497             # --- 売上/利益の加速度等 ---
L498             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L499             REV_ANNUAL_STREAK = REV_YOY = np.nan
L500             EPS_YOY = np.nan
L501             try:
L502                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L503                 sec_rev_series = (d.get('SEC_REV_Q_SERIES') or [])
L504                 if sec_rev_series:
L505                     rev = pd.Series(sec_rev_series, dtype=float).dropna()
L506                 elif qe is not None and not qe.empty and 'Revenue' in qe.columns:
L507                     rev = qe['Revenue'].dropna().astype(float)
L508                 else:
L509                     rev = pd.Series([], dtype=float)
L510                 if not rev.empty:
L511                     if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L512                     if len(rev)>=6:
L513                         yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L514                         if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L515                     yoy_list=[]
L516                     for k in range(1,5):
L517                         if len(rev)>=4+k:
L518                             y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L519                             if pd.notna(y): yoy_list.append(y)
L520                     if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L521                     # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L522                     try:
L523                         if isinstance(rev.index, pd.DatetimeIndex):
L524                             g = rev.groupby(rev.index.year)
L525                             ann_sum, cnt = g.sum(), g.count()
L526                             ann_sum = ann_sum[cnt >= 4]
L527                             if len(ann_sum) >= 2:
L528                                 yoy = ann_sum.pct_change().dropna()
L529                                 if not yoy.empty:
L530                                     REV_YOY = float(yoy.iloc[-1])
L531                                 streak = 0
L532                                 for v in yoy.iloc[::-1]:
L533                                     if pd.isna(v) or v <= 0:
L534                                         break
L535                                     streak += 1
L536                                 REV_ANNUAL_STREAK = float(streak)
L537                     except Exception:
L538                         pass
L539                 sec_eps_series = (d.get('SEC_EPS_Q_SERIES') or [])
L540                 if sec_eps_series:
L541                     eps_series = pd.Series(sec_eps_series, dtype=float).replace([np.inf,-np.inf],np.nan)
L542                 elif qe is not None and not qe.empty and 'Earnings' in qe.columns and so:
L543                     eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L544                 else:
L545                     eps_series = pd.Series([], dtype=float)
L546                 if not eps_series.empty:
L547                     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L548                         EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L549                     try:
L550                         if isinstance(eps_series.index, pd.DatetimeIndex):
L551                             g_eps = eps_series.groupby(eps_series.index.year)
L552                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L553                             ann_eps = ann_eps[cnt_eps >= 4]
L554                             if len(ann_eps) >= 2:
L555                                 eps_yoy = ann_eps.pct_change().dropna()
L556                                 if not eps_yoy.empty:
L557                                     EPS_YOY = float(eps_yoy.iloc[-1])
L558                     except Exception:
L559                         pass
L560             except Exception: pass
L561             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L562             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L563             df.loc[t,'REV_YOY'] = REV_YOY
L564             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L565             df.loc[t,'EPS_YOY'] = EPS_YOY
L566
L567             # --- Rule of 40 や周辺 ---
L568             total_rev_ttm = d.get('totalRevenue',np.nan)
L569             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L570             df.loc[t,'FCF_MGN'] = FCF_MGN
L571             rule40 = np.nan
L572             try:
L573                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L574             except Exception: pass
L575             df.loc[t,'RULE40'] = rule40
L576
L577             # --- トレンド補助 ---
L578             sma50  = s.rolling(50).mean()
L579             sma150 = s.rolling(150).mean()
L580             sma200 = s.rolling(200).mean()
L581             p = _safe_last(s)
L582
L583             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L584                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L585             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L586                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L587
L588             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L589             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L590
L591             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L592             if len(sma200.dropna()) >= 21:
L593                 cur200 = _safe_last(sma200)
L594                 old2001 = float(sma200.iloc[-21])
L595                 if old2001:
L596                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L597
L598             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L599             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L600             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L601             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L602             if len(sma200.dropna())>=105:
L603                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L604                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L605             # NEW: 200日線が連続で上向きの「日数」
L606             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L607             try:
L608                 s200 = sma200.dropna()
L609                 if len(s200) >= 2:
L610                     diff200 = s200.diff()
L611                     up = 0
L612                     for v in diff200.iloc[::-1]:
L613                         if pd.isna(v) or v <= 0:
L614                             break
L615                         up += 1
L616                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L617             except Exception:
L618                 pass
L619             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L620             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L621             if hi52 and hi52>0 and pd.notna(p):
L622                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L623             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L624             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L625
L626             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L627
L628             # --- 欠損メモ ---
L629             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L630             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L631             if need_finnhub:
L632                 fin_data = self.fetch_finnhub_metrics(t)
L633                 for col in need_finnhub:
L634                     val = fin_data.get(col)
L635                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L636             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L637                 if pd.isna(df.loc[t,col]):
L638                     if col=='DIV':
L639                         status = self.dividend_status(t)
L640                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L641                     else:
L642                         missing_logs.append({'Ticker':t,'Column':col})
L643
L644         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L645             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L646             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L647             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L648             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L649             c5 = (row.get('TR_str', np.nan) > 0)
L650             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L651             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L652             c8 = (row.get('RS', np.nan) >= 0.10)
L653             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L654
L655         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L656         assert 'trend_template' in df.columns
L657
L658         # === Z化と合成 ===
L659         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L660
L661         df_z = pd.DataFrame(index=df.index)
L662         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L663         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L664         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L665
L666         # === Growth深掘り系（欠損保持z + RAW併載） ===
L667         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC
```