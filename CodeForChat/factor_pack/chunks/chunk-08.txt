```text
641             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1642                 n_pc=cfg.drrs.G.get("n_pc", 3), gamma=cfg.drrs.G.get("gamma", 1.2),
L1643                 lam=cfg.drrs.G.get("lam", 0.68),
L1644                 lookback=cfg.drrs.G.get("lookback", 252),
L1645                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1646         else:
L1647             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1648             g_fixed = getattr(sc, "_top_G", None)
L1649             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1650                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1651                 lam=cfg.drrs.D.get("lam", 0.85),
L1652                 lookback=cfg.drrs.D.get("lookback", 504),
L1653                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1654                 mu=cfg.drrs.cross_mu_gd)
L1655         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1656         sum_sc = res["sum_score"]; obj = res["objective"]
L1657         if group == "D":
L1658             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1659             T.log("selection finalized (G/D)")
L1660     try:
L1661         inc = [t for t in exist if t in agg.index]
L1662         pick = _sticky_keep_current(
L1663             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1664             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1665         )
L1666     except Exception as _e:
L1667         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1668     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1669     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1670     try:
L1671         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1672         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1673         setattr(sc, f"_near_{group}", near10)
L1674         setattr(sc, f"_agg_{group}", agg)
L1675     except Exception:
L1676         pass
L1677
L1678     if group == "D":
L1679         T.log("save done")
L1680     if group == "G":
L1681         sc._top_G = pick
L1682     return pick, avg_r, sum_sc, obj
L1683
L1684 def run_pipeline() -> SelectionBundle:
L1685     """
L1686     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1687     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1688     """
L1689     inb = io_build_input_bundle()
L1690     cfg = PipelineConfig(
L1691         weights=WeightsConfig(g=g_weights, d=D_weights),
L1692         drrs=DRRSParams(
L1693             corrM=corrM, shrink=DRRS_SHRINK,
L1694             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1695         ),
L1696         price_max=CAND_PRICE_MAX,
L1697         debug_mode=debug_mode
L1698     )
L1699     sc = Scorer()
L1700     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1701     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1702     alpha = Scorer.spx_to_alpha(inb.spx)
L1703     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1704     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1705     sc._top_G = top_G
L1706     try:
L1707         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1708         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1709     except Exception:
L1710         pass
L1711     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1712     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1713     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1714     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1715     poolD = list(getattr(sc, "_agg_D", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1716     fb = getattr(sc, "_feat", None)
L1717     near_G = getattr(sc, "_near_G", [])
L1718     selected12 = list(top_G)
L1719     df = fb.df if fb is not None else pd.DataFrame()
L1720     guni = _infer_g_universe(df, selected12, near_G)
L1721     try:
L1722         fire_recent = [t for t in guni
L1723                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1724                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1725     except Exception: fire_recent = []
L1726
L1727     lines = [
L1728         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1729         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1730         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1731         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1732
L1733     if fire_recent:
L1734         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1735         lines.append(f"過去5営業日の検知: {fire_list}")
L1736     else:
L1737         lines.append("過去5営業日の検知: なし")
L1738
L1739     try:
L1740         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1741         if webhook:
L1742             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1743     except Exception:
L1744         pass
L1745
L1746     out = Output()
L1747     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1748     try:
L1749         out._sc = sc
L1750     except Exception:
L1751         pass
L1752     if hasattr(sc, "_feat"):
L1753         try:
L1754             fb = sc._feat
L1755             out.miss_df = fb.missing_logs
L1756             out.display_results(
L1757                 exist=exist,
L1758                 bench=bench,
L1759                 df_z=fb.df_z,
L1760                 g_score=fb.g_score,
L1761                 d_score_all=fb.d_score_all,
L1762                 init_G=top_G,
L1763                 init_D=top_D,
L1764                 top_G=top_G,
L1765                 top_D=top_D,
L1766                 df_full_z=getattr(fb, "df_full_z", None),
L1767                 prev_G=getattr(sc, "_prev_G", exist),
L1768                 prev_D=getattr(sc, "_prev_D", exist),
L1769             )
L1770             try:
L1771                 DBG_COLS = ["GSC", "GROWTH_F", "MOM", "VOL", "DBGRW.GROWTH_F", "DBGRW.MOM", "DBGRW.VOL"]
L1772                 cols = [c for c in DBG_COLS if c in fb.df_z.columns]
L1773                 idx = [t for t in top_G if t in fb.df_z.index]
L1774                 out.debug_table = fb.df_z.loc[idx, cols].round(2) if idx and cols else None
L1775             except Exception:
L1776                 out.debug_table = None
L1777         except Exception:
L1778             pass
L1779     out.notify_slack()
L1780     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1781               "sum_score": sumG, "objective": objG},
L1782         resD={"tickers": top_D, "avg_res_corr": avgD,
L1783               "sum_score": sumD, "objective": objD},
L1784         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1785
L1786     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1787     try:
L1788         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1789               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1790               .sort_values("G_plus_D")
L1791               .head(10)
L1792               .round(3))
L1793         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1794         _post_slack({"text": f"```{low_msg}```"})
L1795     except Exception as _e:
L1796         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1797
L1798     return sb
L1799
L1800 if __name__ == "__main__":
L1801     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #   - missing_logs: pd.DataFrame   … 補完後の欠損ログ
L26 #
L27 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L28 # =============================================================================
L29
L30 import json, logging, os, requests, sys, warnings
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36 from datetime import datetime as _dt
L37
L38 if TYPE_CHECKING:
L39     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L40
L41 logger = logging.getLogger(__name__)
L42
L43
L44 def _log(stage, msg):
L45     try:
L46         print(f"[DBG][{_dt.utcnow().isoformat(timespec='seconds')}Z][{stage}] {msg}")
L47     except Exception:
L48         print(f"[DBG][{stage}] {msg}")
L49
L50
L51 # ---- Dividend Helpers -------------------------------------------------------
L52 def _last_close(t, price_map=None):
L53     if price_map and (c := price_map.get(t)) is not None: return float(c)
L54     try:
L55         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L56         return float(h.iloc[-1]) if len(h) else np.nan
L57     except Exception:
L58         return np.nan
L59
L60 def _ttm_div_sum(t, lookback_days=400):
L61     try:
L62         div = yf.Ticker(t).dividends
L63         if div is None or len(div) == 0: return 0.0
L64         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L65         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L66         return ttm if ttm > 0 else float(div.tail(4).sum())
L67     except Exception:
L68         return 0.0
L69
L70 def ttm_div_yield_portfolio(tickers, price_map=None):
L71     ys = [(lambda c, s: (s/c) if (np.isfinite(c) and c>0 and s>0) else 0.0)(_last_close(t, price_map), _ttm_div_sum(t)) for t in tickers]
L72     return float(np.mean(ys)) if ys else 0.0
L73
L74 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L75 def _as_numeric_series(s: pd.Series) -> pd.Series:
L76     """Series を float dtype に強制変換し、index を保持する。"""
L77     if s is None:
L78         return pd.Series(dtype=float)
L79     v = pd.to_numeric(s, errors="coerce")
L80     return pd.Series(v.values, index=getattr(s, "index", None), dtype=float, name=getattr(s, "name", None))
L81
L82
L83 def _scalar(x):
L84     """
L85     入力を安全に float スカラへ変換する。
L86
L87     許容する入力パターン:
L88       - pandas.Series: 非NaNの最後の値を採用
L89       - numpy スカラ/配列: 最後の要素を採用
L90       - その他の数値っぽい値: float へ変換
L91
L92     変換できない場合は np.nan を返す。
L93     """
L94
L95     if x is None:
L96         return np.nan
L97
L98     # pandas.Series の場合は非NaNの最後の値を採用
L99     if isinstance(x, pd.Series):
L100         s = pd.to_numeric(x, errors="coerce").dropna()
L101         return float(s.iloc[-1]) if not s.empty else np.nan
L102
L103     # numpy スカラ (item() を持つ) ※文字列は除外
L104     if hasattr(x, "item") and not isinstance(x, (str, bytes)):
L105         try:
L106             re
```