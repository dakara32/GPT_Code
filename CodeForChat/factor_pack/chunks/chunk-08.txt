```text
               0.40*df_z['RS']
L575             + 0.15*df_z['TR_str']
L576             + 0.15*df_z['RS_SLOPE_6W']
L577             + 0.15*df_z['RS_SLOPE_13W']
L578             + 0.10*df_z['MA200_SLOPE_5M']
L579             + 0.10*df_z['MA200_UP_STREAK_D']
L580         ).clip(-3.0,3.0)
L581         df_z['VOL'] = robust_z(df['BETA'])
L582         df_z.rename(columns={'GROWTH_F':'GRW','MOM_F':'MOM','QUALITY_F':'QAL','YIELD_F':'YLD'}, inplace=True)
L583
L584         # === begin: BIO LOSS PENALTY =====================================
L585         try:
L586             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L587         except Exception:
L588             penalty_z = 0.8
L589
L590         def _is_bio_like(t: str) -> bool:
L591             inf = info.get(t, {}) if isinstance(info, dict) else {}
L592             sec = str(inf.get("sector", "")).lower()
L593             ind = str(inf.get("industry", "")).lower()
L594             if "health" not in sec:
L595                 return False
L596             keys = ("biotech", "biopharma", "pharma")
L597             return any(k in ind for k in keys)
L598
L599         tickers_s = pd.Index(df_z.index)
L600         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L601         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L602         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L603
L604         if bool(mask_bio_loss.any()) and penalty_z > 0:
L605             df_z.loc[mask_bio_loss, "GRW"] = df_z.loc[mask_bio_loss, "GRW"] - penalty_z
L606             df_z["GRW"] = df_z["GRW"].clip(-3.0, 3.0)
L607         # === end: BIO LOSS PENALTY =======================================
L608
L609         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L610         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L611
L612         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L613         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L614         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L615         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L616
L617         # --- 重みは cfg を優先（外部があればそれを使用） ---
L618         # ① 全銘柄で G/D スコアを算出（unmasked）
L619         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L620
L621         d_comp = pd.concat({
L622             'QAL': df_z['D_QAL'],
L623             'YLD': df_z['D_YLD'],
L624             'VOL': df_z['D_VOL_RAW'],
L625             'TRD': df_z['D_TRD']
L626         }, axis=1)
L627         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L628         globals()['D_WEIGHTS_EFF'] = dw.copy()
L629         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L630
L631         # ② テンプレ判定（既存ロジックそのまま）
L632         mask = df['trend_template']
L633         if not bool(mask.any()):
L634             mask = (
L635                 (df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L636                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L637                 (df.get('RS', np.nan) >= 0.08) &
L638                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L639                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L640                 (df.get('MA150_OVER_200', np.nan) > 0) &
L641                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L642                 (df.get('TR_str', np.nan) > 0)
L643             ).fillna(False)
L644             df['trend_template'] = mask
L645
L646         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L647         g_score = g_score_all.loc[mask]
L648         Scorer.g_score = g_score
L649         df_z['GSC'] = g_score_all
L650         df_z['DSC'] = d_score_all
L651
L652         try:
L653             current = (
L654                 pd.read_csv("current_tickers.csv")
L655                   .iloc[:, 0]
L656                   .str.upper()
L657                   .tolist()
L658             )
L659         except FileNotFoundError:
L660             warnings.warn("current_tickers.csv not found — bonus skipped")
L661             current = []
L662
L663         mask_bonus = g_score.index.isin(current)
L664         if mask_bonus.any():
L665             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L666             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L667             # 2) g 側の σ を取り、NaN なら 0 に丸める
L668             sigma_g = g_score.std()
L669             if pd.isna(sigma_g):
L670                 sigma_g = 0.0
L671             bonus_g = round(k * sigma_g, 3)
L672             g_score.loc[mask_bonus] += bonus_g
L673             Scorer.g_score = g_score
L674             # 3) D 側も同様に σ の NaN をケア
L675             sigma_d = d_score_all.std()
L676             if pd.isna(sigma_d):
L677                 sigma_d = 0.0
L678             bonus_d = round(k * sigma_d, 3)
L679             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L680
L681         try:
L682             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L683         except Exception:
L684             pass
L685
L686         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L687         return FeatureBundle(
L688             df=df,
L689             df_z=df_z,
L690             g_score=g_score,
L691             d_score_all=d_score_all,
L692             missing_logs=pd.DataFrame(missing_logs)
L693         )
L694
L695
L696 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L697     """
L698     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L699     次の列を feature_df に追加する（index=ticker）。
L700       - G_BREAKOUT_recent_5d : bool
L701       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L702       - G_PULLBACK_recent_5d : bool
L703       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L704       - G_PIVOT_price        : float
L705     失敗しても例外は握り潰し、既存処理を阻害しない。
L706     """
L707     try:
L708         px   = bundle.px                      # 終値 DataFrame
L709         hi   = bundle.data['High']
L710         lo   = bundle.data['Low']
L711         vol  = bundle.data['Volume']
L712         bench= bundle.spx                     # ベンチマーク Series
L713
L714         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L715         g_universe = getattr(self_obj, "g_universe", None)
L716         if g_universe is None:
L717             try:
L718                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L719             except Exception:
L720                 g_universe = list(feature_df.index)
L721         if not g_universe:
L722             return feature_df
L723
L724         # 指標
L725         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L726         ma50  = px[g_universe].rolling(50).mean()
L727         ma150 = px[g_universe].rolling(150).mean()
L728         ma200 = px[g_universe].rolling(200).mean()
L729         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L730         vol20 = vol[g_universe].rolling(20).mean()
L731         vol50 = vol[g_universe].rolling(50).mean()
L732
L733         # トレンドテンプレート合格
L734         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L735                             & (ma150 > ma200) & (ma200.diff() > 0)
L736
L737         # 汎用ピボット：直近65営業日の高値（当日除外）
L738         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L739
L740         # 相対力：年内高値更新
L741         bench_aligned = bench.reindex(px.index).ffill()
L742         rs = px[g_universe].div(bench_aligned, axis=0)
L743         rs_high = rs.rolling(252).max().shift(1)
L744
L745         # ブレイクアウト「発生日」：条件立ち上がり
L746         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L747                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L748         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L749
L750         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L751         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L752         volume_dryup = (vol20 / vol50) <= 1.0
L753         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L754         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L755         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L756
L757         # 直近N営業日内の発火 / 最終発生日
L758         rows = []
L759         for t in g_universe:
L760             def _recent_and_date(s, win):
L761                 sw = s[t].iloc[-win:]
L762                 if sw.any():
L763                     d = sw[sw].index[-1]
L764                     return True, d.strftime("%Y-%m-%d")
L765                 return False, ""
L766             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L767             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L768             rows.append((t, {
L769                 "G_BREAKOUT_recent_5d": br_recent,
L770                 "G_BREAKOUT_last_date": br_date,
L771                 "G_PULLBACK_recent_5d": pb_recent,
L772                 "G_PULLBACK_last_date": pb_date,
L773                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L774             }))
L775         flags = pd.DataFrame({k: v for k, v in rows}).T
L776
L777         # 列を作成・上書き
L778         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L779         for c in cols:
L780             if c not in feature_df.columns:
L781                 feature_df[c] = np.nan
L782         feature_df.loc[flags.index, flags.columns] = flags
L783
L784     except Exception:
L785         pass
L786     return feature_df
L787
L788
L789
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
L44       - name: Persist breadth mode (if changed)
L45         run: |
L46           git config user.name "github-actions[bot]"
L47           git config user.email "github-actions[bot]@users.noreply.github.com"
L48           git add results/breadth_state.json || true
L49           if ! git diff --cached --quiet; then
L50             git commit -m "chore: update breadth_state.json [skip ci]" || true
L51             git push || true
L52           else
L53          
```