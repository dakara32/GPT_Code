```text
  "nY": nY,
L389     }
L390     for key, value in parts.items():
L391         if key in ("nQ", "nY"):
L392             continue
L393         rounded = _round_debug(value)
L394         parts_out[key] = rounded
L395
L396     info_entry["DEBUG_GRW_PATH"] = path
L397     info_entry["DEBUG_GRW_PARTS"] = json.dumps(parts_out, ensure_ascii=False, sort_keys=True)
L398     info_entry["GRW_SCORE"] = grw
L399     info_entry["GRW_WEIGHT"] = w
L400     info_entry["GRW_CORE"] = core
L401     info_entry["GRW_PRICE_PROXY"] = price_alt
L402
L403     return {
L404         "score": grw,
L405         "path": path,
L406         "parts": info_entry["DEBUG_GRW_PARTS"],
L407         "weight": w,
L408         "core": core,
L409         "price_proxy": price_alt,
L410     }
L411
L412
L413 D_WEIGHTS_EFF = None  # 出力表示互換のため
L414
L415
L416 def _scalar(v):
L417     """単一セル代入用に値をスカラーへ正規化する。
L418
L419     - pandas Series -> .iloc[-1]（最後を採用）
L420     - list/tuple/ndarray -> 最後の要素
L421     - それ以外          -> そのまま
L422     取得失敗時は np.nan を返す。
L423     """
L424     import numpy as _np
L425     import pandas as _pd
L426     try:
L427         if isinstance(v, _pd.Series):
L428             return v.iloc[-1] if len(v) else _np.nan
L429         if isinstance(v, (list, tuple, _np.ndarray)):
L430             return v[-1] if len(v) else _np.nan
L431         return v
L432     except Exception:
L433         return _np.nan
L434
L435
L436 # ---- Scorer 本体 -------------------------------------------------------------
L437 class Scorer:
L438     """
L439     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L440     - cfg は必須（factor.PipelineConfig を渡す）。
L441     - 旧カラム名を自動リネームして新スキーマに吸収します。
L442     """
L443
L444     # === 先頭で旧→新カラム名マップ（移行用） ===
L445     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L446     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L447
L448     # === スキーマ簡易チェック（最低限） ===
L449     @staticmethod
L450     def _validate_ib_for_scorer(ib: Any):
L451         miss = [a for a in ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"] if not hasattr(ib,a) or getattr(ib,a) is None]
L452         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L453         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L454         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L455         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L456         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L457         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L458
L459     # ----（Scorer専用）テクニカル・指標系 ----
L460     @staticmethod
L461     def trend(s: pd.Series):
L462         if len(s)<200: return np.nan
L463         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L464         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L465         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L466         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L467         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L468         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L469         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L470         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L471         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L472         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L473         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L474         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L475
L476     @staticmethod
L477     def rs(s, b):
L478         n, nb = len(s), len(b)
L479         if n<60 or nb<60: return np.nan
L480         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L481         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L482         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L483
L484     @staticmethod
L485     def tr_str(s):
L486         if s is None:
L487             return np.nan
L488         s = s.ffill(limit=2).dropna()
L489         if len(s) < 50:
L490             return np.nan
L491         ma50 = s.rolling(50, min_periods=50).mean()
L492         last_ma = ma50.iloc[-1]
L493         last_px = s.iloc[-1]
L494         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L495
L496     @staticmethod
L497     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L498         r = (s/b).dropna()
L499         if len(r) < win: return np.nan
L500         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L501         try: return float(np.polyfit(x, y, 1)[0])
L502         except Exception: return np.nan
L503
L504     @staticmethod
L505     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L506         ev = info_t.get('enterpriseValue', np.nan)
L507         if pd.notna(ev) and ev>0: return float(ev)
L508         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L509         try:
L510             bs = tk.quarterly_balance_sheet
L511             if bs is not None and not bs.empty:
L512                 c = bs.columns[0]
L513                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L514                     if k in bs.index: debt = float(bs.loc[k,c]); break
L515                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L516                     if k in bs.index: cash = float(bs.loc[k,c]); break
L517         except Exception: pass
L518         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L519         return np.nan
L520
L521     @staticmethod
L522     def dividend_status(ticker: str) -> str:
L523         t = yf.Ticker(ticker)
L524         try:
L525             if not t.dividends.empty: return "has"
L526         except Exception: return "unknown"
L527         try:
L528             a = t.actions
L529             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L530         except Exception: pass
L531         try:
L532             fi = t.fast_info
L533             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L534         except Exception: pass
L535         return "unknown"
L536
L537     @staticmethod
L538     def div_streak(t):
L539         try:
L540             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L541             years, streak = sorted(ann.index), 0
L542             for i in range(len(years)-1,0,-1):
L543                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L544                 else: break
L545             return streak
L546         except Exception: return 0
L547
L548     @staticmethod
L549     def fetch_finnhub_metrics(symbol):
L550         api_key = os.environ.get("FINNHUB_API_KEY")
L551         if not api_key: return {}
L552         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L553         try:
L554             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L555             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L556         except Exception: return {}
L557
L558     @staticmethod
L559     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L560         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L561         n = min(len(r), len(m), lookback)
L562         if n<60: return np.nan
L563         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L564         return np.nan if var==0 else cov/var
L565
L566     @staticmethod
L567     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L568                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L569         """
L570         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L571         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L572         """
L573         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L574         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L575         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L576         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L577         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L578
L579     @staticmethod
L580     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L581         """
L582         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L583         戻り値は降順ソート済み。
L584         """
L585         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L586         cnt, pen = {}, {}
L587         for t in order:
L588             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L589         return (s - pd.Series(pen)).sort_values(ascending=False)
L590
L591     @staticmethod
L592     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L593         """
L594         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L595         """
L596         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L597         if not hard:
L598             return list(eff.head(N).index)
L599         pick, used = [], {}
L600         for t in eff.index:
L601             s = sectors.get(t, "U")
L602             if used.get(s,0) < hard:
L603                 pick.append(t); used[s] = used.get(s,0) + 1
L604             if len(pick) == N: break
L605         return pick
L606
L607     @staticmethod
L608     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L609         """
L610         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L611         - px: 列=ticker（ベンチは含めない）
L612         - spx: ベンチマーク Series（px.index に整列）
L613         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L614         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L615         """
L616         import numpy as np, pandas as pd
L617         if px is None or px.empty:
L618             return pd.Series(dtype=int)
L619         px = px.dropna(how="all", axis=1)
L620         if win_days and win_days > 0:
L621             px = px.tail(win_days)
L622         if px.empty:
L623             return pd.Series(dtype=int)
L624         spx = spx.reindex(px.index).ffill()
L625
L626         ma50  = px.rolling(50).mean()
L627         ma150 = px.rolling(150).mean()
L628         ma200 = px.rolling(200).mean()
L629
L630         tt = (px > ma150)
L631         tt &= (px > ma200)
L632         tt &= (ma150 > ma200)
L633         tt &= (ma200 - ma200.shift(21) > 0)
L634         tt &= (ma50  > ma150)
L635         tt &= (ma50  > ma200)
L636         tt &= (px    > ma50)
L637
L638         lo252 = px.rolling(252).min()
L639         hi252 = px.rolling(252).max(
```