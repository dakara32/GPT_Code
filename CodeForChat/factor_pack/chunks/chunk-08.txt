```text
0'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L655             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L656             if len(sma200.dropna())>=105:
L657                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L658                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L659             # NEW: 200日線が連続で上向きの「日数」
L660             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L661             try:
L662                 s200 = sma200.dropna()
L663                 if len(s200) >= 2:
L664                     diff200 = s200.diff()
L665                     up = 0
L666                     for v in diff200.iloc[::-1]:
L667                         if pd.isna(v) or v <= 0:
L668                             break
L669                         up += 1
L670                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L671             except Exception:
L672                 pass
L673             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L674             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L675             if hi52 and hi52>0 and pd.notna(p):
L676                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L677             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L678             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L679
L680             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L681
L682             # --- 欠損メモ ---
L683             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L684             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L685             if need_finnhub:
L686                 fin_data = self.fetch_finnhub_metrics(t)
L687                 for col in need_finnhub:
L688                     val = fin_data.get(col)
L689                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L690             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L691                 if pd.isna(df.loc[t,col]):
L692                     if col=='DIV':
L693                         status = self.dividend_status(t)
L694                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L695                     else:
L696                         missing_logs.append({'Ticker':t,'Column':col})
L697
L698         if debug_mode:
L699             rev_cols = [c for c in df.columns if c.startswith("REV_")]
L700             if rev_cols:
L701                 total = len(df.index)
L702                 if total:
L703                     parts = []
L704                     for col in sorted(rev_cols):
L705                         series = pd.to_numeric(df[col], errors="coerce")
L706                         valid = int(series.notna().sum())
L707                         nan_cnt = total - valid
L708                         nan_ratio = nan_cnt / total if total else float("nan")
L709                         parts.append(
L710                             f"{col}:ok={valid} nan={nan_cnt} nan%={nan_ratio:.2f}"
L711                         )
L712                     logger.info("[REV Summary] n=%d %s", total, " ".join(parts))
L713
L714         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L715             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L716             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L717             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L718             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L719             c5 = (row.get('TR_str', np.nan) > 0)
L720             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L721             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L722             c8 = (row.get('RS', np.nan) >= 0.10)
L723             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L724
L725         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L726         assert 'trend_template' in df.columns
L727
L728         # === Z化と合成 ===
L729         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L730
L731         df_z = pd.DataFrame(index=df.index)
L732         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L733         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L734         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L735
L736         # === Growth深掘り系（欠損保持z + RAW併載） ===
L737         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L738         for col in grw_cols:
L739             if col in df.columns:
L740                 raw = pd.to_numeric(df[col], errors="coerce")
L741                 df_z[col] = robust_z_keepnan(raw)
L742                 df_z[f'{col}_RAW'] = raw
L743         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L744             if k in df.columns and k not in df_z.columns:
L745                 raw = pd.to_numeric(df[k], errors="coerce")
L746                 df_z[k] = robust_z_keepnan(raw)
L747                 df_z[f'{k}_RAW'] = raw
L748         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L749
L750         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L751         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L752         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L753
L754         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L755         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L756         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L757
L758         # ===== トレンドスロープ算出 =====
L759         def zpos(x):
L760             arr = robust_z(x)
L761             idx = getattr(x, 'index', df_z.index)
L762             return pd.Series(arr, index=idx).fillna(0.0)
L763
L764         def relu(x):
L765             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L766             return ser.clip(lower=0).fillna(0.0)
L767
L768         # 売上トレンドスロープ（四半期）
L769         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L770         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L771         slope_rev_combo = slope_rev - 0.25*noise_rev
L772         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L773         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L774
L775         # EPSトレンドスロープ（四半期）
L776         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L777         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L778         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L779
L780         # 年次トレンド（サブ）
L781         slope_rev_yr = zpos(df_z['REV_YOY'])
L782         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L783         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L784         streak_yr = streak_base / (streak_base.abs() + 1.0)
L785         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L786         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L787         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L788         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L789         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L790
L791         if debug_mode:
L792             slope_cols = [c for c in df_z.columns if c.startswith("TREND_SLOPE_")]
L793             if slope_cols:
L794                 total = len(df_z.index)
L795                 parts = []
L796                 for col in sorted(slope_cols):
L797                     series = pd.to_numeric(df_z[col], errors="coerce")
L798                     nan_cnt = int(series.isna().sum())
L799                     zero_cnt = int((series == 0).sum())
L800                     parts.append(f"{col}:0={zero_cnt} nan={nan_cnt}")
L801                 logger.info("[SLOPE Summary] n=%d %s", total, " ".join(parts))
L802
L803         # ===== 新GRW合成式（SEPA寄りシフト） =====
L804         _nz = lambda name: df_z.get(name, pd.Series(0.0, index=df_z.index)).fillna(0.0)
L805         grw_combo = (
L806               0.20*_nz('REV_Q_YOY')
L807             + 0.10*_nz('REV_YOY_ACC')
L808             + 0.10*_nz('REV_ANN_STREAK')
L809             - 0.05*_nz('REV_YOY_VAR')
L810             + 0.10*_nz('TREND_SLOPE_REV')
L811             + 0.15*_nz('EPS_Q_YOY')
L812             + 0.05*_nz('EPS_POS')
L813             + 0.20*_nz('TREND_SLOPE_EPS')
L814             + 0.05*_nz('TREND_SLOPE_REV_YR')
L815             + 0.03*_nz('TREND_SLOPE_EPS_YR')
L816             + 0.10*_nz('FCF_MGN')
L817             + 0.05*_nz('RULE40')
L818         )
L819         df_z['GROWTH_F_RAW'] = grw_combo
L820         df_z['GROWTH_F'] = robust_z(grw_combo).clip(-3.0, 3.0)
L821
L822         # Debug dump for GRW composition (console OFF by default; enable only with env)
L823         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L824             try:
L825                 i = df_z[['GROWTH_F', 'GROWTH_F_RAW']].copy()
L826                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L827                 limit = max(0, min(40, len(i)))
L828                 print("[DEBUG: GRW]")
L829                 for t in i.index[:limit]:
L830                     row = i.loc[t]
L831                     parts = [f"GROWTH_F={row['GROWTH_F']:.3f}"]
L832                     if pd.notna(row.get('GROWTH_F_RAW')):
L833                         parts.append(f"GROWTH_F_RAW={row['GROWTH_F_RAW']:.3f}")
L834                     print(f"Ticker: {t} | " + " ".join(parts))
L835                 print()
L836             except Exception as exc:
L837                 print(f"[ERR] GRW debug dump failed: {exc}")
L838
L839         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L840             + 0.15*df_z['TR_str']
L841             + 0.15*df_z['RS_SLOPE_6W']
L842             + 0.15*df_z['RS_SLOPE_13W']
L843             + 0.10*df_z['MA200_SLOPE_5M']
L844             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L845         df_z['VOL'] = robust_z(df['BETA'])
L846         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L847         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L848
L849         _dump_dfz(df_z=df_z, debug_mode=getattr(cfg, "debug_mode", False))
L850
L851         # === begin: BIO LOSS PENALTY =====================================
L852         try:
L853             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L854         except Exception:
L855             penalty_z = 0.8
L856
L857         def _is_bio_like(t: str) -> bool:
L858             inf = info.get(t, {}) if isinstance(info, dict) else {}
L859             sec = str(inf.get("sector", "")).lower()
L860             ind = str(inf.get("industry", "")).lower()
L861             if "health" not in sec:
L862                 return False
L863             keys = ("biotech", "biopharma", "pharma")
L864             return any(k in ind for k in keys)
L865
L866         tickers_s = pd.Index(df_z.index)
L867         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L868         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L869         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L870
L871         if bool(mask_bio_loss.any()) and penalty
```