```text
columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L461         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L462         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L463         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L464         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L465
L466     # ----（Scorer専用）テクニカル・指標系 ----
L467     @staticmethod
L468     def trend(s: pd.Series):
L469         if len(s)<200: return np.nan
L470         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L471         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L472         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L473         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L474         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L475         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L476         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L477         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L478         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L479         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L480         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L481         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L482
L483     @staticmethod
L484     def rs(s, b):
L485         n, nb = len(s), len(b)
L486         if n<60 or nb<60: return np.nan
L487         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L488         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L489         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L490
L491     @staticmethod
L492     def tr_str(s):
L493         if s is None:
L494             return np.nan
L495         s = s.ffill(limit=2).dropna()
L496         if len(s) < 50:
L497             return np.nan
L498         ma50 = s.rolling(50, min_periods=50).mean()
L499         last_ma = ma50.iloc[-1]
L500         last_px = s.iloc[-1]
L501         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L502
L503     @staticmethod
L504     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L505         r = (s/b).dropna()
L506         if len(r) < win: return np.nan
L507         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L508         try: return float(np.polyfit(x, y, 1)[0])
L509         except Exception: return np.nan
L510
L511     @staticmethod
L512     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L513         ev = info_t.get('enterpriseValue', np.nan)
L514         if pd.notna(ev) and ev>0: return float(ev)
L515         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L516         try:
L517             bs = tk.quarterly_balance_sheet
L518             if bs is not None and not bs.empty:
L519                 c = bs.columns[0]
L520                 for k in ("Total Debt","Long Term Debt","Short Long Term Debt"):
L521                     if k in bs.index: debt = float(bs.loc[k,c]); break
L522                 for k in ("Cash And Cash Equivalents","Cash And Cash Equivalents And Short Term Investments","Cash"):
L523                     if k in bs.index: cash = float(bs.loc[k,c]); break
L524         except Exception: pass
L525         if pd.notna(mc): return float(mc + (0 if pd.isna(debt) else debt) - (0 if pd.isna(cash) else cash))
L526         return np.nan
L527
L528     @staticmethod
L529     def dividend_status(ticker: str) -> str:
L530         t = yf.Ticker(ticker)
L531         try:
L532             if not t.dividends.empty: return "has"
L533         except Exception: return "unknown"
L534         try:
L535             a = t.actions
L536             if (a is not None and not a.empty and "Stock Splits" in a.columns and a["Stock Splits"].abs().sum()>0): return "none_confident"
L537         except Exception: pass
L538         try:
L539             fi = t.fast_info
L540             if any(getattr(fi,k,None) for k in ("last_dividend_date","dividend_rate","dividend_yield")): return "maybe_missing"
L541         except Exception: pass
L542         return "unknown"
L543
L544     @staticmethod
L545     def div_streak(t):
L546         try:
L547             divs = yf.Ticker(t).dividends.dropna(); ann = divs.groupby(divs.index.year).sum(); ann = ann[ann.index<pd.Timestamp.today().year]
L548             years, streak = sorted(ann.index), 0
L549             for i in range(len(years)-1,0,-1):
L550                 if ann[years[i]] > ann[years[i-1]]: streak += 1
L551                 else: break
L552             return streak
L553         except Exception: return 0
L554
L555     @staticmethod
L556     def fetch_finnhub_metrics(symbol):
L557         api_key = os.environ.get("FINNHUB_API_KEY")
L558         if not api_key: return {}
L559         url, params = "https://finnhub.io/api/v1/stock/metric", {"symbol":symbol,"metric":"all","token":api_key}
L560         try:
L561             r = requests.get(url, params=params, timeout=10); r.raise_for_status(); m = r.json().get("metric",{})
L562             return {'EPS':m.get('epsGrowthTTMYoy'),'REV':m.get('revenueGrowthTTMYoy'),'ROE':m.get('roeTTM'),'BETA':m.get('beta'),'DIV':m.get('dividendYieldIndicatedAnnual'),'FCF':(m.get('freeCashFlowTTM')/m.get('enterpriseValue')) if m.get('freeCashFlowTTM') and m.get('enterpriseValue') else None}
L563         except Exception: return {}
L564
L565     @staticmethod
L566     def calc_beta(series: pd.Series, market: pd.Series, lookback=252):
L567         r, m = series.pct_change().dropna(), market.pct_change().dropna()
L568         n = min(len(r), len(m), lookback)
L569         if n<60: return np.nan
L570         r, m = r.iloc[-n:], m.iloc[-n:]; cov, var = np.cov(r, m)[0,1], np.var(m)
L571         return np.nan if var==0 else cov/var
L572
L573     @staticmethod
L574     def spx_to_alpha(spx: pd.Series, bands=(0.03,0.10), w=(0.6,0.4),
L575                      span=5, q=(0.20,0.40), alphas=(0.05,0.08,0.10)) -> float:
L576         """
L577         S&P500指数のみから擬似breadthを作り、履歴分位でαを段階決定。
L578         bands=(±3%, ±10%), w=(50DMA,200DMA), 分位q=(20%,40%), alphas=(低,中,高)
L579         """
L580         ma50, ma200 = spx.rolling(50).mean(), spx.rolling(200).mean()
L581         b50, b200 = ((spx/ma50 - 1)+bands[0])/(2*bands[0]), ((spx/ma200 - 1)+bands[1])/(2*bands[1])
L582         hist = (w[0]*b50 + w[1]*b200).clip(0,1).ewm(span=span).mean()
L583         b, (lo, mid) = float(hist.iloc[-1]), (float(hist.quantile(q[0])), float(hist.quantile(q[1])))
L584         return alphas[0] if b < lo else alphas[1] if b < mid else alphas[2]
L585
L586     @staticmethod
L587     def soft_cap_effective_scores(scores: pd.Series|dict, sectors: dict, cap=2, alpha=0.08) -> pd.Series:
L588         """
L589         同一セクターcap超過（3本目以降）に α×段階減点を課した“有効スコア”Seriesを返す。
L590         戻り値は降順ソート済み。
L591         """
L592         s = pd.Series(scores, dtype=float); order = s.sort_values(ascending=False).index
L593         cnt, pen = {}, {}
L594         for t in order:
L595             sec = sectors.get(t, "U"); cnt[sec] = cnt.get(sec,0) + 1; pen[t] = alpha*max(0, cnt[sec]-cap)
L596         return (s - pd.Series(pen)).sort_values(ascending=False)
L597
L598     @staticmethod
L599     def pick_top_softcap(scores: pd.Series|dict, sectors: dict, N: int, cap=2, alpha=0.08, hard: int|None=5) -> list[str]:
L600         """
L601         soft-cap適用後の上位Nティッカーを返す。hard>0なら非常用ハード上限で同一セクター超過を間引く（既定=5）。
L602         """
L603         eff = Scorer.soft_cap_effective_scores(scores, sectors, cap, alpha)
L604         if not hard:
L605             return list(eff.head(N).index)
L606         pick, used = [], {}
L607         for t in eff.index:
L608             s = sectors.get(t, "U")
L609             if used.get(s,0) < hard:
L610                 pick.append(t); used[s] = used.get(s,0) + 1
L611             if len(pick) == N: break
L612         return pick
L613
L614     @staticmethod
L615     def trend_template_breadth_series(px: pd.DataFrame, spx: pd.Series, win_days: int | None = None) -> pd.Series:
L616         """
L617         各営業日の trend_template 合格本数（合格“本数”=C）を返す。
L618         - px: 列=ticker（ベンチは含めない）
L619         - spx: ベンチマーク Series（px.index に整列）
L620         - win_days: 末尾の計算対象営業日数（None→全体、既定600は呼び出し側指定）
L621         ベクトル化＆rollingのみで軽量。欠損は False 扱い。
L622         """
L623         import numpy as np, pandas as pd
L624         if px is None or px.empty:
L625             return pd.Series(dtype=int)
L626         px = px.dropna(how="all", axis=1)
L627         if win_days and win_days > 0:
L628             px = px.tail(win_days)
L629         if px.empty:
L630             return pd.Series(dtype=int)
L631         spx = spx.reindex(px.index).ffill()
L632
L633         ma50  = px.rolling(50).mean()
L634         ma150 = px.rolling(150).mean()
L635         ma200 = px.rolling(200).mean()
L636
L637         tt = (px > ma150)
L638         tt &= (px > ma200)
L639         tt &= (ma150 > ma200)
L640         tt &= (ma200 - ma200.shift(21) > 0)
L641         tt &= (ma50  > ma150)
L642         tt &= (ma50  > ma200)
L643         tt &= (px    > ma50)
L644
L645         lo252 = px.rolling(252).min()
L646         hi252 = px.rolling(252).max()
L647         tt &= (px.divide(lo252).sub(1.0) >= 0.30)   # P_OVER_LOW52 >= 0.30
L648         tt &= (px >= (0.75 * hi252))                # NEAR_52W_HIGH >= -0.25
L649
L650         r12  = px.divide(px.shift(252)).sub(1.0)
L651         br12 = spx.divide(spx.shift(252)).sub(1.0)
L652         r1   = px.divide(px.shift(22)).sub(1.0)
L653         br1  = spx.divide(spx.shift(22)).sub(1.0)
L654         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L655         tt &= (rs >= 0.10)
L656
L657         return tt.fillna(False).sum(axis=1).astype(int)
L658
L659     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L660     def aggregate_scores(self, ib: Any, cfg):
L661         if cfg is None:
L662             raise ValueError("cfg is required; pass factor.PipelineConfig")
L663         self._validate_ib_for_scorer(ib)
L664
L665         px, spx, tickers = ib.px, ib.spx, ib.tickers
L666         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L667
L668         df, missing_logs = pd.DataFrame(index=tickers), []
L669         for t in tickers:
L670             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L671             try:
L672                 volume_series_full = ib.data['Volume'][t]
L673             except Exception:
L674                 volume_series_full = None
L675
L676             grw_result = _calc_grw_flexible(t, d, s, volume_series_full)
L677             df.loc[t,'GRW_FLEX_SCORE'] = grw_result.get('score')
L678             df.loc[t,'GRW_FLEX_WEIGHT'] = grw_result.get('weight')
L679             df.loc[t,'GRW_FLEX_CORE'] = grw_result.get('core')
L680             df.loc[t,'GRW_FLEX_PRICE'] = grw_result.get('price_proxy')
L681             df.loc[t,'DEBUG_GRW_PATH'] = grw_result.get('path')
L682             df.loc[t,'DEBUG_GRW_PARTS'] = grw_result.get('parts')
L683
L684             # --- 基本特徴 ---
L685             df.loc[t,'TR']   = self.trend(s)
L686             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L687             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L688             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L6
```