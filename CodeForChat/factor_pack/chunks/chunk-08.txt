```text
AR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L614
L615         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L616         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L617         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L618
L619         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L620         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L621         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L622
L623         # ===== トレンドスロープ算出 =====
L624         def zpos(x):
L625             arr = robust_z(x)
L626             idx = getattr(x, 'index', df_z.index)
L627             return pd.Series(arr, index=idx).fillna(0.0)
L628
L629         def relu(x):
L630             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L631             return ser.clip(lower=0).fillna(0.0)
L632
L633         # 売上トレンドスロープ（四半期）
L634         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L635         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L636         slope_rev_combo = slope_rev - 0.25*noise_rev
L637         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L638         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L639
L640         # EPSトレンドスロープ（四半期）
L641         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L642         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L643         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L644
L645         # 年次トレンド（サブ）
L646         slope_rev_yr = zpos(df_z['REV_YOY'])
L647         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L648         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L649         streak_yr = streak_base / (streak_base.abs() + 1.0)
L650         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L651         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L652         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L653         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L654         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L655
L656         # ===== 新GRW合成式（SEPA寄りシフト） =====
L657         _nz = lambda name: df_z.get(name, pd.Series(0.0, index=df_z.index)).fillna(0.0)
L658         grw_combo = (
L659               0.20*_nz('REV_Q_YOY')
L660             + 0.10*_nz('REV_YOY_ACC')
L661             + 0.10*_nz('REV_ANN_STREAK')
L662             - 0.05*_nz('REV_YOY_VAR')
L663             + 0.10*_nz('TREND_SLOPE_REV')
L664             + 0.15*_nz('EPS_Q_YOY')
L665             + 0.05*_nz('EPS_POS')
L666             + 0.20*_nz('TREND_SLOPE_EPS')
L667             + 0.05*_nz('TREND_SLOPE_REV_YR')
L668             + 0.03*_nz('TREND_SLOPE_EPS_YR')
L669             + 0.10*_nz('FCF_MGN')
L670             + 0.05*_nz('RULE40')
L671         )
L672         df_z['GROWTH_F_RAW'] = grw_combo
L673         df_z['GROWTH_F'] = robust_z(grw_combo).clip(-3.0, 3.0)
L674
L675         # Debug dump for GRW composition (console OFF by default; enable only with env)
L676         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L677             try:
L678                 i = df_z[['GROWTH_F', 'GROWTH_F_RAW']].copy()
L679                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L680                 limit = max(0, min(40, len(i)))
L681                 print("[DEBUG: GRW]")
L682                 for t in i.index[:limit]:
L683                     row = i.loc[t]
L684                     parts = [f"GROWTH_F={row['GROWTH_F']:.3f}"]
L685                     if pd.notna(row.get('GROWTH_F_RAW')):
L686                         parts.append(f"GROWTH_F_RAW={row['GROWTH_F_RAW']:.3f}")
L687                     print(f"Ticker: {t} | " + " ".join(parts))
L688                 print()
L689             except Exception as exc:
L690                 print(f"[ERR] GRW debug dump failed: {exc}")
L691
L692         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L693             + 0.15*df_z['TR_str']
L694             + 0.15*df_z['RS_SLOPE_6W']
L695             + 0.15*df_z['RS_SLOPE_13W']
L696             + 0.10*df_z['MA200_SLOPE_5M']
L697             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L698         df_z['VOL'] = robust_z(df['BETA'])
L699         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L700         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L701
L702         _dump_dfz(df_z=df_z, debug_mode=getattr(cfg, "debug_mode", False))
L703
L704         # === begin: BIO LOSS PENALTY =====================================
L705         try:
L706             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L707         except Exception:
L708             penalty_z = 0.8
L709
L710         def _is_bio_like(t: str) -> bool:
L711             inf = info.get(t, {}) if isinstance(info, dict) else {}
L712             sec = str(inf.get("sector", "")).lower()
L713             ind = str(inf.get("industry", "")).lower()
L714             if "health" not in sec:
L715                 return False
L716             keys = ("biotech", "biopharma", "pharma")
L717             return any(k in ind for k in keys)
L718
L719         tickers_s = pd.Index(df_z.index)
L720         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L721         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L722         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L723
L724         if bool(mask_bio_loss.any()) and penalty_z > 0:
L725             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L726             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L727         # === end: BIO LOSS PENALTY =======================================
L728
L729         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L730         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L731
L732         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L733         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L734         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L735         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L736
L737         # --- 重みは cfg を優先（外部があればそれを使用） ---
L738         # ① 全銘柄で G/D スコアを算出（unmasked）
L739         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L740
L741         d_comp = pd.concat({
L742             'QAL': df_z['D_QAL'],
L743             'YLD': df_z['D_YLD'],
L744             'VOL': df_z['D_VOL_RAW'],
L745             'TRD': df_z['D_TRD']
L746         }, axis=1)
L747         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L748         globals()['D_WEIGHTS_EFF'] = dw.copy()
L749         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L750
L751         # ② テンプレ判定（既存ロジックそのまま）
L752         mask = df['trend_template']
L753         if not bool(mask.any()):
L754             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L755                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L756                 (df.get('RS', np.nan) >= 0.08) &
L757                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L758                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L759                 (df.get('MA150_OVER_200', np.nan) > 0) &
L760                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L761                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L762             df['trend_template'] = mask
L763
L764         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L765         g_score = g_score_all.loc[mask]
L766         Scorer.g_score = g_score
L767         df_z['GSC'] = g_score_all
L768         df_z['DSC'] = d_score_all
L769
L770         try:
L771             current = (pd.read_csv("current_tickers.csv")
L772                   .iloc[:, 0]
L773                   .str.upper()
L774                   .tolist())
L775         except FileNotFoundError:
L776             warnings.warn("current_tickers.csv not found — bonus skipped")
L777             current = []
L778
L779         mask_bonus = g_score.index.isin(current)
L780         if mask_bonus.any():
L781             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L782             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L783             # 2) g 側の σ を取り、NaN なら 0 に丸める
L784             sigma_g = g_score.std()
L785             if pd.isna(sigma_g):
L786                 sigma_g = 0.0
L787             bonus_g = round(k * sigma_g, 3)
L788             g_score.loc[mask_bonus] += bonus_g
L789             Scorer.g_score = g_score
L790             # 3) D 側も同様に σ の NaN をケア
L791             sigma_d = d_score_all.std()
L792             if pd.isna(sigma_d):
L793                 sigma_d = 0.0
L794             bonus_d = round(k * sigma_d, 3)
L795             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L796
L797         try:
L798             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L799         except Exception:
L800             pass
L801
L802         df_full = df.copy()
L803         df_full_z = df_z.copy()
L804
L805         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L806         return FeatureBundle(df=df,
L807             df_z=df_z,
L808             g_score=g_score,
L809             d_score_all=d_score_all,
L810             missing_logs=pd.DataFrame(missing_logs),
L811             df_full=df_full,
L812             df_full_z=df_full_z,
L813             scaler=None)
L814
L815 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L816     """
L817     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L818     次の列を feature_df に追加する（index=ticker）。
L819       - G_BREAKOUT_recent_5d : bool
L820       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L821       - G_PULLBACK_recent_5d : bool
L822       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L823       - G_PIVOT_price        : float
L824     失敗しても例外は握り潰し、既存処理を阻害しない。
L825     """
L826     try:
L827         px   = bundle.px                      # 終値 DataFrame
L828         hi   = bundle.data['High']
L829         lo   = bundle.data['Low']
L830         vol  = bundle.data['Volume']
L831         bench= bundle.spx                     # ベンチマーク Series
L832
L833         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L834         g_universe = getattr(self_obj, "g_universe", None)
L835         if g_universe is None:
L836             try:
L837                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L838             except Exception:
L839                 g_universe = list(feature_df.index)
L840         if not g_universe:
L841             return feature_df
L842
L843         # 指標
L844         px = px.ffill(limit=2)
L845         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L846         ma50  = px[g_universe].rolling(50).mean()
L847         ma150 = px[g_universe].rolling(150).mean()
L848         ma200 = px[g_universe].rolling(200).mean()
L849         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L850         vol20 = vol[g_universe].rolling(20).mean()
L851         vol50 = vol[g_universe].rolling(50).mean()
L852
L853         # トレンドテンプレート合格
L854         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L8
```