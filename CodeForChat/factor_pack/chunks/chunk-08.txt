```text
V_YOY
L666             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L667             df.loc[t,'EPS_YOY'] = EPS_YOY
L668
L669             # --- Rule of 40 や周辺 ---
L670             total_rev_ttm = d.get('totalRevenue',np.nan)
L671             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L672             df.loc[t,'FCF_MGN'] = FCF_MGN
L673             rule40 = np.nan
L674             try:
L675                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L676             except Exception: pass
L677             df.loc[t,'RULE40'] = rule40
L678
L679             # --- トレンド補助 ---
L680             sma50  = s.rolling(50).mean()
L681             sma150 = s.rolling(150).mean()
L682             sma200 = s.rolling(200).mean()
L683             p = _safe_last(s)
L684
L685             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L686                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L687             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L688                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L689
L690             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L691             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L692
L693             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L694             if len(sma200.dropna()) >= 21:
L695                 cur200 = _safe_last(sma200)
L696                 old2001 = float(sma200.iloc[-21])
L697                 if old2001:
L698                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L699
L700             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L701             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L702             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L703             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L704             if len(sma200.dropna())>=105:
L705                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L706                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L707             # NEW: 200日線が連続で上向きの「日数」
L708             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L709             try:
L710                 s200 = sma200.dropna()
L711                 if len(s200) >= 2:
L712                     diff200 = s200.diff()
L713                     up = 0
L714                     for v in diff200.iloc[::-1]:
L715                         if pd.isna(v) or v <= 0:
L716                             break
L717                         up += 1
L718                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L719             except Exception:
L720                 pass
L721             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L722             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L723             if hi52 and hi52>0 and pd.notna(p):
L724                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L725             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L726             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L727
L728             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L729
L730             # --- 欠損メモ ---
L731             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L732             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L733             if need_finnhub:
L734                 fin_data = self.fetch_finnhub_metrics(t)
L735                 for col in need_finnhub:
L736                     val = fin_data.get(col)
L737                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L738             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L739                 if pd.isna(df.loc[t,col]):
L740                     if col=='DIV':
L741                         status = self.dividend_status(t)
L742                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L743                     else:
L744                         missing_logs.append({'Ticker':t,'Column':col})
L745
L746         if debug_mode:
L747             rev_cols = [c for c in df.columns if c.startswith("REV_")]
L748             if rev_cols:
L749                 total = len(df.index)
L750                 if total:
L751                     parts = []
L752                     for col in sorted(rev_cols):
L753                         series = pd.to_numeric(df[col], errors="coerce")
L754                         valid = int(series.notna().sum())
L755                         nan_cnt = total - valid
L756                         nan_ratio = nan_cnt / total if total else float("nan")
L757                         parts.append(
L758                             f"{col}:ok={valid} nan={nan_cnt} nan%={nan_ratio:.2f}"
L759                         )
L760                     logger.info("[REV Summary] n=%d %s", total, " ".join(parts))
L761
L762         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L763             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L764             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L765             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L766             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L767             c5 = (row.get('TR_str', np.nan) > 0)
L768             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L769             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L770             c8 = (row.get('RS', np.nan) >= 0.10)
L771             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L772
L773         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L774         assert 'trend_template' in df.columns
L775
L776         # === Z化と合成 ===
L777         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L778
L779         df_z = pd.DataFrame(index=df.index)
L780         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L781         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L782         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L783
L784         # === Growth深掘り系（欠損保持z + RAW併載） ===
L785         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L786         for col in grw_cols:
L787             if col in df.columns:
L788                 raw = pd.to_numeric(df[col], errors="coerce")
L789                 df_z[col] = robust_z_keepnan(raw)
L790                 df_z[f'{col}_RAW'] = raw
L791         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L792             if k in df.columns and k not in df_z.columns:
L793                 raw = pd.to_numeric(df[k], errors="coerce")
L794                 df_z[k] = robust_z_keepnan(raw)
L795                 df_z[f'{k}_RAW'] = raw
L796         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L797
L798         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L799         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L800         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L801
L802         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L803         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L804         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L805
L806         # ===== トレンドスロープ算出 =====
L807         def zpos(x):
L808             arr = robust_z(x)
L809             idx = getattr(x, 'index', df_z.index)
L810             return pd.Series(arr, index=idx).fillna(0.0)
L811
L812         def relu(x):
L813             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L814             return ser.clip(lower=0).fillna(0.0)
L815
L816         # 売上トレンドスロープ（四半期）
L817         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L818         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L819         slope_rev_combo = slope_rev - 0.25*noise_rev
L820         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L821         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L822
L823         # EPSトレンドスロープ（四半期）
L824         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L825         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L826         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L827
L828         # 年次トレンド（サブ）
L829         slope_rev_yr = zpos(df_z['REV_YOY'])
L830         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L831         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L832         streak_yr = streak_base / (streak_base.abs() + 1.0)
L833         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L834         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L835         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L836         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L837         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L838
L839         if debug_mode:
L840             slope_cols = [c for c in df_z.columns if c.startswith("TREND_SLOPE_")]
L841             if slope_cols:
L842                 total = len(df_z.index)
L843                 parts = []
L844                 for col in sorted(slope_cols):
L845                     series = pd.to_numeric(df_z[col], errors="coerce")
L846                     nan_cnt = int(series.isna().sum())
L847                     zero_cnt = int((series == 0).sum())
L848                     parts.append(f"{col}:0={zero_cnt} nan={nan_cnt}")
L849                 logger.info("[SLOPE Summary] n=%d %s", total, " ".join(parts))
L850
L851         # ===== 新GRW合成式（SEPA寄りシフト） =====
L852         _nz = lambda name: df_z.get(name, pd.Series(0.0, index=df_z.index)).fillna(0.0)
L853         grw_combo = (
L854               0.20*_nz('REV_Q_YOY')
L855             + 0.10*_nz('REV_YOY_ACC')
L856             + 0.10*_nz('REV_ANN_STREAK')
L857             - 0.05*_nz('REV_YOY_VAR')
L858             + 0.10*_nz('TREND_SLOPE_REV')
L859             + 0.15*_nz('EPS_Q_YOY')
L860             + 0.05*_nz('EPS_POS')
L861             + 0.20*_nz('TREND_SLOPE_EPS')
L862             + 0.05*_nz('TREND_SLOPE_REV_YR')
L863             + 0.03*_nz('TREND_SLOPE_EPS_YR')
L864             + 0.10*_nz('FCF_MGN')
L865             + 0.05*_nz('RULE40')
L866         )
L867         df_z['GROWTH_F_RAW'] = grw_combo
L868         df_z['GROWTH_F'] = robust_z(grw_combo).clip(-3.0, 3.0)
L869
L870         # Debug dump for GRW composition (console OFF by default; enable only with env)
L871         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L872             try:
L873                 i = df_z[['GROWTH_F', 'GROWTH_F_RAW']].copy()
L874                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L875                 limit = max(0, min(40, len(i)))
L876                 print("[DEBUG: GRW]")
L877                 for t in i.index[:limit]:
L878                     row = i.loc[t]
L879                     parts = [f"GROWTH_F
```