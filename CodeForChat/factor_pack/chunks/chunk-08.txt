```text
                                    break
L454                                     streak += 1
L455                                 REV_ANNUAL_STREAK = float(streak)
L456                         except Exception:
L457                             pass
L458                     if 'Earnings' in qe.columns and so:
L459                         eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L460                         if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L461                             EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L462                         try:
L463                             g_eps = eps_series.groupby(eps_series.index.year)
L464                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L465                             ann_eps = ann_eps[cnt_eps >= 4]
L466                             if len(ann_eps) >= 2:
L467                                 eps_yoy = ann_eps.pct_change().dropna()
L468                                 if not eps_yoy.empty:
L469                                     EPS_YOY = float(eps_yoy.iloc[-1])
L470                         except Exception:
L471                             pass
L472             except Exception: pass
L473             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L474             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L475             df.loc[t,'REV_YOY'] = REV_YOY
L476             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L477             df.loc[t,'EPS_YOY'] = EPS_YOY
L478
L479             # --- Rule of 40 や周辺 ---
L480             total_rev_ttm = d.get('totalRevenue',np.nan)
L481             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L482             df.loc[t,'FCF_MGN'] = FCF_MGN
L483             rule40 = np.nan
L484             try:
L485                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L486             except Exception: pass
L487             df.loc[t,'RULE40'] = rule40
L488
L489             # --- トレンド補助 ---
L490             sma50  = s.rolling(50).mean()
L491             sma150 = s.rolling(150).mean()
L492             sma200 = s.rolling(200).mean()
L493             p = _safe_last(s)
L494
L495             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L496                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L497             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L498                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L499
L500             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L501             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L502
L503             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L504             if len(sma200.dropna()) >= 21:
L505                 cur200 = _safe_last(sma200)
L506                 old2001 = float(sma200.iloc[-21])
L507                 if old2001:
L508                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L509
L510             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L511             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L512             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L513             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L514             if len(sma200.dropna())>=105:
L515                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L516                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L517             # NEW: 200日線が連続で上向きの「日数」
L518             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L519             try:
L520                 s200 = sma200.dropna()
L521                 if len(s200) >= 2:
L522                     diff200 = s200.diff()
L523                     up = 0
L524                     for v in diff200.iloc[::-1]:
L525                         if pd.isna(v) or v <= 0:
L526                             break
L527                         up += 1
L528                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L529             except Exception:
L530                 pass
L531             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L532             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L533             if hi52 and hi52>0 and pd.notna(p):
L534                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L535             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L536             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L537
L538             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L539
L540             # --- 欠損メモ ---
L541             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L542             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L543             if need_finnhub:
L544                 fin_data = self.fetch_finnhub_metrics(t)
L545                 for col in need_finnhub:
L546                     val = fin_data.get(col)
L547                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L548             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L549                 if pd.isna(df.loc[t,col]):
L550                     if col=='DIV':
L551                         status = self.dividend_status(t)
L552                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L553                     else:
L554                         missing_logs.append({'Ticker':t,'Column':col})
L555
L556         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L557             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L558             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L559             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L560             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L561             c5 = (row.get('TR_str', np.nan) > 0)
L562             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L563             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L564             c8 = (row.get('RS', np.nan) >= 0.10)
L565             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L566
L567         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L568         assert 'trend_template' in df.columns
L569
L570         # === Z化と合成 ===
L571         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L572
L573         df_z = pd.DataFrame(index=df.index)
L574         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L575         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L576         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L577
L578         # === Growth深掘り系（欠損保持z + RAW併載） ===
L579         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L580         for col in grw_cols:
L581             if col in df.columns:
L582                 raw = pd.to_numeric(df[col], errors="coerce")
L583                 df_z[col] = robust_z_keepnan(raw)
L584                 df_z[f'{col}_RAW'] = raw
L585         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L586             if k in df.columns and k not in df_z.columns:
L587                 raw = pd.to_numeric(df[k], errors="coerce")
L588                 df_z[k] = robust_z_keepnan(raw)
L589                 df_z[f'{k}_RAW'] = raw
L590         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L591
L592         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L593         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L594         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L595
L596         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L597         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L598         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L599
L600         # ===== トレンドスロープ算出 =====
L601         def zpos(x):
L602             arr = robust_z(x)
L603             idx = getattr(x, 'index', df_z.index)
L604             return pd.Series(arr, index=idx).fillna(0.0)
L605
L606         def relu(x):
L607             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L608             return ser.clip(lower=0).fillna(0.0)
L609
L610         # 売上トレンドスロープ（四半期）
L611         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L612         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L613         slope_rev_combo = slope_rev - 0.25*noise_rev
L614         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L615         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L616
L617         # EPSトレンドスロープ（四半期）
L618         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L619         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L620         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L621
L622         # 年次トレンド（サブ）
L623         slope_rev_yr = zpos(df_z['REV_YOY'])
L624         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L625         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L626         streak_yr = streak_base / (streak_base.abs() + 1.0)
L627         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L628         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L629         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L630         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L631         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L632
L633         # ===== 新GRW合成式（SEPA寄りシフト） =====
L634         _nz = lambda name: df_z.get(name, pd.Series(0.0, index=df_z.index)).fillna(0.0)
L635         grw_combo = (
L636               0.20*_nz('REV_Q_YOY')
L637             + 0.10*_nz('REV_YOY_ACC')
L638             + 0.10*_nz('REV_ANN_STREAK')
L639             - 0.05*_nz('REV_YOY_VAR')
L640             + 0.10*_nz('TREND_SLOPE_REV')
L641             + 0.15*_nz('EPS_Q_YOY')
L642             + 0.05*_nz('EPS_POS')
L643             + 0.20*_nz('TREND_SLOPE_EPS')
L644             + 0.05*_nz('TREND_SLOPE_REV_YR')
L645             + 0.03*_nz('TREND_SLOPE_EPS_YR')
L646             + 0.10*_nz('FCF_MGN')
L647             + 0.05*_nz('RULE40')
L648         )
L649         df_z['GROWTH_F_RAW'] = grw_combo
L650         df_z['GROWTH_F'] = robust_z(grw_combo).clip(-3.0, 3.0)
L651
L652         # Debug dump for GRW composition (console OFF by default; enable only with env)
L653         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L654             try:
L655                 i = df_z[['GROWTH_F', 'GROWTH_F_RAW']].copy()
L656                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L657                 limit = max(0, min(40, len(i)))
L658                 print("[DEBUG: GRW]")
L659                 for t in i.index[:limit]:
L660         
```