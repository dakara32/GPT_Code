```text
.DataFrame(index=df.index)
L625         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L626         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L627         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L628
L629         # === Growth深掘り系（欠損保持z + RAW併載） ===
L630         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L631         for col in grw_cols:
L632             if col in df.columns:
L633                 raw = pd.to_numeric(df[col], errors="coerce")
L634                 df_z[col] = robust_z_keepnan(raw)
L635                 df_z[f'{col}_RAW'] = raw
L636         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L637             if k in df.columns and k not in df_z.columns:
L638                 raw = pd.to_numeric(df[k], errors="coerce")
L639                 df_z[k] = robust_z_keepnan(raw)
L640                 df_z[f'{k}_RAW'] = raw
L641         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L642
L643         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L644         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L645         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L646
L647         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L648         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L649         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L650
L651         # ===== トレンドスロープ算出 =====
L652         def zpos(x):
L653             arr = robust_z(x)
L654             idx = getattr(x, 'index', df_z.index)
L655             return pd.Series(arr, index=idx).fillna(0.0)
L656
L657         def relu(x):
L658             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L659             return ser.clip(lower=0).fillna(0.0)
L660
L661         # 売上トレンドスロープ（四半期）
L662         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L663         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L664         slope_rev_combo = slope_rev - 0.25*noise_rev
L665         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L666         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L667
L668         # EPSトレンドスロープ（四半期）
L669         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L670         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L671         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L672
L673         # 年次トレンド（サブ）
L674         slope_rev_yr = zpos(df_z['REV_YOY'])
L675         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L676         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L677         streak_yr = streak_base / (streak_base.abs() + 1.0)
L678         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L679         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L680         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L681         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L682         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L683
L684         # ===== 新GRW合成式（SEPA寄りシフト） =====
L685         _nz = lambda name: df_z.get(name, pd.Series(0.0, index=df_z.index)).fillna(0.0)
L686         grw_combo = (
L687               0.20*_nz('REV_Q_YOY')
L688             + 0.10*_nz('REV_YOY_ACC')
L689             + 0.10*_nz('REV_ANN_STREAK')
L690             - 0.05*_nz('REV_YOY_VAR')
L691             + 0.10*_nz('TREND_SLOPE_REV')
L692             + 0.15*_nz('EPS_Q_YOY')
L693             + 0.05*_nz('EPS_POS')
L694             + 0.20*_nz('TREND_SLOPE_EPS')
L695             + 0.05*_nz('TREND_SLOPE_REV_YR')
L696             + 0.03*_nz('TREND_SLOPE_EPS_YR')
L697             + 0.10*_nz('FCF_MGN')
L698             + 0.05*_nz('RULE40')
L699         )
L700         df_z['GROWTH_F_RAW'] = grw_combo
L701         df_z['GROWTH_F'] = robust_z(grw_combo).clip(-3.0, 3.0)
L702
L703         # Debug dump for GRW composition (console OFF by default; enable only with env)
L704         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L705             try:
L706                 i = df_z[['GROWTH_F', 'GROWTH_F_RAW']].copy()
L707                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L708                 limit = max(0, min(40, len(i)))
L709                 print("[DEBUG: GRW]")
L710                 for t in i.index[:limit]:
L711                     row = i.loc[t]
L712                     parts = [f"GROWTH_F={row['GROWTH_F']:.3f}"]
L713                     if pd.notna(row.get('GROWTH_F_RAW')):
L714                         parts.append(f"GROWTH_F_RAW={row['GROWTH_F_RAW']:.3f}")
L715                     print(f"Ticker: {t} | " + " ".join(parts))
L716                 print()
L717             except Exception as exc:
L718                 print(f"[ERR] GRW debug dump failed: {exc}")
L719
L720         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L721             + 0.15*df_z['TR_str']
L722             + 0.15*df_z['RS_SLOPE_6W']
L723             + 0.15*df_z['RS_SLOPE_13W']
L724             + 0.10*df_z['MA200_SLOPE_5M']
L725             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L726         df_z['VOL'] = robust_z(df['BETA'])
L727         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L728         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L729
L730         _dump_dfz(df_z=df_z, debug_mode=getattr(cfg, "debug_mode", False))
L731
L732         # === begin: BIO LOSS PENALTY =====================================
L733         try:
L734             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L735         except Exception:
L736             penalty_z = 0.8
L737
L738         def _is_bio_like(t: str) -> bool:
L739             inf = info.get(t, {}) if isinstance(info, dict) else {}
L740             sec = str(inf.get("sector", "")).lower()
L741             ind = str(inf.get("industry", "")).lower()
L742             if "health" not in sec:
L743                 return False
L744             keys = ("biotech", "biopharma", "pharma")
L745             return any(k in ind for k in keys)
L746
L747         tickers_s = pd.Index(df_z.index)
L748         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L749         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L750         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L751
L752         if bool(mask_bio_loss.any()) and penalty_z > 0:
L753             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L754             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L755         # === end: BIO LOSS PENALTY =======================================
L756
L757         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L758         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L759
L760         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L761         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L762         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L763         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L764
L765         # --- 重みは cfg を優先（外部があればそれを使用） ---
L766         # ① 全銘柄で G/D スコアを算出（unmasked）
L767         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L768
L769         d_comp = pd.concat({
L770             'QAL': df_z['D_QAL'],
L771             'YLD': df_z['D_YLD'],
L772             'VOL': df_z['D_VOL_RAW'],
L773             'TRD': df_z['D_TRD']
L774         }, axis=1)
L775         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L776         globals()['D_WEIGHTS_EFF'] = dw.copy()
L777         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L778
L779         # ② テンプレ判定（既存ロジックそのまま）
L780         mask = df['trend_template']
L781         if not bool(mask.any()):
L782             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L783                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L784                 (df.get('RS', np.nan) >= 0.08) &
L785                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L786                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L787                 (df.get('MA150_OVER_200', np.nan) > 0) &
L788                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L789                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L790             df['trend_template'] = mask
L791
L792         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L793         g_score = g_score_all.loc[mask]
L794         Scorer.g_score = g_score
L795         df_z['GSC'] = g_score_all
L796         df_z['DSC'] = d_score_all
L797
L798         try:
L799             current = (pd.read_csv("current_tickers.csv")
L800                   .iloc[:, 0]
L801                   .str.upper()
L802                   .tolist())
L803         except FileNotFoundError:
L804             warnings.warn("current_tickers.csv not found — bonus skipped")
L805             current = []
L806
L807         mask_bonus = g_score.index.isin(current)
L808         if mask_bonus.any():
L809             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L810             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L811             # 2) g 側の σ を取り、NaN なら 0 に丸める
L812             sigma_g = g_score.std()
L813             if pd.isna(sigma_g):
L814                 sigma_g = 0.0
L815             bonus_g = round(k * sigma_g, 3)
L816             g_score.loc[mask_bonus] += bonus_g
L817             Scorer.g_score = g_score
L818             # 3) D 側も同様に σ の NaN をケア
L819             sigma_d = d_score_all.std()
L820             if pd.isna(sigma_d):
L821                 sigma_d = 0.0
L822             bonus_d = round(k * sigma_d, 3)
L823             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L824
L825         try:
L826             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L827         except Exception:
L828             pass
L829
L830         df_full = df.copy()
L831         df_full_z = df_z.copy()
L832
L833         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L834         return FeatureBundle(df=df,
L835             df_z=df_z,
L836             g_score=g_score,
L837             d_score_all=d_score_all,
L838             missing_logs=pd.DataFrame(missing_logs),
L839             df_full=df_full,
L840             df_full_z=df_full_z,
L841             scaler=None)
L842
L843 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L844     """
L845     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L846     次の列を feature_df に追加する（index=ticker）。
L847       - G_BREAKOUT_recent_5d : bool
L848       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L849       - G_PULLBACK_recent_5d : bool
L850       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L851       - G_PIVOT_price        : float
L852     失敗しても例外は握り潰し、既存処理を阻害しない。
L853     """
L854     try:
L855         px   = bundle.px                      # 終値 DataFrame
L856  
```