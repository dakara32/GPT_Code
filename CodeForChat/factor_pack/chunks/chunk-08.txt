```text
L372
L373         r12  = px.divide(px.shift(252)).sub(1.0)
L374         br12 = spx.divide(spx.shift(252)).sub(1.0)
L375         r1   = px.divide(px.shift(22)).sub(1.0)
L376         br1  = spx.divide(spx.shift(22)).sub(1.0)
L377         rs   = 0.7*(r12.sub(br12, axis=0)) + 0.3*(r1.sub(br1, axis=0))
L378         tt &= (rs >= 0.10)
L379
L380         return tt.fillna(False).sum(axis=1).astype(int)
L381
L382     # ---- スコア集計（DTO/Configを受け取り、FeatureBundleを返す） ----
L383     def aggregate_scores(self, ib: Any, cfg):
L384         if cfg is None:
L385             raise ValueError("cfg is required; pass factor.PipelineConfig")
L386         self._validate_ib_for_scorer(ib)
L387
L388         px, spx, tickers = ib.px, ib.spx, ib.tickers
L389         tickers_bulk, info, eps_df, fcf_df = ib.tickers_bulk, ib.info, ib.eps_df, ib.fcf_df
L390
L391         df, missing_logs = pd.DataFrame(index=tickers), []
L392         for t in tickers:
L393             d, s = info[t], px[t]; ev = self.ev_fallback(d, tickers_bulk.tickers[t])
L394             # --- 基本特徴 ---
L395             df.loc[t,'TR']   = self.trend(s)
L396             df.loc[t,'EPS']  = _scalar(eps_df.loc[t,'EPS_TTM']) if t in eps_df.index else np.nan
L397             df.loc[t,'EPS_Q'] = _scalar(eps_df.loc[t,'EPS_Q_LastQ']) if t in eps_df.index else np.nan
L398             df.loc[t,'REV_TTM'] = _scalar(eps_df.loc[t,'REV_TTM']) if t in eps_df.index else np.nan
L399             df.loc[t,'REV_Q']   = _scalar(eps_df.loc[t,'REV_Q_LastQ']) if t in eps_df.index else np.nan
L400             df.loc[t,'REV']  = d.get('revenueGrowth',np.nan)
L401             df.loc[t,'ROE']  = d.get('returnOnEquity',np.nan)
L402             df.loc[t,'BETA'] = self.calc_beta(s, spx, lookback=252)
L403
L404             # --- 配当（欠損補完含む） ---
L405             div = d.get('dividendYield') if d.get('dividendYield') is not None else d.get('trailingAnnualDividendYield')
L406             if div is None or pd.isna(div):
L407                 try:
L408                     divs = yf.Ticker(t).dividends
L409                     if divs is not None and not divs.empty:
L410                         last_close = s.iloc[-1]; div_1y = divs[divs.index >= (divs.index.max() - pd.Timedelta(days=365))].sum()
L411                         if last_close and last_close>0: div = float(div_1y/last_close)
L412                 except Exception: pass
L413             df.loc[t,'DIV'] = 0.0 if (div is None or pd.isna(div)) else float(div)
L414
L415             # --- FCF/EV ---
L416             fcf_val = fcf_df.loc[t,'FCF_TTM'] if t in fcf_df.index else np.nan
L417             df.loc[t,'FCF'] = (fcf_val/ev) if (pd.notna(fcf_val) and pd.notna(ev) and ev>0) else np.nan
L418
L419             # --- モメンタム・ボラ関連 ---
L420             df.loc[t,'RS'], df.loc[t,'TR_str'] = self.rs(s, spx), self.tr_str(s)
L421             r, rm = s.pct_change().dropna(), spx.pct_change().dropna()
L422             n = int(min(len(r), len(rm)))
L423
L424             DOWNSIDE_DEV = np.nan
L425             if n>=60:
L426                 r6 = r.iloc[-min(len(r),126):]; neg = r6[r6<0]
L427                 if len(neg)>=10: DOWNSIDE_DEV = float(neg.std(ddof=0)*np.sqrt(252))
L428             df.loc[t,'DOWNSIDE_DEV'] = DOWNSIDE_DEV
L429
L430             MDD_1Y = np.nan
L431             try:
L432                 w = s.iloc[-min(len(s),252):].dropna()
L433                 if len(w)>=30:
L434                     roll_max = w.cummax(); MDD_1Y = float((w/roll_max - 1.0).min())
L435             except Exception: pass
L436             df.loc[t,'MDD_1Y'] = MDD_1Y
L437
L438             RESID_VOL = np.nan
L439             if n>=120:
L440                 rr, rrm = r.iloc[-n:].align(rm.iloc[-n:], join='inner')
L441                 if len(rr)==len(rrm) and len(rr)>=120 and rrm.var()>0:
L442                     beta = float(np.cov(rr, rrm)[0,1]/np.var(rrm)); resid = rr - beta*rrm
L443                     RESID_VOL = float(resid.std(ddof=0)*np.sqrt(252))
L444             df.loc[t,'RESID_VOL'] = RESID_VOL
L445
L446             DOWN_OUTPERF = np.nan
L447             if n>=60:
L448                 m, x = rm.iloc[-n:], r.iloc[-n:]; mask = m<0
L449                 if mask.sum()>=10:
L450                     mr, sr = float(m[mask].mean()), float(x[mask].mean())
L451                     DOWN_OUTPERF = (sr - mr)/abs(mr) if mr!=0 else np.nan
L452             df.loc[t,'DOWN_OUTPERF'] = DOWN_OUTPERF
L453
L454             # --- 長期移動平均/位置 ---
L455             sma200 = s.rolling(200).mean(); df.loc[t,'EXT_200'] = np.nan
L456             if pd.notna(sma200.iloc[-1]) and sma200.iloc[-1]!=0: df.loc[t,'EXT_200'] = abs(float(s.iloc[-1]/sma200.iloc[-1]-1.0))
L457
L458             # --- 配当の詳細系 ---
L459             DIV_TTM_PS=DIV_VAR5=DIV_YOY=DIV_FCF_COVER=np.nan
L460             try:
L461                 divs = yf.Ticker(t).dividends.dropna()
L462                 if not divs.empty:
L463                     last_close = s.iloc[-1]; div_1y = float(divs[divs.index >= (divs.index.max()-pd.Timedelta(days=365))].sum())
L464                     DIV_TTM_PS = div_1y if div_1y>0 else np.nan
L465                     ann = divs.groupby(divs.index.year).sum()
L466                     if len(ann)>=2 and ann.iloc[-2]!=0: DIV_YOY = float(ann.iloc[-1]/ann.iloc[-2]-1.0)
L467                     tail = ann.iloc[-5:] if len(ann)>=5 else ann
L468                     if len(tail)>=3 and tail.mean()!=0: DIV_VAR5 = float(tail.std(ddof=1)/abs(tail.mean()))
L469                 so = d.get('sharesOutstanding',None)
L470                 if so and pd.notna(DIV_TTM_PS) and pd.notna(fcf_val) and fcf_val!=0:
L471                     DIV_FCF_COVER = float((fcf_val)/(DIV_TTM_PS*float(so)))
L472             except Exception: pass
L473             df.loc[t,'DIV_TTM_PS'], df.loc[t,'DIV_VAR5'], df.loc[t,'DIV_YOY'], df.loc[t,'DIV_FCF_COVER'] = DIV_TTM_PS, DIV_VAR5, DIV_YOY, DIV_FCF_COVER
L474
L475             # --- 財務安定性 ---
L476             df.loc[t,'DEBT2EQ'], df.loc[t,'CURR_RATIO'] = d.get('debtToEquity',np.nan), d.get('currentRatio',np.nan)
L477
L478             # --- EPS 変動 ---
L479             EPS_VAR_8Q = np.nan
L480             try:
L481                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L482                 if qe is not None and not qe.empty and so:
L483                     eps_q = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L484                     if len(eps_q)>=4: EPS_VAR_8Q = float(eps_q.iloc[-min(8,len(eps_q)):].std(ddof=1))
L485             except Exception: pass
L486             df.loc[t,'EPS_VAR_8Q'] = EPS_VAR_8Q
L487
L488             # --- サイズ/流動性 ---
L489             df.loc[t,'MARKET_CAP'] = d.get('marketCap',np.nan); adv60 = np.nan
L490             try:
L491                 vol_series = ib.data['Volume'][t].dropna()
L492                 if len(vol_series)>=5 and len(s)==len(vol_series):
L493                     dv = (vol_series*s).rolling(60).mean(); adv60 = float(dv.iloc[-1])
L494             except Exception: pass
L495             df.loc[t,'ADV60_USD'] = adv60
L496
L497             # --- 売上/利益の加速度等 ---
L498             REV_Q_YOY=EPS_Q_YOY=REV_YOY_ACC=REV_YOY_VAR=np.nan
L499             REV_ANNUAL_STREAK = REV_YOY = np.nan
L500             EPS_YOY = np.nan
L501             try:
L502                 qe, so = tickers_bulk.tickers[t].quarterly_earnings, d.get('sharesOutstanding',None)
L503                 sec_rev_series = (d.get('SEC_REV_Q_SERIES') or [])
L504                 if sec_rev_series:
L505                     rev = pd.Series(sec_rev_series, dtype=float).dropna()
L506                 elif qe is not None and not qe.empty and 'Revenue' in qe.columns:
L507                     rev = qe['Revenue'].dropna().astype(float)
L508                 else:
L509                     rev = pd.Series([], dtype=float)
L510                 if not rev.empty:
L511                     if len(rev)>=5: REV_Q_YOY = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5])
L512                     if len(rev)>=6:
L513                         yoy_now = _safe_div(rev.iloc[-1]-rev.iloc[-5], rev.iloc[-5]); yoy_prev = _safe_div(rev.iloc[-2]-rev.iloc[-6], rev.iloc[-6])
L514                         if pd.notna(yoy_now) and pd.notna(yoy_prev): REV_YOY_ACC = yoy_now - yoy_prev
L515                     yoy_list=[]
L516                     for k in range(1,5):
L517                         if len(rev)>=4+k:
L518                             y = _safe_div(rev.iloc[-k]-rev.iloc[-(k+4)], rev.iloc[-(k+4)])
L519                             if pd.notna(y): yoy_list.append(y)
L520                     if len(yoy_list)>=2: REV_YOY_VAR = float(np.std(yoy_list, ddof=1))
L521                     # NEW: 年次の持続性（直近から遡って前年比プラスが何年連続か、四半期4本揃う完全年のみ）
L522                     try:
L523                         if isinstance(rev.index, pd.DatetimeIndex):
L524                             g = rev.groupby(rev.index.year)
L525                             ann_sum, cnt = g.sum(), g.count()
L526                             ann_sum = ann_sum[cnt >= 4]
L527                             if len(ann_sum) >= 2:
L528                                 yoy = ann_sum.pct_change().dropna()
L529                                 if not yoy.empty:
L530                                     REV_YOY = float(yoy.iloc[-1])
L531                                 streak = 0
L532                                 for v in yoy.iloc[::-1]:
L533                                     if pd.isna(v) or v <= 0:
L534                                         break
L535                                     streak += 1
L536                                 REV_ANNUAL_STREAK = float(streak)
L537                     except Exception:
L538                         pass
L539                 sec_eps_series = (d.get('SEC_EPS_Q_SERIES') or [])
L540                 if sec_eps_series:
L541                     eps_series = pd.Series(sec_eps_series, dtype=float).replace([np.inf,-np.inf],np.nan)
L542                 elif qe is not None and not qe.empty and 'Earnings' in qe.columns and so:
L543                     eps_series = (qe['Earnings'].dropna().astype(float)/float(so)).replace([np.inf,-np.inf],np.nan)
L544                 else:
L545                     eps_series = pd.Series([], dtype=float)
L546                 if not eps_series.empty:
L547                     if len(eps_series)>=5 and pd.notna(eps_series.iloc[-5]) and eps_series.iloc[-5]!=0:
L548                         EPS_Q_YOY = _safe_div(eps_series.iloc[-1]-eps_series.iloc[-5], eps_series.iloc[-5])
L549                     try:
L550                         if isinstance(eps_series.index, pd.DatetimeIndex):
L551                             g_eps = eps_series.groupby(eps_series.index.year)
L552                             ann_eps, cnt_eps = g_eps.sum(), g_eps.count()
L553                             ann_eps = ann_eps[cnt_eps >= 4]
L554                             if len(ann_eps) >= 2:
L555                                 eps_yoy = ann_eps.pct_change().dropna()
L556                                 if not eps_yoy.empty:
L557                                     EPS_YOY = float(eps_yoy.iloc[-1])
L558                     except Exception:
L559                         pass
L560             except Exception: pass
L561             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L562             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L563             df.loc[t,'REV_YOY'] = REV_YOY
L564             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L565             df.loc[t,'EPS_YOY'] = EPS_YOY
L566
L567             # --- Rule of 40 や周辺 ---
L568             total_rev_ttm = d.get('totalRevenue',np.nan)
L569             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L570             df.loc[t,'FCF_MGN'] = FCF_MGN
L571             rule40 = np.nan
L572             try:
L573                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L574             except Exception: pass
L575    
```