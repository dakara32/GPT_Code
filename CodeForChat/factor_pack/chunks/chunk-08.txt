```text
                lam=cfg.drrs.G.get("lam", 0.68),
L1635                 lookback=cfg.drrs.G.get("lookback", 252),
L1636                 shrink=cfg.drrs.shrink, g_fixed_tickers=None, mu=0.0)
L1637         else:
L1638             init = agg.nlargest(min(cfg.drrs.corrM, len(agg))).index.tolist()
L1639             g_fixed = getattr(sc, "_top_G", None)
L1640             res = selector.select_bucket_drrs(returns_df=inb.returns, score_ser=agg, pool_tickers=init, k=n_target,
L1641                 n_pc=cfg.drrs.D.get("n_pc", 4), gamma=cfg.drrs.D.get("gamma", 0.8),
L1642                 lam=cfg.drrs.D.get("lam", 0.85),
L1643                 lookback=cfg.drrs.D.get("lookback", 504),
L1644                 shrink=cfg.drrs.shrink, g_fixed_tickers=g_fixed,
L1645                 mu=cfg.drrs.cross_mu_gd)
L1646         pick = res["tickers"]; avg_r = res["avg_res_corr"]
L1647         sum_sc = res["sum_score"]; obj = res["objective"]
L1648         if group == "D":
L1649             _, pick = _disjoint_keepG(getattr(sc, "_top_G", []), pick, init)
L1650             T.log("selection finalized (G/D)")
L1651     try:
L1652         inc = [t for t in exist if t in agg.index]
L1653         pick = _sticky_keep_current(
L1654             agg=agg, pick=pick, incumbents=inc, n_target=n_target,
L1655             delta_z=SWAP_DELTA_Z, keep_buffer=SWAP_KEEP_BUFFER
L1656         )
L1657     except Exception as _e:
L1658         print(f"[warn] sticky_keep_current skipped: {str(_e)}")
L1659     # --- Near-Miss: 惜しくも選ばれなかった上位10を保持（Slack表示用） ---
L1660     # 5) Near-Miss と最終集計Seriesを保持（表示専用。計算へ影響なし）
L1661     try:
L1662         pool = agg.drop(index=[t for t in pick if t in agg.index], errors="ignore")
L1663         near10 = list(pool.sort_values(ascending=False).head(10).index)
L1664         setattr(sc, f"_near_{group}", near10)
L1665         setattr(sc, f"_agg_{group}", agg)
L1666     except Exception:
L1667         pass
L1668
L1669     if group == "D":
L1670         T.log("save done")
L1671     if group == "G":
L1672         sc._top_G = pick
L1673     return pick, avg_r, sum_sc, obj
L1674
L1675 def run_pipeline() -> SelectionBundle:
L1676     """
L1677     G/D共通フローの入口。I/Oはここだけで実施し、計算はScorerに委譲。
L1678     Slack文言・丸め・順序は既存の Output を用いて変更しない。
L1679     """
L1680     inb = io_build_input_bundle()
L1681     cfg = PipelineConfig(
L1682         weights=WeightsConfig(g=g_weights, d=D_weights),
L1683         drrs=DRRSParams(
L1684             corrM=corrM, shrink=DRRS_SHRINK,
L1685             G=DRRS_G, D=DRRS_D, cross_mu_gd=CROSS_MU_GD
L1686         ),
L1687         price_max=CAND_PRICE_MAX,
L1688         debug_mode=debug_mode
L1689     )
L1690     sc = Scorer()
L1691     top_G, avgG, sumG, objG = run_group(sc, "G", inb, cfg, N_G)
L1692     poolG = list(getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1693     alpha = Scorer.spx_to_alpha(inb.spx)
L1694     sectors = {t:(inb.info.get(t,{}).get("sector") or "U") for t in poolG}; scores = {t:Scorer.g_score.get(t,0.0) for t in poolG}
L1695     top_G = Scorer.pick_top_softcap(scores, sectors, N=N_G, cap=2, alpha=alpha, hard=5)
L1696     sc._top_G = top_G
L1697     try:
L1698         aggG = getattr(sc, "_agg_G", pd.Series(dtype=float)).dropna().sort_values(ascending=False)
L1699         sc._near_G = [t for t in aggG.index if t not in set(top_G)][:10]
L1700     except Exception:
L1701         pass
L1702     base = sum(Scorer.g_score.get(t,0.0) for t in poolG[:N_G])
L1703     effs = sum(Scorer.g_score.get(t,0.0) for t in top_G)
L1704     print(f"[soft_cap2] score_cost={(base-effs)/max(1e-9,abs(base)):.2%}, alpha={alpha:.3f}")
L1705     top_D, avgD, sumD, objD = run_group(sc, "D", inb, cfg, N_D)
L1706     poolD = list(getattr(sc, "_agg_D", pd.Series(dtype=float)).dropna().sort_values(ascending=False).index)
L1707     fb = getattr(sc, "_feat", None)
L1708     near_G = getattr(sc, "_near_G", [])
L1709     selected12 = list(top_G)
L1710     df = fb.df if fb is not None else pd.DataFrame()
L1711     guni = _infer_g_universe(df, selected12, near_G)
L1712     try:
L1713         fire_recent = [t for t in guni
L1714                        if (str(df.at[t, "G_BREAKOUT_recent_5d"]) == "True") or
L1715                           (str(df.at[t, "G_PULLBACK_recent_5d"]) == "True")]
L1716     except Exception: fire_recent = []
L1717
L1718     lines = [
L1719         "【G枠レポート｜週次モニタ（直近5営業日）】",
L1720         "【凡例】🔥=直近5営業日内に「ブレイクアウト確定」または「押し目反発」を検知",
L1721         f"選定{N_G}: {', '.join(_fmt_with_fire_mark(selected12, df))}" if selected12 else f"選定{N_G}: なし",
L1722         f"次点10: {', '.join(_fmt_with_fire_mark(near_G, df))}" if near_G else "次点10: なし",]
L1723
L1724     if fire_recent:
L1725         fire_list = ", ".join([_label_recent_event(t, df) for t in fire_recent])
L1726         lines.append(f"過去5営業日の検知: {fire_list}")
L1727     else:
L1728         lines.append("過去5営業日の検知: なし")
L1729
L1730     try:
L1731         webhook = os.environ.get("SLACK_WEBHOOK_URL", "")
L1732         if webhook:
L1733             requests.post(webhook, json={"text": "\n".join([s for s in lines if s != ""])}, timeout=10)
L1734     except Exception:
L1735         pass
L1736
L1737     out = Output()
L1738     # 表示側から選定時の集計へアクセスできるように保持（表示専用・副作用なし）
L1739     try:
L1740         out._sc = sc
L1741     except Exception:
L1742         pass
L1743     if hasattr(sc, "_feat"):
L1744         try:
L1745             fb = sc._feat
L1746             out.miss_df = fb.missing_logs
L1747             out.display_results(
L1748                 exist=exist,
L1749                 bench=bench,
L1750                 df_z=fb.df_z,
L1751                 g_score=fb.g_score,
L1752                 d_score_all=fb.d_score_all,
L1753                 init_G=top_G,
L1754                 init_D=top_D,
L1755                 top_G=top_G,
L1756                 top_D=top_D,
L1757                 df_full_z=getattr(fb, "df_full_z", None),
L1758                 prev_G=getattr(sc, "_prev_G", exist),
L1759                 prev_D=getattr(sc, "_prev_D", exist),
L1760             )
L1761             try:
L1762                 DBG_COLS = ["GSC", "GROWTH_F", "MOM", "VOL", "DBGRW.GROWTH_F", "DBGRW.MOM", "DBGRW.VOL"]
L1763                 cols = [c for c in DBG_COLS if c in fb.df_z.columns]
L1764                 idx = [t for t in top_G if t in fb.df_z.index]
L1765                 out.debug_table = fb.df_z.loc[idx, cols].round(2) if idx and cols else None
L1766             except Exception:
L1767                 out.debug_table = None
L1768         except Exception:
L1769             pass
L1770     out.notify_slack()
L1771     sb = SelectionBundle(resG={"tickers": top_G, "avg_res_corr": avgG,
L1772               "sum_score": sumG, "objective": objG},
L1773         resD={"tickers": top_D, "avg_res_corr": avgD,
L1774               "sum_score": sumD, "objective": objD},
L1775         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1776
L1777     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1778     try:
L1779         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1780               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1781               .sort_values("G_plus_D")
L1782               .head(10)
L1783               .round(3))
L1784         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1785         _post_slack({"text": f"```{low_msg}```"})
L1786     except Exception as _e:
L1787         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1788
L1789     return sb
L1790
L1791 if __name__ == "__main__":
L1792     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #   - missing_logs: pd.DataFrame   … 補完後の欠損ログ
L26 #
L27 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L28 # =============================================================================
L29
L30 import json, logging, os, requests, sys, warnings
L31 import numpy as np
L32 import pandas as pd
L33 import yfinance as yf
L34 from typing import Any, TYPE_CHECKING
L35 from scipy.stats import zscore
L36 from datetime import datetime as _dt
L37
L38 if TYPE_CHECKING:
L39     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L40
L41 logger = logging.getLogger(__name__)
L42
L43
L44 def _log(stage, msg):
L45     try:
L46         print(f"[DBG][{_dt.utcnow().isoformat(timespec='seconds')}Z][{stage}] {msg}")
L47     except Exception:
L48         print(f"[DBG][{stage}] {msg}")
L49
L50
L51 # ---- Dividend Helpers -------------------------------------------------------
L52 def _last_close(t, price_map=None):
L53     if price_map and (c := price_map.get(t)) is not None: return float(c)
L54     try:
L55         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L56         return float(h.iloc[-1]) if len(h) else np.nan
L57     except Exception:
L58         return np.nan
L59
L60 def _ttm_div_sum(t, lookback_days=400):
L61     try:
L62         div = yf.Ticker(t).dividends
L63         if div is None or len(div) == 0: return 0.0
L64         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L65         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L66         return ttm if ttm > 0 else float(div.tail(4).sum())
L67     except Exception:
L68         return 0.0
L69
L70 def ttm_div_yield_portfolio(tickers, price_map=None):
L71     ys = [(lambda c, s: (s/c) if (np.isfinite(c) and c>0 and s>0) else 0.0)(_last_close(t, price_map), _ttm_div_sum(t)) for t in tickers]
L72     return float(np.mean(ys)) if ys else 0.0
L73
L74 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L75 def _as_numeric_series(s: pd.Series) -> pd.Series:
L76     """Series を float dtype に強制変換し、index を保持する。"""
L77     if s is None:
L78         return pd.Series(dtype=float)
L79     v = pd.to_numeric(s, errors="coerce")
L80     return pd.Series(v.values, index=getattr(s, "index", None), dtype=float, name=getattr(s, "name", None))
L81
L82
L83 def _scalar(x):
L84     """
L85     入力を安全に float スカラへ変換する。
L86
L87     許容する入力パターン:
L88       - pandas.Series: 非NaNの最後の値を採用
L89       - numpy スカラ/配列: 最後の要素を採用
L90       - その他の数値っぽい値: float へ変換
L91
L92     変換できない場合は np.nan を返す。
L93     """
L94
L95     if x is None:
L96         return np.nan
L97
L98     # pandas.Series の場合は非NaNの最後の値を採用
L99     if isinstance(x, pd.Series):
L100         s = pd.to_numeric(x, errors="coerce").dropna()
L101         return float(s.iloc[-1]) if not s.empty else np.nan
L102
L103     # numpy スカラ (item() を持つ) ※文字列は除外
L104     if hasattr(x, "item") and not isinstance(x, (str, bytes)):
L105         try:
L106             return float(x.item())
L107         except Exception:
L108             pass
L109
L110     # 配列様のオブジェクト
L111     try:
L112         arr = np.asarray(x, dtype=float).ravel()
L113         return float(arr[-1]) if arr.size 
```