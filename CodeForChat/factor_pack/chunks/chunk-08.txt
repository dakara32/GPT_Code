```text
REAK_D']: df_z[col] = robust_z(df[col])
L573         for col in ['REV_Q_YOY','EPS_Q_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']: df_z[col] = robust_z(df[col])
L574         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L575
L576         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L577         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L578         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L579         df_z['GROWTH_F']  = robust_z(
L580               0.25*df_z['REV']          # ↓0.30→0.25
L581             + 0.20*df_z['EPS_Q_YOY']
L582             + 0.15*df_z['REV_Q_YOY']
L583             + 0.15*df_z['REV_YOY_ACC']
L584             + 0.10*df_z['RULE40']
L585             + 0.10*df_z['FCF_MGN']
L586             + 0.10*df_z['EPS']          # ★追加：黒字優遇／赤字減点
L587             + 0.05*df_z['REV_ANN_STREAK']
L588             - 0.05*df_z['REV_YOY_VAR']
L589         ).clip(-3.0,3.0)
L590         df_z['MOM_F'] = robust_z(
L591               0.40*df_z['RS']
L592             + 0.15*df_z['TR_str']
L593             + 0.15*df_z['RS_SLOPE_6W']
L594             + 0.15*df_z['RS_SLOPE_13W']
L595             + 0.10*df_z['MA200_SLOPE_5M']
L596             + 0.10*df_z['MA200_UP_STREAK_D']
L597         ).clip(-3.0,3.0)
L598         df_z['VOL'] = robust_z(df['BETA'])
L599         df_z.rename(columns={'GROWTH_F':'GRW','MOM_F':'MOM','QUALITY_F':'QAL','YIELD_F':'YLD'}, inplace=True)
L600
L601         # === begin: BIO LOSS PENALTY =====================================
L602         try:
L603             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L604         except Exception:
L605             penalty_z = 0.8
L606
L607         def _is_bio_like(t: str) -> bool:
L608             inf = info.get(t, {}) if isinstance(info, dict) else {}
L609             sec = str(inf.get("sector", "")).lower()
L610             ind = str(inf.get("industry", "")).lower()
L611             if "health" not in sec:
L612                 return False
L613             keys = ("biotech", "biopharma", "pharma")
L614             return any(k in ind for k in keys)
L615
L616         tickers_s = pd.Index(df_z.index)
L617         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L618         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L619         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L620
L621         if bool(mask_bio_loss.any()) and penalty_z > 0:
L622             df_z.loc[mask_bio_loss, "GRW"] = df_z.loc[mask_bio_loss, "GRW"] - penalty_z
L623             df_z["GRW"] = df_z["GRW"].clip(-3.0, 3.0)
L624         # === end: BIO LOSS PENALTY =======================================
L625
L626         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L627         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L628
L629         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L630         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L631         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L632         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L633
L634         # --- 重みは cfg を優先（外部があればそれを使用） ---
L635         # ① 全銘柄で G/D スコアを算出（unmasked）
L636         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L637
L638         d_comp = pd.concat({
L639             'QAL': df_z['D_QAL'],
L640             'YLD': df_z['D_YLD'],
L641             'VOL': df_z['D_VOL_RAW'],
L642             'TRD': df_z['D_TRD']
L643         }, axis=1)
L644         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L645         globals()['D_WEIGHTS_EFF'] = dw.copy()
L646         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L647
L648         # ② テンプレ判定（既存ロジックそのまま）
L649         mask = df['trend_template']
L650         if not bool(mask.any()):
L651             mask = (
L652                 (df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L653                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L654                 (df.get('RS', np.nan) >= 0.08) &
L655                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L656                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L657                 (df.get('MA150_OVER_200', np.nan) > 0) &
L658                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L659                 (df.get('TR_str', np.nan) > 0)
L660             ).fillna(False)
L661             df['trend_template'] = mask
L662
L663         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L664         g_score = g_score_all.loc[mask]
L665         Scorer.g_score = g_score
L666         df_z['GSC'] = g_score_all
L667         df_z['DSC'] = d_score_all
L668
L669         try:
L670             current = (
L671                 pd.read_csv("current_tickers.csv")
L672                   .iloc[:, 0]
L673                   .str.upper()
L674                   .tolist()
L675             )
L676         except FileNotFoundError:
L677             warnings.warn("current_tickers.csv not found — bonus skipped")
L678             current = []
L679
L680         mask_bonus = g_score.index.isin(current)
L681         if mask_bonus.any():
L682             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L683             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L684             # 2) g 側の σ を取り、NaN なら 0 に丸める
L685             sigma_g = g_score.std()
L686             if pd.isna(sigma_g):
L687                 sigma_g = 0.0
L688             bonus_g = round(k * sigma_g, 3)
L689             g_score.loc[mask_bonus] += bonus_g
L690             Scorer.g_score = g_score
L691             # 3) D 側も同様に σ の NaN をケア
L692             sigma_d = d_score_all.std()
L693             if pd.isna(sigma_d):
L694                 sigma_d = 0.0
L695             bonus_d = round(k * sigma_d, 3)
L696             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L697
L698         try:
L699             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L700         except Exception:
L701             pass
L702
L703         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L704         return FeatureBundle(
L705             df=df,
L706             df_z=df_z,
L707             g_score=g_score,
L708             d_score_all=d_score_all,
L709             missing_logs=pd.DataFrame(missing_logs)
L710         )
L711
L712
L713 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L714     """
L715     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L716     次の列を feature_df に追加する（index=ticker）。
L717       - G_BREAKOUT_recent_5d : bool
L718       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L719       - G_PULLBACK_recent_5d : bool
L720       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L721       - G_PIVOT_price        : float
L722     失敗しても例外は握り潰し、既存処理を阻害しない。
L723     """
L724     try:
L725         px   = bundle.px                      # 終値 DataFrame
L726         hi   = bundle.data['High']
L727         lo   = bundle.data['Low']
L728         vol  = bundle.data['Volume']
L729         bench= bundle.spx                     # ベンチマーク Series
L730
L731         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L732         g_universe = getattr(self_obj, "g_universe", None)
L733         if g_universe is None:
L734             try:
L735                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L736             except Exception:
L737                 g_universe = list(feature_df.index)
L738         if not g_universe:
L739             return feature_df
L740
L741         # 指標
L742         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L743         ma50  = px[g_universe].rolling(50).mean()
L744         ma150 = px[g_universe].rolling(150).mean()
L745         ma200 = px[g_universe].rolling(200).mean()
L746         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L747         vol20 = vol[g_universe].rolling(20).mean()
L748         vol50 = vol[g_universe].rolling(50).mean()
L749
L750         # トレンドテンプレート合格
L751         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L752                             & (ma150 > ma200) & (ma200.diff() > 0)
L753
L754         # 汎用ピボット：直近65営業日の高値（当日除外）
L755         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L756
L757         # 相対力：年内高値更新
L758         bench_aligned = bench.reindex(px.index).ffill()
L759         rs = px[g_universe].div(bench_aligned, axis=0)
L760         rs_high = rs.rolling(252).max().shift(1)
L761
L762         # ブレイクアウト「発生日」：条件立ち上がり
L763         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L764                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L765         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L766
L767         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L768         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L769         volume_dryup = (vol20 / vol50) <= 1.0
L770         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L771         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L772         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L773
L774         # 直近N営業日内の発火 / 最終発生日
L775         rows = []
L776         for t in g_universe:
L777             def _recent_and_date(s, win):
L778                 sw = s[t].iloc[-win:]
L779                 if sw.any():
L780                     d = sw[sw].index[-1]
L781                     return True, d.strftime("%Y-%m-%d")
L782                 return False, ""
L783             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L784             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L785             rows.append((t, {
L786                 "G_BREAKOUT_recent_5d": br_recent,
L787                 "G_BREAKOUT_last_date": br_date,
L788                 "G_PULLBACK_recent_5d": pb_recent,
L789                 "G_PULLBACK_last_date": pb_date,
L790                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L791             }))
L792         flags = pd.DataFrame({k: v for k, v in rows}).T
L793
L794         # 列を作成・上書き
L795         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L796         for c in cols:
L797             if c not in feature_df.columns:
L798                 feature_df[c] = np.nan
L799         feature_df.loc[flags.index, flags.columns] = flags
L800
L801     except Exception:
L802         pass
L803     return feature_df
L804
L805
L806
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20    
```