```text

L566         df_z = pd.DataFrame(index=df.index)
L567         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L568         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L569         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L570
L571         # === Growth深掘り系（欠損保持z + RAW併載） ===
L572         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L573         for col in grw_cols:
L574             if col in df.columns:
L575                 raw = pd.to_numeric(df[col], errors="coerce")
L576                 df_z[col] = robust_z_keepnan(raw)
L577                 df_z[f'{col}_RAW'] = raw
L578         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L579             if k in df.columns and k not in df_z.columns:
L580                 raw = pd.to_numeric(df[k], errors="coerce")
L581                 df_z[k] = robust_z_keepnan(raw)
L582                 df_z[f'{k}_RAW'] = raw
L583         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L584
L585         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L586         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L587         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L588
L589         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L590         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L591         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L592
L593         # ===== トレンドスロープ算出 =====
L594         def zpos(x):
L595             arr = robust_z(x)
L596             idx = getattr(x, 'index', df_z.index)
L597             return pd.Series(arr, index=idx).fillna(0.0)
L598
L599         def relu(x):
L600             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L601             return ser.clip(lower=0).fillna(0.0)
L602
L603         # 売上トレンドスロープ（四半期）
L604         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L605         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L606         slope_rev_combo = slope_rev - 0.25*noise_rev
L607         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L608         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L609
L610         # EPSトレンドスロープ（四半期）
L611         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L612         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L613         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L614
L615         # 年次トレンド（サブ）
L616         slope_rev_yr = zpos(df_z['REV_YOY'])
L617         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L618         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L619         streak_yr = streak_base / (streak_base.abs() + 1.0)
L620         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L621         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L622         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L623         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L624         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L625
L626         # ===== 新GRW合成式（SEPA寄りシフト） =====
L627         _nz = lambda name: df_z.get(name, pd.Series(0.0, index=df_z.index)).fillna(0.0)
L628         grw_combo = (
L629               0.20*_nz('REV_Q_YOY')
L630             + 0.10*_nz('REV_YOY_ACC')
L631             + 0.10*_nz('REV_ANN_STREAK')
L632             - 0.05*_nz('REV_YOY_VAR')
L633             + 0.10*_nz('TREND_SLOPE_REV')
L634             + 0.15*_nz('EPS_Q_YOY')
L635             + 0.05*_nz('EPS_POS')
L636             + 0.20*_nz('TREND_SLOPE_EPS')
L637             + 0.05*_nz('TREND_SLOPE_REV_YR')
L638             + 0.03*_nz('TREND_SLOPE_EPS_YR')
L639             + 0.10*_nz('FCF_MGN')
L640             + 0.05*_nz('RULE40')
L641         )
L642         df_z['GROWTH_F_RAW'] = grw_combo
L643         df_z['GROWTH_F'] = robust_z(grw_combo).clip(-3.0, 3.0)
L644
L645         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L646             + 0.15*df_z['TR_str']
L647             + 0.15*df_z['RS_SLOPE_6W']
L648             + 0.15*df_z['RS_SLOPE_13W']
L649             + 0.10*df_z['MA200_SLOPE_5M']
L650             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L651         df_z['VOL'] = robust_z(df['BETA'])
L652         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L653         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L654
L655         # === begin: BIO LOSS PENALTY =====================================
L656         try:
L657             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L658         except Exception:
L659             penalty_z = 0.8
L660
L661         def _is_bio_like(t: str) -> bool:
L662             inf = info.get(t, {}) if isinstance(info, dict) else {}
L663             sec = str(inf.get("sector", "")).lower()
L664             ind = str(inf.get("industry", "")).lower()
L665             if "health" not in sec:
L666                 return False
L667             keys = ("biotech", "biopharma", "pharma")
L668             return any(k in ind for k in keys)
L669
L670         tickers_s = pd.Index(df_z.index)
L671         debug = bool(getattr(sys.modules.get("factor"), "debug_mode", False))
L672         if debug:
L673             print("[DEBUG: GRW]")
L674             for t in tickers_s:
L675                 print(f"Ticker: {t}")
L676                 print(f"  REV_Q_YOY        : {df_z.loc[t,'REV_Q_YOY']:+.2f}")
L677                 print(f"  REV_YOY_ACC      : {df_z.loc[t,'REV_YOY_ACC']:+.2f}")
L678                 print(f"  TREND_SLOPE_REV  : {df_z.loc[t,'TREND_SLOPE_REV']:+.2f}")
L679                 print(f"  EPS_Q_YOY        : {df_z.loc[t,'EPS_Q_YOY']:+.2f}")
L680                 print(f"  TREND_SLOPE_EPS  : {df_z.loc[t,'TREND_SLOPE_EPS']:+.2f}")
L681                 print(f"  FCF_MGN          : {df_z.loc[t,'FCF_MGN']:+.2f}")
L682                 print(f"  RULE40           : {df_z.loc[t,'RULE40']:+.2f}")
L683                 print(f"  GRW total        : {df_z.loc[t,'GROWTH_F']:+.2f}")
L684                 print("")
L685
L686         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L687         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L688         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L689
L690         if bool(mask_bio_loss.any()) and penalty_z > 0:
L691             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L692             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L693         # === end: BIO LOSS PENALTY =======================================
L694
L695         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L696         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L697
L698         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L699         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L700         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L701         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L702
L703         # --- 重みは cfg を優先（外部があればそれを使用） ---
L704         # ① 全銘柄で G/D スコアを算出（unmasked）
L705         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L706
L707         d_comp = pd.concat({
L708             'QAL': df_z['D_QAL'],
L709             'YLD': df_z['D_YLD'],
L710             'VOL': df_z['D_VOL_RAW'],
L711             'TRD': df_z['D_TRD']
L712         }, axis=1)
L713         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L714         globals()['D_WEIGHTS_EFF'] = dw.copy()
L715         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L716
L717         # ② テンプレ判定（既存ロジックそのまま）
L718         mask = df['trend_template']
L719         if not bool(mask.any()):
L720             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L721                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L722                 (df.get('RS', np.nan) >= 0.08) &
L723                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L724                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L725                 (df.get('MA150_OVER_200', np.nan) > 0) &
L726                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L727                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L728             df['trend_template'] = mask
L729
L730         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L731         g_score = g_score_all.loc[mask]
L732         Scorer.g_score = g_score
L733         df_z['GSC'] = g_score_all
L734         df_z['DSC'] = d_score_all
L735
L736         try:
L737             current = (pd.read_csv("current_tickers.csv")
L738                   .iloc[:, 0]
L739                   .str.upper()
L740                   .tolist())
L741         except FileNotFoundError:
L742             warnings.warn("current_tickers.csv not found — bonus skipped")
L743             current = []
L744
L745         mask_bonus = g_score.index.isin(current)
L746         if mask_bonus.any():
L747             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L748             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L749             # 2) g 側の σ を取り、NaN なら 0 に丸める
L750             sigma_g = g_score.std()
L751             if pd.isna(sigma_g):
L752                 sigma_g = 0.0
L753             bonus_g = round(k * sigma_g, 3)
L754             g_score.loc[mask_bonus] += bonus_g
L755             Scorer.g_score = g_score
L756             # 3) D 側も同様に σ の NaN をケア
L757             sigma_d = d_score_all.std()
L758             if pd.isna(sigma_d):
L759                 sigma_d = 0.0
L760             bonus_d = round(k * sigma_d, 3)
L761             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L762
L763         try:
L764             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L765         except Exception:
L766             pass
L767
L768         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L769         return FeatureBundle(df=df,
L770             df_z=df_z,
L771             g_score=g_score,
L772             d_score_all=d_score_all,
L773             missing_logs=pd.DataFrame(missing_logs))
L774
L775 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L776     """
L777     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L778     次の列を feature_df に追加する（index=ticker）。
L779       - G_BREAKOUT_recent_5d : bool
L780       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L781       - G_PULLBACK_recent_5d : bool
L782       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L783       - G_PIVOT_price        : float
L784     失敗しても例外は握り潰し、既存処理を阻害しない。
L785     """
L786     try:
L787         px   = bundle.px                      # 終値 DataFrame
L788         hi   = bundle.data['High']
L789         lo   = bundle.data['Low']
L790         vol  = bundle.data['Volume']
L791         bench= bundle.spx                     # ベンチマーク Series
L792
L793         # Gユニバース推定：self.g_universe 優先 
```