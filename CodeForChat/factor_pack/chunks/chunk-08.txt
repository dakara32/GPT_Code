```text
0         df_z.rename(columns={'GROWTH_F':'GRW','MOM_F':'MOM','QUALITY_F':'QAL','YIELD_F':'YLD'}, inplace=True)
L601
L602         # === begin: BIO LOSS PENALTY =====================================
L603         try:
L604             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L605         except Exception:
L606             penalty_z = 0.8
L607
L608         def _is_bio_like(t: str) -> bool:
L609             inf = info.get(t, {}) if isinstance(info, dict) else {}
L610             sec = str(inf.get("sector", "")).lower()
L611             ind = str(inf.get("industry", "")).lower()
L612             if "health" not in sec:
L613                 return False
L614             keys = ("biotech", "biopharma", "pharma")
L615             return any(k in ind for k in keys)
L616
L617         tickers_s = pd.Index(df_z.index)
L618         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L619         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L620         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L621
L622         if bool(mask_bio_loss.any()) and penalty_z > 0:
L623             df_z.loc[mask_bio_loss, "GRW"] = df_z.loc[mask_bio_loss, "GRW"] - penalty_z
L624             df_z["GRW"] = df_z["GRW"].clip(-3.0, 3.0)
L625         # === end: BIO LOSS PENALTY =======================================
L626
L627         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L628         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L629
L630         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L631         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L632         df_z['D_YLD']     = df['YLD']
L633         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L634
L635         # --- 重みは cfg を優先（外部があればそれを使用） ---
L636         # ① 全銘柄で G/D スコアを算出（unmasked）
L637         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L638
L639         d_comp = pd.concat({
L640             'QAL': df_z['D_QAL'],
L641             'YLD': df_z['D_YLD'],
L642             'VOL': df_z['D_VOL_RAW'],
L643             'TRD': df_z['D_TRD']
L644         }, axis=1)
L645         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L646         globals()['D_WEIGHTS_EFF'] = dw.copy()
L647         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L648
L649         # ② テンプレ判定（既存ロジックそのまま）
L650         mask = df['trend_template']
L651         if not bool(mask.any()):
L652             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L653                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L654                 (df.get('RS', np.nan) >= 0.08) &
L655                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L656                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L657                 (df.get('MA150_OVER_200', np.nan) > 0) &
L658                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L659                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L660             df['trend_template'] = mask
L661
L662         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L663         g_score = g_score_all.loc[mask]
L664         Scorer.g_score = g_score
L665         df_z['GSC'] = g_score_all
L666         df_z['DSC'] = d_score_all
L667
L668         try:
L669             current = (pd.read_csv("current_tickers.csv")
L670                   .iloc[:, 0]
L671                   .str.upper()
L672                   .tolist())
L673         except FileNotFoundError:
L674             warnings.warn("current_tickers.csv not found — bonus skipped")
L675             current = []
L676
L677         mask_bonus = g_score.index.isin(current)
L678         if mask_bonus.any():
L679             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L680             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L681             # 2) g 側の σ を取り、NaN なら 0 に丸める
L682             sigma_g = g_score.std()
L683             if pd.isna(sigma_g):
L684                 sigma_g = 0.0
L685             bonus_g = round(k * sigma_g, 3)
L686             g_score.loc[mask_bonus] += bonus_g
L687             Scorer.g_score = g_score
L688             # 3) D 側も同様に σ の NaN をケア
L689             sigma_d = d_score_all.std()
L690             if pd.isna(sigma_d):
L691                 sigma_d = 0.0
L692             bonus_d = round(k * sigma_d, 3)
L693             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L694
L695         try:
L696             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L697         except Exception:
L698             pass
L699
L700         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L701         return FeatureBundle(df=df,
L702             df_z=df_z,
L703             g_score=g_score,
L704             d_score_all=d_score_all,
L705             missing_logs=pd.DataFrame(missing_logs))
L706
L707 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L708     """
L709     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L710     次の列を feature_df に追加する（index=ticker）。
L711       - G_BREAKOUT_recent_5d : bool
L712       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L713       - G_PULLBACK_recent_5d : bool
L714       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L715       - G_PIVOT_price        : float
L716     失敗しても例外は握り潰し、既存処理を阻害しない。
L717     """
L718     try:
L719         px   = bundle.px                      # 終値 DataFrame
L720         hi   = bundle.data['High']
L721         lo   = bundle.data['Low']
L722         vol  = bundle.data['Volume']
L723         bench= bundle.spx                     # ベンチマーク Series
L724
L725         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L726         g_universe = getattr(self_obj, "g_universe", None)
L727         if g_universe is None:
L728             try:
L729                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L730             except Exception:
L731                 g_universe = list(feature_df.index)
L732         if not g_universe:
L733             return feature_df
L734
L735         # 指標
L736         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L737         ma50  = px[g_universe].rolling(50).mean()
L738         ma150 = px[g_universe].rolling(150).mean()
L739         ma200 = px[g_universe].rolling(200).mean()
L740         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L741         vol20 = vol[g_universe].rolling(20).mean()
L742         vol50 = vol[g_universe].rolling(50).mean()
L743
L744         # トレンドテンプレート合格
L745         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L746                             & (ma150 > ma200) & (ma200.diff() > 0)
L747
L748         # 汎用ピボット：直近65営業日の高値（当日除外）
L749         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L750
L751         # 相対力：年内高値更新
L752         bench_aligned = bench.reindex(px.index).ffill()
L753         rs = px[g_universe].div(bench_aligned, axis=0)
L754         rs_high = rs.rolling(252).max().shift(1)
L755
L756         # ブレイクアウト「発生日」：条件立ち上がり
L757         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L758                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L759         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L760
L761         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L762         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L763         volume_dryup = (vol20 / vol50) <= 1.0
L764         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L765         pullback_today = trend_template_ok & near_ema21_band & volume_dryup & pullback_bounce_confirmed
L766         pullback_event = pullback_today & ~pullback_today.shift(1).fillna(False)
L767
L768         # 直近N営業日内の発火 / 最終発生日
L769         rows = []
L770         for t in g_universe:
L771             def _recent_and_date(s, win):
L772                 sw = s[t].iloc[-win:]
L773                 if sw.any():
L774                     d = sw[sw].index[-1]
L775                     return True, d.strftime("%Y-%m-%d")
L776                 return False, ""
L777             br_recent, br_date = _recent_and_date(breakout_event, win_breakout)
L778             pb_recent, pb_date = _recent_and_date(pullback_event, win_pullback)
L779             rows.append((t, {
L780                 "G_BREAKOUT_recent_5d": br_recent,
L781                 "G_BREAKOUT_last_date": br_date,
L782                 "G_PULLBACK_recent_5d": pb_recent,
L783                 "G_PULLBACK_last_date": pb_date,
L784                 "G_PIVOT_price": float(pivot_price[t].iloc[-1]) if t in pivot_price.columns else float('nan'),
L785             }))
L786         flags = pd.DataFrame({k: v for k, v in rows}).T
L787
L788         # 列を作成・上書き
L789         cols = ["G_BREAKOUT_recent_5d","G_BREAKOUT_last_date","G_PULLBACK_recent_5d","G_PULLBACK_last_date","G_PIVOT_price"]
L790         for c in cols:
L791             if c not in feature_df.columns:
L792                 feature_df[c] = np.nan
L793         feature_df.loc[flags.index, flags.columns] = flags
L794
L795     except Exception:
L796         pass
L797     return feature_df
L798
```

## <.github/workflows/weekly-report.yml>
```text
L1 name: Weekly Stock Report
L2
L3 on:
L4   push:
L5     branches: [ main ]
L6     paths-ignore:
L7       - 'CodeForChat/**'
L8   schedule:
L9     - cron: '0 0 * * 6'  # UTC 00:00 → JST 09:00（土）
L10   workflow_dispatch:
L11
L12 jobs:
L13   build-and-report:
L14     runs-on: ubuntu-latest
L15     permissions:
L16       contents: write
L17
L18     steps:
L19       - name: Debug start
L20         run: echo '🚀 DEBUGstarted'
L21               
L22       - name: Checkout repository
L23         uses: actions/checkout@v3
L24
L25       - name: Setup Python
L26         uses: actions/setup-python@v5
L27         with:
L28           python-version: '3.x'
L29           cache: 'pip'
L30           cache-dependency-path: requirements.txt
L31
L32       - name: Install dependencies
L33         run: pip install -r requirements.txt
L34
L35       - name: Prepare results directory
L36         run: mkdir -p results
L37
L38       - name: Run factor & scoring
L39         env:
L40           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
L41           FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
L42           FIN_THREADS: "8"
L43         run: python factor.py
```

## <documents/README.md>
```text
L1 # 運用ルール
L2
L3 ## 基本構成
L4 - 20銘柄を均等配分（現金を除き1銘柄あたり5%）
L5 - moomoo証券で運用
L6 - **Growth枠 12銘柄 / Defense枠 8銘柄**（NORMAL 基準）
L7
L8 ## Barbell Growth-Defense方針
L9 - Growth枠 **12銘柄**：高成長で乖離源となる攻めの銘柄
L10 - Defense枠 **8銘柄**：低ボラで安定成長し配当を増やす守りの銘柄
L11 - 「猛烈に伸びる攻め × 着実に稼ぐ盾」の組合せで乖離→半戻しプレミアムを狙う
L12
L13 ## レジーム判定（trend_template 合格“本数”で判定）
L14 - 合格本数 = current+candidate 全体のうち、trend_template 条件を満たした銘柄の**本数(C)**（基準 N_G=12）
L15 - しきい値は過去~600営業日の分布から**毎回自動採用**（分位点と運用“床”のmax）
L16   - 緊急入り: `max(q05, 12本)`（= N_G）
L17   - 緊急解除: `max(q20, 18本)`（= ceil(1.5×12)）
L18   - 通常復帰: `max(q60, 36本)`（= 3×N_G）
L19 - ヒステリシス: 前回モードに依存（EMERG→解除は23本以上、CAUTION→通常は45本以上）
L20
L21 ## レジーム別の現金・ドリフト
L22  - **通常(NORMAL)** : 現金 **10%** / ドリフト閾値 **12%**
L23  - **警戒(CAUTION)** : 現金 **12.5%** / ドリフト閾値 **14%**
L24  - **緊急(EMERG)** : 現金 **20%** / **ドリフト売買停止**（20×5%に全戻しのみ）
L25
L26 ## モード別の推奨“保有銘柄数”（MMF≒現金）
L27 *各枠=5%（20銘柄均等）。モード移行時は**Gの枠数のみ**調整し、外した枠は現金として保持。*
L28
L29 - **NORMAL:** G **12** / D **8** / 現金化枠 **0**  
L30 - **CAUTI
```