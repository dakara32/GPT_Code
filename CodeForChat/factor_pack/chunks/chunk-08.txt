```text
1p(df['ADV60_USD']))
L567         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L568         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L569
L570         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L571         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L572         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L573
L574         # ===== トレンドスロープ算出 =====
L575         def zpos(x):
L576             arr = robust_z(x)
L577             idx = getattr(x, 'index', df_z.index)
L578             return pd.Series(arr, index=idx).fillna(0.0)
L579
L580         def relu(x):
L581             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L582             return ser.clip(lower=0).fillna(0.0)
L583
L584         # 売上トレンドスロープ（四半期）
L585         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L586         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L587         df_z['TREND_SLOPE_REV'] = (slope_rev - 0.25*noise_rev).clip(-3.0, 3.0)
L588
L589         # EPSトレンドスロープ（四半期）
L590         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L591         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L592
L593         # 年次トレンド（サブ）
L594         slope_rev_yr = zpos(df_z['REV_YOY'])
L595         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L596         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L597         streak_yr = streak_base / (streak_base.abs() + 1.0)
L598         df_z['TREND_SLOPE_REV_YR'] = (0.7*slope_rev_yr + 0.3*streak_yr).clip(-3.0, 3.0)
L599         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L600
L601         # ===== 新GRW合成式（SEPA寄りシフト） =====
L602         df_z['GROWTH_F'] = robust_z(
L603               0.20*df_z['REV_Q_YOY']
L604             + 0.10*df_z['REV_YOY_ACC']
L605             + 0.10*df_z['REV_ANN_STREAK']
L606             - 0.05*df_z['REV_YOY_VAR']
L607             + 0.10*df_z['TREND_SLOPE_REV']
L608             + 0.15*df_z['EPS_Q_YOY']
L609             + 0.05*df_z['EPS_POS']
L610             + 0.20*df_z['TREND_SLOPE_EPS']
L611             + 0.05*df_z['TREND_SLOPE_REV_YR']
L612             + 0.03*df_z['TREND_SLOPE_EPS_YR']
L613             + 0.10*df_z['FCF_MGN']
L614             + 0.05*df_z['RULE40']
L615         ).clip(-3.0, 3.0)
L616
L617         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L618             + 0.15*df_z['TR_str']
L619             + 0.15*df_z['RS_SLOPE_6W']
L620             + 0.15*df_z['RS_SLOPE_13W']
L621             + 0.10*df_z['MA200_SLOPE_5M']
L622             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L623         df_z['VOL'] = robust_z(df['BETA'])
L624         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L625         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L626
L627         # === begin: BIO LOSS PENALTY =====================================
L628         try:
L629             penalty_z = float(os.getenv("BIO_LOSS_PENALTY_Z", "0.8"))
L630         except Exception:
L631             penalty_z = 0.8
L632
L633         def _is_bio_like(t: str) -> bool:
L634             inf = info.get(t, {}) if isinstance(info, dict) else {}
L635             sec = str(inf.get("sector", "")).lower()
L636             ind = str(inf.get("industry", "")).lower()
L637             if "health" not in sec:
L638                 return False
L639             keys = ("biotech", "biopharma", "pharma")
L640             return any(k in ind for k in keys)
L641
L642         tickers_s = pd.Index(df_z.index)
L643         debug = bool(getattr(sys.modules.get("factor"), "debug_mode", False))
L644         if debug:
L645             print("[DEBUG: GRW]")
L646             for t in tickers_s:
L647                 print(f"Ticker: {t}")
L648                 print(f"  REV_Q_YOY        : {df_z.loc[t,'REV_Q_YOY']:+.2f}")
L649                 print(f"  REV_YOY_ACC      : {df_z.loc[t,'REV_YOY_ACC']:+.2f}")
L650                 print(f"  TREND_SLOPE_REV  : {df_z.loc[t,'TREND_SLOPE_REV']:+.2f}")
L651                 print(f"  EPS_Q_YOY        : {df_z.loc[t,'EPS_Q_YOY']:+.2f}")
L652                 print(f"  TREND_SLOPE_EPS  : {df_z.loc[t,'TREND_SLOPE_EPS']:+.2f}")
L653                 print(f"  FCF_MGN          : {df_z.loc[t,'FCF_MGN']:+.2f}")
L654                 print(f"  RULE40           : {df_z.loc[t,'RULE40']:+.2f}")
L655                 print(f"  GRW total        : {df_z.loc[t,'GROWTH_F']:+.2f}")
L656                 print("")
L657
L658         is_bio = pd.Series({t: _is_bio_like(t) for t in tickers_s})
L659         is_loss = pd.Series({t: (pd.notna(df.loc[t,"EPS"]) and df.loc[t,"EPS"] <= 0) for t in tickers_s})
L660         mask_bio_loss = (is_bio & is_loss).reindex(df_z.index).fillna(False)
L661
L662         if bool(mask_bio_loss.any()) and penalty_z > 0:
L663             df_z.loc[mask_bio_loss, "GROWTH_F"] = df_z.loc[mask_bio_loss, "GROWTH_F"] - penalty_z
L664             df_z["GROWTH_F"] = df_z["GROWTH_F"].clip(-3.0, 3.0)
L665         # === end: BIO LOSS PENALTY =======================================
L666
L667         df_z['TRD'] = 0.0  # TRDはスコア寄与から外し、テンプレ判定はフィルタで行う（列は表示互換のため残す）
L668         if 'BETA' not in df_z.columns: df_z['BETA'] = robust_z(df['BETA'])
L669
L670         df_z['D_VOL_RAW'] = robust_z(0.40*df_z['DOWNSIDE_DEV'] + 0.22*df_z['RESID_VOL'] + 0.18*df_z['MDD_1Y'] - 0.10*df_z['DOWN_OUTPERF'] - 0.05*df_z['EXT_200'] - 0.08*df_z['SIZE'] - 0.10*df_z['LIQ'] + 0.10*df_z['BETA'])
L671         df_z['D_QAL']     = robust_z(0.35*df_z['QAL'] + 0.20*df_z['FCF'] + 0.15*df_z['CURR_RATIO'] - 0.15*df_z['DEBT2EQ'] - 0.15*df_z['EPS_VAR_8Q'])
L672         df_z['D_YLD']     = robust_z(0.45*df_z['DIV'] + 0.25*df_z['DIV_STREAK'] + 0.20*df_z['DIV_FCF_COVER'] - 0.10*df_z['DIV_VAR5'])
L673         df_z['D_TRD']     = robust_z(0.40*df_z.get('MA200_SLOPE_5M',0) - 0.30*df_z.get('EXT_200',0) + 0.15*df_z.get('NEAR_52W_HIGH',0) + 0.15*df_z['TR'])
L674
L675         # --- 重みは cfg を優先（外部があればそれを使用） ---
L676         # ① 全銘柄で G/D スコアを算出（unmasked）
L677         g_score_all = df_z.mul(pd.Series(cfg.weights.g)).sum(axis=1)
L678
L679         d_comp = pd.concat({
L680             'QAL': df_z['D_QAL'],
L681             'YLD': df_z['D_YLD'],
L682             'VOL': df_z['D_VOL_RAW'],
L683             'TRD': df_z['D_TRD']
L684         }, axis=1)
L685         dw = pd.Series(cfg.weights.d, dtype=float).reindex(['QAL','YLD','VOL','TRD']).fillna(0.0)
L686         globals()['D_WEIGHTS_EFF'] = dw.copy()
L687         d_score_all = d_comp.mul(dw, axis=1).sum(axis=1)
L688
L689         # ② テンプレ判定（既存ロジックそのまま）
L690         mask = df['trend_template']
L691         if not bool(mask.any()):
L692             mask = ((df.get('P_OVER_LOW52', np.nan) >= 0.25) &
L693                 (df.get('NEAR_52W_HIGH', np.nan) >= -0.30) &
L694                 (df.get('RS', np.nan) >= 0.08) &
L695                 (df.get('MA200_SLOPE_1M', np.nan) > 0) &
L696                 (df.get('P_OVER_150', np.nan) > 0) & (df.get('P_OVER_200', np.nan) > 0) &
L697                 (df.get('MA150_OVER_200', np.nan) > 0) &
L698                 (df.get('MA50_OVER_150', np.nan) > 0) & (df.get('MA50_OVER_200', np.nan) > 0) &
L699                 (df.get('TR_str', np.nan) > 0)).fillna(False)
L700             df['trend_template'] = mask
L701
L702         # ③ 採用用は mask、表示/分析用は列で全銘柄保存
L703         g_score = g_score_all.loc[mask]
L704         Scorer.g_score = g_score
L705         df_z['GSC'] = g_score_all
L706         df_z['DSC'] = d_score_all
L707
L708         try:
L709             current = (pd.read_csv("current_tickers.csv")
L710                   .iloc[:, 0]
L711                   .str.upper()
L712                   .tolist())
L713         except FileNotFoundError:
L714             warnings.warn("current_tickers.csv not found — bonus skipped")
L715             current = []
L716
L717         mask_bonus = g_score.index.isin(current)
L718         if mask_bonus.any():
L719             # 1) factor.BONUS_COEFF から k を決め、無ければ 0.4
L720             k = float(getattr(sys.modules.get("factor"), "BONUS_COEFF", 0.4))
L721             # 2) g 側の σ を取り、NaN なら 0 に丸める
L722             sigma_g = g_score.std()
L723             if pd.isna(sigma_g):
L724                 sigma_g = 0.0
L725             bonus_g = round(k * sigma_g, 3)
L726             g_score.loc[mask_bonus] += bonus_g
L727             Scorer.g_score = g_score
L728             # 3) D 側も同様に σ の NaN をケア
L729             sigma_d = d_score_all.std()
L730             if pd.isna(sigma_d):
L731                 sigma_d = 0.0
L732             bonus_d = round(k * sigma_d, 3)
L733             d_score_all.loc[d_score_all.index.isin(current)] += bonus_d
L734
L735         try:
L736             df = _apply_growth_entry_flags(df, ib, self, win_breakout=5, win_pullback=5)
L737         except Exception:
L738             pass
L739
L740         from factor import FeatureBundle  # type: ignore  # 実行時importなし（循環回避）
L741         return FeatureBundle(df=df,
L742             df_z=df_z,
L743             g_score=g_score,
L744             d_score_all=d_score_all,
L745             missing_logs=pd.DataFrame(missing_logs))
L746
L747 def _apply_growth_entry_flags(feature_df, bundle, self_obj, win_breakout=5, win_pullback=5):
L748     """
L749     G枠ユニバースに対し、ブレイクアウト確定/押し目反発の「直近N営業日内の発火」を判定し、
L750     次の列を feature_df に追加する（index=ticker）。
L751       - G_BREAKOUT_recent_5d : bool
L752       - G_BREAKOUT_last_date : str "YYYY-MM-DD"
L753       - G_PULLBACK_recent_5d : bool
L754       - G_PULLBACK_last_date : str "YYYY-MM-DD"
L755       - G_PIVOT_price        : float
L756     失敗しても例外は握り潰し、既存処理を阻害しない。
L757     """
L758     try:
L759         px   = bundle.px                      # 終値 DataFrame
L760         hi   = bundle.data['High']
L761         lo   = bundle.data['Low']
L762         vol  = bundle.data['Volume']
L763         bench= bundle.spx                     # ベンチマーク Series
L764
L765         # Gユニバース推定：self.g_universe 優先 → feature_df['group']=='G' → 全銘柄
L766         g_universe = getattr(self_obj, "g_universe", None)
L767         if g_universe is None:
L768             try:
L769                 g_universe = feature_df.index[feature_df['group'].astype(str).str.upper().eq('G')].tolist()
L770             except Exception:
L771                 g_universe = list(feature_df.index)
L772         if not g_universe:
L773             return feature_df
L774
L775         # 指標
L776         ema21 = px[g_universe].ewm(span=21, adjust=False).mean()
L777         ma50  = px[g_universe].rolling(50).mean()
L778         ma150 = px[g_universe].rolling(150).mean()
L779         ma200 = px[g_universe].rolling(200).mean()
L780         atr20 = (hi[g_universe] - lo[g_universe]).rolling(20).mean()
L781         vol20 = vol[g_universe].rolling(20).mean()
L782         vol50 = vol[g_universe].rolling(50).mean()
L783
L784         # トレンドテンプレート合格
L785         trend_template_ok = (px[g_universe] > ma50) & (px[g_universe] > ma150) & (px[g_universe] > ma200) \
L786                             & (ma150 > ma200) & (ma200.diff() > 0)
L787
L788         # 汎用ピボット：直近65営業日の高値（当日除外）
L789         pivot_price = hi[g_universe].rolling(65).max().shift(1)
L790
L791         # 相対力：年内高値更新
L792         bench_aligned = bench.reindex(px.index).ffill()
L793         rs = px[g_universe].div(bench_aligned, axis=0)
L794         rs_high = rs.rolling(252).max().shift(1)
L795
L796         # ブレイクアウト「発生日」：条件立ち上がり
L797         breakout_today = trend_template_ok & (px[g_universe] > pivot_price) \
L798                          & (vol[g_universe] >= 1.5 * vol50) & (rs > rs_high)
L799         breakout_event = breakout_today & ~breakout_today.shift(1).fillna(False)
L800
L801         # 押し目反発「発生日」：EMA21帯×出来高ドライアップ×前日高値越え×終値EMA21上
L802         near_ema21_band = px[g_universe].between(ema21 - atr20, ema21 + atr20)
L803         volume_dryup = (vol20 / vol50) <= 1.0
L804         pullback_bounce_confirmed = (px[g_universe] > hi[g_universe].shift(1)) & (px[g_universe] > ema21)
L805         pull
```