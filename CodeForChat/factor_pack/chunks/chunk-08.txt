```text
 Exception:
L535                         pass
L536             except Exception: pass
L537             df.loc[t,'REV_Q_YOY'], df.loc[t,'EPS_Q_YOY'] = REV_Q_YOY, EPS_Q_YOY
L538             df.loc[t,'REV_YOY_ACC'], df.loc[t,'REV_YOY_VAR'] = REV_YOY_ACC, REV_YOY_VAR
L539             df.loc[t,'REV_YOY'] = REV_YOY
L540             df.loc[t,'REV_ANN_STREAK'] = REV_ANNUAL_STREAK
L541             df.loc[t,'EPS_YOY'] = EPS_YOY
L542
L543             # --- Rule of 40 や周辺 ---
L544             total_rev_ttm = d.get('totalRevenue',np.nan)
L545             FCF_MGN = _safe_div(fcf_val, total_rev_ttm)
L546             df.loc[t,'FCF_MGN'] = FCF_MGN
L547             rule40 = np.nan
L548             try:
L549                 r = df.loc[t,'REV']; rule40 = (r if pd.notna(r) else np.nan) + (FCF_MGN if pd.notna(FCF_MGN) else np.nan)
L550             except Exception: pass
L551             df.loc[t,'RULE40'] = rule40
L552
L553             # --- トレンド補助 ---
L554             sma50  = s.rolling(50).mean()
L555             sma150 = s.rolling(150).mean()
L556             sma200 = s.rolling(200).mean()
L557             p = _safe_last(s)
L558
L559             df.loc[t,'MA50_OVER_150'] = (_safe_last(sma50)/_safe_last(sma150) - 1
L560                 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan)
L561             df.loc[t,'MA150_OVER_200'] = (_safe_last(sma150)/_safe_last(sma200) - 1
L562                 if pd.notna(_safe_last(sma150)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan)
L563
L564             lo52 = s[-252:].min() if len(s)>=252 else s.min()
L565             df.loc[t,'P_OVER_LOW52'] = (p/lo52 - 1) if (lo52 and lo52>0 and pd.notna(p)) else np.nan
L566
L567             df.loc[t,'MA200_SLOPE_1M'] = np.nan
L568             if len(sma200.dropna()) >= 21:
L569                 cur200 = _safe_last(sma200)
L570                 old2001 = float(sma200.iloc[-21])
L571                 if old2001:
L572                     df.loc[t,'MA200_SLOPE_1M'] = cur200/old2001 - 1
L573
L574             df.loc[t,'P_OVER_150'] = p/_safe_last(sma150)-1 if pd.notna(_safe_last(sma150)) and _safe_last(sma150)!=0 else np.nan
L575             df.loc[t,'P_OVER_200'] = p/_safe_last(sma200)-1 if pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L576             df.loc[t,'MA50_OVER_200'] = _safe_last(sma50)/_safe_last(sma200)-1 if pd.notna(_safe_last(sma50)) and pd.notna(_safe_last(sma200)) and _safe_last(sma200)!=0 else np.nan
L577             df.loc[t,'MA200_SLOPE_5M'] = np.nan
L578             if len(sma200.dropna())>=105:
L579                 cur200, old200 = _safe_last(sma200), float(sma200.iloc[-105])
L580                 if old200 and old200!=0: df.loc[t,'MA200_SLOPE_5M'] = cur200/old200 - 1
L581             # NEW: 200日線が連続で上向きの「日数」
L582             df.loc[t,'MA200_UP_STREAK_D'] = np.nan
L583             try:
L584                 s200 = sma200.dropna()
L585                 if len(s200) >= 2:
L586                     diff200 = s200.diff()
L587                     up = 0
L588                     for v in diff200.iloc[::-1]:
L589                         if pd.isna(v) or v <= 0:
L590                             break
L591                         up += 1
L592                     df.loc[t,'MA200_UP_STREAK_D'] = float(up)
L593             except Exception:
L594                 pass
L595             df.loc[t,'LOW52PCT25_EXCESS'] = np.nan if (lo52 is None or lo52<=0 or pd.isna(p)) else (p/(lo52*1.25)-1)
L596             hi52 = s[-252:].max() if len(s)>=252 else s.max(); df.loc[t,'NEAR_52W_HIGH'] = np.nan
L597             if hi52 and hi52>0 and pd.notna(p):
L598                 d_hi = (p/hi52)-1.0; df.loc[t,'NEAR_52W_HIGH'] = -abs(min(0.0, d_hi))
L599             df.loc[t,'RS_SLOPE_6W'] = self.rs_line_slope(s, ib.spx, 30)
L600             df.loc[t,'RS_SLOPE_13W'] = self.rs_line_slope(s, ib.spx, 65)
L601
L602             df.loc[t,'DIV_STREAK'] = self.div_streak(t)
L603
L604             # --- 欠損メモ ---
L605             fin_cols = ['REV','ROE','BETA','DIV','FCF']
L606             need_finnhub = [col for col in fin_cols if pd.isna(df.loc[t,col])]
L607             if need_finnhub:
L608                 fin_data = self.fetch_finnhub_metrics(t)
L609                 for col in need_finnhub:
L610                     val = fin_data.get(col)
L611                     if val is not None and not pd.isna(val): df.loc[t,col] = val
L612             for col in fin_cols + ['EPS','RS','TR_str','DIV_STREAK']:
L613                 if pd.isna(df.loc[t,col]):
L614                     if col=='DIV':
L615                         status = self.dividend_status(t)
L616                         if status!='none_confident': missing_logs.append({'Ticker':t,'Column':col,'Status':status})
L617                     else:
L618                         missing_logs.append({'Ticker':t,'Column':col})
L619
L620         def _trend_template_pass(row, rs_alpha_thresh=0.10):
L621             c1 = (row.get('P_OVER_150', np.nan) > 0) and (row.get('P_OVER_200', np.nan) > 0)
L622             c2 = (row.get('MA150_OVER_200', np.nan) > 0)
L623             c3 = (row.get('MA200_SLOPE_1M', np.nan) > 0)
L624             c4 = (row.get('MA50_OVER_150', np.nan) > 0) and (row.get('MA50_OVER_200', np.nan) > 0)
L625             c5 = (row.get('TR_str', np.nan) > 0)
L626             c6 = (row.get('P_OVER_LOW52', np.nan) >= 0.30)
L627             c7 = (row.get('NEAR_52W_HIGH', np.nan) >= -0.25)
L628             c8 = (row.get('RS', np.nan) >= 0.10)
L629             return bool(c1 and c2 and c3 and c4 and c5 and c6 and c7 and c8)
L630
L631         if 'trend_template' not in df.columns: df['trend_template'] = df.apply(_trend_template_pass, axis=1).fillna(False)
L632         assert 'trend_template' in df.columns
L633
L634         # === Z化と合成 ===
L635         for col in ['ROE','FCF','REV','EPS']: df[f'{col}_W'] = winsorize_s(df[col], 0.02)
L636
L637         df_z = pd.DataFrame(index=df.index)
L638         for col in ['EPS','REV','ROE','FCF','RS','TR_str','BETA','DIV','DIV_STREAK']: df_z[col] = robust_z(df[col])
L639         df_z['REV'], df_z['EPS'], df_z['TR'] = robust_z(df['REV_W']), robust_z(df['EPS_W']), robust_z(df['TR'])
L640         for col in ['P_OVER_150','P_OVER_200','MA50_OVER_200','MA200_SLOPE_5M','LOW52PCT25_EXCESS','NEAR_52W_HIGH','RS_SLOPE_6W','RS_SLOPE_13W','MA200_UP_STREAK_D']: df_z[col] = robust_z(df[col])
L641
L642         # === Growth深掘り系（欠損保持z + RAW併載） ===
L643         grw_cols = ['REV_Q_YOY','EPS_Q_YOY','REV_YOY','EPS_YOY','REV_YOY_ACC','REV_YOY_VAR','FCF_MGN','RULE40','REV_ANN_STREAK']
L644         for col in grw_cols:
L645             if col in df.columns:
L646                 raw = pd.to_numeric(df[col], errors="coerce")
L647                 df_z[col] = robust_z_keepnan(raw)
L648                 df_z[f'{col}_RAW'] = raw
L649         for k in ("TREND_SLOPE_EPS", "TREND_SLOPE_REV"):
L650             if k in df.columns and k not in df_z.columns:
L651                 raw = pd.to_numeric(df[k], errors="coerce")
L652                 df_z[k] = robust_z_keepnan(raw)
L653                 df_z[f'{k}_RAW'] = raw
L654         for col in ['DOWNSIDE_DEV','MDD_1Y','RESID_VOL','DOWN_OUTPERF','EXT_200','DIV_TTM_PS','DIV_VAR5','DIV_YOY','DIV_FCF_COVER','DEBT2EQ','CURR_RATIO','EPS_VAR_8Q','MARKET_CAP','ADV60_USD']: df_z[col] = robust_z(df[col])
L655
L656         df_z['SIZE'], df_z['LIQ'] = robust_z(np.log1p(df['MARKET_CAP'])), robust_z(np.log1p(df['ADV60_USD']))
L657         df_z['QUALITY_F'] = robust_z(0.6*df['FCF_W'] + 0.4*df['ROE_W']).clip(-3.0,3.0)
L658         df_z['YIELD_F']   = 0.3*df_z['DIV'] + 0.7*df_z['DIV_STREAK']
L659
L660         # EPSが赤字でもFCFが黒字なら実質黒字とみなす
L661         eps_pos_mask = (df['EPS'] > 0) | (df['FCF_MGN'] > 0)
L662         df_z['EPS_POS'] = df_z['EPS'].where(eps_pos_mask, 0.0)
L663
L664         # ===== トレンドスロープ算出 =====
L665         def zpos(x):
L666             arr = robust_z(x)
L667             idx = getattr(x, 'index', df_z.index)
L668             return pd.Series(arr, index=idx).fillna(0.0)
L669
L670         def relu(x):
L671             ser = x if isinstance(x, pd.Series) else pd.Series(x, index=df_z.index)
L672             return ser.clip(lower=0).fillna(0.0)
L673
L674         # 売上トレンドスロープ（四半期）
L675         slope_rev = 0.70*zpos(df_z['REV_Q_YOY']) + 0.30*zpos(df_z['REV_YOY_ACC'])
L676         noise_rev = relu(robust_z(df_z['REV_YOY_VAR']) - 0.8)
L677         slope_rev_combo = slope_rev - 0.25*noise_rev
L678         df_z['TREND_SLOPE_REV_RAW'] = slope_rev_combo
L679         df_z['TREND_SLOPE_REV'] = slope_rev_combo.clip(-3.0, 3.0)
L680
L681         # EPSトレンドスロープ（四半期）
L682         slope_eps = 0.60*zpos(df_z['EPS_Q_YOY']) + 0.40*zpos(df_z['EPS_POS'])
L683         df_z['TREND_SLOPE_EPS_RAW'] = slope_eps
L684         df_z['TREND_SLOPE_EPS'] = slope_eps.clip(-3.0, 3.0)
L685
L686         # 年次トレンド（サブ）
L687         slope_rev_yr = zpos(df_z['REV_YOY'])
L688         slope_eps_yr = zpos(df_z.get('EPS_YOY', pd.Series(0.0, index=df.index)))
L689         streak_base = df['REV_ANN_STREAK'].clip(lower=0).fillna(0)
L690         streak_yr = streak_base / (streak_base.abs() + 1.0)
L691         slope_rev_yr_combo = 0.7*slope_rev_yr + 0.3*streak_yr
L692         df_z['TREND_SLOPE_REV_YR_RAW'] = slope_rev_yr_combo
L693         df_z['TREND_SLOPE_REV_YR'] = slope_rev_yr_combo.clip(-3.0, 3.0)
L694         df_z['TREND_SLOPE_EPS_YR_RAW'] = slope_eps_yr
L695         df_z['TREND_SLOPE_EPS_YR'] = slope_eps_yr.clip(-3.0, 3.0)
L696
L697         # ===== 新GRW合成式（SEPA寄りシフト） =====
L698         _nz = lambda name: df_z.get(name, pd.Series(0.0, index=df_z.index)).fillna(0.0)
L699         grw_combo = (
L700               0.20*_nz('REV_Q_YOY')
L701             + 0.10*_nz('REV_YOY_ACC')
L702             + 0.10*_nz('REV_ANN_STREAK')
L703             - 0.05*_nz('REV_YOY_VAR')
L704             + 0.10*_nz('TREND_SLOPE_REV')
L705             + 0.15*_nz('EPS_Q_YOY')
L706             + 0.05*_nz('EPS_POS')
L707             + 0.20*_nz('TREND_SLOPE_EPS')
L708             + 0.05*_nz('TREND_SLOPE_REV_YR')
L709             + 0.03*_nz('TREND_SLOPE_EPS_YR')
L710             + 0.10*_nz('FCF_MGN')
L711             + 0.05*_nz('RULE40')
L712         )
L713         df_z['GROWTH_F_RAW'] = grw_combo
L714         df_z['GROWTH_F'] = robust_z(grw_combo).clip(-3.0, 3.0)
L715
L716         # Debug dump for GRW composition (console OFF by default; enable only with env)
L717         if bool(os.getenv("GRW_CONSOLE_DEBUG")):
L718             try:
L719                 i = df_z[['GROWTH_F', 'GROWTH_F_RAW']].copy()
L720                 i.sort_values('GROWTH_F', ascending=False, inplace=True)
L721                 limit = max(0, min(40, len(i)))
L722                 print("[DEBUG: GRW]")
L723                 for t in i.index[:limit]:
L724                     row = i.loc[t]
L725                     parts = [f"GROWTH_F={row['GROWTH_F']:.3f}"]
L726                     if pd.notna(row.get('GROWTH_F_RAW')):
L727                         parts.append(f"GROWTH_F_RAW={row['GROWTH_F_RAW']:.3f}")
L728                     print(f"Ticker: {t} | " + " ".join(parts))
L729                 print()
L730             except Exception as exc:
L731                 print(f"[ERR] GRW debug dump failed: {exc}")
L732
L733         df_z['MOM_F'] = robust_z(0.40*df_z['RS']
L734             + 0.15*df_z['TR_str']
L735             + 0.15*df_z['RS_SLOPE_6W']
L736             + 0.15*df_z['RS_SLOPE_13W']
L737             + 0.10*df_z['MA200_SLOPE_5M']
L738             + 0.10*df_z['MA200_UP_STREAK_D']).clip(-3.0,3.0)
L739         df_z['VOL'] = robust_z(df['BETA'])
L740         df_z['QAL'], df_z['YLD'], df_z['MOM'] = df_z['QUALITY_F'], df_z['YIELD_F'], df_z['MOM_F']
L741         df_z.drop(columns=['QUALITY_F','YIELD_F','MOM_F'], inplace=True, errors='ignore')
L742
L743         _dump_dfz(df_z=df_z, debug_mode=getattr(cfg, "debug_mode", False))
L744
L745         # === begin: BIO LOSS PENALTY =====================================
L746         try:
L747             penalty_z = float(os.getenv("BIO
```