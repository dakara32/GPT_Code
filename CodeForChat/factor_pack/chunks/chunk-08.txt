```text
top_G, "avg_res_corr": avgG,
L1606               "sum_score": sumG, "objective": objG},
L1607         resD={"tickers": top_D, "avg_res_corr": avgD,
L1608               "sum_score": sumD, "objective": objD},
L1609         top_G=top_G, top_D=top_D, init_G=top_G, init_D=top_D)
L1610
L1611     # --- Low Score Candidates (GSC+DSC bottom 10) : send before debug dump ---
L1612     try:
L1613         _low_df = (pd.DataFrame({"GSC": fb.g_score, "DSC": fb.d_score_all})
L1614               .assign(G_plus_D=lambda x: x["GSC"] + x["DSC"])
L1615               .sort_values("G_plus_D")
L1616               .head(10)
L1617               .round(3))
L1618         low_msg = "Low Score Candidates (GSC+DSC bottom 10)\n" + _low_df.to_string(index=True, index_names=False)
L1619         _post_slack({"text": f"```{low_msg}```"})
L1620     except Exception as _e:
L1621         _post_slack({"text": f"```Low Score Candidates: 作成失敗: {_e}```"})
L1622
L1623     return sb
L1624
L1625 if __name__ == "__main__":
L1626     run_pipeline()
```

## <scorer.py>
```text
L1 # scorer.py
L2 # kawatest
L3 # =============================================================================
L4 # Scorer: ファクター/指標の生成と合成スコア算出を担う純粋層
L5 #
L6 # 【このファイルだけ読めば分かるポイント】
L7 # - 入力(InputBundle)は「価格/出来高/ベンチ/基本情報/EPS/FCF/リターン」を含むDTO
L8 # - 出力(FeatureBundle)は「raw特徴量 df」「標準化 df_z」「G/D スコア」「欠損ログ」
L9 # - 重み等のコンフィグ(PipelineConfig)は factor から渡す（cfg 必須）
L10 # - 旧カラム名は Scorer 内で自動リネームして受け入れ（後方互換）
L11 #   例) eps_ttm -> EPS_TTM, eps_q_recent -> EPS_Q_LastQ, fcf_ttm -> FCF_TTM
L12 #
L13 # 【I/O契約（Scorerが参照するInputBundleフィールド）】
L14 #   - cand: List[str]    … 候補銘柄（単体実行では未使用）
L15 #   - tickers: List[str] … 対象銘柄リスト
L16 #   - bench: str         … ベンチマークティッカー（例 '^GSPC'）
L17 #   - data: pd.DataFrame … yfinance download結果 ('Close','Volume' 等の階層列)
L18 #   - px: pd.DataFrame   … data['Close'] 相当（終値）
L19 #   - spx: pd.Series     … ベンチマークの終値
L20 #   - tickers_bulk: object         … yfinance.Tickers
L21 #   - info: Dict[str, dict]        … yfinance info per ticker
L22 #   - eps_df: pd.DataFrame         … 必須列: EPS_TTM, EPS_Q_LastQ（旧名も可）
L23 #   - fcf_df: pd.DataFrame         … 必須列: FCF_TTM（旧名も可）
L24 #   - returns: pd.DataFrame        … px[tickers].pct_change() 相当
L25 #
L26 # ※入出力の形式・例外文言は既存実装を変えません（安全な短縮のみ）
L27 # =============================================================================
L28
L29 import json, logging, os, requests, sys, warnings
L30 import numpy as np
L31 import pandas as pd
L32 import yfinance as yf
L33 from typing import Any, TYPE_CHECKING
L34 from scipy.stats import zscore
L35 from datetime import datetime as _dt
L36
L37 if TYPE_CHECKING:
L38     from factor import PipelineConfig  # type: ignore  # 実行時importなし（循環回避）
L39
L40 logger = logging.getLogger(__name__)
L41
L42
L43 def _log(stage, msg):
L44     try:
L45         print(f"[DBG][{_dt.utcnow().isoformat(timespec='seconds')}Z][{stage}] {msg}")
L46     except Exception:
L47         print(f"[DBG][{stage}] {msg}")
L48
L49
L50 # ---- Dividend Helpers -------------------------------------------------------
L51 def _last_close(t, price_map=None):
L52     if price_map and (c := price_map.get(t)) is not None: return float(c)
L53     try:
L54         h = yf.Ticker(t).history(period="5d")["Close"].dropna()
L55         return float(h.iloc[-1]) if len(h) else np.nan
L56     except Exception:
L57         return np.nan
L58
L59 def _ttm_div_sum(t, lookback_days=400):
L60     try:
L61         div = yf.Ticker(t).dividends
L62         if div is None or len(div) == 0: return 0.0
L63         cutoff = pd.Timestamp.utcnow().tz_localize(None) - pd.Timedelta(days=lookback_days)
L64         ttm = float(div[div.index.tz_localize(None) >= cutoff].sum())
L65         return ttm if ttm > 0 else float(div.tail(4).sum())
L66     except Exception:
L67         return 0.0
L68
L69 def ttm_div_yield_portfolio(tickers, price_map=None):
L70     ys = [(lambda c, s: (s/c) if (np.isfinite(c) and c>0 and s>0) else 0.0)(_last_close(t, price_map), _ttm_div_sum(t)) for t in tickers]
L71     return float(np.mean(ys)) if ys else 0.0
L72
L73 # ---- 簡易ユーティリティ（安全な短縮のみ） -----------------------------------
L74 def _as_numeric_series(s: pd.Series) -> pd.Series:
L75     """Series を float dtype に強制変換し、index を保持する。"""
L76     if s is None:
L77         return pd.Series(dtype=float)
L78     v = pd.to_numeric(s, errors="coerce")
L79     return pd.Series(v.values, index=getattr(s, "index", None), dtype=float, name=getattr(s, "name", None))
L80
L81
L82 def _scalar(x):
L83     """
L84     入力を安全に float スカラへ変換する。
L85
L86     許容する入力パターン:
L87       - pandas.Series: 非NaNの最後の値を採用
L88       - numpy スカラ/配列: 最後の要素を採用
L89       - その他の数値っぽい値: float へ変換
L90
L91     変換できない場合は np.nan を返す。
L92     """
L93
L94     if x is None:
L95         return np.nan
L96
L97     # pandas.Series の場合は非NaNの最後の値を採用
L98     if isinstance(x, pd.Series):
L99         s = pd.to_numeric(x, errors="coerce").dropna()
L100         return float(s.iloc[-1]) if not s.empty else np.nan
L101
L102     # numpy スカラ (item() を持つ) ※文字列は除外
L103     if hasattr(x, "item") and not isinstance(x, (str, bytes)):
L104         try:
L105             return float(x.item())
L106         except Exception:
L107             pass
L108
L109     # 配列様のオブジェクト
L110     try:
L111         arr = np.asarray(x, dtype=float).ravel()
L112         return float(arr[-1]) if arr.size else np.nan
L113     except Exception:
L114         pass
L115
L116     # 最後に素直に float 変換を試す
L117     try:
L118         return float(x)
L119     except Exception:
L120         return np.nan
L121
L122
L123 def winsorize_s(s: pd.Series, p=0.02):
L124     if s is None or s.dropna().empty: return s
L125     lo, hi = np.nanpercentile(s.astype(float), [100*p, 100*(1-p)]); return s.clip(lo, hi)
L126
L127 def robust_z(s: pd.Series, p=0.02):
L128     s2 = winsorize_s(s,p); return np.nan_to_num(zscore(s2.fillna(s2.mean())))
L129
L130 def robust_z_keepnan(s: pd.Series) -> pd.Series:
L131     """robust_z variant that preserves NaNs and falls back to rank-z when needed."""
L132     if s is None:
L133         return pd.Series(dtype=float)
L134     v = pd.to_numeric(s, errors="coerce")
L135     m = np.nanmedian(v)
L136     mad = np.nanmedian(np.abs(v - m))
L137     z = (v - m) / (1.4826 * mad + 1e-9)
L138     if np.nanstd(z) < 1e-9:
L139         r = v.rank(method="average", na_option="keep")
L140         z = (r - np.nanmean(r)) / (np.nanstd(r) + 1e-9)
L141     return pd.Series(z, index=v.index, dtype=float)
L142
L143
L144 def _safe_div(a, b):
L145     try: return np.nan if (b is None or float(b)==0 or pd.isna(b)) else float(a)/float(b)
L146     except Exception: return np.nan
L147
L148 def _safe_last(series: pd.Series, default=np.nan):
L149     try: return float(series.iloc[-1])
L150     except Exception: return default
L151
L152
L153 def _ensure_series(x):
L154     if x is None:
L155         return pd.Series(dtype=float)
L156     if isinstance(x, pd.Series):
L157         return x.dropna()
L158     if isinstance(x, (list, tuple)):
L159         if len(x) and isinstance(x[0], (tuple, list)) and len(x[0]) == 2:
L160             dt = pd.to_datetime([d for d, _ in x], errors="coerce")
L161             v = pd.to_numeric([_v for _, _v in x], errors="coerce")
L162             return pd.Series(v, index=dt).dropna()
L163         return pd.Series(pd.to_numeric(list(x), errors="coerce")).dropna()
L164     try:
L165         return pd.Series(x).dropna()
L166     except Exception:
L167         return pd.Series(dtype=float)
L168
L169
L170 def _to_quarterly(s: pd.Series) -> pd.Series:
L171     if s.empty or not isinstance(s.index, pd.DatetimeIndex):
L172         return s
L173     return s.resample("Q").last().dropna()
L174
L175
L176 def _ttm_yoy_from_quarterly(qs: pd.Series) -> pd.Series:
L177     if qs is None or qs.empty:
L178         return pd.Series(dtype=float)
L179     ttm = qs.rolling(4, min_periods=2).sum()
L180     yoy = ttm.pct_change(4)
L181     return yoy
L182
L183
L184
L185
L186 class Scorer:
L187     """
L188     - factor.py からは `aggregate_scores(ib, cfg)` を呼ぶだけでOK。
L189     - cfg は必須（factor.PipelineConfig を渡す）。
L190     - 旧カラム名を自動リネームして新スキーマに吸収します。
L191     """
L192
L193     # === 先頭で旧→新カラム名マップ（移行用） ===
L194     EPS_RENAME = {"eps_ttm":"EPS_TTM", "eps_q_recent":"EPS_Q_LastQ"}
L195     FCF_RENAME = {"fcf_ttm":"FCF_TTM"}
L196
L197     # === スキーマ簡易チェック（最低限） ===
L198     @staticmethod
L199     def _validate_ib_for_scorer(ib: Any):
L200         miss = [a for a in ["tickers","bench","data","px","spx","tickers_bulk","info","eps_df","fcf_df","returns"] if not hasattr(ib,a) or getattr(ib,a) is None]
L201         if miss: raise ValueError(f"InputBundle is missing required attributes for Scorer: {miss}")
L202         if any(c in ib.eps_df.columns for c in Scorer.EPS_RENAME): ib.eps_df.rename(columns=Scorer.EPS_RENAME, inplace=True)
L203         if any(c in ib.fcf_df.columns for c in Scorer.FCF_RENAME): ib.fcf_df.rename(columns=Scorer.FCF_RENAME, inplace=True)
L204         need_eps, need_fcf = {"EPS_TTM","EPS_Q_LastQ"},{"FCF_TTM"}
L205         if not need_eps.issubset(ib.eps_df.columns): raise ValueError(f"eps_df must contain columns {need_eps} (accepts old names via auto-rename). Got: {list(ib.eps_df.columns)}")
L206         if not need_fcf.issubset(ib.fcf_df.columns): raise ValueError(f"fcf_df must contain columns {need_fcf} (accepts old names via auto-rename). Got: {list(ib.fcf_df.columns)}")
L207
L208     # ----（Scorer専用）テクニカル・指標系 ----
L209     @staticmethod
L210     def trend(s: pd.Series):
L211         if len(s)<200: return np.nan
L212         sma50, sma150, sma200 = s.rolling(50).mean().iloc[-1], s.rolling(150).mean().iloc[-1], s.rolling(200).mean().iloc[-1]
L213         prev200, p = s.rolling(200).mean().iloc[-21], s.iloc[-1]
L214         lo_52 = s[-252:].min() if len(s)>=252 else s.min(); hi_52 = s[-252:].max() if len(s)>=252 else s.max()
L215         rng = (hi_52 - lo_52) if hi_52>lo_52 else np.nan
L216         clip = lambda x,lo,hi: (np.nan if pd.isna(x) else max(lo,min(hi,x)))
L217         a = clip(p/(s.rolling(50).mean().iloc[-1]) - 1, -0.5, 0.5)
L218         b = clip(sma50/sma150 - 1, -0.5, 0.5)
L219         c = clip(sma150/sma200 - 1, -0.5, 0.5)
L220         d = clip(sma200/prev200 - 1, -0.2, 0.2)
L221         e = clip((p - lo_52) / (rng if rng and rng>0 else np.nan) - 0.5, -0.5, 0.5)
L222         parts = [0.0 if pd.isna(x) else x for x in (a,b,c,d,e)]
L223         return 0.30*parts[0] + 0.20*parts[1] + 0.15*parts[2] + 0.15*parts[3] + 0.20*parts[4]
L224
L225     @staticmethod
L226     def rs(s, b):
L227         n, nb = len(s), len(b)
L228         if n<60 or nb<60: return np.nan
L229         L12 = 252 if n>=252 and nb>=252 else min(n,nb)-1; L1 = 22 if n>=22 and nb>=22 else max(5, min(n,nb)//3)
L230         r12, r1, br12, br1 = s.iloc[-1]/s.iloc[-L12]-1, s.iloc[-1]/s.iloc[-L1]-1, b.iloc[-1]/b.iloc[-L12]-1, b.iloc[-1]/b.iloc[-L1]-1
L231         return (r12 - br12)*0.7 + (r1 - br1)*0.3
L232
L233     @staticmethod
L234     def tr_str(s):
L235         if s is None:
L236             return np.nan
L237         s = s.ffill(limit=2).dropna()
L238         if len(s) < 50:
L239             return np.nan
L240         ma50 = s.rolling(50, min_periods=50).mean()
L241         last_ma = ma50.iloc[-1]
L242         last_px = s.iloc[-1]
L243         return float(last_px/last_ma - 1.0) if pd.notna(last_ma) and pd.notna(last_px) else np.nan
L244
L245     @staticmethod
L246     def rs_line_slope(s: pd.Series, b: pd.Series, win: int) -> float:
L247         r = (s/b).dropna()
L248         if len(r) < win: return np.nan
L249         y, x = np.log(r.iloc[-win:]), np.arange(win, dtype=float)
L250         try: return float(np.polyfit(x, y, 1)[0])
L251         except Exception: return np.nan
L252
L253     @staticmethod
L254     def ev_fallback(info_t: dict, tk: yf.Ticker) -> float:
L255         ev = info_t.get('enterpriseValue', np.nan)
L256         if pd.notna(ev) and ev>0: return float(ev)
L257         mc, debt, cash = info_t.get('marketCap', np.nan), np.nan, np.nan
L258         try:
L259            
```